
bin\Debug\lineFollow4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  000033be  00003472  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000033be  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800308  00800308  0000357a  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000357a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  0000357d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000036c  00000000  00000000  0000359d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cfa  00000000  00000000  00003909  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000022a  00000000  00000000  00004603  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012fb  00000000  00000000  0000482d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00005b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003df  00000000  00000000  00005dd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_5>
      18:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee eb       	ldi	r30, 0xBE	; 190
      fc:	f3 e3       	ldi	r31, 0x33	; 51
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ac 31       	cpi	r26, 0x1C	; 28
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 92 10 	call	0x2124	; 0x2124 <main>
     122:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <timer5_init>:
    void left_position_encoder_interrupt_init (void);
    void right_position_encoder_interrupt_init (void);


void timer5_init()
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
     132:	e1 e2       	ldi	r30, 0x21	; 33
     134:	f1 e0       	ldi	r31, 0x01	; 1
     136:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     138:	e5 e2       	ldi	r30, 0x25	; 37
     13a:	f1 e0       	ldi	r31, 0x01	; 1
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     140:	e4 e2       	ldi	r30, 0x24	; 36
     142:	f1 e0       	ldi	r31, 0x01	; 1
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     148:	e9 e2       	ldi	r30, 0x29	; 41
     14a:	f1 e0       	ldi	r31, 0x01	; 1
     14c:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     14e:	e8 e2       	ldi	r30, 0x28	; 40
     150:	f1 e0       	ldi	r31, 0x01	; 1
     152:	8f ef       	ldi	r24, 0xFF	; 255
     154:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     156:	eb e2       	ldi	r30, 0x2B	; 43
     158:	f1 e0       	ldi	r31, 0x01	; 1
     15a:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     15c:	ea e2       	ldi	r30, 0x2A	; 42
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	8f ef       	ldi	r24, 0xFF	; 255
     162:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     164:	ed e2       	ldi	r30, 0x2D	; 45
     166:	f1 e0       	ldi	r31, 0x01	; 1
     168:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     16a:	ec e2       	ldi	r30, 0x2C	; 44
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	8f ef       	ldi	r24, 0xFF	; 255
     170:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     172:	e0 e2       	ldi	r30, 0x20	; 32
     174:	f1 e0       	ldi	r31, 0x01	; 1
     176:	89 ea       	ldi	r24, 0xA9	; 169
     178:	80 83       	st	Z, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     17a:	e1 e2       	ldi	r30, 0x21	; 33
     17c:	f1 e0       	ldi	r31, 0x01	; 1
     17e:	8b e0       	ldi	r24, 0x0B	; 11
     180:	80 83       	st	Z, r24
}
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <velocity>:

void velocity (unsigned char left_motor, unsigned char right_motor)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	0f 92       	push	r0
     18e:	0f 92       	push	r0
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
     194:	89 83       	std	Y+1, r24	; 0x01
     196:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
     198:	e8 e2       	ldi	r30, 0x28	; 40
     19a:	f1 e0       	ldi	r31, 0x01	; 1
     19c:	89 81       	ldd	r24, Y+1	; 0x01
     19e:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
     1a0:	ea e2       	ldi	r30, 0x2A	; 42
     1a2:	f1 e0       	ldi	r31, 0x01	; 1
     1a4:	8a 81       	ldd	r24, Y+2	; 0x02
     1a6:	80 83       	st	Z, r24
}
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
     1ac:	cf 91       	pop	r28
     1ae:	df 91       	pop	r29
     1b0:	08 95       	ret

000001b2 <motion_pin_config>:

void motion_pin_config (void)
{
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F; //set direction of the PORTA 3 to PORTA 0 pins as output
     1ba:	a1 e2       	ldi	r26, 0x21	; 33
     1bc:	b0 e0       	ldi	r27, 0x00	; 0
     1be:	e1 e2       	ldi	r30, 0x21	; 33
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	8f 60       	ori	r24, 0x0F	; 15
     1c6:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0; // set initial value of the PORTA 3 to PORTA 0 pins to logic 0
     1c8:	a2 e2       	ldi	r26, 0x22	; 34
     1ca:	b0 e0       	ldi	r27, 0x00	; 0
     1cc:	e2 e2       	ldi	r30, 0x22	; 34
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	80 81       	ld	r24, Z
     1d2:	80 7f       	andi	r24, 0xF0	; 240
     1d4:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     1d6:	aa e0       	ldi	r26, 0x0A	; 10
     1d8:	b1 e0       	ldi	r27, 0x01	; 1
     1da:	ea e0       	ldi	r30, 0x0A	; 10
     1dc:	f1 e0       	ldi	r31, 0x01	; 1
     1de:	80 81       	ld	r24, Z
     1e0:	88 61       	ori	r24, 0x18	; 24
     1e2:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM
     1e4:	ab e0       	ldi	r26, 0x0B	; 11
     1e6:	b1 e0       	ldi	r27, 0x01	; 1
     1e8:	eb e0       	ldi	r30, 0x0B	; 11
     1ea:	f1 e0       	ldi	r31, 0x01	; 1
     1ec:	80 81       	ld	r24, Z
     1ee:	88 61       	ori	r24, 0x18	; 24
     1f0:	8c 93       	st	X, r24
}
     1f2:	cf 91       	pop	r28
     1f4:	df 91       	pop	r29
     1f6:	08 95       	ret

000001f8 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
     1f8:	df 93       	push	r29
     1fa:	cf 93       	push	r28
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     200:	ad e2       	ldi	r26, 0x2D	; 45
     202:	b0 e0       	ldi	r27, 0x00	; 0
     204:	ed e2       	ldi	r30, 0x2D	; 45
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	8f 7e       	andi	r24, 0xEF	; 239
     20c:	8c 93       	st	X, r24
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     20e:	ae e2       	ldi	r26, 0x2E	; 46
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	ee e2       	ldi	r30, 0x2E	; 46
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	80 61       	ori	r24, 0x10	; 16
     21a:	8c 93       	st	X, r24
}
     21c:	cf 91       	pop	r28
     21e:	df 91       	pop	r29
     220:	08 95       	ret

00000222 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
     222:	df 93       	push	r29
     224:	cf 93       	push	r28
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     22a:	ad e2       	ldi	r26, 0x2D	; 45
     22c:	b0 e0       	ldi	r27, 0x00	; 0
     22e:	ed e2       	ldi	r30, 0x2D	; 45
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	8f 7d       	andi	r24, 0xDF	; 223
     236:	8c 93       	st	X, r24
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     238:	ae e2       	ldi	r26, 0x2E	; 46
     23a:	b0 e0       	ldi	r27, 0x00	; 0
     23c:	ee e2       	ldi	r30, 0x2E	; 46
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	80 62       	ori	r24, 0x20	; 32
     244:	8c 93       	st	X, r24
}
     246:	cf 91       	pop	r28
     248:	df 91       	pop	r29
     24a:	08 95       	ret

0000024c <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
     24c:	df 93       	push	r29
     24e:	cf 93       	push	r28
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
     254:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     256:	aa e6       	ldi	r26, 0x6A	; 106
     258:	b0 e0       	ldi	r27, 0x00	; 0
     25a:	ea e6       	ldi	r30, 0x6A	; 106
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	82 60       	ori	r24, 0x02	; 2
     262:	8c 93       	st	X, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     264:	ad e3       	ldi	r26, 0x3D	; 61
     266:	b0 e0       	ldi	r27, 0x00	; 0
     268:	ed e3       	ldi	r30, 0x3D	; 61
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	80 61       	ori	r24, 0x10	; 16
     270:	8c 93       	st	X, r24
	sei();   // Enables the global interrupt
     272:	78 94       	sei
}
     274:	cf 91       	pop	r28
     276:	df 91       	pop	r29
     278:	08 95       	ret

0000027a <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
     27a:	df 93       	push	r29
     27c:	cf 93       	push	r28
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
     282:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     284:	aa e6       	ldi	r26, 0x6A	; 106
     286:	b0 e0       	ldi	r27, 0x00	; 0
     288:	ea e6       	ldi	r30, 0x6A	; 106
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	88 60       	ori	r24, 0x08	; 8
     290:	8c 93       	st	X, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     292:	ad e3       	ldi	r26, 0x3D	; 61
     294:	b0 e0       	ldi	r27, 0x00	; 0
     296:	ed e3       	ldi	r30, 0x3D	; 61
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	80 81       	ld	r24, Z
     29c:	80 62       	ori	r24, 0x20	; 32
     29e:	8c 93       	st	X, r24
	sei();   // Enables the global interrupt
     2a0:	78 94       	sei
}
     2a2:	cf 91       	pop	r28
     2a4:	df 91       	pop	r29
     2a6:	08 95       	ret

000002a8 <set_motors>:

void set_motors()
{
     2a8:	df 93       	push	r29
     2aa:	cf 93       	push	r28
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
    motion_pin_config();
     2b0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <motion_pin_config>
    left_encoder_pin_config();
     2b4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <left_encoder_pin_config>
    right_encoder_pin_config();
     2b8:	0e 94 11 01 	call	0x222	; 0x222 <right_encoder_pin_config>
    left_position_encoder_interrupt_init();
     2bc:	0e 94 26 01 	call	0x24c	; 0x24c <left_position_encoder_interrupt_init>
    right_position_encoder_interrupt_init();
     2c0:	0e 94 3d 01 	call	0x27a	; 0x27a <right_position_encoder_interrupt_init>
    timer5_init();
     2c4:	0e 94 95 00 	call	0x12a	; 0x12a <timer5_init>
}
     2c8:	cf 91       	pop	r28
     2ca:	df 91       	pop	r29
     2cc:	08 95       	ret

000002ce <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     2ce:	1f 92       	push	r1
     2d0:	0f 92       	push	r0
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	0f 92       	push	r0
     2d6:	11 24       	eor	r1, r1
     2d8:	8f 93       	push	r24
     2da:	9f 93       	push	r25
     2dc:	af 93       	push	r26
     2de:	bf 93       	push	r27
     2e0:	df 93       	push	r29
     2e2:	cf 93       	push	r28
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
	ShaftCountRight++;  //increment right shaft position count
     2e8:	80 91 0c 03 	lds	r24, 0x030C
     2ec:	90 91 0d 03 	lds	r25, 0x030D
     2f0:	a0 91 0e 03 	lds	r26, 0x030E
     2f4:	b0 91 0f 03 	lds	r27, 0x030F
     2f8:	01 96       	adiw	r24, 0x01	; 1
     2fa:	a1 1d       	adc	r26, r1
     2fc:	b1 1d       	adc	r27, r1
     2fe:	80 93 0c 03 	sts	0x030C, r24
     302:	90 93 0d 03 	sts	0x030D, r25
     306:	a0 93 0e 03 	sts	0x030E, r26
     30a:	b0 93 0f 03 	sts	0x030F, r27
}
     30e:	cf 91       	pop	r28
     310:	df 91       	pop	r29
     312:	bf 91       	pop	r27
     314:	af 91       	pop	r26
     316:	9f 91       	pop	r25
     318:	8f 91       	pop	r24
     31a:	0f 90       	pop	r0
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	0f 90       	pop	r0
     320:	1f 90       	pop	r1
     322:	18 95       	reti

00000324 <__vector_5>:

//ISR for left position encoder
ISR(INT4_vect)
{
     324:	1f 92       	push	r1
     326:	0f 92       	push	r0
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	0f 92       	push	r0
     32c:	11 24       	eor	r1, r1
     32e:	8f 93       	push	r24
     330:	9f 93       	push	r25
     332:	af 93       	push	r26
     334:	bf 93       	push	r27
     336:	df 93       	push	r29
     338:	cf 93       	push	r28
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft++;  //increment left shaft position count
     33e:	80 91 08 03 	lds	r24, 0x0308
     342:	90 91 09 03 	lds	r25, 0x0309
     346:	a0 91 0a 03 	lds	r26, 0x030A
     34a:	b0 91 0b 03 	lds	r27, 0x030B
     34e:	01 96       	adiw	r24, 0x01	; 1
     350:	a1 1d       	adc	r26, r1
     352:	b1 1d       	adc	r27, r1
     354:	80 93 08 03 	sts	0x0308, r24
     358:	90 93 09 03 	sts	0x0309, r25
     35c:	a0 93 0a 03 	sts	0x030A, r26
     360:	b0 93 0b 03 	sts	0x030B, r27
}
     364:	cf 91       	pop	r28
     366:	df 91       	pop	r29
     368:	bf 91       	pop	r27
     36a:	af 91       	pop	r26
     36c:	9f 91       	pop	r25
     36e:	8f 91       	pop	r24
     370:	0f 90       	pop	r0
     372:	0f be       	out	0x3f, r0	; 63
     374:	0f 90       	pop	r0
     376:	1f 90       	pop	r1
     378:	18 95       	reti

0000037a <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
     37a:	df 93       	push	r29
     37c:	cf 93       	push	r28
     37e:	0f 92       	push	r0
     380:	0f 92       	push	r0
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
     386:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
     388:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
     38a:	8a 81       	ldd	r24, Y+2	; 0x02
     38c:	8f 70       	andi	r24, 0x0F	; 15
     38e:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 			// reading the PORTA's original status
     390:	e2 e2       	ldi	r30, 0x22	; 34
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	80 81       	ld	r24, Z
     396:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	80 7f       	andi	r24, 0xF0	; 240
     39c:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     39e:	99 81       	ldd	r25, Y+1	; 0x01
     3a0:	8a 81       	ldd	r24, Y+2	; 0x02
     3a2:	89 2b       	or	r24, r25
     3a4:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 			// setting the command to the port
     3a6:	e2 e2       	ldi	r30, 0x22	; 34
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	80 83       	st	Z, r24
}
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	cf 91       	pop	r28
     3b4:	df 91       	pop	r29
     3b6:	08 95       	ret

000003b8 <forward>:


void forward (void) //both wheels forward
{
     3b8:	df 93       	push	r29
     3ba:	cf 93       	push	r28
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
    motion_set(0x06);
     3c0:	86 e0       	ldi	r24, 0x06	; 6
     3c2:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     3c6:	cf 91       	pop	r28
     3c8:	df 91       	pop	r29
     3ca:	08 95       	ret

000003cc <forward_mm>:

void forward_mm(unsigned int distance)
{
     3cc:	df 93       	push	r29
     3ce:	cf 93       	push	r28
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	2a 97       	sbiw	r28, 0x0a	; 10
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
     3e0:	9a 87       	std	Y+10, r25	; 0x0a
     3e2:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	a0 e0       	ldi	r26, 0x00	; 0
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	8d 83       	std	Y+5, r24	; 0x05
     3ee:	9e 83       	std	Y+6, r25	; 0x06
     3f0:	af 83       	std	Y+7, r26	; 0x07
     3f2:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     3f4:	19 82       	std	Y+1, r1	; 0x01
     3f6:	1a 82       	std	Y+2, r1	; 0x02
     3f8:	1b 82       	std	Y+3, r1	; 0x03
     3fa:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = distance / 5.338; // division by resolution to get shaft count
     3fc:	89 85       	ldd	r24, Y+9	; 0x09
     3fe:	9a 85       	ldd	r25, Y+10	; 0x0a
     400:	cc 01       	movw	r24, r24
     402:	a0 e0       	ldi	r26, 0x00	; 0
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	bc 01       	movw	r22, r24
     408:	cd 01       	movw	r24, r26
     40a:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__floatunsisf>
     40e:	dc 01       	movw	r26, r24
     410:	cb 01       	movw	r24, r22
     412:	bc 01       	movw	r22, r24
     414:	cd 01       	movw	r24, r26
     416:	25 ee       	ldi	r18, 0xE5	; 229
     418:	30 ed       	ldi	r19, 0xD0	; 208
     41a:	4a ea       	ldi	r20, 0xAA	; 170
     41c:	50 e4       	ldi	r21, 0x40	; 64
     41e:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__divsf3>
     422:	dc 01       	movw	r26, r24
     424:	cb 01       	movw	r24, r22
     426:	8d 83       	std	Y+5, r24	; 0x05
     428:	9e 83       	std	Y+6, r25	; 0x06
     42a:	af 83       	std	Y+7, r26	; 0x07
     42c:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     42e:	6d 81       	ldd	r22, Y+5	; 0x05
     430:	7e 81       	ldd	r23, Y+6	; 0x06
     432:	8f 81       	ldd	r24, Y+7	; 0x07
     434:	98 85       	ldd	r25, Y+8	; 0x08
     436:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
     43a:	dc 01       	movw	r26, r24
     43c:	cb 01       	movw	r24, r22
     43e:	89 83       	std	Y+1, r24	; 0x01
     440:	9a 83       	std	Y+2, r25	; 0x02
     442:	ab 83       	std	Y+3, r26	; 0x03
     444:	bc 83       	std	Y+4, r27	; 0x04

	ShaftCountRight = 0;
     446:	10 92 0c 03 	sts	0x030C, r1
     44a:	10 92 0d 03 	sts	0x030D, r1
     44e:	10 92 0e 03 	sts	0x030E, r1
     452:	10 92 0f 03 	sts	0x030F, r1
	ShaftCountLeft = 0;
     456:	10 92 08 03 	sts	0x0308, r1
     45a:	10 92 09 03 	sts	0x0309, r1
     45e:	10 92 0a 03 	sts	0x030A, r1
     462:	10 92 0b 03 	sts	0x030B, r1
    forward();
     466:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <forward>

	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt || ShaftCountLeft > ReqdShaftCountInt)
     46a:	20 91 0c 03 	lds	r18, 0x030C
     46e:	30 91 0d 03 	lds	r19, 0x030D
     472:	40 91 0e 03 	lds	r20, 0x030E
     476:	50 91 0f 03 	lds	r21, 0x030F
     47a:	89 81       	ldd	r24, Y+1	; 0x01
     47c:	9a 81       	ldd	r25, Y+2	; 0x02
     47e:	ab 81       	ldd	r26, Y+3	; 0x03
     480:	bc 81       	ldd	r27, Y+4	; 0x04
     482:	82 17       	cp	r24, r18
     484:	93 07       	cpc	r25, r19
     486:	a4 07       	cpc	r26, r20
     488:	b5 07       	cpc	r27, r21
     48a:	88 f0       	brcs	.+34     	; 0x4ae <forward_mm+0xe2>
     48c:	20 91 08 03 	lds	r18, 0x0308
     490:	30 91 09 03 	lds	r19, 0x0309
     494:	40 91 0a 03 	lds	r20, 0x030A
     498:	50 91 0b 03 	lds	r21, 0x030B
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	9a 81       	ldd	r25, Y+2	; 0x02
     4a0:	ab 81       	ldd	r26, Y+3	; 0x03
     4a2:	bc 81       	ldd	r27, Y+4	; 0x04
     4a4:	82 17       	cp	r24, r18
     4a6:	93 07       	cpc	r25, r19
     4a8:	a4 07       	cpc	r26, r20
     4aa:	b5 07       	cpc	r27, r21
     4ac:	f0 f6       	brcc	.-68     	; 0x46a <forward_mm+0x9e>
		{
			break;
		}
	}
	stop(); //Stop robot
     4ae:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     4b2:	2a 96       	adiw	r28, 0x0a	; 10
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
     4be:	cf 91       	pop	r28
     4c0:	df 91       	pop	r29
     4c2:	08 95       	ret

000004c4 <back>:

void back (void) //both wheels backward
{
     4c4:	df 93       	push	r29
     4c6:	cf 93       	push	r28
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
     4cc:	89 e0       	ldi	r24, 0x09	; 9
     4ce:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     4d2:	cf 91       	pop	r28
     4d4:	df 91       	pop	r29
     4d6:	08 95       	ret

000004d8 <back_mm>:

void back_mm (unsigned int distance)
{
     4d8:	df 93       	push	r29
     4da:	cf 93       	push	r28
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	2a 97       	sbiw	r28, 0x0a	; 10
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	f8 94       	cli
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	cd bf       	out	0x3d, r28	; 61
     4ec:	9a 87       	std	Y+10, r25	; 0x0a
     4ee:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	a0 e0       	ldi	r26, 0x00	; 0
     4f6:	b0 e0       	ldi	r27, 0x00	; 0
     4f8:	8d 83       	std	Y+5, r24	; 0x05
     4fa:	9e 83       	std	Y+6, r25	; 0x06
     4fc:	af 83       	std	Y+7, r26	; 0x07
     4fe:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     500:	19 82       	std	Y+1, r1	; 0x01
     502:	1a 82       	std	Y+2, r1	; 0x02
     504:	1b 82       	std	Y+3, r1	; 0x03
     506:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = distance / 5.338; // division by resolution to get shaft count
     508:	89 85       	ldd	r24, Y+9	; 0x09
     50a:	9a 85       	ldd	r25, Y+10	; 0x0a
     50c:	cc 01       	movw	r24, r24
     50e:	a0 e0       	ldi	r26, 0x00	; 0
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	bc 01       	movw	r22, r24
     514:	cd 01       	movw	r24, r26
     516:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__floatunsisf>
     51a:	dc 01       	movw	r26, r24
     51c:	cb 01       	movw	r24, r22
     51e:	bc 01       	movw	r22, r24
     520:	cd 01       	movw	r24, r26
     522:	25 ee       	ldi	r18, 0xE5	; 229
     524:	30 ed       	ldi	r19, 0xD0	; 208
     526:	4a ea       	ldi	r20, 0xAA	; 170
     528:	50 e4       	ldi	r21, 0x40	; 64
     52a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__divsf3>
     52e:	dc 01       	movw	r26, r24
     530:	cb 01       	movw	r24, r22
     532:	8d 83       	std	Y+5, r24	; 0x05
     534:	9e 83       	std	Y+6, r25	; 0x06
     536:	af 83       	std	Y+7, r26	; 0x07
     538:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     53a:	6d 81       	ldd	r22, Y+5	; 0x05
     53c:	7e 81       	ldd	r23, Y+6	; 0x06
     53e:	8f 81       	ldd	r24, Y+7	; 0x07
     540:	98 85       	ldd	r25, Y+8	; 0x08
     542:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
     546:	dc 01       	movw	r26, r24
     548:	cb 01       	movw	r24, r22
     54a:	89 83       	std	Y+1, r24	; 0x01
     54c:	9a 83       	std	Y+2, r25	; 0x02
     54e:	ab 83       	std	Y+3, r26	; 0x03
     550:	bc 83       	std	Y+4, r27	; 0x04

    //Counting any one of the shaft counts.
	ShaftCountRight = 0;
     552:	10 92 0c 03 	sts	0x030C, r1
     556:	10 92 0d 03 	sts	0x030D, r1
     55a:	10 92 0e 03 	sts	0x030E, r1
     55e:	10 92 0f 03 	sts	0x030F, r1
    back();
     562:	0e 94 62 02 	call	0x4c4	; 0x4c4 <back>

	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
     566:	20 91 0c 03 	lds	r18, 0x030C
     56a:	30 91 0d 03 	lds	r19, 0x030D
     56e:	40 91 0e 03 	lds	r20, 0x030E
     572:	50 91 0f 03 	lds	r21, 0x030F
     576:	89 81       	ldd	r24, Y+1	; 0x01
     578:	9a 81       	ldd	r25, Y+2	; 0x02
     57a:	ab 81       	ldd	r26, Y+3	; 0x03
     57c:	bc 81       	ldd	r27, Y+4	; 0x04
     57e:	82 17       	cp	r24, r18
     580:	93 07       	cpc	r25, r19
     582:	a4 07       	cpc	r26, r20
     584:	b5 07       	cpc	r27, r21
     586:	78 f7       	brcc	.-34     	; 0x566 <back_mm+0x8e>
		{
			break;
		}
	}
	stop(); //Stop robot
     588:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     58c:	2a 96       	adiw	r28, 0x0a	; 10
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
     598:	cf 91       	pop	r28
     59a:	df 91       	pop	r29
     59c:	08 95       	ret

0000059e <left>:

void left (void) //Left wheel backward, Right wheel forward
{
     59e:	df 93       	push	r29
     5a0:	cf 93       	push	r28
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
     5a6:	85 e0       	ldi	r24, 0x05	; 5
     5a8:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     5ac:	cf 91       	pop	r28
     5ae:	df 91       	pop	r29
     5b0:	08 95       	ret

000005b2 <left_degrees>:

void left_degrees(unsigned int degrees)
{
     5b2:	df 93       	push	r29
     5b4:	cf 93       	push	r28
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
     5ba:	2c 97       	sbiw	r28, 0x0c	; 12
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	f8 94       	cli
     5c0:	de bf       	out	0x3e, r29	; 62
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	cd bf       	out	0x3d, r28	; 61
     5c6:	9a 87       	std	Y+10, r25	; 0x0a
     5c8:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	a0 e0       	ldi	r26, 0x00	; 0
     5d0:	b0 e0       	ldi	r27, 0x00	; 0
     5d2:	8d 83       	std	Y+5, r24	; 0x05
     5d4:	9e 83       	std	Y+6, r25	; 0x06
     5d6:	af 83       	std	Y+7, r26	; 0x07
     5d8:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     5da:	19 82       	std	Y+1, r1	; 0x01
     5dc:	1a 82       	std	Y+2, r1	; 0x02
     5de:	1b 82       	std	Y+3, r1	; 0x03
     5e0:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees/ 4.090; // division by resolution to get shaft count
     5e2:	89 85       	ldd	r24, Y+9	; 0x09
     5e4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5e6:	cc 01       	movw	r24, r24
     5e8:	a0 e0       	ldi	r26, 0x00	; 0
     5ea:	b0 e0       	ldi	r27, 0x00	; 0
     5ec:	bc 01       	movw	r22, r24
     5ee:	cd 01       	movw	r24, r26
     5f0:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__floatunsisf>
     5f4:	dc 01       	movw	r26, r24
     5f6:	cb 01       	movw	r24, r22
     5f8:	bc 01       	movw	r22, r24
     5fa:	cd 01       	movw	r24, r26
     5fc:	28 e4       	ldi	r18, 0x48	; 72
     5fe:	31 ee       	ldi	r19, 0xE1	; 225
     600:	42 e8       	ldi	r20, 0x82	; 130
     602:	50 e4       	ldi	r21, 0x40	; 64
     604:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__divsf3>
     608:	dc 01       	movw	r26, r24
     60a:	cb 01       	movw	r24, r22
     60c:	8d 83       	std	Y+5, r24	; 0x05
     60e:	9e 83       	std	Y+6, r25	; 0x06
     610:	af 83       	std	Y+7, r26	; 0x07
     612:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     614:	6d 81       	ldd	r22, Y+5	; 0x05
     616:	7e 81       	ldd	r23, Y+6	; 0x06
     618:	8f 81       	ldd	r24, Y+7	; 0x07
     61a:	98 85       	ldd	r25, Y+8	; 0x08
     61c:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
     620:	dc 01       	movw	r26, r24
     622:	cb 01       	movw	r24, r22
     624:	cc 01       	movw	r24, r24
     626:	a0 e0       	ldi	r26, 0x00	; 0
     628:	b0 e0       	ldi	r27, 0x00	; 0
     62a:	89 83       	std	Y+1, r24	; 0x01
     62c:	9a 83       	std	Y+2, r25	; 0x02
     62e:	ab 83       	std	Y+3, r26	; 0x03
     630:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     632:	10 92 0c 03 	sts	0x030C, r1
     636:	10 92 0d 03 	sts	0x030D, r1
     63a:	10 92 0e 03 	sts	0x030E, r1
     63e:	10 92 0f 03 	sts	0x030F, r1
	ShaftCountLeft = 0;
     642:	10 92 08 03 	sts	0x0308, r1
     646:	10 92 09 03 	sts	0x0309, r1
     64a:	10 92 0a 03 	sts	0x030A, r1
     64e:	10 92 0b 03 	sts	0x030B, r1

    left();
     652:	0e 94 cf 02 	call	0x59e	; 0x59e <left>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     656:	20 91 0c 03 	lds	r18, 0x030C
     65a:	30 91 0d 03 	lds	r19, 0x030D
     65e:	40 91 0e 03 	lds	r20, 0x030E
     662:	50 91 0f 03 	lds	r21, 0x030F
     666:	1c 86       	std	Y+12, r1	; 0x0c
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	9a 81       	ldd	r25, Y+2	; 0x02
     66c:	ab 81       	ldd	r26, Y+3	; 0x03
     66e:	bc 81       	ldd	r27, Y+4	; 0x04
     670:	28 17       	cp	r18, r24
     672:	39 07       	cpc	r19, r25
     674:	4a 07       	cpc	r20, r26
     676:	5b 07       	cpc	r21, r27
     678:	10 f0       	brcs	.+4      	; 0x67e <left_degrees+0xcc>
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	8c 87       	std	Y+12, r24	; 0x0c
     67e:	20 91 08 03 	lds	r18, 0x0308
     682:	30 91 09 03 	lds	r19, 0x0309
     686:	40 91 0a 03 	lds	r20, 0x030A
     68a:	50 91 0b 03 	lds	r21, 0x030B
     68e:	1b 86       	std	Y+11, r1	; 0x0b
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	9a 81       	ldd	r25, Y+2	; 0x02
     694:	ab 81       	ldd	r26, Y+3	; 0x03
     696:	bc 81       	ldd	r27, Y+4	; 0x04
     698:	28 17       	cp	r18, r24
     69a:	39 07       	cpc	r19, r25
     69c:	4a 07       	cpc	r20, r26
     69e:	5b 07       	cpc	r21, r27
     6a0:	10 f0       	brcs	.+4      	; 0x6a6 <left_degrees+0xf4>
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	9b 87       	std	Y+11, r25	; 0x0b
     6a6:	8c 85       	ldd	r24, Y+12	; 0x0c
     6a8:	9b 85       	ldd	r25, Y+11	; 0x0b
     6aa:	89 2b       	or	r24, r25
     6ac:	88 23       	and	r24, r24
     6ae:	99 f2       	breq	.-90     	; 0x656 <left_degrees+0xa4>
		break;
	}
	stop(); //Stop robot
     6b0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     6b4:	2c 96       	adiw	r28, 0x0c	; 12
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	cf 91       	pop	r28
     6c2:	df 91       	pop	r29
     6c4:	08 95       	ret

000006c6 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
     6c6:	df 93       	push	r29
     6c8:	cf 93       	push	r28
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
     6ce:	8a e0       	ldi	r24, 0x0A	; 10
     6d0:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     6d4:	cf 91       	pop	r28
     6d6:	df 91       	pop	r29
     6d8:	08 95       	ret

000006da <right_degrees>:

void right_degrees(unsigned int degrees)
{
     6da:	df 93       	push	r29
     6dc:	cf 93       	push	r28
     6de:	cd b7       	in	r28, 0x3d	; 61
     6e0:	de b7       	in	r29, 0x3e	; 62
     6e2:	2c 97       	sbiw	r28, 0x0c	; 12
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	cd bf       	out	0x3d, r28	; 61
     6ee:	9a 87       	std	Y+10, r25	; 0x0a
     6f0:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	a0 e0       	ldi	r26, 0x00	; 0
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	8d 83       	std	Y+5, r24	; 0x05
     6fc:	9e 83       	std	Y+6, r25	; 0x06
     6fe:	af 83       	std	Y+7, r26	; 0x07
     700:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     702:	19 82       	std	Y+1, r1	; 0x01
     704:	1a 82       	std	Y+2, r1	; 0x02
     706:	1b 82       	std	Y+3, r1	; 0x03
     708:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees/ 4.090; // division by resolution to get shaft count
     70a:	89 85       	ldd	r24, Y+9	; 0x09
     70c:	9a 85       	ldd	r25, Y+10	; 0x0a
     70e:	cc 01       	movw	r24, r24
     710:	a0 e0       	ldi	r26, 0x00	; 0
     712:	b0 e0       	ldi	r27, 0x00	; 0
     714:	bc 01       	movw	r22, r24
     716:	cd 01       	movw	r24, r26
     718:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__floatunsisf>
     71c:	dc 01       	movw	r26, r24
     71e:	cb 01       	movw	r24, r22
     720:	bc 01       	movw	r22, r24
     722:	cd 01       	movw	r24, r26
     724:	28 e4       	ldi	r18, 0x48	; 72
     726:	31 ee       	ldi	r19, 0xE1	; 225
     728:	42 e8       	ldi	r20, 0x82	; 130
     72a:	50 e4       	ldi	r21, 0x40	; 64
     72c:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__divsf3>
     730:	dc 01       	movw	r26, r24
     732:	cb 01       	movw	r24, r22
     734:	8d 83       	std	Y+5, r24	; 0x05
     736:	9e 83       	std	Y+6, r25	; 0x06
     738:	af 83       	std	Y+7, r26	; 0x07
     73a:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     73c:	6d 81       	ldd	r22, Y+5	; 0x05
     73e:	7e 81       	ldd	r23, Y+6	; 0x06
     740:	8f 81       	ldd	r24, Y+7	; 0x07
     742:	98 85       	ldd	r25, Y+8	; 0x08
     744:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
     748:	dc 01       	movw	r26, r24
     74a:	cb 01       	movw	r24, r22
     74c:	cc 01       	movw	r24, r24
     74e:	a0 e0       	ldi	r26, 0x00	; 0
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	89 83       	std	Y+1, r24	; 0x01
     754:	9a 83       	std	Y+2, r25	; 0x02
     756:	ab 83       	std	Y+3, r26	; 0x03
     758:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     75a:	10 92 0c 03 	sts	0x030C, r1
     75e:	10 92 0d 03 	sts	0x030D, r1
     762:	10 92 0e 03 	sts	0x030E, r1
     766:	10 92 0f 03 	sts	0x030F, r1
	ShaftCountLeft = 0;
     76a:	10 92 08 03 	sts	0x0308, r1
     76e:	10 92 09 03 	sts	0x0309, r1
     772:	10 92 0a 03 	sts	0x030A, r1
     776:	10 92 0b 03 	sts	0x030B, r1

    right();
     77a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <right>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     77e:	20 91 0c 03 	lds	r18, 0x030C
     782:	30 91 0d 03 	lds	r19, 0x030D
     786:	40 91 0e 03 	lds	r20, 0x030E
     78a:	50 91 0f 03 	lds	r21, 0x030F
     78e:	1c 86       	std	Y+12, r1	; 0x0c
     790:	89 81       	ldd	r24, Y+1	; 0x01
     792:	9a 81       	ldd	r25, Y+2	; 0x02
     794:	ab 81       	ldd	r26, Y+3	; 0x03
     796:	bc 81       	ldd	r27, Y+4	; 0x04
     798:	28 17       	cp	r18, r24
     79a:	39 07       	cpc	r19, r25
     79c:	4a 07       	cpc	r20, r26
     79e:	5b 07       	cpc	r21, r27
     7a0:	10 f0       	brcs	.+4      	; 0x7a6 <right_degrees+0xcc>
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	8c 87       	std	Y+12, r24	; 0x0c
     7a6:	20 91 08 03 	lds	r18, 0x0308
     7aa:	30 91 09 03 	lds	r19, 0x0309
     7ae:	40 91 0a 03 	lds	r20, 0x030A
     7b2:	50 91 0b 03 	lds	r21, 0x030B
     7b6:	1b 86       	std	Y+11, r1	; 0x0b
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	9a 81       	ldd	r25, Y+2	; 0x02
     7bc:	ab 81       	ldd	r26, Y+3	; 0x03
     7be:	bc 81       	ldd	r27, Y+4	; 0x04
     7c0:	28 17       	cp	r18, r24
     7c2:	39 07       	cpc	r19, r25
     7c4:	4a 07       	cpc	r20, r26
     7c6:	5b 07       	cpc	r21, r27
     7c8:	10 f0       	brcs	.+4      	; 0x7ce <right_degrees+0xf4>
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	9b 87       	std	Y+11, r25	; 0x0b
     7ce:	8c 85       	ldd	r24, Y+12	; 0x0c
     7d0:	9b 85       	ldd	r25, Y+11	; 0x0b
     7d2:	89 2b       	or	r24, r25
     7d4:	88 23       	and	r24, r24
     7d6:	99 f2       	breq	.-90     	; 0x77e <right_degrees+0xa4>
		break;
	}
	stop(); //Stop robot
     7d8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     7dc:	2c 96       	adiw	r28, 0x0c	; 12
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	de bf       	out	0x3e, r29	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	cf 91       	pop	r28
     7ea:	df 91       	pop	r29
     7ec:	08 95       	ret

000007ee <soft_left>:


void soft_left (void) //Left wheel stationary, Right wheel forward
{
     7ee:	df 93       	push	r29
     7f0:	cf 93       	push	r28
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
     7f6:	84 e0       	ldi	r24, 0x04	; 4
     7f8:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     7fc:	cf 91       	pop	r28
     7fe:	df 91       	pop	r29
     800:	08 95       	ret

00000802 <soft_left_degrees>:

void soft_left_degrees(unsigned int degrees)
{
     802:	df 93       	push	r29
     804:	cf 93       	push	r28
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	2c 97       	sbiw	r28, 0x0c	; 12
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	de bf       	out	0x3e, r29	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	cd bf       	out	0x3d, r28	; 61
     816:	9a 87       	std	Y+10, r25	; 0x0a
     818:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	a0 e0       	ldi	r26, 0x00	; 0
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	8d 83       	std	Y+5, r24	; 0x05
     824:	9e 83       	std	Y+6, r25	; 0x06
     826:	af 83       	std	Y+7, r26	; 0x07
     828:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     82a:	19 82       	std	Y+1, r1	; 0x01
     82c:	1a 82       	std	Y+2, r1	; 0x02
     82e:	1b 82       	std	Y+3, r1	; 0x03
     830:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees * 2 / 4.090; // division by resolution to get shaft count
     832:	89 85       	ldd	r24, Y+9	; 0x09
     834:	9a 85       	ldd	r25, Y+10	; 0x0a
     836:	cc 01       	movw	r24, r24
     838:	a0 e0       	ldi	r26, 0x00	; 0
     83a:	b0 e0       	ldi	r27, 0x00	; 0
     83c:	bc 01       	movw	r22, r24
     83e:	cd 01       	movw	r24, r26
     840:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__floatunsisf>
     844:	9b 01       	movw	r18, r22
     846:	ac 01       	movw	r20, r24
     848:	ca 01       	movw	r24, r20
     84a:	b9 01       	movw	r22, r18
     84c:	0e 94 6d 14 	call	0x28da	; 0x28da <__addsf3>
     850:	dc 01       	movw	r26, r24
     852:	cb 01       	movw	r24, r22
     854:	bc 01       	movw	r22, r24
     856:	cd 01       	movw	r24, r26
     858:	28 e4       	ldi	r18, 0x48	; 72
     85a:	31 ee       	ldi	r19, 0xE1	; 225
     85c:	42 e8       	ldi	r20, 0x82	; 130
     85e:	50 e4       	ldi	r21, 0x40	; 64
     860:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__divsf3>
     864:	dc 01       	movw	r26, r24
     866:	cb 01       	movw	r24, r22
     868:	8d 83       	std	Y+5, r24	; 0x05
     86a:	9e 83       	std	Y+6, r25	; 0x06
     86c:	af 83       	std	Y+7, r26	; 0x07
     86e:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     870:	6d 81       	ldd	r22, Y+5	; 0x05
     872:	7e 81       	ldd	r23, Y+6	; 0x06
     874:	8f 81       	ldd	r24, Y+7	; 0x07
     876:	98 85       	ldd	r25, Y+8	; 0x08
     878:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
     87c:	dc 01       	movw	r26, r24
     87e:	cb 01       	movw	r24, r22
     880:	cc 01       	movw	r24, r24
     882:	a0 e0       	ldi	r26, 0x00	; 0
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	89 83       	std	Y+1, r24	; 0x01
     888:	9a 83       	std	Y+2, r25	; 0x02
     88a:	ab 83       	std	Y+3, r26	; 0x03
     88c:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     88e:	10 92 0c 03 	sts	0x030C, r1
     892:	10 92 0d 03 	sts	0x030D, r1
     896:	10 92 0e 03 	sts	0x030E, r1
     89a:	10 92 0f 03 	sts	0x030F, r1
	ShaftCountLeft = 0;
     89e:	10 92 08 03 	sts	0x0308, r1
     8a2:	10 92 09 03 	sts	0x0309, r1
     8a6:	10 92 0a 03 	sts	0x030A, r1
     8aa:	10 92 0b 03 	sts	0x030B, r1

    soft_left();
     8ae:	0e 94 f7 03 	call	0x7ee	; 0x7ee <soft_left>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     8b2:	20 91 0c 03 	lds	r18, 0x030C
     8b6:	30 91 0d 03 	lds	r19, 0x030D
     8ba:	40 91 0e 03 	lds	r20, 0x030E
     8be:	50 91 0f 03 	lds	r21, 0x030F
     8c2:	1c 86       	std	Y+12, r1	; 0x0c
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	9a 81       	ldd	r25, Y+2	; 0x02
     8c8:	ab 81       	ldd	r26, Y+3	; 0x03
     8ca:	bc 81       	ldd	r27, Y+4	; 0x04
     8cc:	28 17       	cp	r18, r24
     8ce:	39 07       	cpc	r19, r25
     8d0:	4a 07       	cpc	r20, r26
     8d2:	5b 07       	cpc	r21, r27
     8d4:	10 f0       	brcs	.+4      	; 0x8da <soft_left_degrees+0xd8>
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	8c 87       	std	Y+12, r24	; 0x0c
     8da:	20 91 08 03 	lds	r18, 0x0308
     8de:	30 91 09 03 	lds	r19, 0x0309
     8e2:	40 91 0a 03 	lds	r20, 0x030A
     8e6:	50 91 0b 03 	lds	r21, 0x030B
     8ea:	1b 86       	std	Y+11, r1	; 0x0b
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
     8f0:	ab 81       	ldd	r26, Y+3	; 0x03
     8f2:	bc 81       	ldd	r27, Y+4	; 0x04
     8f4:	28 17       	cp	r18, r24
     8f6:	39 07       	cpc	r19, r25
     8f8:	4a 07       	cpc	r20, r26
     8fa:	5b 07       	cpc	r21, r27
     8fc:	10 f0       	brcs	.+4      	; 0x902 <soft_left_degrees+0x100>
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	9b 87       	std	Y+11, r25	; 0x0b
     902:	8c 85       	ldd	r24, Y+12	; 0x0c
     904:	9b 85       	ldd	r25, Y+11	; 0x0b
     906:	89 2b       	or	r24, r25
     908:	88 23       	and	r24, r24
     90a:	99 f2       	breq	.-90     	; 0x8b2 <soft_left_degrees+0xb0>
		break;
	}
	stop(); //Stop robot
     90c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     910:	2c 96       	adiw	r28, 0x0c	; 12
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	cf 91       	pop	r28
     91e:	df 91       	pop	r29
     920:	08 95       	ret

00000922 <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
     922:	df 93       	push	r29
     924:	cf 93       	push	r28
     926:	cd b7       	in	r28, 0x3d	; 61
     928:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     930:	cf 91       	pop	r28
     932:	df 91       	pop	r29
     934:	08 95       	ret

00000936 <soft_right_degrees>:

void soft_right_degrees(unsigned int degrees)
{
     936:	df 93       	push	r29
     938:	cf 93       	push	r28
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
     93e:	2c 97       	sbiw	r28, 0x0c	; 12
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	9a 87       	std	Y+10, r25	; 0x0a
     94c:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	a0 e0       	ldi	r26, 0x00	; 0
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	8d 83       	std	Y+5, r24	; 0x05
     958:	9e 83       	std	Y+6, r25	; 0x06
     95a:	af 83       	std	Y+7, r26	; 0x07
     95c:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     95e:	19 82       	std	Y+1, r1	; 0x01
     960:	1a 82       	std	Y+2, r1	; 0x02
     962:	1b 82       	std	Y+3, r1	; 0x03
     964:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees * 2 / 4.090; // division by resolution to get shaft count
     966:	89 85       	ldd	r24, Y+9	; 0x09
     968:	9a 85       	ldd	r25, Y+10	; 0x0a
     96a:	cc 01       	movw	r24, r24
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	bc 01       	movw	r22, r24
     972:	cd 01       	movw	r24, r26
     974:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__floatunsisf>
     978:	9b 01       	movw	r18, r22
     97a:	ac 01       	movw	r20, r24
     97c:	ca 01       	movw	r24, r20
     97e:	b9 01       	movw	r22, r18
     980:	0e 94 6d 14 	call	0x28da	; 0x28da <__addsf3>
     984:	dc 01       	movw	r26, r24
     986:	cb 01       	movw	r24, r22
     988:	bc 01       	movw	r22, r24
     98a:	cd 01       	movw	r24, r26
     98c:	28 e4       	ldi	r18, 0x48	; 72
     98e:	31 ee       	ldi	r19, 0xE1	; 225
     990:	42 e8       	ldi	r20, 0x82	; 130
     992:	50 e4       	ldi	r21, 0x40	; 64
     994:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__divsf3>
     998:	dc 01       	movw	r26, r24
     99a:	cb 01       	movw	r24, r22
     99c:	8d 83       	std	Y+5, r24	; 0x05
     99e:	9e 83       	std	Y+6, r25	; 0x06
     9a0:	af 83       	std	Y+7, r26	; 0x07
     9a2:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     9a4:	6d 81       	ldd	r22, Y+5	; 0x05
     9a6:	7e 81       	ldd	r23, Y+6	; 0x06
     9a8:	8f 81       	ldd	r24, Y+7	; 0x07
     9aa:	98 85       	ldd	r25, Y+8	; 0x08
     9ac:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	cc 01       	movw	r24, r24
     9b6:	a0 e0       	ldi	r26, 0x00	; 0
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	89 83       	std	Y+1, r24	; 0x01
     9bc:	9a 83       	std	Y+2, r25	; 0x02
     9be:	ab 83       	std	Y+3, r26	; 0x03
     9c0:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     9c2:	10 92 0c 03 	sts	0x030C, r1
     9c6:	10 92 0d 03 	sts	0x030D, r1
     9ca:	10 92 0e 03 	sts	0x030E, r1
     9ce:	10 92 0f 03 	sts	0x030F, r1
	ShaftCountLeft = 0;
     9d2:	10 92 08 03 	sts	0x0308, r1
     9d6:	10 92 09 03 	sts	0x0309, r1
     9da:	10 92 0a 03 	sts	0x030A, r1
     9de:	10 92 0b 03 	sts	0x030B, r1

    soft_right();
     9e2:	0e 94 91 04 	call	0x922	; 0x922 <soft_right>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     9e6:	20 91 0c 03 	lds	r18, 0x030C
     9ea:	30 91 0d 03 	lds	r19, 0x030D
     9ee:	40 91 0e 03 	lds	r20, 0x030E
     9f2:	50 91 0f 03 	lds	r21, 0x030F
     9f6:	1c 86       	std	Y+12, r1	; 0x0c
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	9a 81       	ldd	r25, Y+2	; 0x02
     9fc:	ab 81       	ldd	r26, Y+3	; 0x03
     9fe:	bc 81       	ldd	r27, Y+4	; 0x04
     a00:	28 17       	cp	r18, r24
     a02:	39 07       	cpc	r19, r25
     a04:	4a 07       	cpc	r20, r26
     a06:	5b 07       	cpc	r21, r27
     a08:	10 f0       	brcs	.+4      	; 0xa0e <soft_right_degrees+0xd8>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	8c 87       	std	Y+12, r24	; 0x0c
     a0e:	20 91 08 03 	lds	r18, 0x0308
     a12:	30 91 09 03 	lds	r19, 0x0309
     a16:	40 91 0a 03 	lds	r20, 0x030A
     a1a:	50 91 0b 03 	lds	r21, 0x030B
     a1e:	1b 86       	std	Y+11, r1	; 0x0b
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	9a 81       	ldd	r25, Y+2	; 0x02
     a24:	ab 81       	ldd	r26, Y+3	; 0x03
     a26:	bc 81       	ldd	r27, Y+4	; 0x04
     a28:	28 17       	cp	r18, r24
     a2a:	39 07       	cpc	r19, r25
     a2c:	4a 07       	cpc	r20, r26
     a2e:	5b 07       	cpc	r21, r27
     a30:	10 f0       	brcs	.+4      	; 0xa36 <soft_right_degrees+0x100>
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	9b 87       	std	Y+11, r25	; 0x0b
     a36:	8c 85       	ldd	r24, Y+12	; 0x0c
     a38:	9b 85       	ldd	r25, Y+11	; 0x0b
     a3a:	89 2b       	or	r24, r25
     a3c:	88 23       	and	r24, r24
     a3e:	99 f2       	breq	.-90     	; 0x9e6 <soft_right_degrees+0xb0>
		break;
	}
	stop(); //Stop robot
     a40:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     a44:	2c 96       	adiw	r28, 0x0c	; 12
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	cd bf       	out	0x3d, r28	; 61
     a50:	cf 91       	pop	r28
     a52:	df 91       	pop	r29
     a54:	08 95       	ret

00000a56 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
     a56:	df 93       	push	r29
     a58:	cf 93       	push	r28
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     a64:	cf 91       	pop	r28
     a66:	df 91       	pop	r29
     a68:	08 95       	ret

00000a6a <soft_left_degrees_2>:

void soft_left_degrees_2(unsigned int degrees)
{
     a6a:	df 93       	push	r29
     a6c:	cf 93       	push	r28
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
     a72:	2c 97       	sbiw	r28, 0x0c	; 12
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	f8 94       	cli
     a78:	de bf       	out	0x3e, r29	; 62
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	cd bf       	out	0x3d, r28	; 61
     a7e:	9a 87       	std	Y+10, r25	; 0x0a
     a80:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	b0 e0       	ldi	r27, 0x00	; 0
     a8a:	8d 83       	std	Y+5, r24	; 0x05
     a8c:	9e 83       	std	Y+6, r25	; 0x06
     a8e:	af 83       	std	Y+7, r26	; 0x07
     a90:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     a92:	19 82       	std	Y+1, r1	; 0x01
     a94:	1a 82       	std	Y+2, r1	; 0x02
     a96:	1b 82       	std	Y+3, r1	; 0x03
     a98:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees * 2 / 4.090; // division by resolution to get shaft count
     a9a:	89 85       	ldd	r24, Y+9	; 0x09
     a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a9e:	cc 01       	movw	r24, r24
     aa0:	a0 e0       	ldi	r26, 0x00	; 0
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	bc 01       	movw	r22, r24
     aa6:	cd 01       	movw	r24, r26
     aa8:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__floatunsisf>
     aac:	9b 01       	movw	r18, r22
     aae:	ac 01       	movw	r20, r24
     ab0:	ca 01       	movw	r24, r20
     ab2:	b9 01       	movw	r22, r18
     ab4:	0e 94 6d 14 	call	0x28da	; 0x28da <__addsf3>
     ab8:	dc 01       	movw	r26, r24
     aba:	cb 01       	movw	r24, r22
     abc:	bc 01       	movw	r22, r24
     abe:	cd 01       	movw	r24, r26
     ac0:	28 e4       	ldi	r18, 0x48	; 72
     ac2:	31 ee       	ldi	r19, 0xE1	; 225
     ac4:	42 e8       	ldi	r20, 0x82	; 130
     ac6:	50 e4       	ldi	r21, 0x40	; 64
     ac8:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__divsf3>
     acc:	dc 01       	movw	r26, r24
     ace:	cb 01       	movw	r24, r22
     ad0:	8d 83       	std	Y+5, r24	; 0x05
     ad2:	9e 83       	std	Y+6, r25	; 0x06
     ad4:	af 83       	std	Y+7, r26	; 0x07
     ad6:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     ad8:	6d 81       	ldd	r22, Y+5	; 0x05
     ada:	7e 81       	ldd	r23, Y+6	; 0x06
     adc:	8f 81       	ldd	r24, Y+7	; 0x07
     ade:	98 85       	ldd	r25, Y+8	; 0x08
     ae0:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
     ae4:	dc 01       	movw	r26, r24
     ae6:	cb 01       	movw	r24, r22
     ae8:	cc 01       	movw	r24, r24
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	89 83       	std	Y+1, r24	; 0x01
     af0:	9a 83       	std	Y+2, r25	; 0x02
     af2:	ab 83       	std	Y+3, r26	; 0x03
     af4:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     af6:	10 92 0c 03 	sts	0x030C, r1
     afa:	10 92 0d 03 	sts	0x030D, r1
     afe:	10 92 0e 03 	sts	0x030E, r1
     b02:	10 92 0f 03 	sts	0x030F, r1
	ShaftCountLeft = 0;
     b06:	10 92 08 03 	sts	0x0308, r1
     b0a:	10 92 09 03 	sts	0x0309, r1
     b0e:	10 92 0a 03 	sts	0x030A, r1
     b12:	10 92 0b 03 	sts	0x030B, r1

    soft_left_2();
     b16:	0e 94 2b 05 	call	0xa56	; 0xa56 <soft_left_2>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     b1a:	20 91 0c 03 	lds	r18, 0x030C
     b1e:	30 91 0d 03 	lds	r19, 0x030D
     b22:	40 91 0e 03 	lds	r20, 0x030E
     b26:	50 91 0f 03 	lds	r21, 0x030F
     b2a:	1c 86       	std	Y+12, r1	; 0x0c
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	9a 81       	ldd	r25, Y+2	; 0x02
     b30:	ab 81       	ldd	r26, Y+3	; 0x03
     b32:	bc 81       	ldd	r27, Y+4	; 0x04
     b34:	28 17       	cp	r18, r24
     b36:	39 07       	cpc	r19, r25
     b38:	4a 07       	cpc	r20, r26
     b3a:	5b 07       	cpc	r21, r27
     b3c:	10 f0       	brcs	.+4      	; 0xb42 <soft_left_degrees_2+0xd8>
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	8c 87       	std	Y+12, r24	; 0x0c
     b42:	20 91 08 03 	lds	r18, 0x0308
     b46:	30 91 09 03 	lds	r19, 0x0309
     b4a:	40 91 0a 03 	lds	r20, 0x030A
     b4e:	50 91 0b 03 	lds	r21, 0x030B
     b52:	1b 86       	std	Y+11, r1	; 0x0b
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	9a 81       	ldd	r25, Y+2	; 0x02
     b58:	ab 81       	ldd	r26, Y+3	; 0x03
     b5a:	bc 81       	ldd	r27, Y+4	; 0x04
     b5c:	28 17       	cp	r18, r24
     b5e:	39 07       	cpc	r19, r25
     b60:	4a 07       	cpc	r20, r26
     b62:	5b 07       	cpc	r21, r27
     b64:	10 f0       	brcs	.+4      	; 0xb6a <soft_left_degrees_2+0x100>
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	9b 87       	std	Y+11, r25	; 0x0b
     b6a:	8c 85       	ldd	r24, Y+12	; 0x0c
     b6c:	9b 85       	ldd	r25, Y+11	; 0x0b
     b6e:	89 2b       	or	r24, r25
     b70:	88 23       	and	r24, r24
     b72:	99 f2       	breq	.-90     	; 0xb1a <soft_left_degrees_2+0xb0>
		break;
	}
	stop(); //Stop robot
     b74:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     b78:	2c 96       	adiw	r28, 0x0c	; 12
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
     b92:	88 e0       	ldi	r24, 0x08	; 8
     b94:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <right_degrees_2>:

void right_degrees_2(unsigned int degrees)
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	2c 97       	sbiw	r28, 0x0c	; 12
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	9a 87       	std	Y+10, r25	; 0x0a
     bb4:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	a0 e0       	ldi	r26, 0x00	; 0
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	8d 83       	std	Y+5, r24	; 0x05
     bc0:	9e 83       	std	Y+6, r25	; 0x06
     bc2:	af 83       	std	Y+7, r26	; 0x07
     bc4:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     bc6:	19 82       	std	Y+1, r1	; 0x01
     bc8:	1a 82       	std	Y+2, r1	; 0x02
     bca:	1b 82       	std	Y+3, r1	; 0x03
     bcc:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees * 2 / 4.090; // division by resolution to get shaft count
     bce:	89 85       	ldd	r24, Y+9	; 0x09
     bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd2:	cc 01       	movw	r24, r24
     bd4:	a0 e0       	ldi	r26, 0x00	; 0
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	bc 01       	movw	r22, r24
     bda:	cd 01       	movw	r24, r26
     bdc:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__floatunsisf>
     be0:	9b 01       	movw	r18, r22
     be2:	ac 01       	movw	r20, r24
     be4:	ca 01       	movw	r24, r20
     be6:	b9 01       	movw	r22, r18
     be8:	0e 94 6d 14 	call	0x28da	; 0x28da <__addsf3>
     bec:	dc 01       	movw	r26, r24
     bee:	cb 01       	movw	r24, r22
     bf0:	bc 01       	movw	r22, r24
     bf2:	cd 01       	movw	r24, r26
     bf4:	28 e4       	ldi	r18, 0x48	; 72
     bf6:	31 ee       	ldi	r19, 0xE1	; 225
     bf8:	42 e8       	ldi	r20, 0x82	; 130
     bfa:	50 e4       	ldi	r21, 0x40	; 64
     bfc:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__divsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	8d 83       	std	Y+5, r24	; 0x05
     c06:	9e 83       	std	Y+6, r25	; 0x06
     c08:	af 83       	std	Y+7, r26	; 0x07
     c0a:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     c0c:	6d 81       	ldd	r22, Y+5	; 0x05
     c0e:	7e 81       	ldd	r23, Y+6	; 0x06
     c10:	8f 81       	ldd	r24, Y+7	; 0x07
     c12:	98 85       	ldd	r25, Y+8	; 0x08
     c14:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	cc 01       	movw	r24, r24
     c1e:	a0 e0       	ldi	r26, 0x00	; 0
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	9a 83       	std	Y+2, r25	; 0x02
     c26:	ab 83       	std	Y+3, r26	; 0x03
     c28:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     c2a:	10 92 0c 03 	sts	0x030C, r1
     c2e:	10 92 0d 03 	sts	0x030D, r1
     c32:	10 92 0e 03 	sts	0x030E, r1
     c36:	10 92 0f 03 	sts	0x030F, r1
	ShaftCountLeft = 0;
     c3a:	10 92 08 03 	sts	0x0308, r1
     c3e:	10 92 09 03 	sts	0x0309, r1
     c42:	10 92 0a 03 	sts	0x030A, r1
     c46:	10 92 0b 03 	sts	0x030B, r1

    soft_right_2();
     c4a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <soft_right_2>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     c4e:	20 91 0c 03 	lds	r18, 0x030C
     c52:	30 91 0d 03 	lds	r19, 0x030D
     c56:	40 91 0e 03 	lds	r20, 0x030E
     c5a:	50 91 0f 03 	lds	r21, 0x030F
     c5e:	1c 86       	std	Y+12, r1	; 0x0c
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	9a 81       	ldd	r25, Y+2	; 0x02
     c64:	ab 81       	ldd	r26, Y+3	; 0x03
     c66:	bc 81       	ldd	r27, Y+4	; 0x04
     c68:	28 17       	cp	r18, r24
     c6a:	39 07       	cpc	r19, r25
     c6c:	4a 07       	cpc	r20, r26
     c6e:	5b 07       	cpc	r21, r27
     c70:	10 f0       	brcs	.+4      	; 0xc76 <right_degrees_2+0xd8>
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	8c 87       	std	Y+12, r24	; 0x0c
     c76:	20 91 08 03 	lds	r18, 0x0308
     c7a:	30 91 09 03 	lds	r19, 0x0309
     c7e:	40 91 0a 03 	lds	r20, 0x030A
     c82:	50 91 0b 03 	lds	r21, 0x030B
     c86:	1b 86       	std	Y+11, r1	; 0x0b
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	9a 81       	ldd	r25, Y+2	; 0x02
     c8c:	ab 81       	ldd	r26, Y+3	; 0x03
     c8e:	bc 81       	ldd	r27, Y+4	; 0x04
     c90:	28 17       	cp	r18, r24
     c92:	39 07       	cpc	r19, r25
     c94:	4a 07       	cpc	r20, r26
     c96:	5b 07       	cpc	r21, r27
     c98:	10 f0       	brcs	.+4      	; 0xc9e <right_degrees_2+0x100>
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	9b 87       	std	Y+11, r25	; 0x0b
     c9e:	8c 85       	ldd	r24, Y+12	; 0x0c
     ca0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ca2:	89 2b       	or	r24, r25
     ca4:	88 23       	and	r24, r24
     ca6:	99 f2       	breq	.-90     	; 0xc4e <right_degrees_2+0xb0>
		break;
	}
	stop(); //Stop robot
     ca8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     cac:	2c 96       	adiw	r28, 0x0c	; 12
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <stop>:

void stop (void) //hard stop
{
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <adc_pin_config>:
Available functions in the library, (Total : 2)
****************************************************************/
unsigned char ADC_Conversion(unsigned char);

void adc_pin_config()
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
    DDRF = 0x00;    //All ADC Channels on port F set as inputs
     cda:	e0 e3       	ldi	r30, 0x30	; 48
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	10 82       	st	Z, r1
    DDRK = 0x00;    //All ADC Channels on port K set as inputs.
     ce0:	e7 e0       	ldi	r30, 0x07	; 7
     ce2:	f1 e0       	ldi	r31, 0x01	; 1
     ce4:	10 82       	st	Z, r1
    PORTF = 0x00;   //All ADC pins on port F pulled low.
     ce6:	e1 e3       	ldi	r30, 0x31	; 49
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	10 82       	st	Z, r1
    PORTK = 0x00;   //All ADC pins on port K pulled low.
     cec:	e8 e0       	ldi	r30, 0x08	; 8
     cee:	f1 e0       	ldi	r31, 0x01	; 1
     cf0:	10 82       	st	Z, r1
}
     cf2:	cf 91       	pop	r28
     cf4:	df 91       	pop	r29
     cf6:	08 95       	ret

00000cf8 <set_ADC>:

void set_ADC()
{
     cf8:	df 93       	push	r29
     cfa:	cf 93       	push	r28
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
    adc_pin_config();
     d00:	0e 94 69 06 	call	0xcd2	; 0xcd2 <adc_pin_config>

	ADCSRA = 0x00;
     d04:	ea e7       	ldi	r30, 0x7A	; 122
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     d0a:	eb e7       	ldi	r30, 0x7B	; 123
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     d10:	ec e7       	ldi	r30, 0x7C	; 124
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 e2       	ldi	r24, 0x20	; 32
     d16:	80 83       	st	Z, r24
	ACSR = 0x80;        //Disable analog comparator.
     d18:	e0 e5       	ldi	r30, 0x50	; 80
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 e8       	ldi	r24, 0x80	; 128
     d1e:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0 ( Prescalar 64)
     d20:	ea e7       	ldi	r30, 0x7A	; 122
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	86 e8       	ldi	r24, 0x86	; 134
     d26:	80 83       	st	Z, r24
}
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <ADC_Conversion>:

//Function For ADC Conversion
//Value of ch can be 1-15 for single ended input.
//ADC resolution 8 bit.
unsigned char ADC_Conversion(unsigned char Ch)
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	0f 92       	push	r0
     d34:	0f 92       	push	r0
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;

	if(Ch>7)
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	88 30       	cpi	r24, 0x08	; 8
     d40:	20 f0       	brcs	.+8      	; 0xd4a <ADC_Conversion+0x1c>
        ADCSRB = 0x08;
     d42:	eb e7       	ldi	r30, 0x7B	; 123
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	88 e0       	ldi	r24, 0x08	; 8
     d48:	80 83       	st	Z, r24

	Ch = Ch & 0x07;
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	87 70       	andi	r24, 0x07	; 7
     d4e:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;
     d50:	ec e7       	ldi	r30, 0x7C	; 124
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	80 62       	ori	r24, 0x20	; 32
     d58:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     d5a:	aa e7       	ldi	r26, 0x7A	; 122
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	ea e7       	ldi	r30, 0x7A	; 122
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	80 64       	ori	r24, 0x40	; 64
     d66:	8c 93       	st	X, r24

	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     d68:	ea e7       	ldi	r30, 0x7A	; 122
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	88 2f       	mov	r24, r24
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	80 71       	andi	r24, 0x10	; 16
     d74:	90 70       	andi	r25, 0x00	; 0
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	b9 f3       	breq	.-18     	; 0xd68 <ADC_Conversion+0x3a>

	a=ADCH;
     d7a:	e9 e7       	ldi	r30, 0x79	; 121
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10;       //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     d82:	aa e7       	ldi	r26, 0x7A	; 122
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	ea e7       	ldi	r30, 0x7A	; 122
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	80 61       	ori	r24, 0x10	; 16
     d8e:	8c 93       	st	X, r24
	ADCSRB = 0x00;
     d90:	eb e7       	ldi	r30, 0x7B	; 123
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	10 82       	st	Z, r1
	return a;
     d96:	89 81       	ldd	r24, Y+1	; 0x01
}
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <set_lcd>:
unsigned int hundred;
unsigned int thousand;
unsigned int million;

void set_lcd()
{
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
    lcd_port_config();
     daa:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <lcd_port_config>
    lcd_init();
     dae:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <lcd_init>
}
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <lcd_port_config>:

void lcd_port_config (void)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     dc0:	a7 e2       	ldi	r26, 0x27	; 39
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e7 e2       	ldi	r30, 0x27	; 39
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	87 6f       	ori	r24, 0xF7	; 247
     dcc:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     dce:	a8 e2       	ldi	r26, 0x28	; 40
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e8 e2       	ldi	r30, 0x28	; 40
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	80 78       	andi	r24, 0x80	; 128
     dda:	8c 93       	st	X, r24
}
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <lcd_set_4bit>:

//Function to Reset LCD
void lcd_set_4bit()
{
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	c0 57       	subi	r28, 0x70	; 112
     df0:	d0 40       	sbci	r29, 0x00	; 0
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	fe 01       	movw	r30, r28
     dfe:	e3 59       	subi	r30, 0x93	; 147
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	a0 e8       	ldi	r26, 0x80	; 128
     e08:	bf e3       	ldi	r27, 0x3F	; 63
     e0a:	80 83       	st	Z, r24
     e0c:	91 83       	std	Z+1, r25	; 0x01
     e0e:	a2 83       	std	Z+2, r26	; 0x02
     e10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e12:	8e 01       	movw	r16, r28
     e14:	07 59       	subi	r16, 0x97	; 151
     e16:	1f 4f       	sbci	r17, 0xFF	; 255
     e18:	fe 01       	movw	r30, r28
     e1a:	e3 59       	subi	r30, 0x93	; 147
     e1c:	ff 4f       	sbci	r31, 0xFF	; 255
     e1e:	60 81       	ld	r22, Z
     e20:	71 81       	ldd	r23, Z+1	; 0x01
     e22:	82 81       	ldd	r24, Z+2	; 0x02
     e24:	93 81       	ldd	r25, Z+3	; 0x03
     e26:	26 e6       	ldi	r18, 0x66	; 102
     e28:	36 e6       	ldi	r19, 0x66	; 102
     e2a:	46 e6       	ldi	r20, 0x66	; 102
     e2c:	55 e4       	ldi	r21, 0x45	; 69
     e2e:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	f8 01       	movw	r30, r16
     e38:	80 83       	st	Z, r24
     e3a:	91 83       	std	Z+1, r25	; 0x01
     e3c:	a2 83       	std	Z+2, r26	; 0x02
     e3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e40:	fe 01       	movw	r30, r28
     e42:	e7 59       	subi	r30, 0x97	; 151
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	60 81       	ld	r22, Z
     e48:	71 81       	ldd	r23, Z+1	; 0x01
     e4a:	82 81       	ldd	r24, Z+2	; 0x02
     e4c:	93 81       	ldd	r25, Z+3	; 0x03
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e8       	ldi	r20, 0x80	; 128
     e54:	5f e3       	ldi	r21, 0x3F	; 63
     e56:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__ltsf2>
     e5a:	88 23       	and	r24, r24
     e5c:	44 f4       	brge	.+16     	; 0xe6e <lcd_set_4bit+0x8c>
		__ticks = 1;
     e5e:	fe 01       	movw	r30, r28
     e60:	e9 59       	subi	r30, 0x99	; 153
     e62:	ff 4f       	sbci	r31, 0xFF	; 255
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	91 83       	std	Z+1, r25	; 0x01
     e6a:	80 83       	st	Z, r24
     e6c:	64 c0       	rjmp	.+200    	; 0xf36 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     e6e:	fe 01       	movw	r30, r28
     e70:	e7 59       	subi	r30, 0x97	; 151
     e72:	ff 4f       	sbci	r31, 0xFF	; 255
     e74:	60 81       	ld	r22, Z
     e76:	71 81       	ldd	r23, Z+1	; 0x01
     e78:	82 81       	ldd	r24, Z+2	; 0x02
     e7a:	93 81       	ldd	r25, Z+3	; 0x03
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	3f ef       	ldi	r19, 0xFF	; 255
     e80:	4f e7       	ldi	r20, 0x7F	; 127
     e82:	57 e4       	ldi	r21, 0x47	; 71
     e84:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__gtsf2>
     e88:	18 16       	cp	r1, r24
     e8a:	0c f0       	brlt	.+2      	; 0xe8e <lcd_set_4bit+0xac>
     e8c:	43 c0       	rjmp	.+134    	; 0xf14 <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e8e:	fe 01       	movw	r30, r28
     e90:	e3 59       	subi	r30, 0x93	; 147
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	60 81       	ld	r22, Z
     e96:	71 81       	ldd	r23, Z+1	; 0x01
     e98:	82 81       	ldd	r24, Z+2	; 0x02
     e9a:	93 81       	ldd	r25, Z+3	; 0x03
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	40 e2       	ldi	r20, 0x20	; 32
     ea2:	51 e4       	ldi	r21, 0x41	; 65
     ea4:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	8e 01       	movw	r16, r28
     eae:	09 59       	subi	r16, 0x99	; 153
     eb0:	1f 4f       	sbci	r17, 0xFF	; 255
     eb2:	bc 01       	movw	r22, r24
     eb4:	cd 01       	movw	r24, r26
     eb6:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	f8 01       	movw	r30, r16
     ec0:	91 83       	std	Z+1, r25	; 0x01
     ec2:	80 83       	st	Z, r24
     ec4:	1f c0       	rjmp	.+62     	; 0xf04 <lcd_set_4bit+0x122>
     ec6:	fe 01       	movw	r30, r28
     ec8:	eb 59       	subi	r30, 0x9B	; 155
     eca:	ff 4f       	sbci	r31, 0xFF	; 255
     ecc:	80 e7       	ldi	r24, 0x70	; 112
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	91 83       	std	Z+1, r25	; 0x01
     ed2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ed4:	fe 01       	movw	r30, r28
     ed6:	eb 59       	subi	r30, 0x9B	; 155
     ed8:	ff 4f       	sbci	r31, 0xFF	; 255
     eda:	80 81       	ld	r24, Z
     edc:	91 81       	ldd	r25, Z+1	; 0x01
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <lcd_set_4bit+0xfc>
     ee2:	fe 01       	movw	r30, r28
     ee4:	eb 59       	subi	r30, 0x9B	; 155
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	91 83       	std	Z+1, r25	; 0x01
     eea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eec:	de 01       	movw	r26, r28
     eee:	a9 59       	subi	r26, 0x99	; 153
     ef0:	bf 4f       	sbci	r27, 0xFF	; 255
     ef2:	fe 01       	movw	r30, r28
     ef4:	e9 59       	subi	r30, 0x99	; 153
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	80 81       	ld	r24, Z
     efa:	91 81       	ldd	r25, Z+1	; 0x01
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	11 96       	adiw	r26, 0x01	; 1
     f00:	9c 93       	st	X, r25
     f02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f04:	fe 01       	movw	r30, r28
     f06:	e9 59       	subi	r30, 0x99	; 153
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	d1 f6       	brne	.-76     	; 0xec6 <lcd_set_4bit+0xe4>
     f12:	27 c0       	rjmp	.+78     	; 0xf62 <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f14:	8e 01       	movw	r16, r28
     f16:	09 59       	subi	r16, 0x99	; 153
     f18:	1f 4f       	sbci	r17, 0xFF	; 255
     f1a:	fe 01       	movw	r30, r28
     f1c:	e7 59       	subi	r30, 0x97	; 151
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	60 81       	ld	r22, Z
     f22:	71 81       	ldd	r23, Z+1	; 0x01
     f24:	82 81       	ldd	r24, Z+2	; 0x02
     f26:	93 81       	ldd	r25, Z+3	; 0x03
     f28:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	f8 01       	movw	r30, r16
     f32:	91 83       	std	Z+1, r25	; 0x01
     f34:	80 83       	st	Z, r24
     f36:	de 01       	movw	r26, r28
     f38:	ad 59       	subi	r26, 0x9D	; 157
     f3a:	bf 4f       	sbci	r27, 0xFF	; 255
     f3c:	fe 01       	movw	r30, r28
     f3e:	e9 59       	subi	r30, 0x99	; 153
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	80 81       	ld	r24, Z
     f44:	91 81       	ldd	r25, Z+1	; 0x01
     f46:	8d 93       	st	X+, r24
     f48:	9c 93       	st	X, r25
     f4a:	fe 01       	movw	r30, r28
     f4c:	ed 59       	subi	r30, 0x9D	; 157
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	80 81       	ld	r24, Z
     f52:	91 81       	ldd	r25, Z+1	; 0x01
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <lcd_set_4bit+0x172>
     f58:	fe 01       	movw	r30, r28
     f5a:	ed 59       	subi	r30, 0x9D	; 157
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	91 83       	std	Z+1, r25	; 0x01
     f60:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     f62:	a8 e2       	ldi	r26, 0x28	; 40
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e8 e2       	ldi	r30, 0x28	; 40
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8e 7f       	andi	r24, 0xFE	; 254
     f6e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     f70:	a8 e2       	ldi	r26, 0x28	; 40
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e8 e2       	ldi	r30, 0x28	; 40
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	8d 7f       	andi	r24, 0xFD	; 253
     f7c:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     f7e:	e8 e2       	ldi	r30, 0x28	; 40
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 e3       	ldi	r24, 0x30	; 48
     f84:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     f86:	a8 e2       	ldi	r26, 0x28	; 40
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e8 e2       	ldi	r30, 0x28	; 40
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	84 60       	ori	r24, 0x04	; 4
     f92:	8c 93       	st	X, r24
     f94:	fe 01       	movw	r30, r28
     f96:	e1 5a       	subi	r30, 0xA1	; 161
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	a0 ea       	ldi	r26, 0xA0	; 160
     fa0:	b0 e4       	ldi	r27, 0x40	; 64
     fa2:	80 83       	st	Z, r24
     fa4:	91 83       	std	Z+1, r25	; 0x01
     fa6:	a2 83       	std	Z+2, r26	; 0x02
     fa8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     faa:	8e 01       	movw	r16, r28
     fac:	05 5a       	subi	r16, 0xA5	; 165
     fae:	1f 4f       	sbci	r17, 0xFF	; 255
     fb0:	fe 01       	movw	r30, r28
     fb2:	e1 5a       	subi	r30, 0xA1	; 161
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	60 81       	ld	r22, Z
     fb8:	71 81       	ldd	r23, Z+1	; 0x01
     fba:	82 81       	ldd	r24, Z+2	; 0x02
     fbc:	93 81       	ldd	r25, Z+3	; 0x03
     fbe:	26 e6       	ldi	r18, 0x66	; 102
     fc0:	36 e6       	ldi	r19, 0x66	; 102
     fc2:	46 e6       	ldi	r20, 0x66	; 102
     fc4:	55 e4       	ldi	r21, 0x45	; 69
     fc6:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	f8 01       	movw	r30, r16
     fd0:	80 83       	st	Z, r24
     fd2:	91 83       	std	Z+1, r25	; 0x01
     fd4:	a2 83       	std	Z+2, r26	; 0x02
     fd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fd8:	fe 01       	movw	r30, r28
     fda:	e5 5a       	subi	r30, 0xA5	; 165
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	60 81       	ld	r22, Z
     fe0:	71 81       	ldd	r23, Z+1	; 0x01
     fe2:	82 81       	ldd	r24, Z+2	; 0x02
     fe4:	93 81       	ldd	r25, Z+3	; 0x03
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e8       	ldi	r20, 0x80	; 128
     fec:	5f e3       	ldi	r21, 0x3F	; 63
     fee:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__ltsf2>
     ff2:	88 23       	and	r24, r24
     ff4:	44 f4       	brge	.+16     	; 0x1006 <lcd_set_4bit+0x224>
		__ticks = 1;
     ff6:	fe 01       	movw	r30, r28
     ff8:	e7 5a       	subi	r30, 0xA7	; 167
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	91 83       	std	Z+1, r25	; 0x01
    1002:	80 83       	st	Z, r24
    1004:	64 c0       	rjmp	.+200    	; 0x10ce <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
    1006:	fe 01       	movw	r30, r28
    1008:	e5 5a       	subi	r30, 0xA5	; 165
    100a:	ff 4f       	sbci	r31, 0xFF	; 255
    100c:	60 81       	ld	r22, Z
    100e:	71 81       	ldd	r23, Z+1	; 0x01
    1010:	82 81       	ldd	r24, Z+2	; 0x02
    1012:	93 81       	ldd	r25, Z+3	; 0x03
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	3f ef       	ldi	r19, 0xFF	; 255
    1018:	4f e7       	ldi	r20, 0x7F	; 127
    101a:	57 e4       	ldi	r21, 0x47	; 71
    101c:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__gtsf2>
    1020:	18 16       	cp	r1, r24
    1022:	0c f0       	brlt	.+2      	; 0x1026 <lcd_set_4bit+0x244>
    1024:	43 c0       	rjmp	.+134    	; 0x10ac <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1026:	fe 01       	movw	r30, r28
    1028:	e1 5a       	subi	r30, 0xA1	; 161
    102a:	ff 4f       	sbci	r31, 0xFF	; 255
    102c:	60 81       	ld	r22, Z
    102e:	71 81       	ldd	r23, Z+1	; 0x01
    1030:	82 81       	ldd	r24, Z+2	; 0x02
    1032:	93 81       	ldd	r25, Z+3	; 0x03
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e2       	ldi	r20, 0x20	; 32
    103a:	51 e4       	ldi	r21, 0x41	; 65
    103c:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	8e 01       	movw	r16, r28
    1046:	07 5a       	subi	r16, 0xA7	; 167
    1048:	1f 4f       	sbci	r17, 0xFF	; 255
    104a:	bc 01       	movw	r22, r24
    104c:	cd 01       	movw	r24, r26
    104e:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	f8 01       	movw	r30, r16
    1058:	91 83       	std	Z+1, r25	; 0x01
    105a:	80 83       	st	Z, r24
    105c:	1f c0       	rjmp	.+62     	; 0x109c <lcd_set_4bit+0x2ba>
    105e:	fe 01       	movw	r30, r28
    1060:	e9 5a       	subi	r30, 0xA9	; 169
    1062:	ff 4f       	sbci	r31, 0xFF	; 255
    1064:	80 e7       	ldi	r24, 0x70	; 112
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	91 83       	std	Z+1, r25	; 0x01
    106a:	80 83       	st	Z, r24
    106c:	fe 01       	movw	r30, r28
    106e:	e9 5a       	subi	r30, 0xA9	; 169
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	80 81       	ld	r24, Z
    1074:	91 81       	ldd	r25, Z+1	; 0x01
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	f1 f7       	brne	.-4      	; 0x1076 <lcd_set_4bit+0x294>
    107a:	fe 01       	movw	r30, r28
    107c:	e9 5a       	subi	r30, 0xA9	; 169
    107e:	ff 4f       	sbci	r31, 0xFF	; 255
    1080:	91 83       	std	Z+1, r25	; 0x01
    1082:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1084:	de 01       	movw	r26, r28
    1086:	a7 5a       	subi	r26, 0xA7	; 167
    1088:	bf 4f       	sbci	r27, 0xFF	; 255
    108a:	fe 01       	movw	r30, r28
    108c:	e7 5a       	subi	r30, 0xA7	; 167
    108e:	ff 4f       	sbci	r31, 0xFF	; 255
    1090:	80 81       	ld	r24, Z
    1092:	91 81       	ldd	r25, Z+1	; 0x01
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	11 96       	adiw	r26, 0x01	; 1
    1098:	9c 93       	st	X, r25
    109a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109c:	fe 01       	movw	r30, r28
    109e:	e7 5a       	subi	r30, 0xA7	; 167
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	80 81       	ld	r24, Z
    10a4:	91 81       	ldd	r25, Z+1	; 0x01
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	d1 f6       	brne	.-76     	; 0x105e <lcd_set_4bit+0x27c>
    10aa:	27 c0       	rjmp	.+78     	; 0x10fa <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ac:	8e 01       	movw	r16, r28
    10ae:	07 5a       	subi	r16, 0xA7	; 167
    10b0:	1f 4f       	sbci	r17, 0xFF	; 255
    10b2:	fe 01       	movw	r30, r28
    10b4:	e5 5a       	subi	r30, 0xA5	; 165
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	60 81       	ld	r22, Z
    10ba:	71 81       	ldd	r23, Z+1	; 0x01
    10bc:	82 81       	ldd	r24, Z+2	; 0x02
    10be:	93 81       	ldd	r25, Z+3	; 0x03
    10c0:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	f8 01       	movw	r30, r16
    10ca:	91 83       	std	Z+1, r25	; 0x01
    10cc:	80 83       	st	Z, r24
    10ce:	de 01       	movw	r26, r28
    10d0:	ab 5a       	subi	r26, 0xAB	; 171
    10d2:	bf 4f       	sbci	r27, 0xFF	; 255
    10d4:	fe 01       	movw	r30, r28
    10d6:	e7 5a       	subi	r30, 0xA7	; 167
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	80 81       	ld	r24, Z
    10dc:	91 81       	ldd	r25, Z+1	; 0x01
    10de:	8d 93       	st	X+, r24
    10e0:	9c 93       	st	X, r25
    10e2:	fe 01       	movw	r30, r28
    10e4:	eb 5a       	subi	r30, 0xAB	; 171
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	80 81       	ld	r24, Z
    10ea:	91 81       	ldd	r25, Z+1	; 0x01
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	f1 f7       	brne	.-4      	; 0x10ec <lcd_set_4bit+0x30a>
    10f0:	fe 01       	movw	r30, r28
    10f2:	eb 5a       	subi	r30, 0xAB	; 171
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	91 83       	std	Z+1, r25	; 0x01
    10f8:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    10fa:	a8 e2       	ldi	r26, 0x28	; 40
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e8 e2       	ldi	r30, 0x28	; 40
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	8b 7f       	andi	r24, 0xFB	; 251
    1106:	8c 93       	st	X, r24
    1108:	fe 01       	movw	r30, r28
    110a:	ef 5a       	subi	r30, 0xAF	; 175
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	a0 e8       	ldi	r26, 0x80	; 128
    1114:	bf e3       	ldi	r27, 0x3F	; 63
    1116:	80 83       	st	Z, r24
    1118:	91 83       	std	Z+1, r25	; 0x01
    111a:	a2 83       	std	Z+2, r26	; 0x02
    111c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    111e:	8e 01       	movw	r16, r28
    1120:	03 5b       	subi	r16, 0xB3	; 179
    1122:	1f 4f       	sbci	r17, 0xFF	; 255
    1124:	fe 01       	movw	r30, r28
    1126:	ef 5a       	subi	r30, 0xAF	; 175
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	60 81       	ld	r22, Z
    112c:	71 81       	ldd	r23, Z+1	; 0x01
    112e:	82 81       	ldd	r24, Z+2	; 0x02
    1130:	93 81       	ldd	r25, Z+3	; 0x03
    1132:	26 e6       	ldi	r18, 0x66	; 102
    1134:	36 e6       	ldi	r19, 0x66	; 102
    1136:	46 e6       	ldi	r20, 0x66	; 102
    1138:	55 e4       	ldi	r21, 0x45	; 69
    113a:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	f8 01       	movw	r30, r16
    1144:	80 83       	st	Z, r24
    1146:	91 83       	std	Z+1, r25	; 0x01
    1148:	a2 83       	std	Z+2, r26	; 0x02
    114a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    114c:	fe 01       	movw	r30, r28
    114e:	e3 5b       	subi	r30, 0xB3	; 179
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	60 81       	ld	r22, Z
    1154:	71 81       	ldd	r23, Z+1	; 0x01
    1156:	82 81       	ldd	r24, Z+2	; 0x02
    1158:	93 81       	ldd	r25, Z+3	; 0x03
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	40 e8       	ldi	r20, 0x80	; 128
    1160:	5f e3       	ldi	r21, 0x3F	; 63
    1162:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__ltsf2>
    1166:	88 23       	and	r24, r24
    1168:	44 f4       	brge	.+16     	; 0x117a <lcd_set_4bit+0x398>
		__ticks = 1;
    116a:	fe 01       	movw	r30, r28
    116c:	e5 5b       	subi	r30, 0xB5	; 181
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	91 83       	std	Z+1, r25	; 0x01
    1176:	80 83       	st	Z, r24
    1178:	64 c0       	rjmp	.+200    	; 0x1242 <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
    117a:	fe 01       	movw	r30, r28
    117c:	e3 5b       	subi	r30, 0xB3	; 179
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	60 81       	ld	r22, Z
    1182:	71 81       	ldd	r23, Z+1	; 0x01
    1184:	82 81       	ldd	r24, Z+2	; 0x02
    1186:	93 81       	ldd	r25, Z+3	; 0x03
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	3f ef       	ldi	r19, 0xFF	; 255
    118c:	4f e7       	ldi	r20, 0x7F	; 127
    118e:	57 e4       	ldi	r21, 0x47	; 71
    1190:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__gtsf2>
    1194:	18 16       	cp	r1, r24
    1196:	0c f0       	brlt	.+2      	; 0x119a <lcd_set_4bit+0x3b8>
    1198:	43 c0       	rjmp	.+134    	; 0x1220 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    119a:	fe 01       	movw	r30, r28
    119c:	ef 5a       	subi	r30, 0xAF	; 175
    119e:	ff 4f       	sbci	r31, 0xFF	; 255
    11a0:	60 81       	ld	r22, Z
    11a2:	71 81       	ldd	r23, Z+1	; 0x01
    11a4:	82 81       	ldd	r24, Z+2	; 0x02
    11a6:	93 81       	ldd	r25, Z+3	; 0x03
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e2       	ldi	r20, 0x20	; 32
    11ae:	51 e4       	ldi	r21, 0x41	; 65
    11b0:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	8e 01       	movw	r16, r28
    11ba:	05 5b       	subi	r16, 0xB5	; 181
    11bc:	1f 4f       	sbci	r17, 0xFF	; 255
    11be:	bc 01       	movw	r22, r24
    11c0:	cd 01       	movw	r24, r26
    11c2:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	f8 01       	movw	r30, r16
    11cc:	91 83       	std	Z+1, r25	; 0x01
    11ce:	80 83       	st	Z, r24
    11d0:	1f c0       	rjmp	.+62     	; 0x1210 <lcd_set_4bit+0x42e>
    11d2:	fe 01       	movw	r30, r28
    11d4:	e7 5b       	subi	r30, 0xB7	; 183
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
    11d8:	80 e7       	ldi	r24, 0x70	; 112
    11da:	91 e0       	ldi	r25, 0x01	; 1
    11dc:	91 83       	std	Z+1, r25	; 0x01
    11de:	80 83       	st	Z, r24
    11e0:	fe 01       	movw	r30, r28
    11e2:	e7 5b       	subi	r30, 0xB7	; 183
    11e4:	ff 4f       	sbci	r31, 0xFF	; 255
    11e6:	80 81       	ld	r24, Z
    11e8:	91 81       	ldd	r25, Z+1	; 0x01
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	f1 f7       	brne	.-4      	; 0x11ea <lcd_set_4bit+0x408>
    11ee:	fe 01       	movw	r30, r28
    11f0:	e7 5b       	subi	r30, 0xB7	; 183
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	91 83       	std	Z+1, r25	; 0x01
    11f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f8:	de 01       	movw	r26, r28
    11fa:	a5 5b       	subi	r26, 0xB5	; 181
    11fc:	bf 4f       	sbci	r27, 0xFF	; 255
    11fe:	fe 01       	movw	r30, r28
    1200:	e5 5b       	subi	r30, 0xB5	; 181
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	80 81       	ld	r24, Z
    1206:	91 81       	ldd	r25, Z+1	; 0x01
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	11 96       	adiw	r26, 0x01	; 1
    120c:	9c 93       	st	X, r25
    120e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1210:	fe 01       	movw	r30, r28
    1212:	e5 5b       	subi	r30, 0xB5	; 181
    1214:	ff 4f       	sbci	r31, 0xFF	; 255
    1216:	80 81       	ld	r24, Z
    1218:	91 81       	ldd	r25, Z+1	; 0x01
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	d1 f6       	brne	.-76     	; 0x11d2 <lcd_set_4bit+0x3f0>
    121e:	27 c0       	rjmp	.+78     	; 0x126e <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1220:	8e 01       	movw	r16, r28
    1222:	05 5b       	subi	r16, 0xB5	; 181
    1224:	1f 4f       	sbci	r17, 0xFF	; 255
    1226:	fe 01       	movw	r30, r28
    1228:	e3 5b       	subi	r30, 0xB3	; 179
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	60 81       	ld	r22, Z
    122e:	71 81       	ldd	r23, Z+1	; 0x01
    1230:	82 81       	ldd	r24, Z+2	; 0x02
    1232:	93 81       	ldd	r25, Z+3	; 0x03
    1234:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	f8 01       	movw	r30, r16
    123e:	91 83       	std	Z+1, r25	; 0x01
    1240:	80 83       	st	Z, r24
    1242:	de 01       	movw	r26, r28
    1244:	a9 5b       	subi	r26, 0xB9	; 185
    1246:	bf 4f       	sbci	r27, 0xFF	; 255
    1248:	fe 01       	movw	r30, r28
    124a:	e5 5b       	subi	r30, 0xB5	; 181
    124c:	ff 4f       	sbci	r31, 0xFF	; 255
    124e:	80 81       	ld	r24, Z
    1250:	91 81       	ldd	r25, Z+1	; 0x01
    1252:	8d 93       	st	X+, r24
    1254:	9c 93       	st	X, r25
    1256:	fe 01       	movw	r30, r28
    1258:	e9 5b       	subi	r30, 0xB9	; 185
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	80 81       	ld	r24, Z
    125e:	91 81       	ldd	r25, Z+1	; 0x01
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <lcd_set_4bit+0x47e>
    1264:	fe 01       	movw	r30, r28
    1266:	e9 5b       	subi	r30, 0xB9	; 185
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	91 83       	std	Z+1, r25	; 0x01
    126c:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    126e:	a8 e2       	ldi	r26, 0x28	; 40
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e8 e2       	ldi	r30, 0x28	; 40
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	8e 7f       	andi	r24, 0xFE	; 254
    127a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    127c:	a8 e2       	ldi	r26, 0x28	; 40
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e8 e2       	ldi	r30, 0x28	; 40
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	8d 7f       	andi	r24, 0xFD	; 253
    1288:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
    128a:	e8 e2       	ldi	r30, 0x28	; 40
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 e3       	ldi	r24, 0x30	; 48
    1290:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    1292:	a8 e2       	ldi	r26, 0x28	; 40
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e8 e2       	ldi	r30, 0x28	; 40
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	84 60       	ori	r24, 0x04	; 4
    129e:	8c 93       	st	X, r24
    12a0:	fe 01       	movw	r30, r28
    12a2:	ed 5b       	subi	r30, 0xBD	; 189
    12a4:	ff 4f       	sbci	r31, 0xFF	; 255
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	a0 ea       	ldi	r26, 0xA0	; 160
    12ac:	b0 e4       	ldi	r27, 0x40	; 64
    12ae:	80 83       	st	Z, r24
    12b0:	91 83       	std	Z+1, r25	; 0x01
    12b2:	a2 83       	std	Z+2, r26	; 0x02
    12b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b6:	8e 01       	movw	r16, r28
    12b8:	01 5c       	subi	r16, 0xC1	; 193
    12ba:	1f 4f       	sbci	r17, 0xFF	; 255
    12bc:	fe 01       	movw	r30, r28
    12be:	ed 5b       	subi	r30, 0xBD	; 189
    12c0:	ff 4f       	sbci	r31, 0xFF	; 255
    12c2:	60 81       	ld	r22, Z
    12c4:	71 81       	ldd	r23, Z+1	; 0x01
    12c6:	82 81       	ldd	r24, Z+2	; 0x02
    12c8:	93 81       	ldd	r25, Z+3	; 0x03
    12ca:	26 e6       	ldi	r18, 0x66	; 102
    12cc:	36 e6       	ldi	r19, 0x66	; 102
    12ce:	46 e6       	ldi	r20, 0x66	; 102
    12d0:	55 e4       	ldi	r21, 0x45	; 69
    12d2:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	f8 01       	movw	r30, r16
    12dc:	80 83       	st	Z, r24
    12de:	91 83       	std	Z+1, r25	; 0x01
    12e0:	a2 83       	std	Z+2, r26	; 0x02
    12e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12e4:	fe 01       	movw	r30, r28
    12e6:	ff 96       	adiw	r30, 0x3f	; 63
    12e8:	60 81       	ld	r22, Z
    12ea:	71 81       	ldd	r23, Z+1	; 0x01
    12ec:	82 81       	ldd	r24, Z+2	; 0x02
    12ee:	93 81       	ldd	r25, Z+3	; 0x03
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 e8       	ldi	r20, 0x80	; 128
    12f6:	5f e3       	ldi	r21, 0x3F	; 63
    12f8:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__ltsf2>
    12fc:	88 23       	and	r24, r24
    12fe:	2c f4       	brge	.+10     	; 0x130a <lcd_set_4bit+0x528>
		__ticks = 1;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	9e af       	std	Y+62, r25	; 0x3e
    1306:	8d af       	std	Y+61, r24	; 0x3d
    1308:	46 c0       	rjmp	.+140    	; 0x1396 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
    130a:	fe 01       	movw	r30, r28
    130c:	ff 96       	adiw	r30, 0x3f	; 63
    130e:	60 81       	ld	r22, Z
    1310:	71 81       	ldd	r23, Z+1	; 0x01
    1312:	82 81       	ldd	r24, Z+2	; 0x02
    1314:	93 81       	ldd	r25, Z+3	; 0x03
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	3f ef       	ldi	r19, 0xFF	; 255
    131a:	4f e7       	ldi	r20, 0x7F	; 127
    131c:	57 e4       	ldi	r21, 0x47	; 71
    131e:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__gtsf2>
    1322:	18 16       	cp	r1, r24
    1324:	64 f5       	brge	.+88     	; 0x137e <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1326:	fe 01       	movw	r30, r28
    1328:	ed 5b       	subi	r30, 0xBD	; 189
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	60 81       	ld	r22, Z
    132e:	71 81       	ldd	r23, Z+1	; 0x01
    1330:	82 81       	ldd	r24, Z+2	; 0x02
    1332:	93 81       	ldd	r25, Z+3	; 0x03
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	40 e2       	ldi	r20, 0x20	; 32
    133a:	51 e4       	ldi	r21, 0x41	; 65
    133c:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	bc 01       	movw	r22, r24
    1346:	cd 01       	movw	r24, r26
    1348:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	9e af       	std	Y+62, r25	; 0x3e
    1352:	8d af       	std	Y+61, r24	; 0x3d
    1354:	0f c0       	rjmp	.+30     	; 0x1374 <lcd_set_4bit+0x592>
    1356:	80 e7       	ldi	r24, 0x70	; 112
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	9c af       	std	Y+60, r25	; 0x3c
    135c:	8b af       	std	Y+59, r24	; 0x3b
    135e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1360:	9c ad       	ldd	r25, Y+60	; 0x3c
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <lcd_set_4bit+0x580>
    1366:	9c af       	std	Y+60, r25	; 0x3c
    1368:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136a:	8d ad       	ldd	r24, Y+61	; 0x3d
    136c:	9e ad       	ldd	r25, Y+62	; 0x3e
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	9e af       	std	Y+62, r25	; 0x3e
    1372:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1374:	8d ad       	ldd	r24, Y+61	; 0x3d
    1376:	9e ad       	ldd	r25, Y+62	; 0x3e
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	69 f7       	brne	.-38     	; 0x1356 <lcd_set_4bit+0x574>
    137c:	16 c0       	rjmp	.+44     	; 0x13aa <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    137e:	fe 01       	movw	r30, r28
    1380:	ff 96       	adiw	r30, 0x3f	; 63
    1382:	60 81       	ld	r22, Z
    1384:	71 81       	ldd	r23, Z+1	; 0x01
    1386:	82 81       	ldd	r24, Z+2	; 0x02
    1388:	93 81       	ldd	r25, Z+3	; 0x03
    138a:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	9e af       	std	Y+62, r25	; 0x3e
    1394:	8d af       	std	Y+61, r24	; 0x3d
    1396:	8d ad       	ldd	r24, Y+61	; 0x3d
    1398:	9e ad       	ldd	r25, Y+62	; 0x3e
    139a:	9a af       	std	Y+58, r25	; 0x3a
    139c:	89 af       	std	Y+57, r24	; 0x39
    139e:	89 ad       	ldd	r24, Y+57	; 0x39
    13a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	f1 f7       	brne	.-4      	; 0x13a2 <lcd_set_4bit+0x5c0>
    13a6:	9a af       	std	Y+58, r25	; 0x3a
    13a8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    13aa:	a8 e2       	ldi	r26, 0x28	; 40
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e8 e2       	ldi	r30, 0x28	; 40
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	8b 7f       	andi	r24, 0xFB	; 251
    13b6:	8c 93       	st	X, r24
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	a0 e8       	ldi	r26, 0x80	; 128
    13be:	bf e3       	ldi	r27, 0x3F	; 63
    13c0:	8d ab       	std	Y+53, r24	; 0x35
    13c2:	9e ab       	std	Y+54, r25	; 0x36
    13c4:	af ab       	std	Y+55, r26	; 0x37
    13c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c8:	6d a9       	ldd	r22, Y+53	; 0x35
    13ca:	7e a9       	ldd	r23, Y+54	; 0x36
    13cc:	8f a9       	ldd	r24, Y+55	; 0x37
    13ce:	98 ad       	ldd	r25, Y+56	; 0x38
    13d0:	26 e6       	ldi	r18, 0x66	; 102
    13d2:	36 e6       	ldi	r19, 0x66	; 102
    13d4:	46 e6       	ldi	r20, 0x66	; 102
    13d6:	55 e4       	ldi	r21, 0x45	; 69
    13d8:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	89 ab       	std	Y+49, r24	; 0x31
    13e2:	9a ab       	std	Y+50, r25	; 0x32
    13e4:	ab ab       	std	Y+51, r26	; 0x33
    13e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13e8:	69 a9       	ldd	r22, Y+49	; 0x31
    13ea:	7a a9       	ldd	r23, Y+50	; 0x32
    13ec:	8b a9       	ldd	r24, Y+51	; 0x33
    13ee:	9c a9       	ldd	r25, Y+52	; 0x34
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e8       	ldi	r20, 0x80	; 128
    13f6:	5f e3       	ldi	r21, 0x3F	; 63
    13f8:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__ltsf2>
    13fc:	88 23       	and	r24, r24
    13fe:	2c f4       	brge	.+10     	; 0x140a <lcd_set_4bit+0x628>
		__ticks = 1;
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	98 ab       	std	Y+48, r25	; 0x30
    1406:	8f a7       	std	Y+47, r24	; 0x2f
    1408:	3f c0       	rjmp	.+126    	; 0x1488 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
    140a:	69 a9       	ldd	r22, Y+49	; 0x31
    140c:	7a a9       	ldd	r23, Y+50	; 0x32
    140e:	8b a9       	ldd	r24, Y+51	; 0x33
    1410:	9c a9       	ldd	r25, Y+52	; 0x34
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	3f ef       	ldi	r19, 0xFF	; 255
    1416:	4f e7       	ldi	r20, 0x7F	; 127
    1418:	57 e4       	ldi	r21, 0x47	; 71
    141a:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__gtsf2>
    141e:	18 16       	cp	r1, r24
    1420:	4c f5       	brge	.+82     	; 0x1474 <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1422:	6d a9       	ldd	r22, Y+53	; 0x35
    1424:	7e a9       	ldd	r23, Y+54	; 0x36
    1426:	8f a9       	ldd	r24, Y+55	; 0x37
    1428:	98 ad       	ldd	r25, Y+56	; 0x38
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e2       	ldi	r20, 0x20	; 32
    1430:	51 e4       	ldi	r21, 0x41	; 65
    1432:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	bc 01       	movw	r22, r24
    143c:	cd 01       	movw	r24, r26
    143e:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	98 ab       	std	Y+48, r25	; 0x30
    1448:	8f a7       	std	Y+47, r24	; 0x2f
    144a:	0f c0       	rjmp	.+30     	; 0x146a <lcd_set_4bit+0x688>
    144c:	80 e7       	ldi	r24, 0x70	; 112
    144e:	91 e0       	ldi	r25, 0x01	; 1
    1450:	9e a7       	std	Y+46, r25	; 0x2e
    1452:	8d a7       	std	Y+45, r24	; 0x2d
    1454:	8d a5       	ldd	r24, Y+45	; 0x2d
    1456:	9e a5       	ldd	r25, Y+46	; 0x2e
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	f1 f7       	brne	.-4      	; 0x1458 <lcd_set_4bit+0x676>
    145c:	9e a7       	std	Y+46, r25	; 0x2e
    145e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1460:	8f a5       	ldd	r24, Y+47	; 0x2f
    1462:	98 a9       	ldd	r25, Y+48	; 0x30
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	98 ab       	std	Y+48, r25	; 0x30
    1468:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146a:	8f a5       	ldd	r24, Y+47	; 0x2f
    146c:	98 a9       	ldd	r25, Y+48	; 0x30
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	69 f7       	brne	.-38     	; 0x144c <lcd_set_4bit+0x66a>
    1472:	14 c0       	rjmp	.+40     	; 0x149c <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1474:	69 a9       	ldd	r22, Y+49	; 0x31
    1476:	7a a9       	ldd	r23, Y+50	; 0x32
    1478:	8b a9       	ldd	r24, Y+51	; 0x33
    147a:	9c a9       	ldd	r25, Y+52	; 0x34
    147c:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	98 ab       	std	Y+48, r25	; 0x30
    1486:	8f a7       	std	Y+47, r24	; 0x2f
    1488:	8f a5       	ldd	r24, Y+47	; 0x2f
    148a:	98 a9       	ldd	r25, Y+48	; 0x30
    148c:	9c a7       	std	Y+44, r25	; 0x2c
    148e:	8b a7       	std	Y+43, r24	; 0x2b
    1490:	8b a5       	ldd	r24, Y+43	; 0x2b
    1492:	9c a5       	ldd	r25, Y+44	; 0x2c
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <lcd_set_4bit+0x6b2>
    1498:	9c a7       	std	Y+44, r25	; 0x2c
    149a:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    149c:	a8 e2       	ldi	r26, 0x28	; 40
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e8 e2       	ldi	r30, 0x28	; 40
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8e 7f       	andi	r24, 0xFE	; 254
    14a8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    14aa:	a8 e2       	ldi	r26, 0x28	; 40
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e8 e2       	ldi	r30, 0x28	; 40
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8d 7f       	andi	r24, 0xFD	; 253
    14b6:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
    14b8:	e8 e2       	ldi	r30, 0x28	; 40
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 e3       	ldi	r24, 0x30	; 48
    14be:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    14c0:	a8 e2       	ldi	r26, 0x28	; 40
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e8 e2       	ldi	r30, 0x28	; 40
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	84 60       	ori	r24, 0x04	; 4
    14cc:	8c 93       	st	X, r24
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a0 ea       	ldi	r26, 0xA0	; 160
    14d4:	b0 e4       	ldi	r27, 0x40	; 64
    14d6:	8f a3       	std	Y+39, r24	; 0x27
    14d8:	98 a7       	std	Y+40, r25	; 0x28
    14da:	a9 a7       	std	Y+41, r26	; 0x29
    14dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14de:	6f a1       	ldd	r22, Y+39	; 0x27
    14e0:	78 a5       	ldd	r23, Y+40	; 0x28
    14e2:	89 a5       	ldd	r24, Y+41	; 0x29
    14e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    14e6:	26 e6       	ldi	r18, 0x66	; 102
    14e8:	36 e6       	ldi	r19, 0x66	; 102
    14ea:	46 e6       	ldi	r20, 0x66	; 102
    14ec:	55 e4       	ldi	r21, 0x45	; 69
    14ee:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	8b a3       	std	Y+35, r24	; 0x23
    14f8:	9c a3       	std	Y+36, r25	; 0x24
    14fa:	ad a3       	std	Y+37, r26	; 0x25
    14fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1500:	7c a1       	ldd	r23, Y+36	; 0x24
    1502:	8d a1       	ldd	r24, Y+37	; 0x25
    1504:	9e a1       	ldd	r25, Y+38	; 0x26
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e8       	ldi	r20, 0x80	; 128
    150c:	5f e3       	ldi	r21, 0x3F	; 63
    150e:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__ltsf2>
    1512:	88 23       	and	r24, r24
    1514:	2c f4       	brge	.+10     	; 0x1520 <lcd_set_4bit+0x73e>
		__ticks = 1;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9a a3       	std	Y+34, r25	; 0x22
    151c:	89 a3       	std	Y+33, r24	; 0x21
    151e:	3f c0       	rjmp	.+126    	; 0x159e <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
    1520:	6b a1       	ldd	r22, Y+35	; 0x23
    1522:	7c a1       	ldd	r23, Y+36	; 0x24
    1524:	8d a1       	ldd	r24, Y+37	; 0x25
    1526:	9e a1       	ldd	r25, Y+38	; 0x26
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	3f ef       	ldi	r19, 0xFF	; 255
    152c:	4f e7       	ldi	r20, 0x7F	; 127
    152e:	57 e4       	ldi	r21, 0x47	; 71
    1530:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__gtsf2>
    1534:	18 16       	cp	r1, r24
    1536:	4c f5       	brge	.+82     	; 0x158a <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1538:	6f a1       	ldd	r22, Y+39	; 0x27
    153a:	78 a5       	ldd	r23, Y+40	; 0x28
    153c:	89 a5       	ldd	r24, Y+41	; 0x29
    153e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e2       	ldi	r20, 0x20	; 32
    1546:	51 e4       	ldi	r21, 0x41	; 65
    1548:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	bc 01       	movw	r22, r24
    1552:	cd 01       	movw	r24, r26
    1554:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	9a a3       	std	Y+34, r25	; 0x22
    155e:	89 a3       	std	Y+33, r24	; 0x21
    1560:	0f c0       	rjmp	.+30     	; 0x1580 <lcd_set_4bit+0x79e>
    1562:	80 e7       	ldi	r24, 0x70	; 112
    1564:	91 e0       	ldi	r25, 0x01	; 1
    1566:	98 a3       	std	Y+32, r25	; 0x20
    1568:	8f 8f       	std	Y+31, r24	; 0x1f
    156a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    156c:	98 a1       	ldd	r25, Y+32	; 0x20
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <lcd_set_4bit+0x78c>
    1572:	98 a3       	std	Y+32, r25	; 0x20
    1574:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1576:	89 a1       	ldd	r24, Y+33	; 0x21
    1578:	9a a1       	ldd	r25, Y+34	; 0x22
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	9a a3       	std	Y+34, r25	; 0x22
    157e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1580:	89 a1       	ldd	r24, Y+33	; 0x21
    1582:	9a a1       	ldd	r25, Y+34	; 0x22
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	69 f7       	brne	.-38     	; 0x1562 <lcd_set_4bit+0x780>
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158a:	6b a1       	ldd	r22, Y+35	; 0x23
    158c:	7c a1       	ldd	r23, Y+36	; 0x24
    158e:	8d a1       	ldd	r24, Y+37	; 0x25
    1590:	9e a1       	ldd	r25, Y+38	; 0x26
    1592:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	9a a3       	std	Y+34, r25	; 0x22
    159c:	89 a3       	std	Y+33, r24	; 0x21
    159e:	89 a1       	ldd	r24, Y+33	; 0x21
    15a0:	9a a1       	ldd	r25, Y+34	; 0x22
    15a2:	9e 8f       	std	Y+30, r25	; 0x1e
    15a4:	8d 8f       	std	Y+29, r24	; 0x1d
    15a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <lcd_set_4bit+0x7c8>
    15ae:	9e 8f       	std	Y+30, r25	; 0x1e
    15b0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    15b2:	a8 e2       	ldi	r26, 0x28	; 40
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e8 e2       	ldi	r30, 0x28	; 40
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	8b 7f       	andi	r24, 0xFB	; 251
    15be:	8c 93       	st	X, r24
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	a0 e8       	ldi	r26, 0x80	; 128
    15c6:	bf e3       	ldi	r27, 0x3F	; 63
    15c8:	89 8f       	std	Y+25, r24	; 0x19
    15ca:	9a 8f       	std	Y+26, r25	; 0x1a
    15cc:	ab 8f       	std	Y+27, r26	; 0x1b
    15ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d0:	69 8d       	ldd	r22, Y+25	; 0x19
    15d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15d8:	26 e6       	ldi	r18, 0x66	; 102
    15da:	36 e6       	ldi	r19, 0x66	; 102
    15dc:	46 e6       	ldi	r20, 0x66	; 102
    15de:	55 e4       	ldi	r21, 0x45	; 69
    15e0:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	8d 8b       	std	Y+21, r24	; 0x15
    15ea:	9e 8b       	std	Y+22, r25	; 0x16
    15ec:	af 8b       	std	Y+23, r26	; 0x17
    15ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15f0:	6d 89       	ldd	r22, Y+21	; 0x15
    15f2:	7e 89       	ldd	r23, Y+22	; 0x16
    15f4:	8f 89       	ldd	r24, Y+23	; 0x17
    15f6:	98 8d       	ldd	r25, Y+24	; 0x18
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 e8       	ldi	r20, 0x80	; 128
    15fe:	5f e3       	ldi	r21, 0x3F	; 63
    1600:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__ltsf2>
    1604:	88 23       	and	r24, r24
    1606:	2c f4       	brge	.+10     	; 0x1612 <lcd_set_4bit+0x830>
		__ticks = 1;
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	9c 8b       	std	Y+20, r25	; 0x14
    160e:	8b 8b       	std	Y+19, r24	; 0x13
    1610:	3f c0       	rjmp	.+126    	; 0x1690 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
    1612:	6d 89       	ldd	r22, Y+21	; 0x15
    1614:	7e 89       	ldd	r23, Y+22	; 0x16
    1616:	8f 89       	ldd	r24, Y+23	; 0x17
    1618:	98 8d       	ldd	r25, Y+24	; 0x18
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	3f ef       	ldi	r19, 0xFF	; 255
    161e:	4f e7       	ldi	r20, 0x7F	; 127
    1620:	57 e4       	ldi	r21, 0x47	; 71
    1622:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__gtsf2>
    1626:	18 16       	cp	r1, r24
    1628:	4c f5       	brge	.+82     	; 0x167c <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162a:	69 8d       	ldd	r22, Y+25	; 0x19
    162c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    162e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1630:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e2       	ldi	r20, 0x20	; 32
    1638:	51 e4       	ldi	r21, 0x41	; 65
    163a:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	bc 01       	movw	r22, r24
    1644:	cd 01       	movw	r24, r26
    1646:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	9c 8b       	std	Y+20, r25	; 0x14
    1650:	8b 8b       	std	Y+19, r24	; 0x13
    1652:	0f c0       	rjmp	.+30     	; 0x1672 <lcd_set_4bit+0x890>
    1654:	80 e7       	ldi	r24, 0x70	; 112
    1656:	91 e0       	ldi	r25, 0x01	; 1
    1658:	9a 8b       	std	Y+18, r25	; 0x12
    165a:	89 8b       	std	Y+17, r24	; 0x11
    165c:	89 89       	ldd	r24, Y+17	; 0x11
    165e:	9a 89       	ldd	r25, Y+18	; 0x12
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	f1 f7       	brne	.-4      	; 0x1660 <lcd_set_4bit+0x87e>
    1664:	9a 8b       	std	Y+18, r25	; 0x12
    1666:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1668:	8b 89       	ldd	r24, Y+19	; 0x13
    166a:	9c 89       	ldd	r25, Y+20	; 0x14
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	9c 8b       	std	Y+20, r25	; 0x14
    1670:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1672:	8b 89       	ldd	r24, Y+19	; 0x13
    1674:	9c 89       	ldd	r25, Y+20	; 0x14
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	69 f7       	brne	.-38     	; 0x1654 <lcd_set_4bit+0x872>
    167a:	14 c0       	rjmp	.+40     	; 0x16a4 <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167c:	6d 89       	ldd	r22, Y+21	; 0x15
    167e:	7e 89       	ldd	r23, Y+22	; 0x16
    1680:	8f 89       	ldd	r24, Y+23	; 0x17
    1682:	98 8d       	ldd	r25, Y+24	; 0x18
    1684:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	9c 8b       	std	Y+20, r25	; 0x14
    168e:	8b 8b       	std	Y+19, r24	; 0x13
    1690:	8b 89       	ldd	r24, Y+19	; 0x13
    1692:	9c 89       	ldd	r25, Y+20	; 0x14
    1694:	98 8b       	std	Y+16, r25	; 0x10
    1696:	8f 87       	std	Y+15, r24	; 0x0f
    1698:	8f 85       	ldd	r24, Y+15	; 0x0f
    169a:	98 89       	ldd	r25, Y+16	; 0x10
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	f1 f7       	brne	.-4      	; 0x169c <lcd_set_4bit+0x8ba>
    16a0:	98 8b       	std	Y+16, r25	; 0x10
    16a2:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    16a4:	a8 e2       	ldi	r26, 0x28	; 40
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e8 e2       	ldi	r30, 0x28	; 40
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	8e 7f       	andi	r24, 0xFE	; 254
    16b0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    16b2:	a8 e2       	ldi	r26, 0x28	; 40
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e8 e2       	ldi	r30, 0x28	; 40
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	8d 7f       	andi	r24, 0xFD	; 253
    16be:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
    16c0:	e8 e2       	ldi	r30, 0x28	; 40
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 e2       	ldi	r24, 0x20	; 32
    16c6:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    16c8:	a8 e2       	ldi	r26, 0x28	; 40
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e8 e2       	ldi	r30, 0x28	; 40
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	84 60       	ori	r24, 0x04	; 4
    16d4:	8c 93       	st	X, r24
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	a0 ea       	ldi	r26, 0xA0	; 160
    16dc:	b0 e4       	ldi	r27, 0x40	; 64
    16de:	8b 87       	std	Y+11, r24	; 0x0b
    16e0:	9c 87       	std	Y+12, r25	; 0x0c
    16e2:	ad 87       	std	Y+13, r26	; 0x0d
    16e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ee:	26 e6       	ldi	r18, 0x66	; 102
    16f0:	36 e6       	ldi	r19, 0x66	; 102
    16f2:	46 e6       	ldi	r20, 0x66	; 102
    16f4:	55 e4       	ldi	r21, 0x45	; 69
    16f6:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	8f 83       	std	Y+7, r24	; 0x07
    1700:	98 87       	std	Y+8, r25	; 0x08
    1702:	a9 87       	std	Y+9, r26	; 0x09
    1704:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1706:	6f 81       	ldd	r22, Y+7	; 0x07
    1708:	78 85       	ldd	r23, Y+8	; 0x08
    170a:	89 85       	ldd	r24, Y+9	; 0x09
    170c:	9a 85       	ldd	r25, Y+10	; 0x0a
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e8       	ldi	r20, 0x80	; 128
    1714:	5f e3       	ldi	r21, 0x3F	; 63
    1716:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__ltsf2>
    171a:	88 23       	and	r24, r24
    171c:	2c f4       	brge	.+10     	; 0x1728 <lcd_set_4bit+0x946>
		__ticks = 1;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	9e 83       	std	Y+6, r25	; 0x06
    1724:	8d 83       	std	Y+5, r24	; 0x05
    1726:	3f c0       	rjmp	.+126    	; 0x17a6 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
    1728:	6f 81       	ldd	r22, Y+7	; 0x07
    172a:	78 85       	ldd	r23, Y+8	; 0x08
    172c:	89 85       	ldd	r24, Y+9	; 0x09
    172e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	3f ef       	ldi	r19, 0xFF	; 255
    1734:	4f e7       	ldi	r20, 0x7F	; 127
    1736:	57 e4       	ldi	r21, 0x47	; 71
    1738:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__gtsf2>
    173c:	18 16       	cp	r1, r24
    173e:	4c f5       	brge	.+82     	; 0x1792 <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1740:	6b 85       	ldd	r22, Y+11	; 0x0b
    1742:	7c 85       	ldd	r23, Y+12	; 0x0c
    1744:	8d 85       	ldd	r24, Y+13	; 0x0d
    1746:	9e 85       	ldd	r25, Y+14	; 0x0e
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e2       	ldi	r20, 0x20	; 32
    174e:	51 e4       	ldi	r21, 0x41	; 65
    1750:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	9e 83       	std	Y+6, r25	; 0x06
    1766:	8d 83       	std	Y+5, r24	; 0x05
    1768:	0f c0       	rjmp	.+30     	; 0x1788 <lcd_set_4bit+0x9a6>
    176a:	80 e7       	ldi	r24, 0x70	; 112
    176c:	91 e0       	ldi	r25, 0x01	; 1
    176e:	9c 83       	std	Y+4, r25	; 0x04
    1770:	8b 83       	std	Y+3, r24	; 0x03
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	9c 81       	ldd	r25, Y+4	; 0x04
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <lcd_set_4bit+0x994>
    177a:	9c 83       	std	Y+4, r25	; 0x04
    177c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177e:	8d 81       	ldd	r24, Y+5	; 0x05
    1780:	9e 81       	ldd	r25, Y+6	; 0x06
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	9e 83       	std	Y+6, r25	; 0x06
    1786:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1788:	8d 81       	ldd	r24, Y+5	; 0x05
    178a:	9e 81       	ldd	r25, Y+6	; 0x06
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	69 f7       	brne	.-38     	; 0x176a <lcd_set_4bit+0x988>
    1790:	14 c0       	rjmp	.+40     	; 0x17ba <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1792:	6f 81       	ldd	r22, Y+7	; 0x07
    1794:	78 85       	ldd	r23, Y+8	; 0x08
    1796:	89 85       	ldd	r24, Y+9	; 0x09
    1798:	9a 85       	ldd	r25, Y+10	; 0x0a
    179a:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	9e 83       	std	Y+6, r25	; 0x06
    17a4:	8d 83       	std	Y+5, r24	; 0x05
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
    17a8:	9e 81       	ldd	r25, Y+6	; 0x06
    17aa:	9a 83       	std	Y+2, r25	; 0x02
    17ac:	89 83       	std	Y+1, r24	; 0x01
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	9a 81       	ldd	r25, Y+2	; 0x02
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <lcd_set_4bit+0x9d0>
    17b6:	9a 83       	std	Y+2, r25	; 0x02
    17b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    17ba:	a8 e2       	ldi	r26, 0x28	; 40
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e8 e2       	ldi	r30, 0x28	; 40
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	8b 7f       	andi	r24, 0xFB	; 251
    17c6:	8c 93       	st	X, r24


}
    17c8:	c0 59       	subi	r28, 0x90	; 144
    17ca:	df 4f       	sbci	r29, 0xFF	; 255
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	1f 91       	pop	r17
    17dc:	0f 91       	pop	r16
    17de:	08 95       	ret

000017e0 <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	2e 97       	sbiw	r28, 0x0e	; 14
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
	lcd_set_4bit();
    17f4:	0e 94 f1 06 	call	0xde2	; 0xde2 <lcd_set_4bit>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a0 e8       	ldi	r26, 0x80	; 128
    17fe:	bf e3       	ldi	r27, 0x3F	; 63
    1800:	8b 87       	std	Y+11, r24	; 0x0b
    1802:	9c 87       	std	Y+12, r25	; 0x0c
    1804:	ad 87       	std	Y+13, r26	; 0x0d
    1806:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1808:	6b 85       	ldd	r22, Y+11	; 0x0b
    180a:	7c 85       	ldd	r23, Y+12	; 0x0c
    180c:	8d 85       	ldd	r24, Y+13	; 0x0d
    180e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1810:	26 e6       	ldi	r18, 0x66	; 102
    1812:	36 e6       	ldi	r19, 0x66	; 102
    1814:	46 e6       	ldi	r20, 0x66	; 102
    1816:	55 e4       	ldi	r21, 0x45	; 69
    1818:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	8f 83       	std	Y+7, r24	; 0x07
    1822:	98 87       	std	Y+8, r25	; 0x08
    1824:	a9 87       	std	Y+9, r26	; 0x09
    1826:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1828:	6f 81       	ldd	r22, Y+7	; 0x07
    182a:	78 85       	ldd	r23, Y+8	; 0x08
    182c:	89 85       	ldd	r24, Y+9	; 0x09
    182e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e8       	ldi	r20, 0x80	; 128
    1836:	5f e3       	ldi	r21, 0x3F	; 63
    1838:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__ltsf2>
    183c:	88 23       	and	r24, r24
    183e:	2c f4       	brge	.+10     	; 0x184a <lcd_init+0x6a>
		__ticks = 1;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9e 83       	std	Y+6, r25	; 0x06
    1846:	8d 83       	std	Y+5, r24	; 0x05
    1848:	3f c0       	rjmp	.+126    	; 0x18c8 <lcd_init+0xe8>
	else if (__tmp > 65535)
    184a:	6f 81       	ldd	r22, Y+7	; 0x07
    184c:	78 85       	ldd	r23, Y+8	; 0x08
    184e:	89 85       	ldd	r24, Y+9	; 0x09
    1850:	9a 85       	ldd	r25, Y+10	; 0x0a
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	3f ef       	ldi	r19, 0xFF	; 255
    1856:	4f e7       	ldi	r20, 0x7F	; 127
    1858:	57 e4       	ldi	r21, 0x47	; 71
    185a:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__gtsf2>
    185e:	18 16       	cp	r1, r24
    1860:	4c f5       	brge	.+82     	; 0x18b4 <lcd_init+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1862:	6b 85       	ldd	r22, Y+11	; 0x0b
    1864:	7c 85       	ldd	r23, Y+12	; 0x0c
    1866:	8d 85       	ldd	r24, Y+13	; 0x0d
    1868:	9e 85       	ldd	r25, Y+14	; 0x0e
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e2       	ldi	r20, 0x20	; 32
    1870:	51 e4       	ldi	r21, 0x41	; 65
    1872:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9e 83       	std	Y+6, r25	; 0x06
    1888:	8d 83       	std	Y+5, r24	; 0x05
    188a:	0f c0       	rjmp	.+30     	; 0x18aa <lcd_init+0xca>
    188c:	80 e7       	ldi	r24, 0x70	; 112
    188e:	91 e0       	ldi	r25, 0x01	; 1
    1890:	9c 83       	std	Y+4, r25	; 0x04
    1892:	8b 83       	std	Y+3, r24	; 0x03
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	9c 81       	ldd	r25, Y+4	; 0x04
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <lcd_init+0xb8>
    189c:	9c 83       	std	Y+4, r25	; 0x04
    189e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a0:	8d 81       	ldd	r24, Y+5	; 0x05
    18a2:	9e 81       	ldd	r25, Y+6	; 0x06
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	9e 81       	ldd	r25, Y+6	; 0x06
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	69 f7       	brne	.-38     	; 0x188c <lcd_init+0xac>
    18b2:	14 c0       	rjmp	.+40     	; 0x18dc <lcd_init+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b4:	6f 81       	ldd	r22, Y+7	; 0x07
    18b6:	78 85       	ldd	r23, Y+8	; 0x08
    18b8:	89 85       	ldd	r24, Y+9	; 0x09
    18ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    18bc:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	9e 83       	std	Y+6, r25	; 0x06
    18c6:	8d 83       	std	Y+5, r24	; 0x05
    18c8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ca:	9e 81       	ldd	r25, Y+6	; 0x06
    18cc:	9a 83       	std	Y+2, r25	; 0x02
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	9a 81       	ldd	r25, Y+2	; 0x02
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <lcd_init+0xf4>
    18d8:	9a 83       	std	Y+2, r25	; 0x02
    18da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
    18dc:	88 e2       	ldi	r24, 0x28	; 40
    18de:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_wr_command>
	lcd_wr_command(0x01);
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_wr_command>
	lcd_wr_command(0x06);
    18e8:	86 e0       	ldi	r24, 0x06	; 6
    18ea:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_wr_command>
	lcd_wr_command(0x0E);
    18ee:	8e e0       	ldi	r24, 0x0E	; 14
    18f0:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_wr_command>
	lcd_wr_command(0x80);
    18f4:	80 e8       	ldi	r24, 0x80	; 128
    18f6:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_wr_command>

}
    18fa:	2e 96       	adiw	r28, 0x0e	; 14
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <lcd_wr_command>:


//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	6e 97       	sbiw	r28, 0x1e	; 30
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
    1922:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1924:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
    1926:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1928:	80 7f       	andi	r24, 0xF0	; 240
    192a:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    192c:	a8 e2       	ldi	r26, 0x28	; 40
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e8 e2       	ldi	r30, 0x28	; 40
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	8f 70       	andi	r24, 0x0F	; 15
    1938:	8c 93       	st	X, r24
	lcd_port |= temp;
    193a:	a8 e2       	ldi	r26, 0x28	; 40
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e8 e2       	ldi	r30, 0x28	; 40
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	90 81       	ld	r25, Z
    1944:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1946:	89 2b       	or	r24, r25
    1948:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    194a:	a8 e2       	ldi	r26, 0x28	; 40
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e8 e2       	ldi	r30, 0x28	; 40
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	8e 7f       	andi	r24, 0xFE	; 254
    1956:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1958:	a8 e2       	ldi	r26, 0x28	; 40
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e8 e2       	ldi	r30, 0x28	; 40
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	8d 7f       	andi	r24, 0xFD	; 253
    1964:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1966:	a8 e2       	ldi	r26, 0x28	; 40
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e8 e2       	ldi	r30, 0x28	; 40
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	84 60       	ori	r24, 0x04	; 4
    1972:	8c 93       	st	X, r24
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	a0 ea       	ldi	r26, 0xA0	; 160
    197a:	b0 e4       	ldi	r27, 0x40	; 64
    197c:	89 8f       	std	Y+25, r24	; 0x19
    197e:	9a 8f       	std	Y+26, r25	; 0x1a
    1980:	ab 8f       	std	Y+27, r26	; 0x1b
    1982:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1984:	69 8d       	ldd	r22, Y+25	; 0x19
    1986:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1988:	8b 8d       	ldd	r24, Y+27	; 0x1b
    198a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    198c:	26 e6       	ldi	r18, 0x66	; 102
    198e:	36 e6       	ldi	r19, 0x66	; 102
    1990:	46 e6       	ldi	r20, 0x66	; 102
    1992:	55 e4       	ldi	r21, 0x45	; 69
    1994:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	8d 8b       	std	Y+21, r24	; 0x15
    199e:	9e 8b       	std	Y+22, r25	; 0x16
    19a0:	af 8b       	std	Y+23, r26	; 0x17
    19a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19a4:	6d 89       	ldd	r22, Y+21	; 0x15
    19a6:	7e 89       	ldd	r23, Y+22	; 0x16
    19a8:	8f 89       	ldd	r24, Y+23	; 0x17
    19aa:	98 8d       	ldd	r25, Y+24	; 0x18
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e8       	ldi	r20, 0x80	; 128
    19b2:	5f e3       	ldi	r21, 0x3F	; 63
    19b4:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__ltsf2>
    19b8:	88 23       	and	r24, r24
    19ba:	2c f4       	brge	.+10     	; 0x19c6 <lcd_wr_command+0xba>
		__ticks = 1;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	9c 8b       	std	Y+20, r25	; 0x14
    19c2:	8b 8b       	std	Y+19, r24	; 0x13
    19c4:	3f c0       	rjmp	.+126    	; 0x1a44 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
    19c6:	6d 89       	ldd	r22, Y+21	; 0x15
    19c8:	7e 89       	ldd	r23, Y+22	; 0x16
    19ca:	8f 89       	ldd	r24, Y+23	; 0x17
    19cc:	98 8d       	ldd	r25, Y+24	; 0x18
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	3f ef       	ldi	r19, 0xFF	; 255
    19d2:	4f e7       	ldi	r20, 0x7F	; 127
    19d4:	57 e4       	ldi	r21, 0x47	; 71
    19d6:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__gtsf2>
    19da:	18 16       	cp	r1, r24
    19dc:	4c f5       	brge	.+82     	; 0x1a30 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19de:	69 8d       	ldd	r22, Y+25	; 0x19
    19e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e2       	ldi	r20, 0x20	; 32
    19ec:	51 e4       	ldi	r21, 0x41	; 65
    19ee:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	bc 01       	movw	r22, r24
    19f8:	cd 01       	movw	r24, r26
    19fa:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	9c 8b       	std	Y+20, r25	; 0x14
    1a04:	8b 8b       	std	Y+19, r24	; 0x13
    1a06:	0f c0       	rjmp	.+30     	; 0x1a26 <lcd_wr_command+0x11a>
    1a08:	80 e7       	ldi	r24, 0x70	; 112
    1a0a:	91 e0       	ldi	r25, 0x01	; 1
    1a0c:	9a 8b       	std	Y+18, r25	; 0x12
    1a0e:	89 8b       	std	Y+17, r24	; 0x11
    1a10:	89 89       	ldd	r24, Y+17	; 0x11
    1a12:	9a 89       	ldd	r25, Y+18	; 0x12
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <lcd_wr_command+0x108>
    1a18:	9a 8b       	std	Y+18, r25	; 0x12
    1a1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	9c 8b       	std	Y+20, r25	; 0x14
    1a24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a26:	8b 89       	ldd	r24, Y+19	; 0x13
    1a28:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	69 f7       	brne	.-38     	; 0x1a08 <lcd_wr_command+0xfc>
    1a2e:	14 c0       	rjmp	.+40     	; 0x1a58 <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a30:	6d 89       	ldd	r22, Y+21	; 0x15
    1a32:	7e 89       	ldd	r23, Y+22	; 0x16
    1a34:	8f 89       	ldd	r24, Y+23	; 0x17
    1a36:	98 8d       	ldd	r25, Y+24	; 0x18
    1a38:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9c 8b       	std	Y+20, r25	; 0x14
    1a42:	8b 8b       	std	Y+19, r24	; 0x13
    1a44:	8b 89       	ldd	r24, Y+19	; 0x13
    1a46:	9c 89       	ldd	r25, Y+20	; 0x14
    1a48:	98 8b       	std	Y+16, r25	; 0x10
    1a4a:	8f 87       	std	Y+15, r24	; 0x0f
    1a4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a4e:	98 89       	ldd	r25, Y+16	; 0x10
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <lcd_wr_command+0x144>
    1a54:	98 8b       	std	Y+16, r25	; 0x10
    1a56:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1a58:	a8 e2       	ldi	r26, 0x28	; 40
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e8 e2       	ldi	r30, 0x28	; 40
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	8b 7f       	andi	r24, 0xFB	; 251
    1a64:	8c 93       	st	X, r24

	cmd = cmd & 0x0F;
    1a66:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a68:	8f 70       	andi	r24, 0x0F	; 15
    1a6a:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    1a6c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a6e:	82 95       	swap	r24
    1a70:	80 7f       	andi	r24, 0xF0	; 240
    1a72:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1a74:	a8 e2       	ldi	r26, 0x28	; 40
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e8 e2       	ldi	r30, 0x28	; 40
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	8f 70       	andi	r24, 0x0F	; 15
    1a80:	8c 93       	st	X, r24
	lcd_port |= cmd;
    1a82:	a8 e2       	ldi	r26, 0x28	; 40
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e8 e2       	ldi	r30, 0x28	; 40
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	90 81       	ld	r25, Z
    1a8c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a8e:	89 2b       	or	r24, r25
    1a90:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    1a92:	a8 e2       	ldi	r26, 0x28	; 40
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e8 e2       	ldi	r30, 0x28	; 40
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	8e 7f       	andi	r24, 0xFE	; 254
    1a9e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1aa0:	a8 e2       	ldi	r26, 0x28	; 40
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e8 e2       	ldi	r30, 0x28	; 40
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	8d 7f       	andi	r24, 0xFD	; 253
    1aac:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1aae:	a8 e2       	ldi	r26, 0x28	; 40
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e8 e2       	ldi	r30, 0x28	; 40
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	84 60       	ori	r24, 0x04	; 4
    1aba:	8c 93       	st	X, r24
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	a0 ea       	ldi	r26, 0xA0	; 160
    1ac2:	b0 e4       	ldi	r27, 0x40	; 64
    1ac4:	8b 87       	std	Y+11, r24	; 0x0b
    1ac6:	9c 87       	std	Y+12, r25	; 0x0c
    1ac8:	ad 87       	std	Y+13, r26	; 0x0d
    1aca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1acc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ace:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad4:	26 e6       	ldi	r18, 0x66	; 102
    1ad6:	36 e6       	ldi	r19, 0x66	; 102
    1ad8:	46 e6       	ldi	r20, 0x66	; 102
    1ada:	55 e4       	ldi	r21, 0x45	; 69
    1adc:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	8f 83       	std	Y+7, r24	; 0x07
    1ae6:	98 87       	std	Y+8, r25	; 0x08
    1ae8:	a9 87       	std	Y+9, r26	; 0x09
    1aea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aec:	6f 81       	ldd	r22, Y+7	; 0x07
    1aee:	78 85       	ldd	r23, Y+8	; 0x08
    1af0:	89 85       	ldd	r24, Y+9	; 0x09
    1af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e8       	ldi	r20, 0x80	; 128
    1afa:	5f e3       	ldi	r21, 0x3F	; 63
    1afc:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__ltsf2>
    1b00:	88 23       	and	r24, r24
    1b02:	2c f4       	brge	.+10     	; 0x1b0e <lcd_wr_command+0x202>
		__ticks = 1;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	9e 83       	std	Y+6, r25	; 0x06
    1b0a:	8d 83       	std	Y+5, r24	; 0x05
    1b0c:	3f c0       	rjmp	.+126    	; 0x1b8c <lcd_wr_command+0x280>
	else if (__tmp > 65535)
    1b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b10:	78 85       	ldd	r23, Y+8	; 0x08
    1b12:	89 85       	ldd	r24, Y+9	; 0x09
    1b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	3f ef       	ldi	r19, 0xFF	; 255
    1b1a:	4f e7       	ldi	r20, 0x7F	; 127
    1b1c:	57 e4       	ldi	r21, 0x47	; 71
    1b1e:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__gtsf2>
    1b22:	18 16       	cp	r1, r24
    1b24:	4c f5       	brge	.+82     	; 0x1b78 <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e2       	ldi	r20, 0x20	; 32
    1b34:	51 e4       	ldi	r21, 0x41	; 65
    1b36:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	9e 83       	std	Y+6, r25	; 0x06
    1b4c:	8d 83       	std	Y+5, r24	; 0x05
    1b4e:	0f c0       	rjmp	.+30     	; 0x1b6e <lcd_wr_command+0x262>
    1b50:	80 e7       	ldi	r24, 0x70	; 112
    1b52:	91 e0       	ldi	r25, 0x01	; 1
    1b54:	9c 83       	std	Y+4, r25	; 0x04
    1b56:	8b 83       	std	Y+3, r24	; 0x03
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <lcd_wr_command+0x250>
    1b60:	9c 83       	std	Y+4, r25	; 0x04
    1b62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	9e 81       	ldd	r25, Y+6	; 0x06
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	9e 83       	std	Y+6, r25	; 0x06
    1b6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	69 f7       	brne	.-38     	; 0x1b50 <lcd_wr_command+0x244>
    1b76:	14 c0       	rjmp	.+40     	; 0x1ba0 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b78:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7a:	78 85       	ldd	r23, Y+8	; 0x08
    1b7c:	89 85       	ldd	r24, Y+9	; 0x09
    1b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b80:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	9e 83       	std	Y+6, r25	; 0x06
    1b8a:	8d 83       	std	Y+5, r24	; 0x05
    1b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	9a 81       	ldd	r25, Y+2	; 0x02
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <lcd_wr_command+0x28c>
    1b9c:	9a 83       	std	Y+2, r25	; 0x02
    1b9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1ba0:	a8 e2       	ldi	r26, 0x28	; 40
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e8 e2       	ldi	r30, 0x28	; 40
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	8b 7f       	andi	r24, 0xFB	; 251
    1bac:	8c 93       	st	X, r24
}
    1bae:	6e 96       	adiw	r28, 0x1e	; 30
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	6e 97       	sbiw	r28, 0x1e	; 30
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    1bd6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bd8:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
    1bda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bdc:	80 7f       	andi	r24, 0xF0	; 240
    1bde:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    1be0:	a8 e2       	ldi	r26, 0x28	; 40
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e8 e2       	ldi	r30, 0x28	; 40
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	8f 70       	andi	r24, 0x0F	; 15
    1bec:	8c 93       	st	X, r24
	lcd_port |= temp;
    1bee:	a8 e2       	ldi	r26, 0x28	; 40
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e8 e2       	ldi	r30, 0x28	; 40
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	98 2f       	mov	r25, r24
    1bfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bfc:	89 2b       	or	r24, r25
    1bfe:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    1c00:	a8 e2       	ldi	r26, 0x28	; 40
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e8 e2       	ldi	r30, 0x28	; 40
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	81 60       	ori	r24, 0x01	; 1
    1c0c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1c0e:	a8 e2       	ldi	r26, 0x28	; 40
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e8 e2       	ldi	r30, 0x28	; 40
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	8d 7f       	andi	r24, 0xFD	; 253
    1c1a:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1c1c:	a8 e2       	ldi	r26, 0x28	; 40
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e8 e2       	ldi	r30, 0x28	; 40
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	84 60       	ori	r24, 0x04	; 4
    1c28:	8c 93       	st	X, r24
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	a0 ea       	ldi	r26, 0xA0	; 160
    1c30:	b0 e4       	ldi	r27, 0x40	; 64
    1c32:	89 8f       	std	Y+25, r24	; 0x19
    1c34:	9a 8f       	std	Y+26, r25	; 0x1a
    1c36:	ab 8f       	std	Y+27, r26	; 0x1b
    1c38:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c42:	26 e6       	ldi	r18, 0x66	; 102
    1c44:	36 e6       	ldi	r19, 0x66	; 102
    1c46:	46 e6       	ldi	r20, 0x66	; 102
    1c48:	55 e4       	ldi	r21, 0x45	; 69
    1c4a:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	8d 8b       	std	Y+21, r24	; 0x15
    1c54:	9e 8b       	std	Y+22, r25	; 0x16
    1c56:	af 8b       	std	Y+23, r26	; 0x17
    1c58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c60:	98 8d       	ldd	r25, Y+24	; 0x18
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e8       	ldi	r20, 0x80	; 128
    1c68:	5f e3       	ldi	r21, 0x3F	; 63
    1c6a:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__ltsf2>
    1c6e:	88 23       	and	r24, r24
    1c70:	2c f4       	brge	.+10     	; 0x1c7c <lcd_wr_char+0xbc>
		__ticks = 1;
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	9c 8b       	std	Y+20, r25	; 0x14
    1c78:	8b 8b       	std	Y+19, r24	; 0x13
    1c7a:	3f c0       	rjmp	.+126    	; 0x1cfa <lcd_wr_char+0x13a>
	else if (__tmp > 65535)
    1c7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c80:	8f 89       	ldd	r24, Y+23	; 0x17
    1c82:	98 8d       	ldd	r25, Y+24	; 0x18
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	3f ef       	ldi	r19, 0xFF	; 255
    1c88:	4f e7       	ldi	r20, 0x7F	; 127
    1c8a:	57 e4       	ldi	r21, 0x47	; 71
    1c8c:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__gtsf2>
    1c90:	18 16       	cp	r1, r24
    1c92:	4c f5       	brge	.+82     	; 0x1ce6 <lcd_wr_char+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c94:	69 8d       	ldd	r22, Y+25	; 0x19
    1c96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e2       	ldi	r20, 0x20	; 32
    1ca2:	51 e4       	ldi	r21, 0x41	; 65
    1ca4:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	bc 01       	movw	r22, r24
    1cae:	cd 01       	movw	r24, r26
    1cb0:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	9c 8b       	std	Y+20, r25	; 0x14
    1cba:	8b 8b       	std	Y+19, r24	; 0x13
    1cbc:	0f c0       	rjmp	.+30     	; 0x1cdc <lcd_wr_char+0x11c>
    1cbe:	80 e7       	ldi	r24, 0x70	; 112
    1cc0:	91 e0       	ldi	r25, 0x01	; 1
    1cc2:	9a 8b       	std	Y+18, r25	; 0x12
    1cc4:	89 8b       	std	Y+17, r24	; 0x11
    1cc6:	89 89       	ldd	r24, Y+17	; 0x11
    1cc8:	9a 89       	ldd	r25, Y+18	; 0x12
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <lcd_wr_char+0x10a>
    1cce:	9a 8b       	std	Y+18, r25	; 0x12
    1cd0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	9c 8b       	std	Y+20, r25	; 0x14
    1cda:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cde:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	69 f7       	brne	.-38     	; 0x1cbe <lcd_wr_char+0xfe>
    1ce4:	14 c0       	rjmp	.+40     	; 0x1d0e <lcd_wr_char+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cea:	8f 89       	ldd	r24, Y+23	; 0x17
    1cec:	98 8d       	ldd	r25, Y+24	; 0x18
    1cee:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	9c 8b       	std	Y+20, r25	; 0x14
    1cf8:	8b 8b       	std	Y+19, r24	; 0x13
    1cfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfe:	98 8b       	std	Y+16, r25	; 0x10
    1d00:	8f 87       	std	Y+15, r24	; 0x0f
    1d02:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d04:	98 89       	ldd	r25, Y+16	; 0x10
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <lcd_wr_char+0x146>
    1d0a:	98 8b       	std	Y+16, r25	; 0x10
    1d0c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1d0e:	a8 e2       	ldi	r26, 0x28	; 40
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e8 e2       	ldi	r30, 0x28	; 40
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	8b 7f       	andi	r24, 0xFB	; 251
    1d1a:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    1d1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d1e:	8f 70       	andi	r24, 0x0F	; 15
    1d20:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1d22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d24:	99 27       	eor	r25, r25
    1d26:	87 fd       	sbrc	r24, 7
    1d28:	90 95       	com	r25
    1d2a:	82 95       	swap	r24
    1d2c:	92 95       	swap	r25
    1d2e:	90 7f       	andi	r25, 0xF0	; 240
    1d30:	98 27       	eor	r25, r24
    1d32:	80 7f       	andi	r24, 0xF0	; 240
    1d34:	98 27       	eor	r25, r24
    1d36:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1d38:	a8 e2       	ldi	r26, 0x28	; 40
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e8 e2       	ldi	r30, 0x28	; 40
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	8f 70       	andi	r24, 0x0F	; 15
    1d44:	8c 93       	st	X, r24
	lcd_port |= letter;
    1d46:	a8 e2       	ldi	r26, 0x28	; 40
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e8 e2       	ldi	r30, 0x28	; 40
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	98 2f       	mov	r25, r24
    1d52:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d54:	89 2b       	or	r24, r25
    1d56:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    1d58:	a8 e2       	ldi	r26, 0x28	; 40
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e8 e2       	ldi	r30, 0x28	; 40
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	81 60       	ori	r24, 0x01	; 1
    1d64:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1d66:	a8 e2       	ldi	r26, 0x28	; 40
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e8 e2       	ldi	r30, 0x28	; 40
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	8d 7f       	andi	r24, 0xFD	; 253
    1d72:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1d74:	a8 e2       	ldi	r26, 0x28	; 40
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	e8 e2       	ldi	r30, 0x28	; 40
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	84 60       	ori	r24, 0x04	; 4
    1d80:	8c 93       	st	X, r24
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	a0 ea       	ldi	r26, 0xA0	; 160
    1d88:	b0 e4       	ldi	r27, 0x40	; 64
    1d8a:	8b 87       	std	Y+11, r24	; 0x0b
    1d8c:	9c 87       	std	Y+12, r25	; 0x0c
    1d8e:	ad 87       	std	Y+13, r26	; 0x0d
    1d90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9a:	26 e6       	ldi	r18, 0x66	; 102
    1d9c:	36 e6       	ldi	r19, 0x66	; 102
    1d9e:	46 e6       	ldi	r20, 0x66	; 102
    1da0:	55 e4       	ldi	r21, 0x45	; 69
    1da2:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	8f 83       	std	Y+7, r24	; 0x07
    1dac:	98 87       	std	Y+8, r25	; 0x08
    1dae:	a9 87       	std	Y+9, r26	; 0x09
    1db0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1db2:	6f 81       	ldd	r22, Y+7	; 0x07
    1db4:	78 85       	ldd	r23, Y+8	; 0x08
    1db6:	89 85       	ldd	r24, Y+9	; 0x09
    1db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e8       	ldi	r20, 0x80	; 128
    1dc0:	5f e3       	ldi	r21, 0x3F	; 63
    1dc2:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__ltsf2>
    1dc6:	88 23       	and	r24, r24
    1dc8:	2c f4       	brge	.+10     	; 0x1dd4 <lcd_wr_char+0x214>
		__ticks = 1;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9e 83       	std	Y+6, r25	; 0x06
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
    1dd2:	3f c0       	rjmp	.+126    	; 0x1e52 <lcd_wr_char+0x292>
	else if (__tmp > 65535)
    1dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd6:	78 85       	ldd	r23, Y+8	; 0x08
    1dd8:	89 85       	ldd	r24, Y+9	; 0x09
    1dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	3f ef       	ldi	r19, 0xFF	; 255
    1de0:	4f e7       	ldi	r20, 0x7F	; 127
    1de2:	57 e4       	ldi	r21, 0x47	; 71
    1de4:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__gtsf2>
    1de8:	18 16       	cp	r1, r24
    1dea:	4c f5       	brge	.+82     	; 0x1e3e <lcd_wr_char+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	51 e4       	ldi	r21, 0x41	; 65
    1dfc:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	bc 01       	movw	r22, r24
    1e06:	cd 01       	movw	r24, r26
    1e08:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9e 83       	std	Y+6, r25	; 0x06
    1e12:	8d 83       	std	Y+5, r24	; 0x05
    1e14:	0f c0       	rjmp	.+30     	; 0x1e34 <lcd_wr_char+0x274>
    1e16:	80 e7       	ldi	r24, 0x70	; 112
    1e18:	91 e0       	ldi	r25, 0x01	; 1
    1e1a:	9c 83       	std	Y+4, r25	; 0x04
    1e1c:	8b 83       	std	Y+3, r24	; 0x03
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	9c 81       	ldd	r25, Y+4	; 0x04
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <lcd_wr_char+0x262>
    1e26:	9c 83       	std	Y+4, r25	; 0x04
    1e28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	9e 83       	std	Y+6, r25	; 0x06
    1e32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e34:	8d 81       	ldd	r24, Y+5	; 0x05
    1e36:	9e 81       	ldd	r25, Y+6	; 0x06
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	69 f7       	brne	.-38     	; 0x1e16 <lcd_wr_char+0x256>
    1e3c:	14 c0       	rjmp	.+40     	; 0x1e66 <lcd_wr_char+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e40:	78 85       	ldd	r23, Y+8	; 0x08
    1e42:	89 85       	ldd	r24, Y+9	; 0x09
    1e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e46:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	9e 83       	std	Y+6, r25	; 0x06
    1e50:	8d 83       	std	Y+5, r24	; 0x05
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	9e 81       	ldd	r25, Y+6	; 0x06
    1e56:	9a 83       	std	Y+2, r25	; 0x02
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <lcd_wr_char+0x29e>
    1e62:	9a 83       	std	Y+2, r25	; 0x02
    1e64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1e66:	a8 e2       	ldi	r26, 0x28	; 40
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e8 e2       	ldi	r30, 0x28	; 40
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	8b 7f       	andi	r24, 0xFB	; 251
    1e72:	8c 93       	st	X, r24
}
    1e74:	6e 96       	adiw	r28, 0x1e	; 30
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	08 95       	ret

00001e86 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1e8e:	80 e8       	ldi	r24, 0x80	; 128
    1e90:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_wr_command>
}
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	0f 92       	push	r0
    1ea0:	0f 92       	push	r0
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	9a 83       	std	Y+2, r25	; 0x02
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	0a c0       	rjmp	.+20     	; 0x1ec0 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1eac:	e9 81       	ldd	r30, Y+1	; 0x01
    1eae:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb0:	80 81       	ld	r24, Z
    1eb2:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <lcd_wr_char>
		str++;
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eba:	01 96       	adiw	r24, 0x01	; 1
    1ebc:	9a 83       	std	Y+2, r25	; 0x02
    1ebe:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    1ec0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec4:	80 81       	ld	r24, Z
    1ec6:	88 23       	and	r24, r24
    1ec8:	89 f7       	brne	.-30     	; 0x1eac <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <lcd_cursor+0x6>
    1eda:	0f 92       	push	r0
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	33 27       	eor	r19, r19
    1eea:	27 fd       	sbrc	r18, 7
    1eec:	30 95       	com	r19
    1eee:	3c 83       	std	Y+4, r19	; 0x04
    1ef0:	2b 83       	std	Y+3, r18	; 0x03
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef6:	82 30       	cpi	r24, 0x02	; 2
    1ef8:	91 05       	cpc	r25, r1
    1efa:	d9 f0       	breq	.+54     	; 0x1f32 <lcd_cursor+0x5e>
    1efc:	2b 81       	ldd	r18, Y+3	; 0x03
    1efe:	3c 81       	ldd	r19, Y+4	; 0x04
    1f00:	23 30       	cpi	r18, 0x03	; 3
    1f02:	31 05       	cpc	r19, r1
    1f04:	34 f4       	brge	.+12     	; 0x1f12 <lcd_cursor+0x3e>
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0a:	81 30       	cpi	r24, 0x01	; 1
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	61 f0       	breq	.+24     	; 0x1f28 <lcd_cursor+0x54>
    1f10:	1e c0       	rjmp	.+60     	; 0x1f4e <lcd_cursor+0x7a>
    1f12:	2b 81       	ldd	r18, Y+3	; 0x03
    1f14:	3c 81       	ldd	r19, Y+4	; 0x04
    1f16:	23 30       	cpi	r18, 0x03	; 3
    1f18:	31 05       	cpc	r19, r1
    1f1a:	81 f0       	breq	.+32     	; 0x1f3c <lcd_cursor+0x68>
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f20:	84 30       	cpi	r24, 0x04	; 4
    1f22:	91 05       	cpc	r25, r1
    1f24:	81 f0       	breq	.+32     	; 0x1f46 <lcd_cursor+0x72>
    1f26:	13 c0       	rjmp	.+38     	; 0x1f4e <lcd_cursor+0x7a>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	81 58       	subi	r24, 0x81	; 129
    1f2c:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_wr_command>
    1f30:	0e c0       	rjmp	.+28     	; 0x1f4e <lcd_cursor+0x7a>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	81 54       	subi	r24, 0x41	; 65
    1f36:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_wr_command>
    1f3a:	09 c0       	rjmp	.+18     	; 0x1f4e <lcd_cursor+0x7a>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	8d 56       	subi	r24, 0x6D	; 109
    1f40:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_wr_command>
    1f44:	04 c0       	rjmp	.+8      	; 0x1f4e <lcd_cursor+0x7a>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	8d 52       	subi	r24, 0x2D	; 45
    1f4a:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_wr_command>
		default: break;
	}
}
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <lcd_print>:

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	27 97       	sbiw	r28, 0x07	; 7
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	8a 83       	std	Y+2, r24	; 0x02
    1f72:	6b 83       	std	Y+3, r22	; 0x03
    1f74:	5d 83       	std	Y+5, r21	; 0x05
    1f76:	4c 83       	std	Y+4, r20	; 0x04
    1f78:	3f 83       	std	Y+7, r19	; 0x07
    1f7a:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    1f7c:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	88 23       	and	r24, r24
    1f82:	19 f0       	breq	.+6      	; 0x1f8a <lcd_print+0x2e>
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	88 23       	and	r24, r24
    1f88:	19 f4       	brne	.+6      	; 0x1f90 <lcd_print+0x34>
	{
		lcd_home();
    1f8a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <lcd_home>
    1f8e:	04 c0       	rjmp	.+8      	; 0x1f98 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	6b 81       	ldd	r22, Y+3	; 0x03
    1f94:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    1f98:	8e 81       	ldd	r24, Y+6	; 0x06
    1f9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f9c:	85 30       	cpi	r24, 0x05	; 5
    1f9e:	91 05       	cpc	r25, r1
    1fa0:	19 f0       	breq	.+6      	; 0x1fa8 <lcd_print+0x4c>
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	81 30       	cpi	r24, 0x01	; 1
    1fa6:	a9 f4       	brne	.+42     	; 0x1fd2 <lcd_print+0x76>
	{
		million=value/10000+48;
    1fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1faa:	9d 81       	ldd	r25, Y+5	; 0x05
    1fac:	20 e1       	ldi	r18, 0x10	; 16
    1fae:	37 e2       	ldi	r19, 0x27	; 39
    1fb0:	b9 01       	movw	r22, r18
    1fb2:	0e 94 92 19 	call	0x3324	; 0x3324 <__udivmodhi4>
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	c0 96       	adiw	r24, 0x30	; 48
    1fba:	90 93 11 03 	sts	0x0311, r25
    1fbe:	80 93 10 03 	sts	0x0310, r24
		lcd_wr_char(million);
    1fc2:	80 91 10 03 	lds	r24, 0x0310
    1fc6:	90 91 11 03 	lds	r25, 0x0311
    1fca:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <lcd_wr_char>
		flag=1;
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1fd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd4:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd6:	84 30       	cpi	r24, 0x04	; 4
    1fd8:	91 05       	cpc	r25, r1
    1fda:	19 f0       	breq	.+6      	; 0x1fe2 <lcd_print+0x86>
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	81 30       	cpi	r24, 0x01	; 1
    1fe0:	11 f5       	brne	.+68     	; 0x2026 <lcd_print+0xca>
	{
		temp = value/1000;
    1fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe6:	28 ee       	ldi	r18, 0xE8	; 232
    1fe8:	33 e0       	ldi	r19, 0x03	; 3
    1fea:	b9 01       	movw	r22, r18
    1fec:	0e 94 92 19 	call	0x3324	; 0x3324 <__udivmodhi4>
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	90 93 13 03 	sts	0x0313, r25
    1ff6:	80 93 12 03 	sts	0x0312, r24
		thousand = temp%10 + 48;
    1ffa:	80 91 12 03 	lds	r24, 0x0312
    1ffe:	90 91 13 03 	lds	r25, 0x0313
    2002:	2a e0       	ldi	r18, 0x0A	; 10
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	b9 01       	movw	r22, r18
    2008:	0e 94 92 19 	call	0x3324	; 0x3324 <__udivmodhi4>
    200c:	c0 96       	adiw	r24, 0x30	; 48
    200e:	90 93 1b 03 	sts	0x031B, r25
    2012:	80 93 1a 03 	sts	0x031A, r24
		lcd_wr_char(thousand);
    2016:	80 91 1a 03 	lds	r24, 0x031A
    201a:	90 91 1b 03 	lds	r25, 0x031B
    201e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <lcd_wr_char>
		flag=1;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    2026:	8e 81       	ldd	r24, Y+6	; 0x06
    2028:	9f 81       	ldd	r25, Y+7	; 0x07
    202a:	83 30       	cpi	r24, 0x03	; 3
    202c:	91 05       	cpc	r25, r1
    202e:	19 f0       	breq	.+6      	; 0x2036 <lcd_print+0xda>
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	81 30       	cpi	r24, 0x01	; 1
    2034:	11 f5       	brne	.+68     	; 0x207a <lcd_print+0x11e>
	{
		temp = value/100;
    2036:	8c 81       	ldd	r24, Y+4	; 0x04
    2038:	9d 81       	ldd	r25, Y+5	; 0x05
    203a:	24 e6       	ldi	r18, 0x64	; 100
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	b9 01       	movw	r22, r18
    2040:	0e 94 92 19 	call	0x3324	; 0x3324 <__udivmodhi4>
    2044:	cb 01       	movw	r24, r22
    2046:	90 93 13 03 	sts	0x0313, r25
    204a:	80 93 12 03 	sts	0x0312, r24
		hundred = temp%10 + 48;
    204e:	80 91 12 03 	lds	r24, 0x0312
    2052:	90 91 13 03 	lds	r25, 0x0313
    2056:	2a e0       	ldi	r18, 0x0A	; 10
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	b9 01       	movw	r22, r18
    205c:	0e 94 92 19 	call	0x3324	; 0x3324 <__udivmodhi4>
    2060:	c0 96       	adiw	r24, 0x30	; 48
    2062:	90 93 17 03 	sts	0x0317, r25
    2066:	80 93 16 03 	sts	0x0316, r24
		lcd_wr_char(hundred);
    206a:	80 91 16 03 	lds	r24, 0x0316
    206e:	90 91 17 03 	lds	r25, 0x0317
    2072:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <lcd_wr_char>
		flag=1;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    207a:	8e 81       	ldd	r24, Y+6	; 0x06
    207c:	9f 81       	ldd	r25, Y+7	; 0x07
    207e:	82 30       	cpi	r24, 0x02	; 2
    2080:	91 05       	cpc	r25, r1
    2082:	19 f0       	breq	.+6      	; 0x208a <lcd_print+0x12e>
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	81 30       	cpi	r24, 0x01	; 1
    2088:	11 f5       	brne	.+68     	; 0x20ce <lcd_print+0x172>
	{
		temp = value/10;
    208a:	8c 81       	ldd	r24, Y+4	; 0x04
    208c:	9d 81       	ldd	r25, Y+5	; 0x05
    208e:	2a e0       	ldi	r18, 0x0A	; 10
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	b9 01       	movw	r22, r18
    2094:	0e 94 92 19 	call	0x3324	; 0x3324 <__udivmodhi4>
    2098:	cb 01       	movw	r24, r22
    209a:	90 93 13 03 	sts	0x0313, r25
    209e:	80 93 12 03 	sts	0x0312, r24
		tens = temp%10 + 48;
    20a2:	80 91 12 03 	lds	r24, 0x0312
    20a6:	90 91 13 03 	lds	r25, 0x0313
    20aa:	2a e0       	ldi	r18, 0x0A	; 10
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	b9 01       	movw	r22, r18
    20b0:	0e 94 92 19 	call	0x3324	; 0x3324 <__udivmodhi4>
    20b4:	c0 96       	adiw	r24, 0x30	; 48
    20b6:	90 93 15 03 	sts	0x0315, r25
    20ba:	80 93 14 03 	sts	0x0314, r24
		lcd_wr_char(tens);
    20be:	80 91 14 03 	lds	r24, 0x0314
    20c2:	90 91 15 03 	lds	r25, 0x0315
    20c6:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <lcd_wr_char>
		flag=1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    20ce:	8e 81       	ldd	r24, Y+6	; 0x06
    20d0:	9f 81       	ldd	r25, Y+7	; 0x07
    20d2:	81 30       	cpi	r24, 0x01	; 1
    20d4:	91 05       	cpc	r25, r1
    20d6:	19 f0       	breq	.+6      	; 0x20de <lcd_print+0x182>
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	81 30       	cpi	r24, 0x01	; 1
    20dc:	91 f4       	brne	.+36     	; 0x2102 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    20de:	8c 81       	ldd	r24, Y+4	; 0x04
    20e0:	9d 81       	ldd	r25, Y+5	; 0x05
    20e2:	2a e0       	ldi	r18, 0x0A	; 10
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	b9 01       	movw	r22, r18
    20e8:	0e 94 92 19 	call	0x3324	; 0x3324 <__udivmodhi4>
    20ec:	c0 96       	adiw	r24, 0x30	; 48
    20ee:	90 93 19 03 	sts	0x0319, r25
    20f2:	80 93 18 03 	sts	0x0318, r24
		lcd_wr_char(unit);
    20f6:	80 91 18 03 	lds	r24, 0x0318
    20fa:	90 91 19 03 	lds	r25, 0x0319
    20fe:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <lcd_wr_char>
	}
	if(digits>5)
    2102:	8e 81       	ldd	r24, Y+6	; 0x06
    2104:	9f 81       	ldd	r25, Y+7	; 0x07
    2106:	86 30       	cpi	r24, 0x06	; 6
    2108:	91 05       	cpc	r25, r1
    210a:	1c f0       	brlt	.+6      	; 0x2112 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    210c:	85 e4       	ldi	r24, 0x45	; 69
    210e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <lcd_wr_char>
	}

}
    2112:	27 96       	adiw	r28, 0x07	; 7
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <main>:

#define leftIncrease 20
#define rightIncrease 20

int main(void)
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	ae 97       	sbiw	r28, 0x2e	; 46
    212e:	0f b6       	in	r0, 0x3f	; 63
    2130:	f8 94       	cli
    2132:	de bf       	out	0x3e, r29	; 62
    2134:	0f be       	out	0x3f, r0	; 63
    2136:	cd bf       	out	0x3d, r28	; 61
    int error = 0, leftSpeed, rightSpeed, lastError = 0, node = 0;
    2138:	1e a6       	std	Y+46, r1	; 0x2e
    213a:	1d a6       	std	Y+45, r1	; 0x2d
    213c:	18 a6       	std	Y+40, r1	; 0x28
    213e:	1f a2       	std	Y+39, r1	; 0x27
    2140:	1e a2       	std	Y+38, r1	; 0x26
    2142:	1d a2       	std	Y+37, r1	; 0x25
    int kp = 8;
    2144:	88 e0       	ldi	r24, 0x08	; 8
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	9c a3       	std	Y+36, r25	; 0x24
    214a:	8b a3       	std	Y+35, r24	; 0x23
    cli();
    214c:	f8 94       	cli
    set_lcd();
    214e:	0e 94 d1 06 	call	0xda2	; 0xda2 <set_lcd>
    set_motors();
    2152:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_motors>
    set_ADC();
    2156:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <set_ADC>
    sei();
    215a:	78 94       	sei

    PORTH |= (1<<3) | (1<<2);
    215c:	a2 e0       	ldi	r26, 0x02	; 2
    215e:	b1 e0       	ldi	r27, 0x01	; 1
    2160:	e2 e0       	ldi	r30, 0x02	; 2
    2162:	f1 e0       	ldi	r31, 0x01	; 1
    2164:	80 81       	ld	r24, Z
    2166:	8c 60       	ori	r24, 0x0C	; 12
    2168:	8c 93       	st	X, r24
    int centre, left, right;

    forward();
    216a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <forward>
    velocity(0,0);
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	60 e0       	ldi	r22, 0x00	; 0
    2172:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>

    while(1)
    {
        centre = ADC_Conversion(2);
    2176:	82 e0       	ldi	r24, 0x02	; 2
    2178:	0e 94 97 06 	call	0xd2e	; 0xd2e <ADC_Conversion>
    217c:	88 2f       	mov	r24, r24
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	9a a3       	std	Y+34, r25	; 0x22
    2182:	89 a3       	std	Y+33, r24	; 0x21
        left = ADC_Conversion(3);
    2184:	83 e0       	ldi	r24, 0x03	; 3
    2186:	0e 94 97 06 	call	0xd2e	; 0xd2e <ADC_Conversion>
    218a:	88 2f       	mov	r24, r24
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	98 a3       	std	Y+32, r25	; 0x20
    2190:	8f 8f       	std	Y+31, r24	; 0x1f
        right = ADC_Conversion(1);
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	0e 94 97 06 	call	0xd2e	; 0xd2e <ADC_Conversion>
    2198:	88 2f       	mov	r24, r24
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	9e 8f       	std	Y+30, r25	; 0x1e
    219e:	8d 8f       	std	Y+29, r24	; 0x1d

        lcd_print(2, 1, left, 3);
    21a0:	2f 8d       	ldd	r18, Y+31	; 0x1f
    21a2:	38 a1       	ldd	r19, Y+32	; 0x20
    21a4:	82 e0       	ldi	r24, 0x02	; 2
    21a6:	61 e0       	ldi	r22, 0x01	; 1
    21a8:	a9 01       	movw	r20, r18
    21aa:	23 e0       	ldi	r18, 0x03	; 3
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <lcd_print>
        lcd_print(2, 5, centre, 3);
    21b2:	29 a1       	ldd	r18, Y+33	; 0x21
    21b4:	3a a1       	ldd	r19, Y+34	; 0x22
    21b6:	82 e0       	ldi	r24, 0x02	; 2
    21b8:	65 e0       	ldi	r22, 0x05	; 5
    21ba:	a9 01       	movw	r20, r18
    21bc:	23 e0       	ldi	r18, 0x03	; 3
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <lcd_print>
        lcd_print(2, 9, right, 3);
    21c4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    21c6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    21c8:	82 e0       	ldi	r24, 0x02	; 2
    21ca:	69 e0       	ldi	r22, 0x09	; 9
    21cc:	a9 01       	movw	r20, r18
    21ce:	23 e0       	ldi	r18, 0x03	; 3
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <lcd_print>

        if(centre > 115 && left > 15 && right > 20)
    21d6:	89 a1       	ldd	r24, Y+33	; 0x21
    21d8:	9a a1       	ldd	r25, Y+34	; 0x22
    21da:	84 37       	cpi	r24, 0x74	; 116
    21dc:	91 05       	cpc	r25, r1
    21de:	7c f0       	brlt	.+30     	; 0x21fe <main+0xda>
    21e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21e2:	98 a1       	ldd	r25, Y+32	; 0x20
    21e4:	80 31       	cpi	r24, 0x10	; 16
    21e6:	91 05       	cpc	r25, r1
    21e8:	54 f0       	brlt	.+20     	; 0x21fe <main+0xda>
    21ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21ee:	85 31       	cpi	r24, 0x15	; 21
    21f0:	91 05       	cpc	r25, r1
    21f2:	2c f0       	brlt	.+10     	; 0x21fe <main+0xda>
            error = 100;
    21f4:	84 e6       	ldi	r24, 0x64	; 100
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	9e a7       	std	Y+46, r25	; 0x2e
    21fa:	8d a7       	std	Y+45, r24	; 0x2d
    21fc:	7a c0       	rjmp	.+244    	; 0x22f2 <__stack+0xf3>

        else if(centre > 115)
    21fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2200:	9a a1       	ldd	r25, Y+34	; 0x22
    2202:	84 37       	cpi	r24, 0x74	; 116
    2204:	91 05       	cpc	r25, r1
    2206:	1c f0       	brlt	.+6      	; 0x220e <__stack+0xf>
            error = 0;
    2208:	1e a6       	std	Y+46, r1	; 0x2e
    220a:	1d a6       	std	Y+45, r1	; 0x2d
    220c:	72 c0       	rjmp	.+228    	; 0x22f2 <__stack+0xf3>

        else if(left > 45)
    220e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2210:	98 a1       	ldd	r25, Y+32	; 0x20
    2212:	8e 32       	cpi	r24, 0x2E	; 46
    2214:	91 05       	cpc	r25, r1
    2216:	2c f0       	brlt	.+10     	; 0x2222 <__stack+0x23>
            error = 7;
    2218:	87 e0       	ldi	r24, 0x07	; 7
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9e a7       	std	Y+46, r25	; 0x2e
    221e:	8d a7       	std	Y+45, r24	; 0x2d
    2220:	68 c0       	rjmp	.+208    	; 0x22f2 <__stack+0xf3>

        else if(left > 25)
    2222:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2224:	98 a1       	ldd	r25, Y+32	; 0x20
    2226:	8a 31       	cpi	r24, 0x1A	; 26
    2228:	91 05       	cpc	r25, r1
    222a:	2c f0       	brlt	.+10     	; 0x2236 <__stack+0x37>
            error = 6;
    222c:	86 e0       	ldi	r24, 0x06	; 6
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	9e a7       	std	Y+46, r25	; 0x2e
    2232:	8d a7       	std	Y+45, r24	; 0x2d
    2234:	5e c0       	rjmp	.+188    	; 0x22f2 <__stack+0xf3>

        else if(left > 17)
    2236:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2238:	98 a1       	ldd	r25, Y+32	; 0x20
    223a:	82 31       	cpi	r24, 0x12	; 18
    223c:	91 05       	cpc	r25, r1
    223e:	2c f0       	brlt	.+10     	; 0x224a <__stack+0x4b>
            error = 5;
    2240:	85 e0       	ldi	r24, 0x05	; 5
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	9e a7       	std	Y+46, r25	; 0x2e
    2246:	8d a7       	std	Y+45, r24	; 0x2d
    2248:	54 c0       	rjmp	.+168    	; 0x22f2 <__stack+0xf3>

        else if(left > 9)
    224a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    224c:	98 a1       	ldd	r25, Y+32	; 0x20
    224e:	8a 30       	cpi	r24, 0x0A	; 10
    2250:	91 05       	cpc	r25, r1
    2252:	2c f0       	brlt	.+10     	; 0x225e <__stack+0x5f>
            error = 4;
    2254:	84 e0       	ldi	r24, 0x04	; 4
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	9e a7       	std	Y+46, r25	; 0x2e
    225a:	8d a7       	std	Y+45, r24	; 0x2d
    225c:	4a c0       	rjmp	.+148    	; 0x22f2 <__stack+0xf3>

        else if(right > 110)
    225e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2260:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2262:	8f 36       	cpi	r24, 0x6F	; 111
    2264:	91 05       	cpc	r25, r1
    2266:	2c f0       	brlt	.+10     	; 0x2272 <__stack+0x73>
            error = -7;
    2268:	89 ef       	ldi	r24, 0xF9	; 249
    226a:	9f ef       	ldi	r25, 0xFF	; 255
    226c:	9e a7       	std	Y+46, r25	; 0x2e
    226e:	8d a7       	std	Y+45, r24	; 0x2d
    2270:	40 c0       	rjmp	.+128    	; 0x22f2 <__stack+0xf3>

        else if(right > 85)
    2272:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2274:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2276:	86 35       	cpi	r24, 0x56	; 86
    2278:	91 05       	cpc	r25, r1
    227a:	2c f0       	brlt	.+10     	; 0x2286 <__stack+0x87>
            error = -6;
    227c:	8a ef       	ldi	r24, 0xFA	; 250
    227e:	9f ef       	ldi	r25, 0xFF	; 255
    2280:	9e a7       	std	Y+46, r25	; 0x2e
    2282:	8d a7       	std	Y+45, r24	; 0x2d
    2284:	36 c0       	rjmp	.+108    	; 0x22f2 <__stack+0xf3>

        else if(right > 55)
    2286:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2288:	9e 8d       	ldd	r25, Y+30	; 0x1e
    228a:	88 33       	cpi	r24, 0x38	; 56
    228c:	91 05       	cpc	r25, r1
    228e:	2c f0       	brlt	.+10     	; 0x229a <__stack+0x9b>
            error = -5;
    2290:	8b ef       	ldi	r24, 0xFB	; 251
    2292:	9f ef       	ldi	r25, 0xFF	; 255
    2294:	9e a7       	std	Y+46, r25	; 0x2e
    2296:	8d a7       	std	Y+45, r24	; 0x2d
    2298:	2c c0       	rjmp	.+88     	; 0x22f2 <__stack+0xf3>

        else if(right > 35)
    229a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    229c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    229e:	84 32       	cpi	r24, 0x24	; 36
    22a0:	91 05       	cpc	r25, r1
    22a2:	2c f0       	brlt	.+10     	; 0x22ae <__stack+0xaf>
            error = -4;
    22a4:	8c ef       	ldi	r24, 0xFC	; 252
    22a6:	9f ef       	ldi	r25, 0xFF	; 255
    22a8:	9e a7       	std	Y+46, r25	; 0x2e
    22aa:	8d a7       	std	Y+45, r24	; 0x2d
    22ac:	22 c0       	rjmp	.+68     	; 0x22f2 <__stack+0xf3>

        else if(right > 25)
    22ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22b2:	8a 31       	cpi	r24, 0x1A	; 26
    22b4:	91 05       	cpc	r25, r1
    22b6:	2c f0       	brlt	.+10     	; 0x22c2 <__stack+0xc3>
            error = -3;
    22b8:	8d ef       	ldi	r24, 0xFD	; 253
    22ba:	9f ef       	ldi	r25, 0xFF	; 255
    22bc:	9e a7       	std	Y+46, r25	; 0x2e
    22be:	8d a7       	std	Y+45, r24	; 0x2d
    22c0:	18 c0       	rjmp	.+48     	; 0x22f2 <__stack+0xf3>

        else if(right > 18)
    22c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22c6:	83 31       	cpi	r24, 0x13	; 19
    22c8:	91 05       	cpc	r25, r1
    22ca:	2c f0       	brlt	.+10     	; 0x22d6 <__stack+0xd7>
            error = -2;
    22cc:	8e ef       	ldi	r24, 0xFE	; 254
    22ce:	9f ef       	ldi	r25, 0xFF	; 255
    22d0:	9e a7       	std	Y+46, r25	; 0x2e
    22d2:	8d a7       	std	Y+45, r24	; 0x2d
    22d4:	0e c0       	rjmp	.+28     	; 0x22f2 <__stack+0xf3>

        else if(right > 15)
    22d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22da:	80 31       	cpi	r24, 0x10	; 16
    22dc:	91 05       	cpc	r25, r1
    22de:	2c f0       	brlt	.+10     	; 0x22ea <__stack+0xeb>
            error = -1;
    22e0:	8f ef       	ldi	r24, 0xFF	; 255
    22e2:	9f ef       	ldi	r25, 0xFF	; 255
    22e4:	9e a7       	std	Y+46, r25	; 0x2e
    22e6:	8d a7       	std	Y+45, r24	; 0x2d
    22e8:	04 c0       	rjmp	.+8      	; 0x22f2 <__stack+0xf3>

        else
            error = -100;
    22ea:	8c e9       	ldi	r24, 0x9C	; 156
    22ec:	9f ef       	ldi	r25, 0xFF	; 255
    22ee:	9e a7       	std	Y+46, r25	; 0x2e
    22f0:	8d a7       	std	Y+45, r24	; 0x2d


        if(error > -100 && error < 100)
    22f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    22f4:	9e a5       	ldd	r25, Y+46	; 0x2e
    22f6:	2f ef       	ldi	r18, 0xFF	; 255
    22f8:	8d 39       	cpi	r24, 0x9D	; 157
    22fa:	92 07       	cpc	r25, r18
    22fc:	bc f1       	brlt	.+110    	; 0x236c <__stack+0x16d>
    22fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    2300:	9e a5       	ldd	r25, Y+46	; 0x2e
    2302:	84 36       	cpi	r24, 0x64	; 100
    2304:	91 05       	cpc	r25, r1
    2306:	94 f5       	brge	.+100    	; 0x236c <__stack+0x16d>
        {
            leftSpeed = 150 - error*kp;
    2308:	2d a5       	ldd	r18, Y+45	; 0x2d
    230a:	3e a5       	ldd	r19, Y+46	; 0x2e
    230c:	8b a1       	ldd	r24, Y+35	; 0x23
    230e:	9c a1       	ldd	r25, Y+36	; 0x24
    2310:	a9 01       	movw	r20, r18
    2312:	48 9f       	mul	r20, r24
    2314:	90 01       	movw	r18, r0
    2316:	49 9f       	mul	r20, r25
    2318:	30 0d       	add	r19, r0
    231a:	58 9f       	mul	r21, r24
    231c:	30 0d       	add	r19, r0
    231e:	11 24       	eor	r1, r1
    2320:	86 e9       	ldi	r24, 0x96	; 150
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	82 1b       	sub	r24, r18
    2326:	93 0b       	sbc	r25, r19
    2328:	9c a7       	std	Y+44, r25	; 0x2c
    232a:	8b a7       	std	Y+43, r24	; 0x2b
            rightSpeed = 180 + error*kp;
    232c:	2d a5       	ldd	r18, Y+45	; 0x2d
    232e:	3e a5       	ldd	r19, Y+46	; 0x2e
    2330:	8b a1       	ldd	r24, Y+35	; 0x23
    2332:	9c a1       	ldd	r25, Y+36	; 0x24
    2334:	ac 01       	movw	r20, r24
    2336:	24 9f       	mul	r18, r20
    2338:	c0 01       	movw	r24, r0
    233a:	25 9f       	mul	r18, r21
    233c:	90 0d       	add	r25, r0
    233e:	34 9f       	mul	r19, r20
    2340:	90 0d       	add	r25, r0
    2342:	11 24       	eor	r1, r1
    2344:	8c 54       	subi	r24, 0x4C	; 76
    2346:	9f 4f       	sbci	r25, 0xFF	; 255
    2348:	9a a7       	std	Y+42, r25	; 0x2a
    234a:	89 a7       	std	Y+41, r24	; 0x29

            if(error>0)
    234c:	8d a5       	ldd	r24, Y+45	; 0x2d
    234e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2350:	18 16       	cp	r1, r24
    2352:	19 06       	cpc	r1, r25
    2354:	2c f4       	brge	.+10     	; 0x2360 <__stack+0x161>
            {
                rightSpeed += 10;
    2356:	89 a5       	ldd	r24, Y+41	; 0x29
    2358:	9a a5       	ldd	r25, Y+42	; 0x2a
    235a:	0a 96       	adiw	r24, 0x0a	; 10
    235c:	9a a7       	std	Y+42, r25	; 0x2a
    235e:	89 a7       	std	Y+41, r24	; 0x29
            }
            velocity(leftSpeed, rightSpeed);
    2360:	8b a5       	ldd	r24, Y+43	; 0x2b
    2362:	99 a5       	ldd	r25, Y+41	; 0x29
    2364:	69 2f       	mov	r22, r25
    2366:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    236a:	09 c1       	rjmp	.+530    	; 0x257e <__stack+0x37f>
        }

        else if (error == 100)
    236c:	8d a5       	ldd	r24, Y+45	; 0x2d
    236e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2370:	84 36       	cpi	r24, 0x64	; 100
    2372:	91 05       	cpc	r25, r1
    2374:	09 f0       	breq	.+2      	; 0x2378 <__stack+0x179>
    2376:	03 c1       	rjmp	.+518    	; 0x257e <__stack+0x37f>
        {
            if(lastError != error)
    2378:	2f a1       	ldd	r18, Y+39	; 0x27
    237a:	38 a5       	ldd	r19, Y+40	; 0x28
    237c:	8d a5       	ldd	r24, Y+45	; 0x2d
    237e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2380:	28 17       	cp	r18, r24
    2382:	39 07       	cpc	r19, r25
    2384:	09 f4       	brne	.+2      	; 0x2388 <__stack+0x189>
    2386:	79 c0       	rjmp	.+242    	; 0x247a <__stack+0x27b>
            {
                stop();
    2388:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	aa e7       	ldi	r26, 0x7A	; 122
    2392:	b4 e4       	ldi	r27, 0x44	; 68
    2394:	89 8f       	std	Y+25, r24	; 0x19
    2396:	9a 8f       	std	Y+26, r25	; 0x1a
    2398:	ab 8f       	std	Y+27, r26	; 0x1b
    239a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239c:	69 8d       	ldd	r22, Y+25	; 0x19
    239e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a4:	26 e6       	ldi	r18, 0x66	; 102
    23a6:	36 e6       	ldi	r19, 0x66	; 102
    23a8:	46 e6       	ldi	r20, 0x66	; 102
    23aa:	55 e4       	ldi	r21, 0x45	; 69
    23ac:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	8d 8b       	std	Y+21, r24	; 0x15
    23b6:	9e 8b       	std	Y+22, r25	; 0x16
    23b8:	af 8b       	std	Y+23, r26	; 0x17
    23ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23bc:	6d 89       	ldd	r22, Y+21	; 0x15
    23be:	7e 89       	ldd	r23, Y+22	; 0x16
    23c0:	8f 89       	ldd	r24, Y+23	; 0x17
    23c2:	98 8d       	ldd	r25, Y+24	; 0x18
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e8       	ldi	r20, 0x80	; 128
    23ca:	5f e3       	ldi	r21, 0x3F	; 63
    23cc:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__ltsf2>
    23d0:	88 23       	and	r24, r24
    23d2:	2c f4       	brge	.+10     	; 0x23de <__stack+0x1df>
		__ticks = 1;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	9c 8b       	std	Y+20, r25	; 0x14
    23da:	8b 8b       	std	Y+19, r24	; 0x13
    23dc:	3f c0       	rjmp	.+126    	; 0x245c <__stack+0x25d>
	else if (__tmp > 65535)
    23de:	6d 89       	ldd	r22, Y+21	; 0x15
    23e0:	7e 89       	ldd	r23, Y+22	; 0x16
    23e2:	8f 89       	ldd	r24, Y+23	; 0x17
    23e4:	98 8d       	ldd	r25, Y+24	; 0x18
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	3f ef       	ldi	r19, 0xFF	; 255
    23ea:	4f e7       	ldi	r20, 0x7F	; 127
    23ec:	57 e4       	ldi	r21, 0x47	; 71
    23ee:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__gtsf2>
    23f2:	18 16       	cp	r1, r24
    23f4:	4c f5       	brge	.+82     	; 0x2448 <__stack+0x249>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f6:	69 8d       	ldd	r22, Y+25	; 0x19
    23f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e2       	ldi	r20, 0x20	; 32
    2404:	51 e4       	ldi	r21, 0x41	; 65
    2406:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	bc 01       	movw	r22, r24
    2410:	cd 01       	movw	r24, r26
    2412:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	9c 8b       	std	Y+20, r25	; 0x14
    241c:	8b 8b       	std	Y+19, r24	; 0x13
    241e:	0f c0       	rjmp	.+30     	; 0x243e <__stack+0x23f>
    2420:	80 e7       	ldi	r24, 0x70	; 112
    2422:	91 e0       	ldi	r25, 0x01	; 1
    2424:	9a 8b       	std	Y+18, r25	; 0x12
    2426:	89 8b       	std	Y+17, r24	; 0x11
    2428:	89 89       	ldd	r24, Y+17	; 0x11
    242a:	9a 89       	ldd	r25, Y+18	; 0x12
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <__stack+0x22d>
    2430:	9a 8b       	std	Y+18, r25	; 0x12
    2432:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2434:	8b 89       	ldd	r24, Y+19	; 0x13
    2436:	9c 89       	ldd	r25, Y+20	; 0x14
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	9c 8b       	std	Y+20, r25	; 0x14
    243c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243e:	8b 89       	ldd	r24, Y+19	; 0x13
    2440:	9c 89       	ldd	r25, Y+20	; 0x14
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	69 f7       	brne	.-38     	; 0x2420 <__stack+0x221>
    2446:	14 c0       	rjmp	.+40     	; 0x2470 <__stack+0x271>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2448:	6d 89       	ldd	r22, Y+21	; 0x15
    244a:	7e 89       	ldd	r23, Y+22	; 0x16
    244c:	8f 89       	ldd	r24, Y+23	; 0x17
    244e:	98 8d       	ldd	r25, Y+24	; 0x18
    2450:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9c 8b       	std	Y+20, r25	; 0x14
    245a:	8b 8b       	std	Y+19, r24	; 0x13
    245c:	8b 89       	ldd	r24, Y+19	; 0x13
    245e:	9c 89       	ldd	r25, Y+20	; 0x14
    2460:	98 8b       	std	Y+16, r25	; 0x10
    2462:	8f 87       	std	Y+15, r24	; 0x0f
    2464:	8f 85       	ldd	r24, Y+15	; 0x0f
    2466:	98 89       	ldd	r25, Y+16	; 0x10
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <__stack+0x269>
    246c:	98 8b       	std	Y+16, r25	; 0x10
    246e:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(1000);

                node++;
    2470:	8d a1       	ldd	r24, Y+37	; 0x25
    2472:	9e a1       	ldd	r25, Y+38	; 0x26
    2474:	01 96       	adiw	r24, 0x01	; 1
    2476:	9e a3       	std	Y+38, r25	; 0x26
    2478:	8d a3       	std	Y+37, r24	; 0x25
            }

            if(node == 3)
    247a:	8d a1       	ldd	r24, Y+37	; 0x25
    247c:	9e a1       	ldd	r25, Y+38	; 0x26
    247e:	83 30       	cpi	r24, 0x03	; 3
    2480:	91 05       	cpc	r25, r1
    2482:	09 f0       	breq	.+2      	; 0x2486 <__stack+0x287>
    2484:	72 c0       	rjmp	.+228    	; 0x256a <__stack+0x36b>
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	90 e8       	ldi	r25, 0x80	; 128
    248a:	ab e3       	ldi	r26, 0x3B	; 59
    248c:	b5 e4       	ldi	r27, 0x45	; 69
    248e:	8b 87       	std	Y+11, r24	; 0x0b
    2490:	9c 87       	std	Y+12, r25	; 0x0c
    2492:	ad 87       	std	Y+13, r26	; 0x0d
    2494:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2496:	6b 85       	ldd	r22, Y+11	; 0x0b
    2498:	7c 85       	ldd	r23, Y+12	; 0x0c
    249a:	8d 85       	ldd	r24, Y+13	; 0x0d
    249c:	9e 85       	ldd	r25, Y+14	; 0x0e
    249e:	26 e6       	ldi	r18, 0x66	; 102
    24a0:	36 e6       	ldi	r19, 0x66	; 102
    24a2:	46 e6       	ldi	r20, 0x66	; 102
    24a4:	55 e4       	ldi	r21, 0x45	; 69
    24a6:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	8f 83       	std	Y+7, r24	; 0x07
    24b0:	98 87       	std	Y+8, r25	; 0x08
    24b2:	a9 87       	std	Y+9, r26	; 0x09
    24b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24b6:	6f 81       	ldd	r22, Y+7	; 0x07
    24b8:	78 85       	ldd	r23, Y+8	; 0x08
    24ba:	89 85       	ldd	r24, Y+9	; 0x09
    24bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e8       	ldi	r20, 0x80	; 128
    24c4:	5f e3       	ldi	r21, 0x3F	; 63
    24c6:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__ltsf2>
    24ca:	88 23       	and	r24, r24
    24cc:	2c f4       	brge	.+10     	; 0x24d8 <__stack+0x2d9>
		__ticks = 1;
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	9e 83       	std	Y+6, r25	; 0x06
    24d4:	8d 83       	std	Y+5, r24	; 0x05
    24d6:	3f c0       	rjmp	.+126    	; 0x2556 <__stack+0x357>
	else if (__tmp > 65535)
    24d8:	6f 81       	ldd	r22, Y+7	; 0x07
    24da:	78 85       	ldd	r23, Y+8	; 0x08
    24dc:	89 85       	ldd	r24, Y+9	; 0x09
    24de:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	3f ef       	ldi	r19, 0xFF	; 255
    24e4:	4f e7       	ldi	r20, 0x7F	; 127
    24e6:	57 e4       	ldi	r21, 0x47	; 71
    24e8:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__gtsf2>
    24ec:	18 16       	cp	r1, r24
    24ee:	4c f5       	brge	.+82     	; 0x2542 <__stack+0x343>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e2       	ldi	r20, 0x20	; 32
    24fe:	51 e4       	ldi	r21, 0x41	; 65
    2500:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	bc 01       	movw	r22, r24
    250a:	cd 01       	movw	r24, r26
    250c:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	9e 83       	std	Y+6, r25	; 0x06
    2516:	8d 83       	std	Y+5, r24	; 0x05
    2518:	0f c0       	rjmp	.+30     	; 0x2538 <__stack+0x339>
    251a:	80 e7       	ldi	r24, 0x70	; 112
    251c:	91 e0       	ldi	r25, 0x01	; 1
    251e:	9c 83       	std	Y+4, r25	; 0x04
    2520:	8b 83       	std	Y+3, r24	; 0x03
    2522:	8b 81       	ldd	r24, Y+3	; 0x03
    2524:	9c 81       	ldd	r25, Y+4	; 0x04
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	f1 f7       	brne	.-4      	; 0x2526 <__stack+0x327>
    252a:	9c 83       	std	Y+4, r25	; 0x04
    252c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252e:	8d 81       	ldd	r24, Y+5	; 0x05
    2530:	9e 81       	ldd	r25, Y+6	; 0x06
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	9e 83       	std	Y+6, r25	; 0x06
    2536:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2538:	8d 81       	ldd	r24, Y+5	; 0x05
    253a:	9e 81       	ldd	r25, Y+6	; 0x06
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	69 f7       	brne	.-38     	; 0x251a <__stack+0x31b>
    2540:	14 c0       	rjmp	.+40     	; 0x256a <__stack+0x36b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2542:	6f 81       	ldd	r22, Y+7	; 0x07
    2544:	78 85       	ldd	r23, Y+8	; 0x08
    2546:	89 85       	ldd	r24, Y+9	; 0x09
    2548:	9a 85       	ldd	r25, Y+10	; 0x0a
    254a:	0e 94 c4 12 	call	0x2588	; 0x2588 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	9e 83       	std	Y+6, r25	; 0x06
    2554:	8d 83       	std	Y+5, r24	; 0x05
    2556:	8d 81       	ldd	r24, Y+5	; 0x05
    2558:	9e 81       	ldd	r25, Y+6	; 0x06
    255a:	9a 83       	std	Y+2, r25	; 0x02
    255c:	89 83       	std	Y+1, r24	; 0x01
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	9a 81       	ldd	r25, Y+2	; 0x02
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	f1 f7       	brne	.-4      	; 0x2562 <__stack+0x363>
    2566:	9a 83       	std	Y+2, r25	; 0x02
    2568:	89 83       	std	Y+1, r24	; 0x01
            {
                _delay_ms(3000);
            }

            if(node == 6)
    256a:	8d a1       	ldd	r24, Y+37	; 0x25
    256c:	9e a1       	ldd	r25, Y+38	; 0x26
    256e:	86 30       	cpi	r24, 0x06	; 6
    2570:	91 05       	cpc	r25, r1
    2572:	19 f4       	brne	.+6      	; 0x257a <__stack+0x37b>
            {
                stop();
    2574:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
    2578:	ff cf       	rjmp	.-2      	; 0x2578 <__stack+0x379>
                while(1);
            }

            else
            {
                forward();
    257a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <forward>
            }

        }

        lastError = error;
    257e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2580:	9e a5       	ldd	r25, Y+46	; 0x2e
    2582:	98 a7       	std	Y+40, r25	; 0x28
    2584:	8f a3       	std	Y+39, r24	; 0x27
    2586:	f7 cd       	rjmp	.-1042   	; 0x2176 <main+0x52>

00002588 <__fixunssfsi>:
    2588:	ef 92       	push	r14
    258a:	ff 92       	push	r15
    258c:	0f 93       	push	r16
    258e:	1f 93       	push	r17
    2590:	7b 01       	movw	r14, r22
    2592:	8c 01       	movw	r16, r24
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e0       	ldi	r20, 0x00	; 0
    259a:	5f e4       	ldi	r21, 0x4F	; 79
    259c:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__gesf2>
    25a0:	88 23       	and	r24, r24
    25a2:	8c f0       	brlt	.+34     	; 0x25c6 <__fixunssfsi+0x3e>
    25a4:	c8 01       	movw	r24, r16
    25a6:	b7 01       	movw	r22, r14
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	40 e0       	ldi	r20, 0x00	; 0
    25ae:	5f e4       	ldi	r21, 0x4F	; 79
    25b0:	0e 94 3c 14 	call	0x2878	; 0x2878 <__subsf3>
    25b4:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__fixsfsi>
    25b8:	9b 01       	movw	r18, r22
    25ba:	ac 01       	movw	r20, r24
    25bc:	20 50       	subi	r18, 0x00	; 0
    25be:	30 40       	sbci	r19, 0x00	; 0
    25c0:	40 40       	sbci	r20, 0x00	; 0
    25c2:	50 48       	sbci	r21, 0x80	; 128
    25c4:	06 c0       	rjmp	.+12     	; 0x25d2 <__fixunssfsi+0x4a>
    25c6:	c8 01       	movw	r24, r16
    25c8:	b7 01       	movw	r22, r14
    25ca:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__fixsfsi>
    25ce:	9b 01       	movw	r18, r22
    25d0:	ac 01       	movw	r20, r24
    25d2:	b9 01       	movw	r22, r18
    25d4:	ca 01       	movw	r24, r20
    25d6:	1f 91       	pop	r17
    25d8:	0f 91       	pop	r16
    25da:	ff 90       	pop	r15
    25dc:	ef 90       	pop	r14
    25de:	08 95       	ret

000025e0 <_fpadd_parts>:
    25e0:	a0 e0       	ldi	r26, 0x00	; 0
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e6 ef       	ldi	r30, 0xF6	; 246
    25e6:	f2 e1       	ldi	r31, 0x12	; 18
    25e8:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__prologue_saves__>
    25ec:	dc 01       	movw	r26, r24
    25ee:	2b 01       	movw	r4, r22
    25f0:	fa 01       	movw	r30, r20
    25f2:	9c 91       	ld	r25, X
    25f4:	92 30       	cpi	r25, 0x02	; 2
    25f6:	08 f4       	brcc	.+2      	; 0x25fa <_fpadd_parts+0x1a>
    25f8:	39 c1       	rjmp	.+626    	; 0x286c <_fpadd_parts+0x28c>
    25fa:	eb 01       	movw	r28, r22
    25fc:	88 81       	ld	r24, Y
    25fe:	82 30       	cpi	r24, 0x02	; 2
    2600:	08 f4       	brcc	.+2      	; 0x2604 <_fpadd_parts+0x24>
    2602:	33 c1       	rjmp	.+614    	; 0x286a <_fpadd_parts+0x28a>
    2604:	94 30       	cpi	r25, 0x04	; 4
    2606:	69 f4       	brne	.+26     	; 0x2622 <_fpadd_parts+0x42>
    2608:	84 30       	cpi	r24, 0x04	; 4
    260a:	09 f0       	breq	.+2      	; 0x260e <_fpadd_parts+0x2e>
    260c:	2f c1       	rjmp	.+606    	; 0x286c <_fpadd_parts+0x28c>
    260e:	11 96       	adiw	r26, 0x01	; 1
    2610:	9c 91       	ld	r25, X
    2612:	11 97       	sbiw	r26, 0x01	; 1
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	98 17       	cp	r25, r24
    2618:	09 f4       	brne	.+2      	; 0x261c <_fpadd_parts+0x3c>
    261a:	28 c1       	rjmp	.+592    	; 0x286c <_fpadd_parts+0x28c>
    261c:	a0 e0       	ldi	r26, 0x00	; 0
    261e:	b2 e0       	ldi	r27, 0x02	; 2
    2620:	25 c1       	rjmp	.+586    	; 0x286c <_fpadd_parts+0x28c>
    2622:	84 30       	cpi	r24, 0x04	; 4
    2624:	09 f4       	brne	.+2      	; 0x2628 <_fpadd_parts+0x48>
    2626:	21 c1       	rjmp	.+578    	; 0x286a <_fpadd_parts+0x28a>
    2628:	82 30       	cpi	r24, 0x02	; 2
    262a:	a9 f4       	brne	.+42     	; 0x2656 <_fpadd_parts+0x76>
    262c:	92 30       	cpi	r25, 0x02	; 2
    262e:	09 f0       	breq	.+2      	; 0x2632 <_fpadd_parts+0x52>
    2630:	1d c1       	rjmp	.+570    	; 0x286c <_fpadd_parts+0x28c>
    2632:	9a 01       	movw	r18, r20
    2634:	ad 01       	movw	r20, r26
    2636:	88 e0       	ldi	r24, 0x08	; 8
    2638:	ea 01       	movw	r28, r20
    263a:	09 90       	ld	r0, Y+
    263c:	ae 01       	movw	r20, r28
    263e:	e9 01       	movw	r28, r18
    2640:	09 92       	st	Y+, r0
    2642:	9e 01       	movw	r18, r28
    2644:	81 50       	subi	r24, 0x01	; 1
    2646:	c1 f7       	brne	.-16     	; 0x2638 <_fpadd_parts+0x58>
    2648:	e2 01       	movw	r28, r4
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	11 96       	adiw	r26, 0x01	; 1
    264e:	9c 91       	ld	r25, X
    2650:	89 23       	and	r24, r25
    2652:	81 83       	std	Z+1, r24	; 0x01
    2654:	08 c1       	rjmp	.+528    	; 0x2866 <_fpadd_parts+0x286>
    2656:	92 30       	cpi	r25, 0x02	; 2
    2658:	09 f4       	brne	.+2      	; 0x265c <_fpadd_parts+0x7c>
    265a:	07 c1       	rjmp	.+526    	; 0x286a <_fpadd_parts+0x28a>
    265c:	12 96       	adiw	r26, 0x02	; 2
    265e:	2d 90       	ld	r2, X+
    2660:	3c 90       	ld	r3, X
    2662:	13 97       	sbiw	r26, 0x03	; 3
    2664:	eb 01       	movw	r28, r22
    2666:	8a 81       	ldd	r24, Y+2	; 0x02
    2668:	9b 81       	ldd	r25, Y+3	; 0x03
    266a:	14 96       	adiw	r26, 0x04	; 4
    266c:	ad 90       	ld	r10, X+
    266e:	bd 90       	ld	r11, X+
    2670:	cd 90       	ld	r12, X+
    2672:	dc 90       	ld	r13, X
    2674:	17 97       	sbiw	r26, 0x07	; 7
    2676:	ec 80       	ldd	r14, Y+4	; 0x04
    2678:	fd 80       	ldd	r15, Y+5	; 0x05
    267a:	0e 81       	ldd	r16, Y+6	; 0x06
    267c:	1f 81       	ldd	r17, Y+7	; 0x07
    267e:	91 01       	movw	r18, r2
    2680:	28 1b       	sub	r18, r24
    2682:	39 0b       	sbc	r19, r25
    2684:	b9 01       	movw	r22, r18
    2686:	37 ff       	sbrs	r19, 7
    2688:	04 c0       	rjmp	.+8      	; 0x2692 <_fpadd_parts+0xb2>
    268a:	66 27       	eor	r22, r22
    268c:	77 27       	eor	r23, r23
    268e:	62 1b       	sub	r22, r18
    2690:	73 0b       	sbc	r23, r19
    2692:	60 32       	cpi	r22, 0x20	; 32
    2694:	71 05       	cpc	r23, r1
    2696:	0c f0       	brlt	.+2      	; 0x269a <_fpadd_parts+0xba>
    2698:	61 c0       	rjmp	.+194    	; 0x275c <_fpadd_parts+0x17c>
    269a:	12 16       	cp	r1, r18
    269c:	13 06       	cpc	r1, r19
    269e:	6c f5       	brge	.+90     	; 0x26fa <_fpadd_parts+0x11a>
    26a0:	37 01       	movw	r6, r14
    26a2:	48 01       	movw	r8, r16
    26a4:	06 2e       	mov	r0, r22
    26a6:	04 c0       	rjmp	.+8      	; 0x26b0 <_fpadd_parts+0xd0>
    26a8:	96 94       	lsr	r9
    26aa:	87 94       	ror	r8
    26ac:	77 94       	ror	r7
    26ae:	67 94       	ror	r6
    26b0:	0a 94       	dec	r0
    26b2:	d2 f7       	brpl	.-12     	; 0x26a8 <_fpadd_parts+0xc8>
    26b4:	21 e0       	ldi	r18, 0x01	; 1
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	50 e0       	ldi	r21, 0x00	; 0
    26bc:	04 c0       	rjmp	.+8      	; 0x26c6 <_fpadd_parts+0xe6>
    26be:	22 0f       	add	r18, r18
    26c0:	33 1f       	adc	r19, r19
    26c2:	44 1f       	adc	r20, r20
    26c4:	55 1f       	adc	r21, r21
    26c6:	6a 95       	dec	r22
    26c8:	d2 f7       	brpl	.-12     	; 0x26be <_fpadd_parts+0xde>
    26ca:	21 50       	subi	r18, 0x01	; 1
    26cc:	30 40       	sbci	r19, 0x00	; 0
    26ce:	40 40       	sbci	r20, 0x00	; 0
    26d0:	50 40       	sbci	r21, 0x00	; 0
    26d2:	2e 21       	and	r18, r14
    26d4:	3f 21       	and	r19, r15
    26d6:	40 23       	and	r20, r16
    26d8:	51 23       	and	r21, r17
    26da:	21 15       	cp	r18, r1
    26dc:	31 05       	cpc	r19, r1
    26de:	41 05       	cpc	r20, r1
    26e0:	51 05       	cpc	r21, r1
    26e2:	21 f0       	breq	.+8      	; 0x26ec <_fpadd_parts+0x10c>
    26e4:	21 e0       	ldi	r18, 0x01	; 1
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	40 e0       	ldi	r20, 0x00	; 0
    26ea:	50 e0       	ldi	r21, 0x00	; 0
    26ec:	79 01       	movw	r14, r18
    26ee:	8a 01       	movw	r16, r20
    26f0:	e6 28       	or	r14, r6
    26f2:	f7 28       	or	r15, r7
    26f4:	08 29       	or	r16, r8
    26f6:	19 29       	or	r17, r9
    26f8:	3c c0       	rjmp	.+120    	; 0x2772 <_fpadd_parts+0x192>
    26fa:	23 2b       	or	r18, r19
    26fc:	d1 f1       	breq	.+116    	; 0x2772 <_fpadd_parts+0x192>
    26fe:	26 0e       	add	r2, r22
    2700:	37 1e       	adc	r3, r23
    2702:	35 01       	movw	r6, r10
    2704:	46 01       	movw	r8, r12
    2706:	06 2e       	mov	r0, r22
    2708:	04 c0       	rjmp	.+8      	; 0x2712 <_fpadd_parts+0x132>
    270a:	96 94       	lsr	r9
    270c:	87 94       	ror	r8
    270e:	77 94       	ror	r7
    2710:	67 94       	ror	r6
    2712:	0a 94       	dec	r0
    2714:	d2 f7       	brpl	.-12     	; 0x270a <_fpadd_parts+0x12a>
    2716:	21 e0       	ldi	r18, 0x01	; 1
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	40 e0       	ldi	r20, 0x00	; 0
    271c:	50 e0       	ldi	r21, 0x00	; 0
    271e:	04 c0       	rjmp	.+8      	; 0x2728 <_fpadd_parts+0x148>
    2720:	22 0f       	add	r18, r18
    2722:	33 1f       	adc	r19, r19
    2724:	44 1f       	adc	r20, r20
    2726:	55 1f       	adc	r21, r21
    2728:	6a 95       	dec	r22
    272a:	d2 f7       	brpl	.-12     	; 0x2720 <_fpadd_parts+0x140>
    272c:	21 50       	subi	r18, 0x01	; 1
    272e:	30 40       	sbci	r19, 0x00	; 0
    2730:	40 40       	sbci	r20, 0x00	; 0
    2732:	50 40       	sbci	r21, 0x00	; 0
    2734:	2a 21       	and	r18, r10
    2736:	3b 21       	and	r19, r11
    2738:	4c 21       	and	r20, r12
    273a:	5d 21       	and	r21, r13
    273c:	21 15       	cp	r18, r1
    273e:	31 05       	cpc	r19, r1
    2740:	41 05       	cpc	r20, r1
    2742:	51 05       	cpc	r21, r1
    2744:	21 f0       	breq	.+8      	; 0x274e <_fpadd_parts+0x16e>
    2746:	21 e0       	ldi	r18, 0x01	; 1
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e0       	ldi	r20, 0x00	; 0
    274c:	50 e0       	ldi	r21, 0x00	; 0
    274e:	59 01       	movw	r10, r18
    2750:	6a 01       	movw	r12, r20
    2752:	a6 28       	or	r10, r6
    2754:	b7 28       	or	r11, r7
    2756:	c8 28       	or	r12, r8
    2758:	d9 28       	or	r13, r9
    275a:	0b c0       	rjmp	.+22     	; 0x2772 <_fpadd_parts+0x192>
    275c:	82 15       	cp	r24, r2
    275e:	93 05       	cpc	r25, r3
    2760:	2c f0       	brlt	.+10     	; 0x276c <_fpadd_parts+0x18c>
    2762:	1c 01       	movw	r2, r24
    2764:	aa 24       	eor	r10, r10
    2766:	bb 24       	eor	r11, r11
    2768:	65 01       	movw	r12, r10
    276a:	03 c0       	rjmp	.+6      	; 0x2772 <_fpadd_parts+0x192>
    276c:	ee 24       	eor	r14, r14
    276e:	ff 24       	eor	r15, r15
    2770:	87 01       	movw	r16, r14
    2772:	11 96       	adiw	r26, 0x01	; 1
    2774:	9c 91       	ld	r25, X
    2776:	d2 01       	movw	r26, r4
    2778:	11 96       	adiw	r26, 0x01	; 1
    277a:	8c 91       	ld	r24, X
    277c:	98 17       	cp	r25, r24
    277e:	09 f4       	brne	.+2      	; 0x2782 <_fpadd_parts+0x1a2>
    2780:	45 c0       	rjmp	.+138    	; 0x280c <_fpadd_parts+0x22c>
    2782:	99 23       	and	r25, r25
    2784:	39 f0       	breq	.+14     	; 0x2794 <_fpadd_parts+0x1b4>
    2786:	a8 01       	movw	r20, r16
    2788:	97 01       	movw	r18, r14
    278a:	2a 19       	sub	r18, r10
    278c:	3b 09       	sbc	r19, r11
    278e:	4c 09       	sbc	r20, r12
    2790:	5d 09       	sbc	r21, r13
    2792:	06 c0       	rjmp	.+12     	; 0x27a0 <_fpadd_parts+0x1c0>
    2794:	a6 01       	movw	r20, r12
    2796:	95 01       	movw	r18, r10
    2798:	2e 19       	sub	r18, r14
    279a:	3f 09       	sbc	r19, r15
    279c:	40 0b       	sbc	r20, r16
    279e:	51 0b       	sbc	r21, r17
    27a0:	57 fd       	sbrc	r21, 7
    27a2:	08 c0       	rjmp	.+16     	; 0x27b4 <_fpadd_parts+0x1d4>
    27a4:	11 82       	std	Z+1, r1	; 0x01
    27a6:	33 82       	std	Z+3, r3	; 0x03
    27a8:	22 82       	std	Z+2, r2	; 0x02
    27aa:	24 83       	std	Z+4, r18	; 0x04
    27ac:	35 83       	std	Z+5, r19	; 0x05
    27ae:	46 83       	std	Z+6, r20	; 0x06
    27b0:	57 83       	std	Z+7, r21	; 0x07
    27b2:	1d c0       	rjmp	.+58     	; 0x27ee <_fpadd_parts+0x20e>
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	81 83       	std	Z+1, r24	; 0x01
    27b8:	33 82       	std	Z+3, r3	; 0x03
    27ba:	22 82       	std	Z+2, r2	; 0x02
    27bc:	88 27       	eor	r24, r24
    27be:	99 27       	eor	r25, r25
    27c0:	dc 01       	movw	r26, r24
    27c2:	82 1b       	sub	r24, r18
    27c4:	93 0b       	sbc	r25, r19
    27c6:	a4 0b       	sbc	r26, r20
    27c8:	b5 0b       	sbc	r27, r21
    27ca:	84 83       	std	Z+4, r24	; 0x04
    27cc:	95 83       	std	Z+5, r25	; 0x05
    27ce:	a6 83       	std	Z+6, r26	; 0x06
    27d0:	b7 83       	std	Z+7, r27	; 0x07
    27d2:	0d c0       	rjmp	.+26     	; 0x27ee <_fpadd_parts+0x20e>
    27d4:	22 0f       	add	r18, r18
    27d6:	33 1f       	adc	r19, r19
    27d8:	44 1f       	adc	r20, r20
    27da:	55 1f       	adc	r21, r21
    27dc:	24 83       	std	Z+4, r18	; 0x04
    27de:	35 83       	std	Z+5, r19	; 0x05
    27e0:	46 83       	std	Z+6, r20	; 0x06
    27e2:	57 83       	std	Z+7, r21	; 0x07
    27e4:	82 81       	ldd	r24, Z+2	; 0x02
    27e6:	93 81       	ldd	r25, Z+3	; 0x03
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	93 83       	std	Z+3, r25	; 0x03
    27ec:	82 83       	std	Z+2, r24	; 0x02
    27ee:	24 81       	ldd	r18, Z+4	; 0x04
    27f0:	35 81       	ldd	r19, Z+5	; 0x05
    27f2:	46 81       	ldd	r20, Z+6	; 0x06
    27f4:	57 81       	ldd	r21, Z+7	; 0x07
    27f6:	da 01       	movw	r26, r20
    27f8:	c9 01       	movw	r24, r18
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	a1 09       	sbc	r26, r1
    27fe:	b1 09       	sbc	r27, r1
    2800:	8f 5f       	subi	r24, 0xFF	; 255
    2802:	9f 4f       	sbci	r25, 0xFF	; 255
    2804:	af 4f       	sbci	r26, 0xFF	; 255
    2806:	bf 43       	sbci	r27, 0x3F	; 63
    2808:	28 f3       	brcs	.-54     	; 0x27d4 <_fpadd_parts+0x1f4>
    280a:	0b c0       	rjmp	.+22     	; 0x2822 <_fpadd_parts+0x242>
    280c:	91 83       	std	Z+1, r25	; 0x01
    280e:	33 82       	std	Z+3, r3	; 0x03
    2810:	22 82       	std	Z+2, r2	; 0x02
    2812:	ea 0c       	add	r14, r10
    2814:	fb 1c       	adc	r15, r11
    2816:	0c 1d       	adc	r16, r12
    2818:	1d 1d       	adc	r17, r13
    281a:	e4 82       	std	Z+4, r14	; 0x04
    281c:	f5 82       	std	Z+5, r15	; 0x05
    281e:	06 83       	std	Z+6, r16	; 0x06
    2820:	17 83       	std	Z+7, r17	; 0x07
    2822:	83 e0       	ldi	r24, 0x03	; 3
    2824:	80 83       	st	Z, r24
    2826:	24 81       	ldd	r18, Z+4	; 0x04
    2828:	35 81       	ldd	r19, Z+5	; 0x05
    282a:	46 81       	ldd	r20, Z+6	; 0x06
    282c:	57 81       	ldd	r21, Z+7	; 0x07
    282e:	57 ff       	sbrs	r21, 7
    2830:	1a c0       	rjmp	.+52     	; 0x2866 <_fpadd_parts+0x286>
    2832:	c9 01       	movw	r24, r18
    2834:	aa 27       	eor	r26, r26
    2836:	97 fd       	sbrc	r25, 7
    2838:	a0 95       	com	r26
    283a:	ba 2f       	mov	r27, r26
    283c:	81 70       	andi	r24, 0x01	; 1
    283e:	90 70       	andi	r25, 0x00	; 0
    2840:	a0 70       	andi	r26, 0x00	; 0
    2842:	b0 70       	andi	r27, 0x00	; 0
    2844:	56 95       	lsr	r21
    2846:	47 95       	ror	r20
    2848:	37 95       	ror	r19
    284a:	27 95       	ror	r18
    284c:	82 2b       	or	r24, r18
    284e:	93 2b       	or	r25, r19
    2850:	a4 2b       	or	r26, r20
    2852:	b5 2b       	or	r27, r21
    2854:	84 83       	std	Z+4, r24	; 0x04
    2856:	95 83       	std	Z+5, r25	; 0x05
    2858:	a6 83       	std	Z+6, r26	; 0x06
    285a:	b7 83       	std	Z+7, r27	; 0x07
    285c:	82 81       	ldd	r24, Z+2	; 0x02
    285e:	93 81       	ldd	r25, Z+3	; 0x03
    2860:	01 96       	adiw	r24, 0x01	; 1
    2862:	93 83       	std	Z+3, r25	; 0x03
    2864:	82 83       	std	Z+2, r24	; 0x02
    2866:	df 01       	movw	r26, r30
    2868:	01 c0       	rjmp	.+2      	; 0x286c <_fpadd_parts+0x28c>
    286a:	d2 01       	movw	r26, r4
    286c:	cd 01       	movw	r24, r26
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
    2872:	e2 e1       	ldi	r30, 0x12	; 18
    2874:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__epilogue_restores__>

00002878 <__subsf3>:
    2878:	a0 e2       	ldi	r26, 0x20	; 32
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	e2 e4       	ldi	r30, 0x42	; 66
    287e:	f4 e1       	ldi	r31, 0x14	; 20
    2880:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__prologue_saves__+0x18>
    2884:	69 83       	std	Y+1, r22	; 0x01
    2886:	7a 83       	std	Y+2, r23	; 0x02
    2888:	8b 83       	std	Y+3, r24	; 0x03
    288a:	9c 83       	std	Y+4, r25	; 0x04
    288c:	2d 83       	std	Y+5, r18	; 0x05
    288e:	3e 83       	std	Y+6, r19	; 0x06
    2890:	4f 83       	std	Y+7, r20	; 0x07
    2892:	58 87       	std	Y+8, r21	; 0x08
    2894:	e9 e0       	ldi	r30, 0x09	; 9
    2896:	ee 2e       	mov	r14, r30
    2898:	f1 2c       	mov	r15, r1
    289a:	ec 0e       	add	r14, r28
    289c:	fd 1e       	adc	r15, r29
    289e:	ce 01       	movw	r24, r28
    28a0:	01 96       	adiw	r24, 0x01	; 1
    28a2:	b7 01       	movw	r22, r14
    28a4:	0e 94 c1 18 	call	0x3182	; 0x3182 <__unpack_f>
    28a8:	8e 01       	movw	r16, r28
    28aa:	0f 5e       	subi	r16, 0xEF	; 239
    28ac:	1f 4f       	sbci	r17, 0xFF	; 255
    28ae:	ce 01       	movw	r24, r28
    28b0:	05 96       	adiw	r24, 0x05	; 5
    28b2:	b8 01       	movw	r22, r16
    28b4:	0e 94 c1 18 	call	0x3182	; 0x3182 <__unpack_f>
    28b8:	8a 89       	ldd	r24, Y+18	; 0x12
    28ba:	91 e0       	ldi	r25, 0x01	; 1
    28bc:	89 27       	eor	r24, r25
    28be:	8a 8b       	std	Y+18, r24	; 0x12
    28c0:	c7 01       	movw	r24, r14
    28c2:	b8 01       	movw	r22, r16
    28c4:	ae 01       	movw	r20, r28
    28c6:	47 5e       	subi	r20, 0xE7	; 231
    28c8:	5f 4f       	sbci	r21, 0xFF	; 255
    28ca:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <_fpadd_parts>
    28ce:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__pack_f>
    28d2:	a0 96       	adiw	r28, 0x20	; 32
    28d4:	e6 e0       	ldi	r30, 0x06	; 6
    28d6:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__epilogue_restores__+0x18>

000028da <__addsf3>:
    28da:	a0 e2       	ldi	r26, 0x20	; 32
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	e3 e7       	ldi	r30, 0x73	; 115
    28e0:	f4 e1       	ldi	r31, 0x14	; 20
    28e2:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__prologue_saves__+0x18>
    28e6:	69 83       	std	Y+1, r22	; 0x01
    28e8:	7a 83       	std	Y+2, r23	; 0x02
    28ea:	8b 83       	std	Y+3, r24	; 0x03
    28ec:	9c 83       	std	Y+4, r25	; 0x04
    28ee:	2d 83       	std	Y+5, r18	; 0x05
    28f0:	3e 83       	std	Y+6, r19	; 0x06
    28f2:	4f 83       	std	Y+7, r20	; 0x07
    28f4:	58 87       	std	Y+8, r21	; 0x08
    28f6:	f9 e0       	ldi	r31, 0x09	; 9
    28f8:	ef 2e       	mov	r14, r31
    28fa:	f1 2c       	mov	r15, r1
    28fc:	ec 0e       	add	r14, r28
    28fe:	fd 1e       	adc	r15, r29
    2900:	ce 01       	movw	r24, r28
    2902:	01 96       	adiw	r24, 0x01	; 1
    2904:	b7 01       	movw	r22, r14
    2906:	0e 94 c1 18 	call	0x3182	; 0x3182 <__unpack_f>
    290a:	8e 01       	movw	r16, r28
    290c:	0f 5e       	subi	r16, 0xEF	; 239
    290e:	1f 4f       	sbci	r17, 0xFF	; 255
    2910:	ce 01       	movw	r24, r28
    2912:	05 96       	adiw	r24, 0x05	; 5
    2914:	b8 01       	movw	r22, r16
    2916:	0e 94 c1 18 	call	0x3182	; 0x3182 <__unpack_f>
    291a:	c7 01       	movw	r24, r14
    291c:	b8 01       	movw	r22, r16
    291e:	ae 01       	movw	r20, r28
    2920:	47 5e       	subi	r20, 0xE7	; 231
    2922:	5f 4f       	sbci	r21, 0xFF	; 255
    2924:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <_fpadd_parts>
    2928:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__pack_f>
    292c:	a0 96       	adiw	r28, 0x20	; 32
    292e:	e6 e0       	ldi	r30, 0x06	; 6
    2930:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__epilogue_restores__+0x18>

00002934 <__mulsf3>:
    2934:	a0 e2       	ldi	r26, 0x20	; 32
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	e0 ea       	ldi	r30, 0xA0	; 160
    293a:	f4 e1       	ldi	r31, 0x14	; 20
    293c:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__prologue_saves__>
    2940:	69 83       	std	Y+1, r22	; 0x01
    2942:	7a 83       	std	Y+2, r23	; 0x02
    2944:	8b 83       	std	Y+3, r24	; 0x03
    2946:	9c 83       	std	Y+4, r25	; 0x04
    2948:	2d 83       	std	Y+5, r18	; 0x05
    294a:	3e 83       	std	Y+6, r19	; 0x06
    294c:	4f 83       	std	Y+7, r20	; 0x07
    294e:	58 87       	std	Y+8, r21	; 0x08
    2950:	ce 01       	movw	r24, r28
    2952:	01 96       	adiw	r24, 0x01	; 1
    2954:	be 01       	movw	r22, r28
    2956:	67 5f       	subi	r22, 0xF7	; 247
    2958:	7f 4f       	sbci	r23, 0xFF	; 255
    295a:	0e 94 c1 18 	call	0x3182	; 0x3182 <__unpack_f>
    295e:	ce 01       	movw	r24, r28
    2960:	05 96       	adiw	r24, 0x05	; 5
    2962:	be 01       	movw	r22, r28
    2964:	6f 5e       	subi	r22, 0xEF	; 239
    2966:	7f 4f       	sbci	r23, 0xFF	; 255
    2968:	0e 94 c1 18 	call	0x3182	; 0x3182 <__unpack_f>
    296c:	99 85       	ldd	r25, Y+9	; 0x09
    296e:	92 30       	cpi	r25, 0x02	; 2
    2970:	88 f0       	brcs	.+34     	; 0x2994 <__mulsf3+0x60>
    2972:	89 89       	ldd	r24, Y+17	; 0x11
    2974:	82 30       	cpi	r24, 0x02	; 2
    2976:	c8 f0       	brcs	.+50     	; 0x29aa <__mulsf3+0x76>
    2978:	94 30       	cpi	r25, 0x04	; 4
    297a:	19 f4       	brne	.+6      	; 0x2982 <__mulsf3+0x4e>
    297c:	82 30       	cpi	r24, 0x02	; 2
    297e:	51 f4       	brne	.+20     	; 0x2994 <__mulsf3+0x60>
    2980:	04 c0       	rjmp	.+8      	; 0x298a <__mulsf3+0x56>
    2982:	84 30       	cpi	r24, 0x04	; 4
    2984:	29 f4       	brne	.+10     	; 0x2990 <__mulsf3+0x5c>
    2986:	92 30       	cpi	r25, 0x02	; 2
    2988:	81 f4       	brne	.+32     	; 0x29aa <__mulsf3+0x76>
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	92 e0       	ldi	r25, 0x02	; 2
    298e:	c6 c0       	rjmp	.+396    	; 0x2b1c <__mulsf3+0x1e8>
    2990:	92 30       	cpi	r25, 0x02	; 2
    2992:	49 f4       	brne	.+18     	; 0x29a6 <__mulsf3+0x72>
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	9a 85       	ldd	r25, Y+10	; 0x0a
    2998:	8a 89       	ldd	r24, Y+18	; 0x12
    299a:	98 13       	cpse	r25, r24
    299c:	21 e0       	ldi	r18, 0x01	; 1
    299e:	2a 87       	std	Y+10, r18	; 0x0a
    29a0:	ce 01       	movw	r24, r28
    29a2:	09 96       	adiw	r24, 0x09	; 9
    29a4:	bb c0       	rjmp	.+374    	; 0x2b1c <__mulsf3+0x1e8>
    29a6:	82 30       	cpi	r24, 0x02	; 2
    29a8:	49 f4       	brne	.+18     	; 0x29bc <__mulsf3+0x88>
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ae:	8a 89       	ldd	r24, Y+18	; 0x12
    29b0:	98 13       	cpse	r25, r24
    29b2:	21 e0       	ldi	r18, 0x01	; 1
    29b4:	2a 8b       	std	Y+18, r18	; 0x12
    29b6:	ce 01       	movw	r24, r28
    29b8:	41 96       	adiw	r24, 0x11	; 17
    29ba:	b0 c0       	rjmp	.+352    	; 0x2b1c <__mulsf3+0x1e8>
    29bc:	2d 84       	ldd	r2, Y+13	; 0x0d
    29be:	3e 84       	ldd	r3, Y+14	; 0x0e
    29c0:	4f 84       	ldd	r4, Y+15	; 0x0f
    29c2:	58 88       	ldd	r5, Y+16	; 0x10
    29c4:	6d 88       	ldd	r6, Y+21	; 0x15
    29c6:	7e 88       	ldd	r7, Y+22	; 0x16
    29c8:	8f 88       	ldd	r8, Y+23	; 0x17
    29ca:	98 8c       	ldd	r9, Y+24	; 0x18
    29cc:	ee 24       	eor	r14, r14
    29ce:	ff 24       	eor	r15, r15
    29d0:	87 01       	movw	r16, r14
    29d2:	aa 24       	eor	r10, r10
    29d4:	bb 24       	eor	r11, r11
    29d6:	65 01       	movw	r12, r10
    29d8:	40 e0       	ldi	r20, 0x00	; 0
    29da:	50 e0       	ldi	r21, 0x00	; 0
    29dc:	60 e0       	ldi	r22, 0x00	; 0
    29de:	70 e0       	ldi	r23, 0x00	; 0
    29e0:	e0 e0       	ldi	r30, 0x00	; 0
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	c1 01       	movw	r24, r2
    29e6:	81 70       	andi	r24, 0x01	; 1
    29e8:	90 70       	andi	r25, 0x00	; 0
    29ea:	89 2b       	or	r24, r25
    29ec:	e9 f0       	breq	.+58     	; 0x2a28 <__mulsf3+0xf4>
    29ee:	e6 0c       	add	r14, r6
    29f0:	f7 1c       	adc	r15, r7
    29f2:	08 1d       	adc	r16, r8
    29f4:	19 1d       	adc	r17, r9
    29f6:	9a 01       	movw	r18, r20
    29f8:	ab 01       	movw	r20, r22
    29fa:	2a 0d       	add	r18, r10
    29fc:	3b 1d       	adc	r19, r11
    29fe:	4c 1d       	adc	r20, r12
    2a00:	5d 1d       	adc	r21, r13
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	a0 e0       	ldi	r26, 0x00	; 0
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	e6 14       	cp	r14, r6
    2a0c:	f7 04       	cpc	r15, r7
    2a0e:	08 05       	cpc	r16, r8
    2a10:	19 05       	cpc	r17, r9
    2a12:	20 f4       	brcc	.+8      	; 0x2a1c <__mulsf3+0xe8>
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	a0 e0       	ldi	r26, 0x00	; 0
    2a1a:	b0 e0       	ldi	r27, 0x00	; 0
    2a1c:	ba 01       	movw	r22, r20
    2a1e:	a9 01       	movw	r20, r18
    2a20:	48 0f       	add	r20, r24
    2a22:	59 1f       	adc	r21, r25
    2a24:	6a 1f       	adc	r22, r26
    2a26:	7b 1f       	adc	r23, r27
    2a28:	aa 0c       	add	r10, r10
    2a2a:	bb 1c       	adc	r11, r11
    2a2c:	cc 1c       	adc	r12, r12
    2a2e:	dd 1c       	adc	r13, r13
    2a30:	97 fe       	sbrs	r9, 7
    2a32:	08 c0       	rjmp	.+16     	; 0x2a44 <__mulsf3+0x110>
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	a0 e0       	ldi	r26, 0x00	; 0
    2a3a:	b0 e0       	ldi	r27, 0x00	; 0
    2a3c:	a8 2a       	or	r10, r24
    2a3e:	b9 2a       	or	r11, r25
    2a40:	ca 2a       	or	r12, r26
    2a42:	db 2a       	or	r13, r27
    2a44:	31 96       	adiw	r30, 0x01	; 1
    2a46:	e0 32       	cpi	r30, 0x20	; 32
    2a48:	f1 05       	cpc	r31, r1
    2a4a:	49 f0       	breq	.+18     	; 0x2a5e <__mulsf3+0x12a>
    2a4c:	66 0c       	add	r6, r6
    2a4e:	77 1c       	adc	r7, r7
    2a50:	88 1c       	adc	r8, r8
    2a52:	99 1c       	adc	r9, r9
    2a54:	56 94       	lsr	r5
    2a56:	47 94       	ror	r4
    2a58:	37 94       	ror	r3
    2a5a:	27 94       	ror	r2
    2a5c:	c3 cf       	rjmp	.-122    	; 0x29e4 <__mulsf3+0xb0>
    2a5e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2a60:	ea 89       	ldd	r30, Y+18	; 0x12
    2a62:	2b 89       	ldd	r18, Y+19	; 0x13
    2a64:	3c 89       	ldd	r19, Y+20	; 0x14
    2a66:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a68:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a6a:	28 0f       	add	r18, r24
    2a6c:	39 1f       	adc	r19, r25
    2a6e:	2e 5f       	subi	r18, 0xFE	; 254
    2a70:	3f 4f       	sbci	r19, 0xFF	; 255
    2a72:	17 c0       	rjmp	.+46     	; 0x2aa2 <__mulsf3+0x16e>
    2a74:	ca 01       	movw	r24, r20
    2a76:	81 70       	andi	r24, 0x01	; 1
    2a78:	90 70       	andi	r25, 0x00	; 0
    2a7a:	89 2b       	or	r24, r25
    2a7c:	61 f0       	breq	.+24     	; 0x2a96 <__mulsf3+0x162>
    2a7e:	16 95       	lsr	r17
    2a80:	07 95       	ror	r16
    2a82:	f7 94       	ror	r15
    2a84:	e7 94       	ror	r14
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	a0 e0       	ldi	r26, 0x00	; 0
    2a8c:	b0 e8       	ldi	r27, 0x80	; 128
    2a8e:	e8 2a       	or	r14, r24
    2a90:	f9 2a       	or	r15, r25
    2a92:	0a 2b       	or	r16, r26
    2a94:	1b 2b       	or	r17, r27
    2a96:	76 95       	lsr	r23
    2a98:	67 95       	ror	r22
    2a9a:	57 95       	ror	r21
    2a9c:	47 95       	ror	r20
    2a9e:	2f 5f       	subi	r18, 0xFF	; 255
    2aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa2:	77 fd       	sbrc	r23, 7
    2aa4:	e7 cf       	rjmp	.-50     	; 0x2a74 <__mulsf3+0x140>
    2aa6:	0c c0       	rjmp	.+24     	; 0x2ac0 <__mulsf3+0x18c>
    2aa8:	44 0f       	add	r20, r20
    2aaa:	55 1f       	adc	r21, r21
    2aac:	66 1f       	adc	r22, r22
    2aae:	77 1f       	adc	r23, r23
    2ab0:	17 fd       	sbrc	r17, 7
    2ab2:	41 60       	ori	r20, 0x01	; 1
    2ab4:	ee 0c       	add	r14, r14
    2ab6:	ff 1c       	adc	r15, r15
    2ab8:	00 1f       	adc	r16, r16
    2aba:	11 1f       	adc	r17, r17
    2abc:	21 50       	subi	r18, 0x01	; 1
    2abe:	30 40       	sbci	r19, 0x00	; 0
    2ac0:	40 30       	cpi	r20, 0x00	; 0
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	59 07       	cpc	r21, r25
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	69 07       	cpc	r22, r25
    2aca:	90 e4       	ldi	r25, 0x40	; 64
    2acc:	79 07       	cpc	r23, r25
    2ace:	60 f3       	brcs	.-40     	; 0x2aa8 <__mulsf3+0x174>
    2ad0:	2b 8f       	std	Y+27, r18	; 0x1b
    2ad2:	3c 8f       	std	Y+28, r19	; 0x1c
    2ad4:	db 01       	movw	r26, r22
    2ad6:	ca 01       	movw	r24, r20
    2ad8:	8f 77       	andi	r24, 0x7F	; 127
    2ada:	90 70       	andi	r25, 0x00	; 0
    2adc:	a0 70       	andi	r26, 0x00	; 0
    2ade:	b0 70       	andi	r27, 0x00	; 0
    2ae0:	80 34       	cpi	r24, 0x40	; 64
    2ae2:	91 05       	cpc	r25, r1
    2ae4:	a1 05       	cpc	r26, r1
    2ae6:	b1 05       	cpc	r27, r1
    2ae8:	61 f4       	brne	.+24     	; 0x2b02 <__mulsf3+0x1ce>
    2aea:	47 fd       	sbrc	r20, 7
    2aec:	0a c0       	rjmp	.+20     	; 0x2b02 <__mulsf3+0x1ce>
    2aee:	e1 14       	cp	r14, r1
    2af0:	f1 04       	cpc	r15, r1
    2af2:	01 05       	cpc	r16, r1
    2af4:	11 05       	cpc	r17, r1
    2af6:	29 f0       	breq	.+10     	; 0x2b02 <__mulsf3+0x1ce>
    2af8:	40 5c       	subi	r20, 0xC0	; 192
    2afa:	5f 4f       	sbci	r21, 0xFF	; 255
    2afc:	6f 4f       	sbci	r22, 0xFF	; 255
    2afe:	7f 4f       	sbci	r23, 0xFF	; 255
    2b00:	40 78       	andi	r20, 0x80	; 128
    2b02:	1a 8e       	std	Y+26, r1	; 0x1a
    2b04:	fe 17       	cp	r31, r30
    2b06:	11 f0       	breq	.+4      	; 0x2b0c <__mulsf3+0x1d8>
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	8a 8f       	std	Y+26, r24	; 0x1a
    2b0c:	4d 8f       	std	Y+29, r20	; 0x1d
    2b0e:	5e 8f       	std	Y+30, r21	; 0x1e
    2b10:	6f 8f       	std	Y+31, r22	; 0x1f
    2b12:	78 a3       	std	Y+32, r23	; 0x20
    2b14:	83 e0       	ldi	r24, 0x03	; 3
    2b16:	89 8f       	std	Y+25, r24	; 0x19
    2b18:	ce 01       	movw	r24, r28
    2b1a:	49 96       	adiw	r24, 0x19	; 25
    2b1c:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__pack_f>
    2b20:	a0 96       	adiw	r28, 0x20	; 32
    2b22:	e2 e1       	ldi	r30, 0x12	; 18
    2b24:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__epilogue_restores__>

00002b28 <__divsf3>:
    2b28:	a8 e1       	ldi	r26, 0x18	; 24
    2b2a:	b0 e0       	ldi	r27, 0x00	; 0
    2b2c:	ea e9       	ldi	r30, 0x9A	; 154
    2b2e:	f5 e1       	ldi	r31, 0x15	; 21
    2b30:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__prologue_saves__+0x10>
    2b34:	69 83       	std	Y+1, r22	; 0x01
    2b36:	7a 83       	std	Y+2, r23	; 0x02
    2b38:	8b 83       	std	Y+3, r24	; 0x03
    2b3a:	9c 83       	std	Y+4, r25	; 0x04
    2b3c:	2d 83       	std	Y+5, r18	; 0x05
    2b3e:	3e 83       	std	Y+6, r19	; 0x06
    2b40:	4f 83       	std	Y+7, r20	; 0x07
    2b42:	58 87       	std	Y+8, r21	; 0x08
    2b44:	b9 e0       	ldi	r27, 0x09	; 9
    2b46:	eb 2e       	mov	r14, r27
    2b48:	f1 2c       	mov	r15, r1
    2b4a:	ec 0e       	add	r14, r28
    2b4c:	fd 1e       	adc	r15, r29
    2b4e:	ce 01       	movw	r24, r28
    2b50:	01 96       	adiw	r24, 0x01	; 1
    2b52:	b7 01       	movw	r22, r14
    2b54:	0e 94 c1 18 	call	0x3182	; 0x3182 <__unpack_f>
    2b58:	8e 01       	movw	r16, r28
    2b5a:	0f 5e       	subi	r16, 0xEF	; 239
    2b5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b5e:	ce 01       	movw	r24, r28
    2b60:	05 96       	adiw	r24, 0x05	; 5
    2b62:	b8 01       	movw	r22, r16
    2b64:	0e 94 c1 18 	call	0x3182	; 0x3182 <__unpack_f>
    2b68:	29 85       	ldd	r18, Y+9	; 0x09
    2b6a:	22 30       	cpi	r18, 0x02	; 2
    2b6c:	08 f4       	brcc	.+2      	; 0x2b70 <__divsf3+0x48>
    2b6e:	7e c0       	rjmp	.+252    	; 0x2c6c <__divsf3+0x144>
    2b70:	39 89       	ldd	r19, Y+17	; 0x11
    2b72:	32 30       	cpi	r19, 0x02	; 2
    2b74:	10 f4       	brcc	.+4      	; 0x2b7a <__divsf3+0x52>
    2b76:	b8 01       	movw	r22, r16
    2b78:	7c c0       	rjmp	.+248    	; 0x2c72 <__divsf3+0x14a>
    2b7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b7c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b7e:	89 27       	eor	r24, r25
    2b80:	8a 87       	std	Y+10, r24	; 0x0a
    2b82:	24 30       	cpi	r18, 0x04	; 4
    2b84:	11 f0       	breq	.+4      	; 0x2b8a <__divsf3+0x62>
    2b86:	22 30       	cpi	r18, 0x02	; 2
    2b88:	31 f4       	brne	.+12     	; 0x2b96 <__divsf3+0x6e>
    2b8a:	23 17       	cp	r18, r19
    2b8c:	09 f0       	breq	.+2      	; 0x2b90 <__divsf3+0x68>
    2b8e:	6e c0       	rjmp	.+220    	; 0x2c6c <__divsf3+0x144>
    2b90:	60 e0       	ldi	r22, 0x00	; 0
    2b92:	72 e0       	ldi	r23, 0x02	; 2
    2b94:	6e c0       	rjmp	.+220    	; 0x2c72 <__divsf3+0x14a>
    2b96:	34 30       	cpi	r19, 0x04	; 4
    2b98:	39 f4       	brne	.+14     	; 0x2ba8 <__divsf3+0x80>
    2b9a:	1d 86       	std	Y+13, r1	; 0x0d
    2b9c:	1e 86       	std	Y+14, r1	; 0x0e
    2b9e:	1f 86       	std	Y+15, r1	; 0x0f
    2ba0:	18 8a       	std	Y+16, r1	; 0x10
    2ba2:	1c 86       	std	Y+12, r1	; 0x0c
    2ba4:	1b 86       	std	Y+11, r1	; 0x0b
    2ba6:	04 c0       	rjmp	.+8      	; 0x2bb0 <__divsf3+0x88>
    2ba8:	32 30       	cpi	r19, 0x02	; 2
    2baa:	21 f4       	brne	.+8      	; 0x2bb4 <__divsf3+0x8c>
    2bac:	84 e0       	ldi	r24, 0x04	; 4
    2bae:	89 87       	std	Y+9, r24	; 0x09
    2bb0:	b7 01       	movw	r22, r14
    2bb2:	5f c0       	rjmp	.+190    	; 0x2c72 <__divsf3+0x14a>
    2bb4:	2b 85       	ldd	r18, Y+11	; 0x0b
    2bb6:	3c 85       	ldd	r19, Y+12	; 0x0c
    2bb8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bba:	9c 89       	ldd	r25, Y+20	; 0x14
    2bbc:	28 1b       	sub	r18, r24
    2bbe:	39 0b       	sbc	r19, r25
    2bc0:	3c 87       	std	Y+12, r19	; 0x0c
    2bc2:	2b 87       	std	Y+11, r18	; 0x0b
    2bc4:	ed 84       	ldd	r14, Y+13	; 0x0d
    2bc6:	fe 84       	ldd	r15, Y+14	; 0x0e
    2bc8:	0f 85       	ldd	r16, Y+15	; 0x0f
    2bca:	18 89       	ldd	r17, Y+16	; 0x10
    2bcc:	ad 88       	ldd	r10, Y+21	; 0x15
    2bce:	be 88       	ldd	r11, Y+22	; 0x16
    2bd0:	cf 88       	ldd	r12, Y+23	; 0x17
    2bd2:	d8 8c       	ldd	r13, Y+24	; 0x18
    2bd4:	ea 14       	cp	r14, r10
    2bd6:	fb 04       	cpc	r15, r11
    2bd8:	0c 05       	cpc	r16, r12
    2bda:	1d 05       	cpc	r17, r13
    2bdc:	40 f4       	brcc	.+16     	; 0x2bee <__divsf3+0xc6>
    2bde:	ee 0c       	add	r14, r14
    2be0:	ff 1c       	adc	r15, r15
    2be2:	00 1f       	adc	r16, r16
    2be4:	11 1f       	adc	r17, r17
    2be6:	21 50       	subi	r18, 0x01	; 1
    2be8:	30 40       	sbci	r19, 0x00	; 0
    2bea:	3c 87       	std	Y+12, r19	; 0x0c
    2bec:	2b 87       	std	Y+11, r18	; 0x0b
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e0       	ldi	r20, 0x00	; 0
    2bf4:	50 e0       	ldi	r21, 0x00	; 0
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	a0 e0       	ldi	r26, 0x00	; 0
    2bfc:	b0 e4       	ldi	r27, 0x40	; 64
    2bfe:	60 e0       	ldi	r22, 0x00	; 0
    2c00:	70 e0       	ldi	r23, 0x00	; 0
    2c02:	ea 14       	cp	r14, r10
    2c04:	fb 04       	cpc	r15, r11
    2c06:	0c 05       	cpc	r16, r12
    2c08:	1d 05       	cpc	r17, r13
    2c0a:	40 f0       	brcs	.+16     	; 0x2c1c <__divsf3+0xf4>
    2c0c:	28 2b       	or	r18, r24
    2c0e:	39 2b       	or	r19, r25
    2c10:	4a 2b       	or	r20, r26
    2c12:	5b 2b       	or	r21, r27
    2c14:	ea 18       	sub	r14, r10
    2c16:	fb 08       	sbc	r15, r11
    2c18:	0c 09       	sbc	r16, r12
    2c1a:	1d 09       	sbc	r17, r13
    2c1c:	b6 95       	lsr	r27
    2c1e:	a7 95       	ror	r26
    2c20:	97 95       	ror	r25
    2c22:	87 95       	ror	r24
    2c24:	ee 0c       	add	r14, r14
    2c26:	ff 1c       	adc	r15, r15
    2c28:	00 1f       	adc	r16, r16
    2c2a:	11 1f       	adc	r17, r17
    2c2c:	6f 5f       	subi	r22, 0xFF	; 255
    2c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c30:	6f 31       	cpi	r22, 0x1F	; 31
    2c32:	71 05       	cpc	r23, r1
    2c34:	31 f7       	brne	.-52     	; 0x2c02 <__divsf3+0xda>
    2c36:	da 01       	movw	r26, r20
    2c38:	c9 01       	movw	r24, r18
    2c3a:	8f 77       	andi	r24, 0x7F	; 127
    2c3c:	90 70       	andi	r25, 0x00	; 0
    2c3e:	a0 70       	andi	r26, 0x00	; 0
    2c40:	b0 70       	andi	r27, 0x00	; 0
    2c42:	80 34       	cpi	r24, 0x40	; 64
    2c44:	91 05       	cpc	r25, r1
    2c46:	a1 05       	cpc	r26, r1
    2c48:	b1 05       	cpc	r27, r1
    2c4a:	61 f4       	brne	.+24     	; 0x2c64 <__divsf3+0x13c>
    2c4c:	27 fd       	sbrc	r18, 7
    2c4e:	0a c0       	rjmp	.+20     	; 0x2c64 <__divsf3+0x13c>
    2c50:	e1 14       	cp	r14, r1
    2c52:	f1 04       	cpc	r15, r1
    2c54:	01 05       	cpc	r16, r1
    2c56:	11 05       	cpc	r17, r1
    2c58:	29 f0       	breq	.+10     	; 0x2c64 <__divsf3+0x13c>
    2c5a:	20 5c       	subi	r18, 0xC0	; 192
    2c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5e:	4f 4f       	sbci	r20, 0xFF	; 255
    2c60:	5f 4f       	sbci	r21, 0xFF	; 255
    2c62:	20 78       	andi	r18, 0x80	; 128
    2c64:	2d 87       	std	Y+13, r18	; 0x0d
    2c66:	3e 87       	std	Y+14, r19	; 0x0e
    2c68:	4f 87       	std	Y+15, r20	; 0x0f
    2c6a:	58 8b       	std	Y+16, r21	; 0x10
    2c6c:	be 01       	movw	r22, r28
    2c6e:	67 5f       	subi	r22, 0xF7	; 247
    2c70:	7f 4f       	sbci	r23, 0xFF	; 255
    2c72:	cb 01       	movw	r24, r22
    2c74:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__pack_f>
    2c78:	68 96       	adiw	r28, 0x18	; 24
    2c7a:	ea e0       	ldi	r30, 0x0A	; 10
    2c7c:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__epilogue_restores__+0x10>

00002c80 <__gtsf2>:
    2c80:	a8 e1       	ldi	r26, 0x18	; 24
    2c82:	b0 e0       	ldi	r27, 0x00	; 0
    2c84:	e6 e4       	ldi	r30, 0x46	; 70
    2c86:	f6 e1       	ldi	r31, 0x16	; 22
    2c88:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__prologue_saves__+0x18>
    2c8c:	69 83       	std	Y+1, r22	; 0x01
    2c8e:	7a 83       	std	Y+2, r23	; 0x02
    2c90:	8b 83       	std	Y+3, r24	; 0x03
    2c92:	9c 83       	std	Y+4, r25	; 0x04
    2c94:	2d 83       	std	Y+5, r18	; 0x05
    2c96:	3e 83       	std	Y+6, r19	; 0x06
    2c98:	4f 83       	std	Y+7, r20	; 0x07
    2c9a:	58 87       	std	Y+8, r21	; 0x08
    2c9c:	89 e0       	ldi	r24, 0x09	; 9
    2c9e:	e8 2e       	mov	r14, r24
    2ca0:	f1 2c       	mov	r15, r1
    2ca2:	ec 0e       	add	r14, r28
    2ca4:	fd 1e       	adc	r15, r29
    2ca6:	ce 01       	movw	r24, r28
    2ca8:	01 96       	adiw	r24, 0x01	; 1
    2caa:	b7 01       	movw	r22, r14
    2cac:	0e 94 c1 18 	call	0x3182	; 0x3182 <__unpack_f>
    2cb0:	8e 01       	movw	r16, r28
    2cb2:	0f 5e       	subi	r16, 0xEF	; 239
    2cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb6:	ce 01       	movw	r24, r28
    2cb8:	05 96       	adiw	r24, 0x05	; 5
    2cba:	b8 01       	movw	r22, r16
    2cbc:	0e 94 c1 18 	call	0x3182	; 0x3182 <__unpack_f>
    2cc0:	89 85       	ldd	r24, Y+9	; 0x09
    2cc2:	82 30       	cpi	r24, 0x02	; 2
    2cc4:	40 f0       	brcs	.+16     	; 0x2cd6 <__gtsf2+0x56>
    2cc6:	89 89       	ldd	r24, Y+17	; 0x11
    2cc8:	82 30       	cpi	r24, 0x02	; 2
    2cca:	28 f0       	brcs	.+10     	; 0x2cd6 <__gtsf2+0x56>
    2ccc:	c7 01       	movw	r24, r14
    2cce:	b8 01       	movw	r22, r16
    2cd0:	0e 94 39 19 	call	0x3272	; 0x3272 <__fpcmp_parts_f>
    2cd4:	01 c0       	rjmp	.+2      	; 0x2cd8 <__gtsf2+0x58>
    2cd6:	8f ef       	ldi	r24, 0xFF	; 255
    2cd8:	68 96       	adiw	r28, 0x18	; 24
    2cda:	e6 e0       	ldi	r30, 0x06	; 6
    2cdc:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__epilogue_restores__+0x18>

00002ce0 <__gesf2>:
    2ce0:	a8 e1       	ldi	r26, 0x18	; 24
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	e6 e7       	ldi	r30, 0x76	; 118
    2ce6:	f6 e1       	ldi	r31, 0x16	; 22
    2ce8:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__prologue_saves__+0x18>
    2cec:	69 83       	std	Y+1, r22	; 0x01
    2cee:	7a 83       	std	Y+2, r23	; 0x02
    2cf0:	8b 83       	std	Y+3, r24	; 0x03
    2cf2:	9c 83       	std	Y+4, r25	; 0x04
    2cf4:	2d 83       	std	Y+5, r18	; 0x05
    2cf6:	3e 83       	std	Y+6, r19	; 0x06
    2cf8:	4f 83       	std	Y+7, r20	; 0x07
    2cfa:	58 87       	std	Y+8, r21	; 0x08
    2cfc:	89 e0       	ldi	r24, 0x09	; 9
    2cfe:	e8 2e       	mov	r14, r24
    2d00:	f1 2c       	mov	r15, r1
    2d02:	ec 0e       	add	r14, r28
    2d04:	fd 1e       	adc	r15, r29
    2d06:	ce 01       	movw	r24, r28
    2d08:	01 96       	adiw	r24, 0x01	; 1
    2d0a:	b7 01       	movw	r22, r14
    2d0c:	0e 94 c1 18 	call	0x3182	; 0x3182 <__unpack_f>
    2d10:	8e 01       	movw	r16, r28
    2d12:	0f 5e       	subi	r16, 0xEF	; 239
    2d14:	1f 4f       	sbci	r17, 0xFF	; 255
    2d16:	ce 01       	movw	r24, r28
    2d18:	05 96       	adiw	r24, 0x05	; 5
    2d1a:	b8 01       	movw	r22, r16
    2d1c:	0e 94 c1 18 	call	0x3182	; 0x3182 <__unpack_f>
    2d20:	89 85       	ldd	r24, Y+9	; 0x09
    2d22:	82 30       	cpi	r24, 0x02	; 2
    2d24:	40 f0       	brcs	.+16     	; 0x2d36 <__gesf2+0x56>
    2d26:	89 89       	ldd	r24, Y+17	; 0x11
    2d28:	82 30       	cpi	r24, 0x02	; 2
    2d2a:	28 f0       	brcs	.+10     	; 0x2d36 <__gesf2+0x56>
    2d2c:	c7 01       	movw	r24, r14
    2d2e:	b8 01       	movw	r22, r16
    2d30:	0e 94 39 19 	call	0x3272	; 0x3272 <__fpcmp_parts_f>
    2d34:	01 c0       	rjmp	.+2      	; 0x2d38 <__gesf2+0x58>
    2d36:	8f ef       	ldi	r24, 0xFF	; 255
    2d38:	68 96       	adiw	r28, 0x18	; 24
    2d3a:	e6 e0       	ldi	r30, 0x06	; 6
    2d3c:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__epilogue_restores__+0x18>

00002d40 <__ltsf2>:
    2d40:	a8 e1       	ldi	r26, 0x18	; 24
    2d42:	b0 e0       	ldi	r27, 0x00	; 0
    2d44:	e6 ea       	ldi	r30, 0xA6	; 166
    2d46:	f6 e1       	ldi	r31, 0x16	; 22
    2d48:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__prologue_saves__+0x18>
    2d4c:	69 83       	std	Y+1, r22	; 0x01
    2d4e:	7a 83       	std	Y+2, r23	; 0x02
    2d50:	8b 83       	std	Y+3, r24	; 0x03
    2d52:	9c 83       	std	Y+4, r25	; 0x04
    2d54:	2d 83       	std	Y+5, r18	; 0x05
    2d56:	3e 83       	std	Y+6, r19	; 0x06
    2d58:	4f 83       	std	Y+7, r20	; 0x07
    2d5a:	58 87       	std	Y+8, r21	; 0x08
    2d5c:	89 e0       	ldi	r24, 0x09	; 9
    2d5e:	e8 2e       	mov	r14, r24
    2d60:	f1 2c       	mov	r15, r1
    2d62:	ec 0e       	add	r14, r28
    2d64:	fd 1e       	adc	r15, r29
    2d66:	ce 01       	movw	r24, r28
    2d68:	01 96       	adiw	r24, 0x01	; 1
    2d6a:	b7 01       	movw	r22, r14
    2d6c:	0e 94 c1 18 	call	0x3182	; 0x3182 <__unpack_f>
    2d70:	8e 01       	movw	r16, r28
    2d72:	0f 5e       	subi	r16, 0xEF	; 239
    2d74:	1f 4f       	sbci	r17, 0xFF	; 255
    2d76:	ce 01       	movw	r24, r28
    2d78:	05 96       	adiw	r24, 0x05	; 5
    2d7a:	b8 01       	movw	r22, r16
    2d7c:	0e 94 c1 18 	call	0x3182	; 0x3182 <__unpack_f>
    2d80:	89 85       	ldd	r24, Y+9	; 0x09
    2d82:	82 30       	cpi	r24, 0x02	; 2
    2d84:	40 f0       	brcs	.+16     	; 0x2d96 <__ltsf2+0x56>
    2d86:	89 89       	ldd	r24, Y+17	; 0x11
    2d88:	82 30       	cpi	r24, 0x02	; 2
    2d8a:	28 f0       	brcs	.+10     	; 0x2d96 <__ltsf2+0x56>
    2d8c:	c7 01       	movw	r24, r14
    2d8e:	b8 01       	movw	r22, r16
    2d90:	0e 94 39 19 	call	0x3272	; 0x3272 <__fpcmp_parts_f>
    2d94:	01 c0       	rjmp	.+2      	; 0x2d98 <__ltsf2+0x58>
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	68 96       	adiw	r28, 0x18	; 24
    2d9a:	e6 e0       	ldi	r30, 0x06	; 6
    2d9c:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__epilogue_restores__+0x18>

00002da0 <__fixsfsi>:
    2da0:	ac e0       	ldi	r26, 0x0C	; 12
    2da2:	b0 e0       	ldi	r27, 0x00	; 0
    2da4:	e6 ed       	ldi	r30, 0xD6	; 214
    2da6:	f6 e1       	ldi	r31, 0x16	; 22
    2da8:	0c 94 b6 19 	jmp	0x336c	; 0x336c <__prologue_saves__+0x20>
    2dac:	69 83       	std	Y+1, r22	; 0x01
    2dae:	7a 83       	std	Y+2, r23	; 0x02
    2db0:	8b 83       	std	Y+3, r24	; 0x03
    2db2:	9c 83       	std	Y+4, r25	; 0x04
    2db4:	ce 01       	movw	r24, r28
    2db6:	01 96       	adiw	r24, 0x01	; 1
    2db8:	be 01       	movw	r22, r28
    2dba:	6b 5f       	subi	r22, 0xFB	; 251
    2dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dbe:	0e 94 c1 18 	call	0x3182	; 0x3182 <__unpack_f>
    2dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc4:	82 30       	cpi	r24, 0x02	; 2
    2dc6:	61 f1       	breq	.+88     	; 0x2e20 <__fixsfsi+0x80>
    2dc8:	82 30       	cpi	r24, 0x02	; 2
    2dca:	50 f1       	brcs	.+84     	; 0x2e20 <__fixsfsi+0x80>
    2dcc:	84 30       	cpi	r24, 0x04	; 4
    2dce:	21 f4       	brne	.+8      	; 0x2dd8 <__fixsfsi+0x38>
    2dd0:	8e 81       	ldd	r24, Y+6	; 0x06
    2dd2:	88 23       	and	r24, r24
    2dd4:	51 f1       	breq	.+84     	; 0x2e2a <__fixsfsi+0x8a>
    2dd6:	2e c0       	rjmp	.+92     	; 0x2e34 <__fixsfsi+0x94>
    2dd8:	2f 81       	ldd	r18, Y+7	; 0x07
    2dda:	38 85       	ldd	r19, Y+8	; 0x08
    2ddc:	37 fd       	sbrc	r19, 7
    2dde:	20 c0       	rjmp	.+64     	; 0x2e20 <__fixsfsi+0x80>
    2de0:	6e 81       	ldd	r22, Y+6	; 0x06
    2de2:	2f 31       	cpi	r18, 0x1F	; 31
    2de4:	31 05       	cpc	r19, r1
    2de6:	1c f0       	brlt	.+6      	; 0x2dee <__fixsfsi+0x4e>
    2de8:	66 23       	and	r22, r22
    2dea:	f9 f0       	breq	.+62     	; 0x2e2a <__fixsfsi+0x8a>
    2dec:	23 c0       	rjmp	.+70     	; 0x2e34 <__fixsfsi+0x94>
    2dee:	8e e1       	ldi	r24, 0x1E	; 30
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	82 1b       	sub	r24, r18
    2df4:	93 0b       	sbc	r25, r19
    2df6:	29 85       	ldd	r18, Y+9	; 0x09
    2df8:	3a 85       	ldd	r19, Y+10	; 0x0a
    2dfa:	4b 85       	ldd	r20, Y+11	; 0x0b
    2dfc:	5c 85       	ldd	r21, Y+12	; 0x0c
    2dfe:	04 c0       	rjmp	.+8      	; 0x2e08 <__fixsfsi+0x68>
    2e00:	56 95       	lsr	r21
    2e02:	47 95       	ror	r20
    2e04:	37 95       	ror	r19
    2e06:	27 95       	ror	r18
    2e08:	8a 95       	dec	r24
    2e0a:	d2 f7       	brpl	.-12     	; 0x2e00 <__fixsfsi+0x60>
    2e0c:	66 23       	and	r22, r22
    2e0e:	b1 f0       	breq	.+44     	; 0x2e3c <__fixsfsi+0x9c>
    2e10:	50 95       	com	r21
    2e12:	40 95       	com	r20
    2e14:	30 95       	com	r19
    2e16:	21 95       	neg	r18
    2e18:	3f 4f       	sbci	r19, 0xFF	; 255
    2e1a:	4f 4f       	sbci	r20, 0xFF	; 255
    2e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e1e:	0e c0       	rjmp	.+28     	; 0x2e3c <__fixsfsi+0x9c>
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e0       	ldi	r20, 0x00	; 0
    2e26:	50 e0       	ldi	r21, 0x00	; 0
    2e28:	09 c0       	rjmp	.+18     	; 0x2e3c <__fixsfsi+0x9c>
    2e2a:	2f ef       	ldi	r18, 0xFF	; 255
    2e2c:	3f ef       	ldi	r19, 0xFF	; 255
    2e2e:	4f ef       	ldi	r20, 0xFF	; 255
    2e30:	5f e7       	ldi	r21, 0x7F	; 127
    2e32:	04 c0       	rjmp	.+8      	; 0x2e3c <__fixsfsi+0x9c>
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	40 e0       	ldi	r20, 0x00	; 0
    2e3a:	50 e8       	ldi	r21, 0x80	; 128
    2e3c:	b9 01       	movw	r22, r18
    2e3e:	ca 01       	movw	r24, r20
    2e40:	2c 96       	adiw	r28, 0x0c	; 12
    2e42:	e2 e0       	ldi	r30, 0x02	; 2
    2e44:	0c 94 d2 19 	jmp	0x33a4	; 0x33a4 <__epilogue_restores__+0x20>

00002e48 <__floatunsisf>:
    2e48:	a8 e0       	ldi	r26, 0x08	; 8
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	ea e2       	ldi	r30, 0x2A	; 42
    2e4e:	f7 e1       	ldi	r31, 0x17	; 23
    2e50:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__prologue_saves__+0x10>
    2e54:	7b 01       	movw	r14, r22
    2e56:	8c 01       	movw	r16, r24
    2e58:	61 15       	cp	r22, r1
    2e5a:	71 05       	cpc	r23, r1
    2e5c:	81 05       	cpc	r24, r1
    2e5e:	91 05       	cpc	r25, r1
    2e60:	19 f4       	brne	.+6      	; 0x2e68 <__floatunsisf+0x20>
    2e62:	82 e0       	ldi	r24, 0x02	; 2
    2e64:	89 83       	std	Y+1, r24	; 0x01
    2e66:	60 c0       	rjmp	.+192    	; 0x2f28 <__floatunsisf+0xe0>
    2e68:	83 e0       	ldi	r24, 0x03	; 3
    2e6a:	89 83       	std	Y+1, r24	; 0x01
    2e6c:	8e e1       	ldi	r24, 0x1E	; 30
    2e6e:	c8 2e       	mov	r12, r24
    2e70:	d1 2c       	mov	r13, r1
    2e72:	dc 82       	std	Y+4, r13	; 0x04
    2e74:	cb 82       	std	Y+3, r12	; 0x03
    2e76:	ed 82       	std	Y+5, r14	; 0x05
    2e78:	fe 82       	std	Y+6, r15	; 0x06
    2e7a:	0f 83       	std	Y+7, r16	; 0x07
    2e7c:	18 87       	std	Y+8, r17	; 0x08
    2e7e:	c8 01       	movw	r24, r16
    2e80:	b7 01       	movw	r22, r14
    2e82:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__clzsi2>
    2e86:	fc 01       	movw	r30, r24
    2e88:	31 97       	sbiw	r30, 0x01	; 1
    2e8a:	f7 ff       	sbrs	r31, 7
    2e8c:	3b c0       	rjmp	.+118    	; 0x2f04 <__floatunsisf+0xbc>
    2e8e:	22 27       	eor	r18, r18
    2e90:	33 27       	eor	r19, r19
    2e92:	2e 1b       	sub	r18, r30
    2e94:	3f 0b       	sbc	r19, r31
    2e96:	57 01       	movw	r10, r14
    2e98:	68 01       	movw	r12, r16
    2e9a:	02 2e       	mov	r0, r18
    2e9c:	04 c0       	rjmp	.+8      	; 0x2ea6 <__floatunsisf+0x5e>
    2e9e:	d6 94       	lsr	r13
    2ea0:	c7 94       	ror	r12
    2ea2:	b7 94       	ror	r11
    2ea4:	a7 94       	ror	r10
    2ea6:	0a 94       	dec	r0
    2ea8:	d2 f7       	brpl	.-12     	; 0x2e9e <__floatunsisf+0x56>
    2eaa:	40 e0       	ldi	r20, 0x00	; 0
    2eac:	50 e0       	ldi	r21, 0x00	; 0
    2eae:	60 e0       	ldi	r22, 0x00	; 0
    2eb0:	70 e0       	ldi	r23, 0x00	; 0
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	a0 e0       	ldi	r26, 0x00	; 0
    2eb8:	b0 e0       	ldi	r27, 0x00	; 0
    2eba:	04 c0       	rjmp	.+8      	; 0x2ec4 <__floatunsisf+0x7c>
    2ebc:	88 0f       	add	r24, r24
    2ebe:	99 1f       	adc	r25, r25
    2ec0:	aa 1f       	adc	r26, r26
    2ec2:	bb 1f       	adc	r27, r27
    2ec4:	2a 95       	dec	r18
    2ec6:	d2 f7       	brpl	.-12     	; 0x2ebc <__floatunsisf+0x74>
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	a1 09       	sbc	r26, r1
    2ecc:	b1 09       	sbc	r27, r1
    2ece:	8e 21       	and	r24, r14
    2ed0:	9f 21       	and	r25, r15
    2ed2:	a0 23       	and	r26, r16
    2ed4:	b1 23       	and	r27, r17
    2ed6:	00 97       	sbiw	r24, 0x00	; 0
    2ed8:	a1 05       	cpc	r26, r1
    2eda:	b1 05       	cpc	r27, r1
    2edc:	21 f0       	breq	.+8      	; 0x2ee6 <__floatunsisf+0x9e>
    2ede:	41 e0       	ldi	r20, 0x01	; 1
    2ee0:	50 e0       	ldi	r21, 0x00	; 0
    2ee2:	60 e0       	ldi	r22, 0x00	; 0
    2ee4:	70 e0       	ldi	r23, 0x00	; 0
    2ee6:	4a 29       	or	r20, r10
    2ee8:	5b 29       	or	r21, r11
    2eea:	6c 29       	or	r22, r12
    2eec:	7d 29       	or	r23, r13
    2eee:	4d 83       	std	Y+5, r20	; 0x05
    2ef0:	5e 83       	std	Y+6, r21	; 0x06
    2ef2:	6f 83       	std	Y+7, r22	; 0x07
    2ef4:	78 87       	std	Y+8, r23	; 0x08
    2ef6:	8e e1       	ldi	r24, 0x1E	; 30
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	8e 1b       	sub	r24, r30
    2efc:	9f 0b       	sbc	r25, r31
    2efe:	9c 83       	std	Y+4, r25	; 0x04
    2f00:	8b 83       	std	Y+3, r24	; 0x03
    2f02:	12 c0       	rjmp	.+36     	; 0x2f28 <__floatunsisf+0xe0>
    2f04:	30 97       	sbiw	r30, 0x00	; 0
    2f06:	81 f0       	breq	.+32     	; 0x2f28 <__floatunsisf+0xe0>
    2f08:	0e 2e       	mov	r0, r30
    2f0a:	04 c0       	rjmp	.+8      	; 0x2f14 <__floatunsisf+0xcc>
    2f0c:	ee 0c       	add	r14, r14
    2f0e:	ff 1c       	adc	r15, r15
    2f10:	00 1f       	adc	r16, r16
    2f12:	11 1f       	adc	r17, r17
    2f14:	0a 94       	dec	r0
    2f16:	d2 f7       	brpl	.-12     	; 0x2f0c <__floatunsisf+0xc4>
    2f18:	ed 82       	std	Y+5, r14	; 0x05
    2f1a:	fe 82       	std	Y+6, r15	; 0x06
    2f1c:	0f 83       	std	Y+7, r16	; 0x07
    2f1e:	18 87       	std	Y+8, r17	; 0x08
    2f20:	ce 1a       	sub	r12, r30
    2f22:	df 0a       	sbc	r13, r31
    2f24:	dc 82       	std	Y+4, r13	; 0x04
    2f26:	cb 82       	std	Y+3, r12	; 0x03
    2f28:	1a 82       	std	Y+2, r1	; 0x02
    2f2a:	ce 01       	movw	r24, r28
    2f2c:	01 96       	adiw	r24, 0x01	; 1
    2f2e:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__pack_f>
    2f32:	28 96       	adiw	r28, 0x08	; 8
    2f34:	ea e0       	ldi	r30, 0x0A	; 10
    2f36:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__epilogue_restores__+0x10>

00002f3a <__clzsi2>:
    2f3a:	ef 92       	push	r14
    2f3c:	ff 92       	push	r15
    2f3e:	0f 93       	push	r16
    2f40:	1f 93       	push	r17
    2f42:	7b 01       	movw	r14, r22
    2f44:	8c 01       	movw	r16, r24
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	e8 16       	cp	r14, r24
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	f8 06       	cpc	r15, r24
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	08 07       	cpc	r16, r24
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	18 07       	cpc	r17, r24
    2f56:	88 f4       	brcc	.+34     	; 0x2f7a <__clzsi2+0x40>
    2f58:	8f ef       	ldi	r24, 0xFF	; 255
    2f5a:	e8 16       	cp	r14, r24
    2f5c:	f1 04       	cpc	r15, r1
    2f5e:	01 05       	cpc	r16, r1
    2f60:	11 05       	cpc	r17, r1
    2f62:	31 f0       	breq	.+12     	; 0x2f70 <__clzsi2+0x36>
    2f64:	28 f0       	brcs	.+10     	; 0x2f70 <__clzsi2+0x36>
    2f66:	88 e0       	ldi	r24, 0x08	; 8
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	a0 e0       	ldi	r26, 0x00	; 0
    2f6c:	b0 e0       	ldi	r27, 0x00	; 0
    2f6e:	17 c0       	rjmp	.+46     	; 0x2f9e <__clzsi2+0x64>
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	a0 e0       	ldi	r26, 0x00	; 0
    2f76:	b0 e0       	ldi	r27, 0x00	; 0
    2f78:	12 c0       	rjmp	.+36     	; 0x2f9e <__clzsi2+0x64>
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
    2f7c:	e8 16       	cp	r14, r24
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	f8 06       	cpc	r15, r24
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	08 07       	cpc	r16, r24
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	18 07       	cpc	r17, r24
    2f8a:	28 f0       	brcs	.+10     	; 0x2f96 <__clzsi2+0x5c>
    2f8c:	88 e1       	ldi	r24, 0x18	; 24
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	a0 e0       	ldi	r26, 0x00	; 0
    2f92:	b0 e0       	ldi	r27, 0x00	; 0
    2f94:	04 c0       	rjmp	.+8      	; 0x2f9e <__clzsi2+0x64>
    2f96:	80 e1       	ldi	r24, 0x10	; 16
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	a0 e0       	ldi	r26, 0x00	; 0
    2f9c:	b0 e0       	ldi	r27, 0x00	; 0
    2f9e:	20 e2       	ldi	r18, 0x20	; 32
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	40 e0       	ldi	r20, 0x00	; 0
    2fa4:	50 e0       	ldi	r21, 0x00	; 0
    2fa6:	28 1b       	sub	r18, r24
    2fa8:	39 0b       	sbc	r19, r25
    2faa:	4a 0b       	sbc	r20, r26
    2fac:	5b 0b       	sbc	r21, r27
    2fae:	04 c0       	rjmp	.+8      	; 0x2fb8 <__clzsi2+0x7e>
    2fb0:	16 95       	lsr	r17
    2fb2:	07 95       	ror	r16
    2fb4:	f7 94       	ror	r15
    2fb6:	e7 94       	ror	r14
    2fb8:	8a 95       	dec	r24
    2fba:	d2 f7       	brpl	.-12     	; 0x2fb0 <__clzsi2+0x76>
    2fbc:	f7 01       	movw	r30, r14
    2fbe:	e8 5f       	subi	r30, 0xF8	; 248
    2fc0:	fd 4f       	sbci	r31, 0xFD	; 253
    2fc2:	80 81       	ld	r24, Z
    2fc4:	28 1b       	sub	r18, r24
    2fc6:	31 09       	sbc	r19, r1
    2fc8:	41 09       	sbc	r20, r1
    2fca:	51 09       	sbc	r21, r1
    2fcc:	c9 01       	movw	r24, r18
    2fce:	1f 91       	pop	r17
    2fd0:	0f 91       	pop	r16
    2fd2:	ff 90       	pop	r15
    2fd4:	ef 90       	pop	r14
    2fd6:	08 95       	ret

00002fd8 <__pack_f>:
    2fd8:	df 92       	push	r13
    2fda:	ef 92       	push	r14
    2fdc:	ff 92       	push	r15
    2fde:	0f 93       	push	r16
    2fe0:	1f 93       	push	r17
    2fe2:	fc 01       	movw	r30, r24
    2fe4:	e4 80       	ldd	r14, Z+4	; 0x04
    2fe6:	f5 80       	ldd	r15, Z+5	; 0x05
    2fe8:	06 81       	ldd	r16, Z+6	; 0x06
    2fea:	17 81       	ldd	r17, Z+7	; 0x07
    2fec:	d1 80       	ldd	r13, Z+1	; 0x01
    2fee:	80 81       	ld	r24, Z
    2ff0:	82 30       	cpi	r24, 0x02	; 2
    2ff2:	48 f4       	brcc	.+18     	; 0x3006 <__pack_f+0x2e>
    2ff4:	80 e0       	ldi	r24, 0x00	; 0
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	a0 e1       	ldi	r26, 0x10	; 16
    2ffa:	b0 e0       	ldi	r27, 0x00	; 0
    2ffc:	e8 2a       	or	r14, r24
    2ffe:	f9 2a       	or	r15, r25
    3000:	0a 2b       	or	r16, r26
    3002:	1b 2b       	or	r17, r27
    3004:	a5 c0       	rjmp	.+330    	; 0x3150 <__pack_f+0x178>
    3006:	84 30       	cpi	r24, 0x04	; 4
    3008:	09 f4       	brne	.+2      	; 0x300c <__pack_f+0x34>
    300a:	9f c0       	rjmp	.+318    	; 0x314a <__pack_f+0x172>
    300c:	82 30       	cpi	r24, 0x02	; 2
    300e:	21 f4       	brne	.+8      	; 0x3018 <__pack_f+0x40>
    3010:	ee 24       	eor	r14, r14
    3012:	ff 24       	eor	r15, r15
    3014:	87 01       	movw	r16, r14
    3016:	05 c0       	rjmp	.+10     	; 0x3022 <__pack_f+0x4a>
    3018:	e1 14       	cp	r14, r1
    301a:	f1 04       	cpc	r15, r1
    301c:	01 05       	cpc	r16, r1
    301e:	11 05       	cpc	r17, r1
    3020:	19 f4       	brne	.+6      	; 0x3028 <__pack_f+0x50>
    3022:	e0 e0       	ldi	r30, 0x00	; 0
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	96 c0       	rjmp	.+300    	; 0x3154 <__pack_f+0x17c>
    3028:	62 81       	ldd	r22, Z+2	; 0x02
    302a:	73 81       	ldd	r23, Z+3	; 0x03
    302c:	9f ef       	ldi	r25, 0xFF	; 255
    302e:	62 38       	cpi	r22, 0x82	; 130
    3030:	79 07       	cpc	r23, r25
    3032:	0c f0       	brlt	.+2      	; 0x3036 <__pack_f+0x5e>
    3034:	5b c0       	rjmp	.+182    	; 0x30ec <__pack_f+0x114>
    3036:	22 e8       	ldi	r18, 0x82	; 130
    3038:	3f ef       	ldi	r19, 0xFF	; 255
    303a:	26 1b       	sub	r18, r22
    303c:	37 0b       	sbc	r19, r23
    303e:	2a 31       	cpi	r18, 0x1A	; 26
    3040:	31 05       	cpc	r19, r1
    3042:	2c f0       	brlt	.+10     	; 0x304e <__pack_f+0x76>
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	40 e0       	ldi	r20, 0x00	; 0
    304a:	50 e0       	ldi	r21, 0x00	; 0
    304c:	2a c0       	rjmp	.+84     	; 0x30a2 <__pack_f+0xca>
    304e:	b8 01       	movw	r22, r16
    3050:	a7 01       	movw	r20, r14
    3052:	02 2e       	mov	r0, r18
    3054:	04 c0       	rjmp	.+8      	; 0x305e <__pack_f+0x86>
    3056:	76 95       	lsr	r23
    3058:	67 95       	ror	r22
    305a:	57 95       	ror	r21
    305c:	47 95       	ror	r20
    305e:	0a 94       	dec	r0
    3060:	d2 f7       	brpl	.-12     	; 0x3056 <__pack_f+0x7e>
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	a0 e0       	ldi	r26, 0x00	; 0
    3068:	b0 e0       	ldi	r27, 0x00	; 0
    306a:	04 c0       	rjmp	.+8      	; 0x3074 <__pack_f+0x9c>
    306c:	88 0f       	add	r24, r24
    306e:	99 1f       	adc	r25, r25
    3070:	aa 1f       	adc	r26, r26
    3072:	bb 1f       	adc	r27, r27
    3074:	2a 95       	dec	r18
    3076:	d2 f7       	brpl	.-12     	; 0x306c <__pack_f+0x94>
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	a1 09       	sbc	r26, r1
    307c:	b1 09       	sbc	r27, r1
    307e:	8e 21       	and	r24, r14
    3080:	9f 21       	and	r25, r15
    3082:	a0 23       	and	r26, r16
    3084:	b1 23       	and	r27, r17
    3086:	00 97       	sbiw	r24, 0x00	; 0
    3088:	a1 05       	cpc	r26, r1
    308a:	b1 05       	cpc	r27, r1
    308c:	21 f0       	breq	.+8      	; 0x3096 <__pack_f+0xbe>
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	a0 e0       	ldi	r26, 0x00	; 0
    3094:	b0 e0       	ldi	r27, 0x00	; 0
    3096:	9a 01       	movw	r18, r20
    3098:	ab 01       	movw	r20, r22
    309a:	28 2b       	or	r18, r24
    309c:	39 2b       	or	r19, r25
    309e:	4a 2b       	or	r20, r26
    30a0:	5b 2b       	or	r21, r27
    30a2:	da 01       	movw	r26, r20
    30a4:	c9 01       	movw	r24, r18
    30a6:	8f 77       	andi	r24, 0x7F	; 127
    30a8:	90 70       	andi	r25, 0x00	; 0
    30aa:	a0 70       	andi	r26, 0x00	; 0
    30ac:	b0 70       	andi	r27, 0x00	; 0
    30ae:	80 34       	cpi	r24, 0x40	; 64
    30b0:	91 05       	cpc	r25, r1
    30b2:	a1 05       	cpc	r26, r1
    30b4:	b1 05       	cpc	r27, r1
    30b6:	39 f4       	brne	.+14     	; 0x30c6 <__pack_f+0xee>
    30b8:	27 ff       	sbrs	r18, 7
    30ba:	09 c0       	rjmp	.+18     	; 0x30ce <__pack_f+0xf6>
    30bc:	20 5c       	subi	r18, 0xC0	; 192
    30be:	3f 4f       	sbci	r19, 0xFF	; 255
    30c0:	4f 4f       	sbci	r20, 0xFF	; 255
    30c2:	5f 4f       	sbci	r21, 0xFF	; 255
    30c4:	04 c0       	rjmp	.+8      	; 0x30ce <__pack_f+0xf6>
    30c6:	21 5c       	subi	r18, 0xC1	; 193
    30c8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ca:	4f 4f       	sbci	r20, 0xFF	; 255
    30cc:	5f 4f       	sbci	r21, 0xFF	; 255
    30ce:	e0 e0       	ldi	r30, 0x00	; 0
    30d0:	f0 e0       	ldi	r31, 0x00	; 0
    30d2:	20 30       	cpi	r18, 0x00	; 0
    30d4:	a0 e0       	ldi	r26, 0x00	; 0
    30d6:	3a 07       	cpc	r19, r26
    30d8:	a0 e0       	ldi	r26, 0x00	; 0
    30da:	4a 07       	cpc	r20, r26
    30dc:	a0 e4       	ldi	r26, 0x40	; 64
    30de:	5a 07       	cpc	r21, r26
    30e0:	10 f0       	brcs	.+4      	; 0x30e6 <__pack_f+0x10e>
    30e2:	e1 e0       	ldi	r30, 0x01	; 1
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	79 01       	movw	r14, r18
    30e8:	8a 01       	movw	r16, r20
    30ea:	27 c0       	rjmp	.+78     	; 0x313a <__pack_f+0x162>
    30ec:	60 38       	cpi	r22, 0x80	; 128
    30ee:	71 05       	cpc	r23, r1
    30f0:	64 f5       	brge	.+88     	; 0x314a <__pack_f+0x172>
    30f2:	fb 01       	movw	r30, r22
    30f4:	e1 58       	subi	r30, 0x81	; 129
    30f6:	ff 4f       	sbci	r31, 0xFF	; 255
    30f8:	d8 01       	movw	r26, r16
    30fa:	c7 01       	movw	r24, r14
    30fc:	8f 77       	andi	r24, 0x7F	; 127
    30fe:	90 70       	andi	r25, 0x00	; 0
    3100:	a0 70       	andi	r26, 0x00	; 0
    3102:	b0 70       	andi	r27, 0x00	; 0
    3104:	80 34       	cpi	r24, 0x40	; 64
    3106:	91 05       	cpc	r25, r1
    3108:	a1 05       	cpc	r26, r1
    310a:	b1 05       	cpc	r27, r1
    310c:	39 f4       	brne	.+14     	; 0x311c <__pack_f+0x144>
    310e:	e7 fe       	sbrs	r14, 7
    3110:	0d c0       	rjmp	.+26     	; 0x312c <__pack_f+0x154>
    3112:	80 e4       	ldi	r24, 0x40	; 64
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	a0 e0       	ldi	r26, 0x00	; 0
    3118:	b0 e0       	ldi	r27, 0x00	; 0
    311a:	04 c0       	rjmp	.+8      	; 0x3124 <__pack_f+0x14c>
    311c:	8f e3       	ldi	r24, 0x3F	; 63
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	a0 e0       	ldi	r26, 0x00	; 0
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	e8 0e       	add	r14, r24
    3126:	f9 1e       	adc	r15, r25
    3128:	0a 1f       	adc	r16, r26
    312a:	1b 1f       	adc	r17, r27
    312c:	17 ff       	sbrs	r17, 7
    312e:	05 c0       	rjmp	.+10     	; 0x313a <__pack_f+0x162>
    3130:	16 95       	lsr	r17
    3132:	07 95       	ror	r16
    3134:	f7 94       	ror	r15
    3136:	e7 94       	ror	r14
    3138:	31 96       	adiw	r30, 0x01	; 1
    313a:	87 e0       	ldi	r24, 0x07	; 7
    313c:	16 95       	lsr	r17
    313e:	07 95       	ror	r16
    3140:	f7 94       	ror	r15
    3142:	e7 94       	ror	r14
    3144:	8a 95       	dec	r24
    3146:	d1 f7       	brne	.-12     	; 0x313c <__pack_f+0x164>
    3148:	05 c0       	rjmp	.+10     	; 0x3154 <__pack_f+0x17c>
    314a:	ee 24       	eor	r14, r14
    314c:	ff 24       	eor	r15, r15
    314e:	87 01       	movw	r16, r14
    3150:	ef ef       	ldi	r30, 0xFF	; 255
    3152:	f0 e0       	ldi	r31, 0x00	; 0
    3154:	6e 2f       	mov	r22, r30
    3156:	67 95       	ror	r22
    3158:	66 27       	eor	r22, r22
    315a:	67 95       	ror	r22
    315c:	90 2f       	mov	r25, r16
    315e:	9f 77       	andi	r25, 0x7F	; 127
    3160:	d7 94       	ror	r13
    3162:	dd 24       	eor	r13, r13
    3164:	d7 94       	ror	r13
    3166:	8e 2f       	mov	r24, r30
    3168:	86 95       	lsr	r24
    316a:	49 2f       	mov	r20, r25
    316c:	46 2b       	or	r20, r22
    316e:	58 2f       	mov	r21, r24
    3170:	5d 29       	or	r21, r13
    3172:	b7 01       	movw	r22, r14
    3174:	ca 01       	movw	r24, r20
    3176:	1f 91       	pop	r17
    3178:	0f 91       	pop	r16
    317a:	ff 90       	pop	r15
    317c:	ef 90       	pop	r14
    317e:	df 90       	pop	r13
    3180:	08 95       	ret

00003182 <__unpack_f>:
    3182:	fc 01       	movw	r30, r24
    3184:	db 01       	movw	r26, r22
    3186:	40 81       	ld	r20, Z
    3188:	51 81       	ldd	r21, Z+1	; 0x01
    318a:	22 81       	ldd	r18, Z+2	; 0x02
    318c:	62 2f       	mov	r22, r18
    318e:	6f 77       	andi	r22, 0x7F	; 127
    3190:	70 e0       	ldi	r23, 0x00	; 0
    3192:	22 1f       	adc	r18, r18
    3194:	22 27       	eor	r18, r18
    3196:	22 1f       	adc	r18, r18
    3198:	93 81       	ldd	r25, Z+3	; 0x03
    319a:	89 2f       	mov	r24, r25
    319c:	88 0f       	add	r24, r24
    319e:	82 2b       	or	r24, r18
    31a0:	28 2f       	mov	r18, r24
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	99 1f       	adc	r25, r25
    31a6:	99 27       	eor	r25, r25
    31a8:	99 1f       	adc	r25, r25
    31aa:	11 96       	adiw	r26, 0x01	; 1
    31ac:	9c 93       	st	X, r25
    31ae:	11 97       	sbiw	r26, 0x01	; 1
    31b0:	21 15       	cp	r18, r1
    31b2:	31 05       	cpc	r19, r1
    31b4:	a9 f5       	brne	.+106    	; 0x3220 <__unpack_f+0x9e>
    31b6:	41 15       	cp	r20, r1
    31b8:	51 05       	cpc	r21, r1
    31ba:	61 05       	cpc	r22, r1
    31bc:	71 05       	cpc	r23, r1
    31be:	11 f4       	brne	.+4      	; 0x31c4 <__unpack_f+0x42>
    31c0:	82 e0       	ldi	r24, 0x02	; 2
    31c2:	37 c0       	rjmp	.+110    	; 0x3232 <__unpack_f+0xb0>
    31c4:	82 e8       	ldi	r24, 0x82	; 130
    31c6:	9f ef       	ldi	r25, 0xFF	; 255
    31c8:	13 96       	adiw	r26, 0x03	; 3
    31ca:	9c 93       	st	X, r25
    31cc:	8e 93       	st	-X, r24
    31ce:	12 97       	sbiw	r26, 0x02	; 2
    31d0:	9a 01       	movw	r18, r20
    31d2:	ab 01       	movw	r20, r22
    31d4:	67 e0       	ldi	r22, 0x07	; 7
    31d6:	22 0f       	add	r18, r18
    31d8:	33 1f       	adc	r19, r19
    31da:	44 1f       	adc	r20, r20
    31dc:	55 1f       	adc	r21, r21
    31de:	6a 95       	dec	r22
    31e0:	d1 f7       	brne	.-12     	; 0x31d6 <__unpack_f+0x54>
    31e2:	83 e0       	ldi	r24, 0x03	; 3
    31e4:	8c 93       	st	X, r24
    31e6:	0d c0       	rjmp	.+26     	; 0x3202 <__unpack_f+0x80>
    31e8:	22 0f       	add	r18, r18
    31ea:	33 1f       	adc	r19, r19
    31ec:	44 1f       	adc	r20, r20
    31ee:	55 1f       	adc	r21, r21
    31f0:	12 96       	adiw	r26, 0x02	; 2
    31f2:	8d 91       	ld	r24, X+
    31f4:	9c 91       	ld	r25, X
    31f6:	13 97       	sbiw	r26, 0x03	; 3
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	13 96       	adiw	r26, 0x03	; 3
    31fc:	9c 93       	st	X, r25
    31fe:	8e 93       	st	-X, r24
    3200:	12 97       	sbiw	r26, 0x02	; 2
    3202:	20 30       	cpi	r18, 0x00	; 0
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	38 07       	cpc	r19, r24
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	48 07       	cpc	r20, r24
    320c:	80 e4       	ldi	r24, 0x40	; 64
    320e:	58 07       	cpc	r21, r24
    3210:	58 f3       	brcs	.-42     	; 0x31e8 <__unpack_f+0x66>
    3212:	14 96       	adiw	r26, 0x04	; 4
    3214:	2d 93       	st	X+, r18
    3216:	3d 93       	st	X+, r19
    3218:	4d 93       	st	X+, r20
    321a:	5c 93       	st	X, r21
    321c:	17 97       	sbiw	r26, 0x07	; 7
    321e:	08 95       	ret
    3220:	2f 3f       	cpi	r18, 0xFF	; 255
    3222:	31 05       	cpc	r19, r1
    3224:	79 f4       	brne	.+30     	; 0x3244 <__unpack_f+0xc2>
    3226:	41 15       	cp	r20, r1
    3228:	51 05       	cpc	r21, r1
    322a:	61 05       	cpc	r22, r1
    322c:	71 05       	cpc	r23, r1
    322e:	19 f4       	brne	.+6      	; 0x3236 <__unpack_f+0xb4>
    3230:	84 e0       	ldi	r24, 0x04	; 4
    3232:	8c 93       	st	X, r24
    3234:	08 95       	ret
    3236:	64 ff       	sbrs	r22, 4
    3238:	03 c0       	rjmp	.+6      	; 0x3240 <__unpack_f+0xbe>
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	8c 93       	st	X, r24
    323e:	12 c0       	rjmp	.+36     	; 0x3264 <__unpack_f+0xe2>
    3240:	1c 92       	st	X, r1
    3242:	10 c0       	rjmp	.+32     	; 0x3264 <__unpack_f+0xe2>
    3244:	2f 57       	subi	r18, 0x7F	; 127
    3246:	30 40       	sbci	r19, 0x00	; 0
    3248:	13 96       	adiw	r26, 0x03	; 3
    324a:	3c 93       	st	X, r19
    324c:	2e 93       	st	-X, r18
    324e:	12 97       	sbiw	r26, 0x02	; 2
    3250:	83 e0       	ldi	r24, 0x03	; 3
    3252:	8c 93       	st	X, r24
    3254:	87 e0       	ldi	r24, 0x07	; 7
    3256:	44 0f       	add	r20, r20
    3258:	55 1f       	adc	r21, r21
    325a:	66 1f       	adc	r22, r22
    325c:	77 1f       	adc	r23, r23
    325e:	8a 95       	dec	r24
    3260:	d1 f7       	brne	.-12     	; 0x3256 <__unpack_f+0xd4>
    3262:	70 64       	ori	r23, 0x40	; 64
    3264:	14 96       	adiw	r26, 0x04	; 4
    3266:	4d 93       	st	X+, r20
    3268:	5d 93       	st	X+, r21
    326a:	6d 93       	st	X+, r22
    326c:	7c 93       	st	X, r23
    326e:	17 97       	sbiw	r26, 0x07	; 7
    3270:	08 95       	ret

00003272 <__fpcmp_parts_f>:
    3272:	1f 93       	push	r17
    3274:	dc 01       	movw	r26, r24
    3276:	fb 01       	movw	r30, r22
    3278:	9c 91       	ld	r25, X
    327a:	92 30       	cpi	r25, 0x02	; 2
    327c:	08 f4       	brcc	.+2      	; 0x3280 <__fpcmp_parts_f+0xe>
    327e:	47 c0       	rjmp	.+142    	; 0x330e <__fpcmp_parts_f+0x9c>
    3280:	80 81       	ld	r24, Z
    3282:	82 30       	cpi	r24, 0x02	; 2
    3284:	08 f4       	brcc	.+2      	; 0x3288 <__fpcmp_parts_f+0x16>
    3286:	43 c0       	rjmp	.+134    	; 0x330e <__fpcmp_parts_f+0x9c>
    3288:	94 30       	cpi	r25, 0x04	; 4
    328a:	51 f4       	brne	.+20     	; 0x32a0 <__fpcmp_parts_f+0x2e>
    328c:	11 96       	adiw	r26, 0x01	; 1
    328e:	1c 91       	ld	r17, X
    3290:	84 30       	cpi	r24, 0x04	; 4
    3292:	99 f5       	brne	.+102    	; 0x32fa <__fpcmp_parts_f+0x88>
    3294:	81 81       	ldd	r24, Z+1	; 0x01
    3296:	68 2f       	mov	r22, r24
    3298:	70 e0       	ldi	r23, 0x00	; 0
    329a:	61 1b       	sub	r22, r17
    329c:	71 09       	sbc	r23, r1
    329e:	3f c0       	rjmp	.+126    	; 0x331e <__fpcmp_parts_f+0xac>
    32a0:	84 30       	cpi	r24, 0x04	; 4
    32a2:	21 f0       	breq	.+8      	; 0x32ac <__fpcmp_parts_f+0x3a>
    32a4:	92 30       	cpi	r25, 0x02	; 2
    32a6:	31 f4       	brne	.+12     	; 0x32b4 <__fpcmp_parts_f+0x42>
    32a8:	82 30       	cpi	r24, 0x02	; 2
    32aa:	b9 f1       	breq	.+110    	; 0x331a <__fpcmp_parts_f+0xa8>
    32ac:	81 81       	ldd	r24, Z+1	; 0x01
    32ae:	88 23       	and	r24, r24
    32b0:	89 f1       	breq	.+98     	; 0x3314 <__fpcmp_parts_f+0xa2>
    32b2:	2d c0       	rjmp	.+90     	; 0x330e <__fpcmp_parts_f+0x9c>
    32b4:	11 96       	adiw	r26, 0x01	; 1
    32b6:	1c 91       	ld	r17, X
    32b8:	11 97       	sbiw	r26, 0x01	; 1
    32ba:	82 30       	cpi	r24, 0x02	; 2
    32bc:	f1 f0       	breq	.+60     	; 0x32fa <__fpcmp_parts_f+0x88>
    32be:	81 81       	ldd	r24, Z+1	; 0x01
    32c0:	18 17       	cp	r17, r24
    32c2:	d9 f4       	brne	.+54     	; 0x32fa <__fpcmp_parts_f+0x88>
    32c4:	12 96       	adiw	r26, 0x02	; 2
    32c6:	2d 91       	ld	r18, X+
    32c8:	3c 91       	ld	r19, X
    32ca:	13 97       	sbiw	r26, 0x03	; 3
    32cc:	82 81       	ldd	r24, Z+2	; 0x02
    32ce:	93 81       	ldd	r25, Z+3	; 0x03
    32d0:	82 17       	cp	r24, r18
    32d2:	93 07       	cpc	r25, r19
    32d4:	94 f0       	brlt	.+36     	; 0x32fa <__fpcmp_parts_f+0x88>
    32d6:	28 17       	cp	r18, r24
    32d8:	39 07       	cpc	r19, r25
    32da:	bc f0       	brlt	.+46     	; 0x330a <__fpcmp_parts_f+0x98>
    32dc:	14 96       	adiw	r26, 0x04	; 4
    32de:	8d 91       	ld	r24, X+
    32e0:	9d 91       	ld	r25, X+
    32e2:	0d 90       	ld	r0, X+
    32e4:	bc 91       	ld	r27, X
    32e6:	a0 2d       	mov	r26, r0
    32e8:	24 81       	ldd	r18, Z+4	; 0x04
    32ea:	35 81       	ldd	r19, Z+5	; 0x05
    32ec:	46 81       	ldd	r20, Z+6	; 0x06
    32ee:	57 81       	ldd	r21, Z+7	; 0x07
    32f0:	28 17       	cp	r18, r24
    32f2:	39 07       	cpc	r19, r25
    32f4:	4a 07       	cpc	r20, r26
    32f6:	5b 07       	cpc	r21, r27
    32f8:	18 f4       	brcc	.+6      	; 0x3300 <__fpcmp_parts_f+0x8e>
    32fa:	11 23       	and	r17, r17
    32fc:	41 f0       	breq	.+16     	; 0x330e <__fpcmp_parts_f+0x9c>
    32fe:	0a c0       	rjmp	.+20     	; 0x3314 <__fpcmp_parts_f+0xa2>
    3300:	82 17       	cp	r24, r18
    3302:	93 07       	cpc	r25, r19
    3304:	a4 07       	cpc	r26, r20
    3306:	b5 07       	cpc	r27, r21
    3308:	40 f4       	brcc	.+16     	; 0x331a <__fpcmp_parts_f+0xa8>
    330a:	11 23       	and	r17, r17
    330c:	19 f0       	breq	.+6      	; 0x3314 <__fpcmp_parts_f+0xa2>
    330e:	61 e0       	ldi	r22, 0x01	; 1
    3310:	70 e0       	ldi	r23, 0x00	; 0
    3312:	05 c0       	rjmp	.+10     	; 0x331e <__fpcmp_parts_f+0xac>
    3314:	6f ef       	ldi	r22, 0xFF	; 255
    3316:	7f ef       	ldi	r23, 0xFF	; 255
    3318:	02 c0       	rjmp	.+4      	; 0x331e <__fpcmp_parts_f+0xac>
    331a:	60 e0       	ldi	r22, 0x00	; 0
    331c:	70 e0       	ldi	r23, 0x00	; 0
    331e:	cb 01       	movw	r24, r22
    3320:	1f 91       	pop	r17
    3322:	08 95       	ret

00003324 <__udivmodhi4>:
    3324:	aa 1b       	sub	r26, r26
    3326:	bb 1b       	sub	r27, r27
    3328:	51 e1       	ldi	r21, 0x11	; 17
    332a:	07 c0       	rjmp	.+14     	; 0x333a <__udivmodhi4_ep>

0000332c <__udivmodhi4_loop>:
    332c:	aa 1f       	adc	r26, r26
    332e:	bb 1f       	adc	r27, r27
    3330:	a6 17       	cp	r26, r22
    3332:	b7 07       	cpc	r27, r23
    3334:	10 f0       	brcs	.+4      	; 0x333a <__udivmodhi4_ep>
    3336:	a6 1b       	sub	r26, r22
    3338:	b7 0b       	sbc	r27, r23

0000333a <__udivmodhi4_ep>:
    333a:	88 1f       	adc	r24, r24
    333c:	99 1f       	adc	r25, r25
    333e:	5a 95       	dec	r21
    3340:	a9 f7       	brne	.-22     	; 0x332c <__udivmodhi4_loop>
    3342:	80 95       	com	r24
    3344:	90 95       	com	r25
    3346:	bc 01       	movw	r22, r24
    3348:	cd 01       	movw	r24, r26
    334a:	08 95       	ret

0000334c <__prologue_saves__>:
    334c:	2f 92       	push	r2
    334e:	3f 92       	push	r3
    3350:	4f 92       	push	r4
    3352:	5f 92       	push	r5
    3354:	6f 92       	push	r6
    3356:	7f 92       	push	r7
    3358:	8f 92       	push	r8
    335a:	9f 92       	push	r9
    335c:	af 92       	push	r10
    335e:	bf 92       	push	r11
    3360:	cf 92       	push	r12
    3362:	df 92       	push	r13
    3364:	ef 92       	push	r14
    3366:	ff 92       	push	r15
    3368:	0f 93       	push	r16
    336a:	1f 93       	push	r17
    336c:	cf 93       	push	r28
    336e:	df 93       	push	r29
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
    3374:	ca 1b       	sub	r28, r26
    3376:	db 0b       	sbc	r29, r27
    3378:	0f b6       	in	r0, 0x3f	; 63
    337a:	f8 94       	cli
    337c:	de bf       	out	0x3e, r29	; 62
    337e:	0f be       	out	0x3f, r0	; 63
    3380:	cd bf       	out	0x3d, r28	; 61
    3382:	19 94       	eijmp

00003384 <__epilogue_restores__>:
    3384:	2a 88       	ldd	r2, Y+18	; 0x12
    3386:	39 88       	ldd	r3, Y+17	; 0x11
    3388:	48 88       	ldd	r4, Y+16	; 0x10
    338a:	5f 84       	ldd	r5, Y+15	; 0x0f
    338c:	6e 84       	ldd	r6, Y+14	; 0x0e
    338e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3390:	8c 84       	ldd	r8, Y+12	; 0x0c
    3392:	9b 84       	ldd	r9, Y+11	; 0x0b
    3394:	aa 84       	ldd	r10, Y+10	; 0x0a
    3396:	b9 84       	ldd	r11, Y+9	; 0x09
    3398:	c8 84       	ldd	r12, Y+8	; 0x08
    339a:	df 80       	ldd	r13, Y+7	; 0x07
    339c:	ee 80       	ldd	r14, Y+6	; 0x06
    339e:	fd 80       	ldd	r15, Y+5	; 0x05
    33a0:	0c 81       	ldd	r16, Y+4	; 0x04
    33a2:	1b 81       	ldd	r17, Y+3	; 0x03
    33a4:	aa 81       	ldd	r26, Y+2	; 0x02
    33a6:	b9 81       	ldd	r27, Y+1	; 0x01
    33a8:	ce 0f       	add	r28, r30
    33aa:	d1 1d       	adc	r29, r1
    33ac:	0f b6       	in	r0, 0x3f	; 63
    33ae:	f8 94       	cli
    33b0:	de bf       	out	0x3e, r29	; 62
    33b2:	0f be       	out	0x3f, r0	; 63
    33b4:	cd bf       	out	0x3d, r28	; 61
    33b6:	ed 01       	movw	r28, r26
    33b8:	08 95       	ret

000033ba <_exit>:
    33ba:	f8 94       	cli

000033bc <__stop_program>:
    33bc:	ff cf       	rjmp	.-2      	; 0x33bc <__stop_program>
