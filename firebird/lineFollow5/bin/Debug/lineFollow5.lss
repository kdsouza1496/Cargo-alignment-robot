
bin\Debug\lineFollow5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010a  00800200  000041ea  0000429e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000041ea  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  0080030a  0080030a  000043a8  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000043a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  000043ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000003ee  00000000  00000000  000043cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f6f  00000000  00000000  000047b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000023b  00000000  00000000  00005728  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001789  00000000  00000000  00005963  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  000070ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040e  00000000  00000000  000073ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_5>
      18:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea ee       	ldi	r30, 0xEA	; 234
      fc:	f1 e4       	ldi	r31, 0x41	; 65
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 30       	cpi	r26, 0x0A	; 10
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	aa e0       	ldi	r26, 0x0A	; 10
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ae 32       	cpi	r26, 0x2E	; 46
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 92 10 	call	0x2124	; 0x2124 <main>
     122:	0c 94 f3 20 	jmp	0x41e6	; 0x41e6 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <timer5_init>:
    void left_position_encoder_interrupt_init (void);
    void right_position_encoder_interrupt_init (void);


void timer5_init()
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
     132:	e1 e2       	ldi	r30, 0x21	; 33
     134:	f1 e0       	ldi	r31, 0x01	; 1
     136:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     138:	e5 e2       	ldi	r30, 0x25	; 37
     13a:	f1 e0       	ldi	r31, 0x01	; 1
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     140:	e4 e2       	ldi	r30, 0x24	; 36
     142:	f1 e0       	ldi	r31, 0x01	; 1
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     148:	e9 e2       	ldi	r30, 0x29	; 41
     14a:	f1 e0       	ldi	r31, 0x01	; 1
     14c:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     14e:	e8 e2       	ldi	r30, 0x28	; 40
     150:	f1 e0       	ldi	r31, 0x01	; 1
     152:	8f ef       	ldi	r24, 0xFF	; 255
     154:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     156:	eb e2       	ldi	r30, 0x2B	; 43
     158:	f1 e0       	ldi	r31, 0x01	; 1
     15a:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     15c:	ea e2       	ldi	r30, 0x2A	; 42
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	8f ef       	ldi	r24, 0xFF	; 255
     162:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     164:	ed e2       	ldi	r30, 0x2D	; 45
     166:	f1 e0       	ldi	r31, 0x01	; 1
     168:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     16a:	ec e2       	ldi	r30, 0x2C	; 44
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	8f ef       	ldi	r24, 0xFF	; 255
     170:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     172:	e0 e2       	ldi	r30, 0x20	; 32
     174:	f1 e0       	ldi	r31, 0x01	; 1
     176:	89 ea       	ldi	r24, 0xA9	; 169
     178:	80 83       	st	Z, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     17a:	e1 e2       	ldi	r30, 0x21	; 33
     17c:	f1 e0       	ldi	r31, 0x01	; 1
     17e:	8b e0       	ldi	r24, 0x0B	; 11
     180:	80 83       	st	Z, r24
}
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <velocity>:

void velocity (unsigned char left_motor, unsigned char right_motor)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	0f 92       	push	r0
     18e:	0f 92       	push	r0
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
     194:	89 83       	std	Y+1, r24	; 0x01
     196:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
     198:	e8 e2       	ldi	r30, 0x28	; 40
     19a:	f1 e0       	ldi	r31, 0x01	; 1
     19c:	89 81       	ldd	r24, Y+1	; 0x01
     19e:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
     1a0:	ea e2       	ldi	r30, 0x2A	; 42
     1a2:	f1 e0       	ldi	r31, 0x01	; 1
     1a4:	8a 81       	ldd	r24, Y+2	; 0x02
     1a6:	80 83       	st	Z, r24
}
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
     1ac:	cf 91       	pop	r28
     1ae:	df 91       	pop	r29
     1b0:	08 95       	ret

000001b2 <motion_pin_config>:

void motion_pin_config (void)
{
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F; //set direction of the PORTA 3 to PORTA 0 pins as output
     1ba:	a1 e2       	ldi	r26, 0x21	; 33
     1bc:	b0 e0       	ldi	r27, 0x00	; 0
     1be:	e1 e2       	ldi	r30, 0x21	; 33
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	8f 60       	ori	r24, 0x0F	; 15
     1c6:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0; // set initial value of the PORTA 3 to PORTA 0 pins to logic 0
     1c8:	a2 e2       	ldi	r26, 0x22	; 34
     1ca:	b0 e0       	ldi	r27, 0x00	; 0
     1cc:	e2 e2       	ldi	r30, 0x22	; 34
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	80 81       	ld	r24, Z
     1d2:	80 7f       	andi	r24, 0xF0	; 240
     1d4:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     1d6:	aa e0       	ldi	r26, 0x0A	; 10
     1d8:	b1 e0       	ldi	r27, 0x01	; 1
     1da:	ea e0       	ldi	r30, 0x0A	; 10
     1dc:	f1 e0       	ldi	r31, 0x01	; 1
     1de:	80 81       	ld	r24, Z
     1e0:	88 61       	ori	r24, 0x18	; 24
     1e2:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM
     1e4:	ab e0       	ldi	r26, 0x0B	; 11
     1e6:	b1 e0       	ldi	r27, 0x01	; 1
     1e8:	eb e0       	ldi	r30, 0x0B	; 11
     1ea:	f1 e0       	ldi	r31, 0x01	; 1
     1ec:	80 81       	ld	r24, Z
     1ee:	88 61       	ori	r24, 0x18	; 24
     1f0:	8c 93       	st	X, r24
}
     1f2:	cf 91       	pop	r28
     1f4:	df 91       	pop	r29
     1f6:	08 95       	ret

000001f8 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
     1f8:	df 93       	push	r29
     1fa:	cf 93       	push	r28
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     200:	ad e2       	ldi	r26, 0x2D	; 45
     202:	b0 e0       	ldi	r27, 0x00	; 0
     204:	ed e2       	ldi	r30, 0x2D	; 45
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	8f 7e       	andi	r24, 0xEF	; 239
     20c:	8c 93       	st	X, r24
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     20e:	ae e2       	ldi	r26, 0x2E	; 46
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	ee e2       	ldi	r30, 0x2E	; 46
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	80 61       	ori	r24, 0x10	; 16
     21a:	8c 93       	st	X, r24
}
     21c:	cf 91       	pop	r28
     21e:	df 91       	pop	r29
     220:	08 95       	ret

00000222 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
     222:	df 93       	push	r29
     224:	cf 93       	push	r28
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     22a:	ad e2       	ldi	r26, 0x2D	; 45
     22c:	b0 e0       	ldi	r27, 0x00	; 0
     22e:	ed e2       	ldi	r30, 0x2D	; 45
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	8f 7d       	andi	r24, 0xDF	; 223
     236:	8c 93       	st	X, r24
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     238:	ae e2       	ldi	r26, 0x2E	; 46
     23a:	b0 e0       	ldi	r27, 0x00	; 0
     23c:	ee e2       	ldi	r30, 0x2E	; 46
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	80 62       	ori	r24, 0x20	; 32
     244:	8c 93       	st	X, r24
}
     246:	cf 91       	pop	r28
     248:	df 91       	pop	r29
     24a:	08 95       	ret

0000024c <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
     24c:	df 93       	push	r29
     24e:	cf 93       	push	r28
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
     254:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     256:	aa e6       	ldi	r26, 0x6A	; 106
     258:	b0 e0       	ldi	r27, 0x00	; 0
     25a:	ea e6       	ldi	r30, 0x6A	; 106
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	82 60       	ori	r24, 0x02	; 2
     262:	8c 93       	st	X, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     264:	ad e3       	ldi	r26, 0x3D	; 61
     266:	b0 e0       	ldi	r27, 0x00	; 0
     268:	ed e3       	ldi	r30, 0x3D	; 61
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	80 61       	ori	r24, 0x10	; 16
     270:	8c 93       	st	X, r24
	sei();   // Enables the global interrupt
     272:	78 94       	sei
}
     274:	cf 91       	pop	r28
     276:	df 91       	pop	r29
     278:	08 95       	ret

0000027a <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
     27a:	df 93       	push	r29
     27c:	cf 93       	push	r28
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
     282:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     284:	aa e6       	ldi	r26, 0x6A	; 106
     286:	b0 e0       	ldi	r27, 0x00	; 0
     288:	ea e6       	ldi	r30, 0x6A	; 106
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	88 60       	ori	r24, 0x08	; 8
     290:	8c 93       	st	X, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     292:	ad e3       	ldi	r26, 0x3D	; 61
     294:	b0 e0       	ldi	r27, 0x00	; 0
     296:	ed e3       	ldi	r30, 0x3D	; 61
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	80 81       	ld	r24, Z
     29c:	80 62       	ori	r24, 0x20	; 32
     29e:	8c 93       	st	X, r24
	sei();   // Enables the global interrupt
     2a0:	78 94       	sei
}
     2a2:	cf 91       	pop	r28
     2a4:	df 91       	pop	r29
     2a6:	08 95       	ret

000002a8 <set_motors>:

void set_motors()
{
     2a8:	df 93       	push	r29
     2aa:	cf 93       	push	r28
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
    motion_pin_config();
     2b0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <motion_pin_config>
    left_encoder_pin_config();
     2b4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <left_encoder_pin_config>
    right_encoder_pin_config();
     2b8:	0e 94 11 01 	call	0x222	; 0x222 <right_encoder_pin_config>
    left_position_encoder_interrupt_init();
     2bc:	0e 94 26 01 	call	0x24c	; 0x24c <left_position_encoder_interrupt_init>
    right_position_encoder_interrupt_init();
     2c0:	0e 94 3d 01 	call	0x27a	; 0x27a <right_position_encoder_interrupt_init>
    timer5_init();
     2c4:	0e 94 95 00 	call	0x12a	; 0x12a <timer5_init>
}
     2c8:	cf 91       	pop	r28
     2ca:	df 91       	pop	r29
     2cc:	08 95       	ret

000002ce <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     2ce:	1f 92       	push	r1
     2d0:	0f 92       	push	r0
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	0f 92       	push	r0
     2d6:	11 24       	eor	r1, r1
     2d8:	8f 93       	push	r24
     2da:	9f 93       	push	r25
     2dc:	af 93       	push	r26
     2de:	bf 93       	push	r27
     2e0:	df 93       	push	r29
     2e2:	cf 93       	push	r28
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
	ShaftCountRight++;  //increment right shaft position count
     2e8:	80 91 0e 03 	lds	r24, 0x030E
     2ec:	90 91 0f 03 	lds	r25, 0x030F
     2f0:	a0 91 10 03 	lds	r26, 0x0310
     2f4:	b0 91 11 03 	lds	r27, 0x0311
     2f8:	01 96       	adiw	r24, 0x01	; 1
     2fa:	a1 1d       	adc	r26, r1
     2fc:	b1 1d       	adc	r27, r1
     2fe:	80 93 0e 03 	sts	0x030E, r24
     302:	90 93 0f 03 	sts	0x030F, r25
     306:	a0 93 10 03 	sts	0x0310, r26
     30a:	b0 93 11 03 	sts	0x0311, r27
}
     30e:	cf 91       	pop	r28
     310:	df 91       	pop	r29
     312:	bf 91       	pop	r27
     314:	af 91       	pop	r26
     316:	9f 91       	pop	r25
     318:	8f 91       	pop	r24
     31a:	0f 90       	pop	r0
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	0f 90       	pop	r0
     320:	1f 90       	pop	r1
     322:	18 95       	reti

00000324 <__vector_5>:

//ISR for left position encoder
ISR(INT4_vect)
{
     324:	1f 92       	push	r1
     326:	0f 92       	push	r0
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	0f 92       	push	r0
     32c:	11 24       	eor	r1, r1
     32e:	8f 93       	push	r24
     330:	9f 93       	push	r25
     332:	af 93       	push	r26
     334:	bf 93       	push	r27
     336:	df 93       	push	r29
     338:	cf 93       	push	r28
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft++;  //increment left shaft position count
     33e:	80 91 0a 03 	lds	r24, 0x030A
     342:	90 91 0b 03 	lds	r25, 0x030B
     346:	a0 91 0c 03 	lds	r26, 0x030C
     34a:	b0 91 0d 03 	lds	r27, 0x030D
     34e:	01 96       	adiw	r24, 0x01	; 1
     350:	a1 1d       	adc	r26, r1
     352:	b1 1d       	adc	r27, r1
     354:	80 93 0a 03 	sts	0x030A, r24
     358:	90 93 0b 03 	sts	0x030B, r25
     35c:	a0 93 0c 03 	sts	0x030C, r26
     360:	b0 93 0d 03 	sts	0x030D, r27
}
     364:	cf 91       	pop	r28
     366:	df 91       	pop	r29
     368:	bf 91       	pop	r27
     36a:	af 91       	pop	r26
     36c:	9f 91       	pop	r25
     36e:	8f 91       	pop	r24
     370:	0f 90       	pop	r0
     372:	0f be       	out	0x3f, r0	; 63
     374:	0f 90       	pop	r0
     376:	1f 90       	pop	r1
     378:	18 95       	reti

0000037a <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
     37a:	df 93       	push	r29
     37c:	cf 93       	push	r28
     37e:	0f 92       	push	r0
     380:	0f 92       	push	r0
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
     386:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
     388:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
     38a:	8a 81       	ldd	r24, Y+2	; 0x02
     38c:	8f 70       	andi	r24, 0x0F	; 15
     38e:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 			// reading the PORTA's original status
     390:	e2 e2       	ldi	r30, 0x22	; 34
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	80 81       	ld	r24, Z
     396:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	80 7f       	andi	r24, 0xF0	; 240
     39c:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     39e:	99 81       	ldd	r25, Y+1	; 0x01
     3a0:	8a 81       	ldd	r24, Y+2	; 0x02
     3a2:	89 2b       	or	r24, r25
     3a4:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 			// setting the command to the port
     3a6:	e2 e2       	ldi	r30, 0x22	; 34
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	80 83       	st	Z, r24
}
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	cf 91       	pop	r28
     3b4:	df 91       	pop	r29
     3b6:	08 95       	ret

000003b8 <forward>:


void forward (void) //both wheels forward
{
     3b8:	df 93       	push	r29
     3ba:	cf 93       	push	r28
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
    motion_set(0x06);
     3c0:	86 e0       	ldi	r24, 0x06	; 6
     3c2:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     3c6:	cf 91       	pop	r28
     3c8:	df 91       	pop	r29
     3ca:	08 95       	ret

000003cc <forward_mm>:

void forward_mm(unsigned int distance)
{
     3cc:	df 93       	push	r29
     3ce:	cf 93       	push	r28
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	2a 97       	sbiw	r28, 0x0a	; 10
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
     3e0:	9a 87       	std	Y+10, r25	; 0x0a
     3e2:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	a0 e0       	ldi	r26, 0x00	; 0
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	8d 83       	std	Y+5, r24	; 0x05
     3ee:	9e 83       	std	Y+6, r25	; 0x06
     3f0:	af 83       	std	Y+7, r26	; 0x07
     3f2:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     3f4:	19 82       	std	Y+1, r1	; 0x01
     3f6:	1a 82       	std	Y+2, r1	; 0x02
     3f8:	1b 82       	std	Y+3, r1	; 0x03
     3fa:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = distance / 5.338; // division by resolution to get shaft count
     3fc:	89 85       	ldd	r24, Y+9	; 0x09
     3fe:	9a 85       	ldd	r25, Y+10	; 0x0a
     400:	cc 01       	movw	r24, r24
     402:	a0 e0       	ldi	r26, 0x00	; 0
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	bc 01       	movw	r22, r24
     408:	cd 01       	movw	r24, r26
     40a:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__floatunsisf>
     40e:	dc 01       	movw	r26, r24
     410:	cb 01       	movw	r24, r22
     412:	bc 01       	movw	r22, r24
     414:	cd 01       	movw	r24, r26
     416:	25 ee       	ldi	r18, 0xE5	; 229
     418:	30 ed       	ldi	r19, 0xD0	; 208
     41a:	4a ea       	ldi	r20, 0xAA	; 170
     41c:	50 e4       	ldi	r21, 0x40	; 64
     41e:	0e 94 4c 1c 	call	0x3898	; 0x3898 <__divsf3>
     422:	dc 01       	movw	r26, r24
     424:	cb 01       	movw	r24, r22
     426:	8d 83       	std	Y+5, r24	; 0x05
     428:	9e 83       	std	Y+6, r25	; 0x06
     42a:	af 83       	std	Y+7, r26	; 0x07
     42c:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     42e:	6d 81       	ldd	r22, Y+5	; 0x05
     430:	7e 81       	ldd	r23, Y+6	; 0x06
     432:	8f 81       	ldd	r24, Y+7	; 0x07
     434:	98 85       	ldd	r25, Y+8	; 0x08
     436:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
     43a:	dc 01       	movw	r26, r24
     43c:	cb 01       	movw	r24, r22
     43e:	89 83       	std	Y+1, r24	; 0x01
     440:	9a 83       	std	Y+2, r25	; 0x02
     442:	ab 83       	std	Y+3, r26	; 0x03
     444:	bc 83       	std	Y+4, r27	; 0x04

	ShaftCountRight = 0;
     446:	10 92 0e 03 	sts	0x030E, r1
     44a:	10 92 0f 03 	sts	0x030F, r1
     44e:	10 92 10 03 	sts	0x0310, r1
     452:	10 92 11 03 	sts	0x0311, r1
	ShaftCountLeft = 0;
     456:	10 92 0a 03 	sts	0x030A, r1
     45a:	10 92 0b 03 	sts	0x030B, r1
     45e:	10 92 0c 03 	sts	0x030C, r1
     462:	10 92 0d 03 	sts	0x030D, r1
    forward();
     466:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <forward>

	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt || ShaftCountLeft > ReqdShaftCountInt)
     46a:	20 91 0e 03 	lds	r18, 0x030E
     46e:	30 91 0f 03 	lds	r19, 0x030F
     472:	40 91 10 03 	lds	r20, 0x0310
     476:	50 91 11 03 	lds	r21, 0x0311
     47a:	89 81       	ldd	r24, Y+1	; 0x01
     47c:	9a 81       	ldd	r25, Y+2	; 0x02
     47e:	ab 81       	ldd	r26, Y+3	; 0x03
     480:	bc 81       	ldd	r27, Y+4	; 0x04
     482:	82 17       	cp	r24, r18
     484:	93 07       	cpc	r25, r19
     486:	a4 07       	cpc	r26, r20
     488:	b5 07       	cpc	r27, r21
     48a:	88 f0       	brcs	.+34     	; 0x4ae <forward_mm+0xe2>
     48c:	20 91 0a 03 	lds	r18, 0x030A
     490:	30 91 0b 03 	lds	r19, 0x030B
     494:	40 91 0c 03 	lds	r20, 0x030C
     498:	50 91 0d 03 	lds	r21, 0x030D
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	9a 81       	ldd	r25, Y+2	; 0x02
     4a0:	ab 81       	ldd	r26, Y+3	; 0x03
     4a2:	bc 81       	ldd	r27, Y+4	; 0x04
     4a4:	82 17       	cp	r24, r18
     4a6:	93 07       	cpc	r25, r19
     4a8:	a4 07       	cpc	r26, r20
     4aa:	b5 07       	cpc	r27, r21
     4ac:	f0 f6       	brcc	.-68     	; 0x46a <forward_mm+0x9e>
		{
			break;
		}
	}
	stop(); //Stop robot
     4ae:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     4b2:	2a 96       	adiw	r28, 0x0a	; 10
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
     4be:	cf 91       	pop	r28
     4c0:	df 91       	pop	r29
     4c2:	08 95       	ret

000004c4 <back>:

void back (void) //both wheels backward
{
     4c4:	df 93       	push	r29
     4c6:	cf 93       	push	r28
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
     4cc:	89 e0       	ldi	r24, 0x09	; 9
     4ce:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     4d2:	cf 91       	pop	r28
     4d4:	df 91       	pop	r29
     4d6:	08 95       	ret

000004d8 <back_mm>:

void back_mm (unsigned int distance)
{
     4d8:	df 93       	push	r29
     4da:	cf 93       	push	r28
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	2a 97       	sbiw	r28, 0x0a	; 10
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	f8 94       	cli
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	cd bf       	out	0x3d, r28	; 61
     4ec:	9a 87       	std	Y+10, r25	; 0x0a
     4ee:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	a0 e0       	ldi	r26, 0x00	; 0
     4f6:	b0 e0       	ldi	r27, 0x00	; 0
     4f8:	8d 83       	std	Y+5, r24	; 0x05
     4fa:	9e 83       	std	Y+6, r25	; 0x06
     4fc:	af 83       	std	Y+7, r26	; 0x07
     4fe:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     500:	19 82       	std	Y+1, r1	; 0x01
     502:	1a 82       	std	Y+2, r1	; 0x02
     504:	1b 82       	std	Y+3, r1	; 0x03
     506:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = distance / 5.338; // division by resolution to get shaft count
     508:	89 85       	ldd	r24, Y+9	; 0x09
     50a:	9a 85       	ldd	r25, Y+10	; 0x0a
     50c:	cc 01       	movw	r24, r24
     50e:	a0 e0       	ldi	r26, 0x00	; 0
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	bc 01       	movw	r22, r24
     514:	cd 01       	movw	r24, r26
     516:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__floatunsisf>
     51a:	dc 01       	movw	r26, r24
     51c:	cb 01       	movw	r24, r22
     51e:	bc 01       	movw	r22, r24
     520:	cd 01       	movw	r24, r26
     522:	25 ee       	ldi	r18, 0xE5	; 229
     524:	30 ed       	ldi	r19, 0xD0	; 208
     526:	4a ea       	ldi	r20, 0xAA	; 170
     528:	50 e4       	ldi	r21, 0x40	; 64
     52a:	0e 94 4c 1c 	call	0x3898	; 0x3898 <__divsf3>
     52e:	dc 01       	movw	r26, r24
     530:	cb 01       	movw	r24, r22
     532:	8d 83       	std	Y+5, r24	; 0x05
     534:	9e 83       	std	Y+6, r25	; 0x06
     536:	af 83       	std	Y+7, r26	; 0x07
     538:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     53a:	6d 81       	ldd	r22, Y+5	; 0x05
     53c:	7e 81       	ldd	r23, Y+6	; 0x06
     53e:	8f 81       	ldd	r24, Y+7	; 0x07
     540:	98 85       	ldd	r25, Y+8	; 0x08
     542:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
     546:	dc 01       	movw	r26, r24
     548:	cb 01       	movw	r24, r22
     54a:	89 83       	std	Y+1, r24	; 0x01
     54c:	9a 83       	std	Y+2, r25	; 0x02
     54e:	ab 83       	std	Y+3, r26	; 0x03
     550:	bc 83       	std	Y+4, r27	; 0x04

    //Counting any one of the shaft counts.
	ShaftCountRight = 0;
     552:	10 92 0e 03 	sts	0x030E, r1
     556:	10 92 0f 03 	sts	0x030F, r1
     55a:	10 92 10 03 	sts	0x0310, r1
     55e:	10 92 11 03 	sts	0x0311, r1
    back();
     562:	0e 94 62 02 	call	0x4c4	; 0x4c4 <back>

	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
     566:	20 91 0e 03 	lds	r18, 0x030E
     56a:	30 91 0f 03 	lds	r19, 0x030F
     56e:	40 91 10 03 	lds	r20, 0x0310
     572:	50 91 11 03 	lds	r21, 0x0311
     576:	89 81       	ldd	r24, Y+1	; 0x01
     578:	9a 81       	ldd	r25, Y+2	; 0x02
     57a:	ab 81       	ldd	r26, Y+3	; 0x03
     57c:	bc 81       	ldd	r27, Y+4	; 0x04
     57e:	82 17       	cp	r24, r18
     580:	93 07       	cpc	r25, r19
     582:	a4 07       	cpc	r26, r20
     584:	b5 07       	cpc	r27, r21
     586:	78 f7       	brcc	.-34     	; 0x566 <back_mm+0x8e>
		{
			break;
		}
	}
	stop(); //Stop robot
     588:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     58c:	2a 96       	adiw	r28, 0x0a	; 10
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
     598:	cf 91       	pop	r28
     59a:	df 91       	pop	r29
     59c:	08 95       	ret

0000059e <left>:

void left (void) //Left wheel backward, Right wheel forward
{
     59e:	df 93       	push	r29
     5a0:	cf 93       	push	r28
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
     5a6:	85 e0       	ldi	r24, 0x05	; 5
     5a8:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     5ac:	cf 91       	pop	r28
     5ae:	df 91       	pop	r29
     5b0:	08 95       	ret

000005b2 <left_degrees>:

void left_degrees(unsigned int degrees)
{
     5b2:	df 93       	push	r29
     5b4:	cf 93       	push	r28
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
     5ba:	2c 97       	sbiw	r28, 0x0c	; 12
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	f8 94       	cli
     5c0:	de bf       	out	0x3e, r29	; 62
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	cd bf       	out	0x3d, r28	; 61
     5c6:	9a 87       	std	Y+10, r25	; 0x0a
     5c8:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	a0 e0       	ldi	r26, 0x00	; 0
     5d0:	b0 e0       	ldi	r27, 0x00	; 0
     5d2:	8d 83       	std	Y+5, r24	; 0x05
     5d4:	9e 83       	std	Y+6, r25	; 0x06
     5d6:	af 83       	std	Y+7, r26	; 0x07
     5d8:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     5da:	19 82       	std	Y+1, r1	; 0x01
     5dc:	1a 82       	std	Y+2, r1	; 0x02
     5de:	1b 82       	std	Y+3, r1	; 0x03
     5e0:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees/ 4.090; // division by resolution to get shaft count
     5e2:	89 85       	ldd	r24, Y+9	; 0x09
     5e4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5e6:	cc 01       	movw	r24, r24
     5e8:	a0 e0       	ldi	r26, 0x00	; 0
     5ea:	b0 e0       	ldi	r27, 0x00	; 0
     5ec:	bc 01       	movw	r22, r24
     5ee:	cd 01       	movw	r24, r26
     5f0:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__floatunsisf>
     5f4:	dc 01       	movw	r26, r24
     5f6:	cb 01       	movw	r24, r22
     5f8:	bc 01       	movw	r22, r24
     5fa:	cd 01       	movw	r24, r26
     5fc:	28 e4       	ldi	r18, 0x48	; 72
     5fe:	31 ee       	ldi	r19, 0xE1	; 225
     600:	42 e8       	ldi	r20, 0x82	; 130
     602:	50 e4       	ldi	r21, 0x40	; 64
     604:	0e 94 4c 1c 	call	0x3898	; 0x3898 <__divsf3>
     608:	dc 01       	movw	r26, r24
     60a:	cb 01       	movw	r24, r22
     60c:	8d 83       	std	Y+5, r24	; 0x05
     60e:	9e 83       	std	Y+6, r25	; 0x06
     610:	af 83       	std	Y+7, r26	; 0x07
     612:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     614:	6d 81       	ldd	r22, Y+5	; 0x05
     616:	7e 81       	ldd	r23, Y+6	; 0x06
     618:	8f 81       	ldd	r24, Y+7	; 0x07
     61a:	98 85       	ldd	r25, Y+8	; 0x08
     61c:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
     620:	dc 01       	movw	r26, r24
     622:	cb 01       	movw	r24, r22
     624:	cc 01       	movw	r24, r24
     626:	a0 e0       	ldi	r26, 0x00	; 0
     628:	b0 e0       	ldi	r27, 0x00	; 0
     62a:	89 83       	std	Y+1, r24	; 0x01
     62c:	9a 83       	std	Y+2, r25	; 0x02
     62e:	ab 83       	std	Y+3, r26	; 0x03
     630:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     632:	10 92 0e 03 	sts	0x030E, r1
     636:	10 92 0f 03 	sts	0x030F, r1
     63a:	10 92 10 03 	sts	0x0310, r1
     63e:	10 92 11 03 	sts	0x0311, r1
	ShaftCountLeft = 0;
     642:	10 92 0a 03 	sts	0x030A, r1
     646:	10 92 0b 03 	sts	0x030B, r1
     64a:	10 92 0c 03 	sts	0x030C, r1
     64e:	10 92 0d 03 	sts	0x030D, r1

    left();
     652:	0e 94 cf 02 	call	0x59e	; 0x59e <left>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     656:	20 91 0e 03 	lds	r18, 0x030E
     65a:	30 91 0f 03 	lds	r19, 0x030F
     65e:	40 91 10 03 	lds	r20, 0x0310
     662:	50 91 11 03 	lds	r21, 0x0311
     666:	1c 86       	std	Y+12, r1	; 0x0c
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	9a 81       	ldd	r25, Y+2	; 0x02
     66c:	ab 81       	ldd	r26, Y+3	; 0x03
     66e:	bc 81       	ldd	r27, Y+4	; 0x04
     670:	28 17       	cp	r18, r24
     672:	39 07       	cpc	r19, r25
     674:	4a 07       	cpc	r20, r26
     676:	5b 07       	cpc	r21, r27
     678:	10 f0       	brcs	.+4      	; 0x67e <left_degrees+0xcc>
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	8c 87       	std	Y+12, r24	; 0x0c
     67e:	20 91 0a 03 	lds	r18, 0x030A
     682:	30 91 0b 03 	lds	r19, 0x030B
     686:	40 91 0c 03 	lds	r20, 0x030C
     68a:	50 91 0d 03 	lds	r21, 0x030D
     68e:	1b 86       	std	Y+11, r1	; 0x0b
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	9a 81       	ldd	r25, Y+2	; 0x02
     694:	ab 81       	ldd	r26, Y+3	; 0x03
     696:	bc 81       	ldd	r27, Y+4	; 0x04
     698:	28 17       	cp	r18, r24
     69a:	39 07       	cpc	r19, r25
     69c:	4a 07       	cpc	r20, r26
     69e:	5b 07       	cpc	r21, r27
     6a0:	10 f0       	brcs	.+4      	; 0x6a6 <left_degrees+0xf4>
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	9b 87       	std	Y+11, r25	; 0x0b
     6a6:	8c 85       	ldd	r24, Y+12	; 0x0c
     6a8:	9b 85       	ldd	r25, Y+11	; 0x0b
     6aa:	89 2b       	or	r24, r25
     6ac:	88 23       	and	r24, r24
     6ae:	99 f2       	breq	.-90     	; 0x656 <left_degrees+0xa4>
		break;
	}
	stop(); //Stop robot
     6b0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     6b4:	2c 96       	adiw	r28, 0x0c	; 12
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	cf 91       	pop	r28
     6c2:	df 91       	pop	r29
     6c4:	08 95       	ret

000006c6 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
     6c6:	df 93       	push	r29
     6c8:	cf 93       	push	r28
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
     6ce:	8a e0       	ldi	r24, 0x0A	; 10
     6d0:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     6d4:	cf 91       	pop	r28
     6d6:	df 91       	pop	r29
     6d8:	08 95       	ret

000006da <right_degrees>:

void right_degrees(unsigned int degrees)
{
     6da:	df 93       	push	r29
     6dc:	cf 93       	push	r28
     6de:	cd b7       	in	r28, 0x3d	; 61
     6e0:	de b7       	in	r29, 0x3e	; 62
     6e2:	2c 97       	sbiw	r28, 0x0c	; 12
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	cd bf       	out	0x3d, r28	; 61
     6ee:	9a 87       	std	Y+10, r25	; 0x0a
     6f0:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	a0 e0       	ldi	r26, 0x00	; 0
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	8d 83       	std	Y+5, r24	; 0x05
     6fc:	9e 83       	std	Y+6, r25	; 0x06
     6fe:	af 83       	std	Y+7, r26	; 0x07
     700:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     702:	19 82       	std	Y+1, r1	; 0x01
     704:	1a 82       	std	Y+2, r1	; 0x02
     706:	1b 82       	std	Y+3, r1	; 0x03
     708:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees/ 4.090; // division by resolution to get shaft count
     70a:	89 85       	ldd	r24, Y+9	; 0x09
     70c:	9a 85       	ldd	r25, Y+10	; 0x0a
     70e:	cc 01       	movw	r24, r24
     710:	a0 e0       	ldi	r26, 0x00	; 0
     712:	b0 e0       	ldi	r27, 0x00	; 0
     714:	bc 01       	movw	r22, r24
     716:	cd 01       	movw	r24, r26
     718:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__floatunsisf>
     71c:	dc 01       	movw	r26, r24
     71e:	cb 01       	movw	r24, r22
     720:	bc 01       	movw	r22, r24
     722:	cd 01       	movw	r24, r26
     724:	28 e4       	ldi	r18, 0x48	; 72
     726:	31 ee       	ldi	r19, 0xE1	; 225
     728:	42 e8       	ldi	r20, 0x82	; 130
     72a:	50 e4       	ldi	r21, 0x40	; 64
     72c:	0e 94 4c 1c 	call	0x3898	; 0x3898 <__divsf3>
     730:	dc 01       	movw	r26, r24
     732:	cb 01       	movw	r24, r22
     734:	8d 83       	std	Y+5, r24	; 0x05
     736:	9e 83       	std	Y+6, r25	; 0x06
     738:	af 83       	std	Y+7, r26	; 0x07
     73a:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     73c:	6d 81       	ldd	r22, Y+5	; 0x05
     73e:	7e 81       	ldd	r23, Y+6	; 0x06
     740:	8f 81       	ldd	r24, Y+7	; 0x07
     742:	98 85       	ldd	r25, Y+8	; 0x08
     744:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
     748:	dc 01       	movw	r26, r24
     74a:	cb 01       	movw	r24, r22
     74c:	cc 01       	movw	r24, r24
     74e:	a0 e0       	ldi	r26, 0x00	; 0
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	89 83       	std	Y+1, r24	; 0x01
     754:	9a 83       	std	Y+2, r25	; 0x02
     756:	ab 83       	std	Y+3, r26	; 0x03
     758:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     75a:	10 92 0e 03 	sts	0x030E, r1
     75e:	10 92 0f 03 	sts	0x030F, r1
     762:	10 92 10 03 	sts	0x0310, r1
     766:	10 92 11 03 	sts	0x0311, r1
	ShaftCountLeft = 0;
     76a:	10 92 0a 03 	sts	0x030A, r1
     76e:	10 92 0b 03 	sts	0x030B, r1
     772:	10 92 0c 03 	sts	0x030C, r1
     776:	10 92 0d 03 	sts	0x030D, r1

    right();
     77a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <right>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     77e:	20 91 0e 03 	lds	r18, 0x030E
     782:	30 91 0f 03 	lds	r19, 0x030F
     786:	40 91 10 03 	lds	r20, 0x0310
     78a:	50 91 11 03 	lds	r21, 0x0311
     78e:	1c 86       	std	Y+12, r1	; 0x0c
     790:	89 81       	ldd	r24, Y+1	; 0x01
     792:	9a 81       	ldd	r25, Y+2	; 0x02
     794:	ab 81       	ldd	r26, Y+3	; 0x03
     796:	bc 81       	ldd	r27, Y+4	; 0x04
     798:	28 17       	cp	r18, r24
     79a:	39 07       	cpc	r19, r25
     79c:	4a 07       	cpc	r20, r26
     79e:	5b 07       	cpc	r21, r27
     7a0:	10 f0       	brcs	.+4      	; 0x7a6 <right_degrees+0xcc>
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	8c 87       	std	Y+12, r24	; 0x0c
     7a6:	20 91 0a 03 	lds	r18, 0x030A
     7aa:	30 91 0b 03 	lds	r19, 0x030B
     7ae:	40 91 0c 03 	lds	r20, 0x030C
     7b2:	50 91 0d 03 	lds	r21, 0x030D
     7b6:	1b 86       	std	Y+11, r1	; 0x0b
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	9a 81       	ldd	r25, Y+2	; 0x02
     7bc:	ab 81       	ldd	r26, Y+3	; 0x03
     7be:	bc 81       	ldd	r27, Y+4	; 0x04
     7c0:	28 17       	cp	r18, r24
     7c2:	39 07       	cpc	r19, r25
     7c4:	4a 07       	cpc	r20, r26
     7c6:	5b 07       	cpc	r21, r27
     7c8:	10 f0       	brcs	.+4      	; 0x7ce <right_degrees+0xf4>
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	9b 87       	std	Y+11, r25	; 0x0b
     7ce:	8c 85       	ldd	r24, Y+12	; 0x0c
     7d0:	9b 85       	ldd	r25, Y+11	; 0x0b
     7d2:	89 2b       	or	r24, r25
     7d4:	88 23       	and	r24, r24
     7d6:	99 f2       	breq	.-90     	; 0x77e <right_degrees+0xa4>
		break;
	}
	stop(); //Stop robot
     7d8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     7dc:	2c 96       	adiw	r28, 0x0c	; 12
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	de bf       	out	0x3e, r29	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	cf 91       	pop	r28
     7ea:	df 91       	pop	r29
     7ec:	08 95       	ret

000007ee <soft_left>:


void soft_left (void) //Left wheel stationary, Right wheel forward
{
     7ee:	df 93       	push	r29
     7f0:	cf 93       	push	r28
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
     7f6:	84 e0       	ldi	r24, 0x04	; 4
     7f8:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     7fc:	cf 91       	pop	r28
     7fe:	df 91       	pop	r29
     800:	08 95       	ret

00000802 <soft_left_degrees>:

void soft_left_degrees(unsigned int degrees)
{
     802:	df 93       	push	r29
     804:	cf 93       	push	r28
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	2c 97       	sbiw	r28, 0x0c	; 12
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	de bf       	out	0x3e, r29	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	cd bf       	out	0x3d, r28	; 61
     816:	9a 87       	std	Y+10, r25	; 0x0a
     818:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	a0 e0       	ldi	r26, 0x00	; 0
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	8d 83       	std	Y+5, r24	; 0x05
     824:	9e 83       	std	Y+6, r25	; 0x06
     826:	af 83       	std	Y+7, r26	; 0x07
     828:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     82a:	19 82       	std	Y+1, r1	; 0x01
     82c:	1a 82       	std	Y+2, r1	; 0x02
     82e:	1b 82       	std	Y+3, r1	; 0x03
     830:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees * 2 / 4.090; // division by resolution to get shaft count
     832:	89 85       	ldd	r24, Y+9	; 0x09
     834:	9a 85       	ldd	r25, Y+10	; 0x0a
     836:	cc 01       	movw	r24, r24
     838:	a0 e0       	ldi	r26, 0x00	; 0
     83a:	b0 e0       	ldi	r27, 0x00	; 0
     83c:	bc 01       	movw	r22, r24
     83e:	cd 01       	movw	r24, r26
     840:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__floatunsisf>
     844:	9b 01       	movw	r18, r22
     846:	ac 01       	movw	r20, r24
     848:	ca 01       	movw	r24, r20
     84a:	b9 01       	movw	r22, r18
     84c:	0e 94 25 1b 	call	0x364a	; 0x364a <__addsf3>
     850:	dc 01       	movw	r26, r24
     852:	cb 01       	movw	r24, r22
     854:	bc 01       	movw	r22, r24
     856:	cd 01       	movw	r24, r26
     858:	28 e4       	ldi	r18, 0x48	; 72
     85a:	31 ee       	ldi	r19, 0xE1	; 225
     85c:	42 e8       	ldi	r20, 0x82	; 130
     85e:	50 e4       	ldi	r21, 0x40	; 64
     860:	0e 94 4c 1c 	call	0x3898	; 0x3898 <__divsf3>
     864:	dc 01       	movw	r26, r24
     866:	cb 01       	movw	r24, r22
     868:	8d 83       	std	Y+5, r24	; 0x05
     86a:	9e 83       	std	Y+6, r25	; 0x06
     86c:	af 83       	std	Y+7, r26	; 0x07
     86e:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     870:	6d 81       	ldd	r22, Y+5	; 0x05
     872:	7e 81       	ldd	r23, Y+6	; 0x06
     874:	8f 81       	ldd	r24, Y+7	; 0x07
     876:	98 85       	ldd	r25, Y+8	; 0x08
     878:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
     87c:	dc 01       	movw	r26, r24
     87e:	cb 01       	movw	r24, r22
     880:	cc 01       	movw	r24, r24
     882:	a0 e0       	ldi	r26, 0x00	; 0
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	89 83       	std	Y+1, r24	; 0x01
     888:	9a 83       	std	Y+2, r25	; 0x02
     88a:	ab 83       	std	Y+3, r26	; 0x03
     88c:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     88e:	10 92 0e 03 	sts	0x030E, r1
     892:	10 92 0f 03 	sts	0x030F, r1
     896:	10 92 10 03 	sts	0x0310, r1
     89a:	10 92 11 03 	sts	0x0311, r1
	ShaftCountLeft = 0;
     89e:	10 92 0a 03 	sts	0x030A, r1
     8a2:	10 92 0b 03 	sts	0x030B, r1
     8a6:	10 92 0c 03 	sts	0x030C, r1
     8aa:	10 92 0d 03 	sts	0x030D, r1

    soft_left();
     8ae:	0e 94 f7 03 	call	0x7ee	; 0x7ee <soft_left>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     8b2:	20 91 0e 03 	lds	r18, 0x030E
     8b6:	30 91 0f 03 	lds	r19, 0x030F
     8ba:	40 91 10 03 	lds	r20, 0x0310
     8be:	50 91 11 03 	lds	r21, 0x0311
     8c2:	1c 86       	std	Y+12, r1	; 0x0c
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	9a 81       	ldd	r25, Y+2	; 0x02
     8c8:	ab 81       	ldd	r26, Y+3	; 0x03
     8ca:	bc 81       	ldd	r27, Y+4	; 0x04
     8cc:	28 17       	cp	r18, r24
     8ce:	39 07       	cpc	r19, r25
     8d0:	4a 07       	cpc	r20, r26
     8d2:	5b 07       	cpc	r21, r27
     8d4:	10 f0       	brcs	.+4      	; 0x8da <soft_left_degrees+0xd8>
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	8c 87       	std	Y+12, r24	; 0x0c
     8da:	20 91 0a 03 	lds	r18, 0x030A
     8de:	30 91 0b 03 	lds	r19, 0x030B
     8e2:	40 91 0c 03 	lds	r20, 0x030C
     8e6:	50 91 0d 03 	lds	r21, 0x030D
     8ea:	1b 86       	std	Y+11, r1	; 0x0b
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
     8f0:	ab 81       	ldd	r26, Y+3	; 0x03
     8f2:	bc 81       	ldd	r27, Y+4	; 0x04
     8f4:	28 17       	cp	r18, r24
     8f6:	39 07       	cpc	r19, r25
     8f8:	4a 07       	cpc	r20, r26
     8fa:	5b 07       	cpc	r21, r27
     8fc:	10 f0       	brcs	.+4      	; 0x902 <soft_left_degrees+0x100>
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	9b 87       	std	Y+11, r25	; 0x0b
     902:	8c 85       	ldd	r24, Y+12	; 0x0c
     904:	9b 85       	ldd	r25, Y+11	; 0x0b
     906:	89 2b       	or	r24, r25
     908:	88 23       	and	r24, r24
     90a:	99 f2       	breq	.-90     	; 0x8b2 <soft_left_degrees+0xb0>
		break;
	}
	stop(); //Stop robot
     90c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     910:	2c 96       	adiw	r28, 0x0c	; 12
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	cf 91       	pop	r28
     91e:	df 91       	pop	r29
     920:	08 95       	ret

00000922 <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
     922:	df 93       	push	r29
     924:	cf 93       	push	r28
     926:	cd b7       	in	r28, 0x3d	; 61
     928:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     930:	cf 91       	pop	r28
     932:	df 91       	pop	r29
     934:	08 95       	ret

00000936 <soft_right_degrees>:

void soft_right_degrees(unsigned int degrees)
{
     936:	df 93       	push	r29
     938:	cf 93       	push	r28
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
     93e:	2c 97       	sbiw	r28, 0x0c	; 12
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	9a 87       	std	Y+10, r25	; 0x0a
     94c:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	a0 e0       	ldi	r26, 0x00	; 0
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	8d 83       	std	Y+5, r24	; 0x05
     958:	9e 83       	std	Y+6, r25	; 0x06
     95a:	af 83       	std	Y+7, r26	; 0x07
     95c:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     95e:	19 82       	std	Y+1, r1	; 0x01
     960:	1a 82       	std	Y+2, r1	; 0x02
     962:	1b 82       	std	Y+3, r1	; 0x03
     964:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees * 2 / 4.090; // division by resolution to get shaft count
     966:	89 85       	ldd	r24, Y+9	; 0x09
     968:	9a 85       	ldd	r25, Y+10	; 0x0a
     96a:	cc 01       	movw	r24, r24
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	bc 01       	movw	r22, r24
     972:	cd 01       	movw	r24, r26
     974:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__floatunsisf>
     978:	9b 01       	movw	r18, r22
     97a:	ac 01       	movw	r20, r24
     97c:	ca 01       	movw	r24, r20
     97e:	b9 01       	movw	r22, r18
     980:	0e 94 25 1b 	call	0x364a	; 0x364a <__addsf3>
     984:	dc 01       	movw	r26, r24
     986:	cb 01       	movw	r24, r22
     988:	bc 01       	movw	r22, r24
     98a:	cd 01       	movw	r24, r26
     98c:	28 e4       	ldi	r18, 0x48	; 72
     98e:	31 ee       	ldi	r19, 0xE1	; 225
     990:	42 e8       	ldi	r20, 0x82	; 130
     992:	50 e4       	ldi	r21, 0x40	; 64
     994:	0e 94 4c 1c 	call	0x3898	; 0x3898 <__divsf3>
     998:	dc 01       	movw	r26, r24
     99a:	cb 01       	movw	r24, r22
     99c:	8d 83       	std	Y+5, r24	; 0x05
     99e:	9e 83       	std	Y+6, r25	; 0x06
     9a0:	af 83       	std	Y+7, r26	; 0x07
     9a2:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     9a4:	6d 81       	ldd	r22, Y+5	; 0x05
     9a6:	7e 81       	ldd	r23, Y+6	; 0x06
     9a8:	8f 81       	ldd	r24, Y+7	; 0x07
     9aa:	98 85       	ldd	r25, Y+8	; 0x08
     9ac:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	cc 01       	movw	r24, r24
     9b6:	a0 e0       	ldi	r26, 0x00	; 0
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	89 83       	std	Y+1, r24	; 0x01
     9bc:	9a 83       	std	Y+2, r25	; 0x02
     9be:	ab 83       	std	Y+3, r26	; 0x03
     9c0:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     9c2:	10 92 0e 03 	sts	0x030E, r1
     9c6:	10 92 0f 03 	sts	0x030F, r1
     9ca:	10 92 10 03 	sts	0x0310, r1
     9ce:	10 92 11 03 	sts	0x0311, r1
	ShaftCountLeft = 0;
     9d2:	10 92 0a 03 	sts	0x030A, r1
     9d6:	10 92 0b 03 	sts	0x030B, r1
     9da:	10 92 0c 03 	sts	0x030C, r1
     9de:	10 92 0d 03 	sts	0x030D, r1

    soft_right();
     9e2:	0e 94 91 04 	call	0x922	; 0x922 <soft_right>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     9e6:	20 91 0e 03 	lds	r18, 0x030E
     9ea:	30 91 0f 03 	lds	r19, 0x030F
     9ee:	40 91 10 03 	lds	r20, 0x0310
     9f2:	50 91 11 03 	lds	r21, 0x0311
     9f6:	1c 86       	std	Y+12, r1	; 0x0c
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	9a 81       	ldd	r25, Y+2	; 0x02
     9fc:	ab 81       	ldd	r26, Y+3	; 0x03
     9fe:	bc 81       	ldd	r27, Y+4	; 0x04
     a00:	28 17       	cp	r18, r24
     a02:	39 07       	cpc	r19, r25
     a04:	4a 07       	cpc	r20, r26
     a06:	5b 07       	cpc	r21, r27
     a08:	10 f0       	brcs	.+4      	; 0xa0e <soft_right_degrees+0xd8>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	8c 87       	std	Y+12, r24	; 0x0c
     a0e:	20 91 0a 03 	lds	r18, 0x030A
     a12:	30 91 0b 03 	lds	r19, 0x030B
     a16:	40 91 0c 03 	lds	r20, 0x030C
     a1a:	50 91 0d 03 	lds	r21, 0x030D
     a1e:	1b 86       	std	Y+11, r1	; 0x0b
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	9a 81       	ldd	r25, Y+2	; 0x02
     a24:	ab 81       	ldd	r26, Y+3	; 0x03
     a26:	bc 81       	ldd	r27, Y+4	; 0x04
     a28:	28 17       	cp	r18, r24
     a2a:	39 07       	cpc	r19, r25
     a2c:	4a 07       	cpc	r20, r26
     a2e:	5b 07       	cpc	r21, r27
     a30:	10 f0       	brcs	.+4      	; 0xa36 <soft_right_degrees+0x100>
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	9b 87       	std	Y+11, r25	; 0x0b
     a36:	8c 85       	ldd	r24, Y+12	; 0x0c
     a38:	9b 85       	ldd	r25, Y+11	; 0x0b
     a3a:	89 2b       	or	r24, r25
     a3c:	88 23       	and	r24, r24
     a3e:	99 f2       	breq	.-90     	; 0x9e6 <soft_right_degrees+0xb0>
		break;
	}
	stop(); //Stop robot
     a40:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     a44:	2c 96       	adiw	r28, 0x0c	; 12
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	cd bf       	out	0x3d, r28	; 61
     a50:	cf 91       	pop	r28
     a52:	df 91       	pop	r29
     a54:	08 95       	ret

00000a56 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
     a56:	df 93       	push	r29
     a58:	cf 93       	push	r28
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     a64:	cf 91       	pop	r28
     a66:	df 91       	pop	r29
     a68:	08 95       	ret

00000a6a <soft_left_degrees_2>:

void soft_left_degrees_2(unsigned int degrees)
{
     a6a:	df 93       	push	r29
     a6c:	cf 93       	push	r28
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
     a72:	2c 97       	sbiw	r28, 0x0c	; 12
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	f8 94       	cli
     a78:	de bf       	out	0x3e, r29	; 62
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	cd bf       	out	0x3d, r28	; 61
     a7e:	9a 87       	std	Y+10, r25	; 0x0a
     a80:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	b0 e0       	ldi	r27, 0x00	; 0
     a8a:	8d 83       	std	Y+5, r24	; 0x05
     a8c:	9e 83       	std	Y+6, r25	; 0x06
     a8e:	af 83       	std	Y+7, r26	; 0x07
     a90:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     a92:	19 82       	std	Y+1, r1	; 0x01
     a94:	1a 82       	std	Y+2, r1	; 0x02
     a96:	1b 82       	std	Y+3, r1	; 0x03
     a98:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees * 2 / 4.090; // division by resolution to get shaft count
     a9a:	89 85       	ldd	r24, Y+9	; 0x09
     a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a9e:	cc 01       	movw	r24, r24
     aa0:	a0 e0       	ldi	r26, 0x00	; 0
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	bc 01       	movw	r22, r24
     aa6:	cd 01       	movw	r24, r26
     aa8:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__floatunsisf>
     aac:	9b 01       	movw	r18, r22
     aae:	ac 01       	movw	r20, r24
     ab0:	ca 01       	movw	r24, r20
     ab2:	b9 01       	movw	r22, r18
     ab4:	0e 94 25 1b 	call	0x364a	; 0x364a <__addsf3>
     ab8:	dc 01       	movw	r26, r24
     aba:	cb 01       	movw	r24, r22
     abc:	bc 01       	movw	r22, r24
     abe:	cd 01       	movw	r24, r26
     ac0:	28 e4       	ldi	r18, 0x48	; 72
     ac2:	31 ee       	ldi	r19, 0xE1	; 225
     ac4:	42 e8       	ldi	r20, 0x82	; 130
     ac6:	50 e4       	ldi	r21, 0x40	; 64
     ac8:	0e 94 4c 1c 	call	0x3898	; 0x3898 <__divsf3>
     acc:	dc 01       	movw	r26, r24
     ace:	cb 01       	movw	r24, r22
     ad0:	8d 83       	std	Y+5, r24	; 0x05
     ad2:	9e 83       	std	Y+6, r25	; 0x06
     ad4:	af 83       	std	Y+7, r26	; 0x07
     ad6:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     ad8:	6d 81       	ldd	r22, Y+5	; 0x05
     ada:	7e 81       	ldd	r23, Y+6	; 0x06
     adc:	8f 81       	ldd	r24, Y+7	; 0x07
     ade:	98 85       	ldd	r25, Y+8	; 0x08
     ae0:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
     ae4:	dc 01       	movw	r26, r24
     ae6:	cb 01       	movw	r24, r22
     ae8:	cc 01       	movw	r24, r24
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	89 83       	std	Y+1, r24	; 0x01
     af0:	9a 83       	std	Y+2, r25	; 0x02
     af2:	ab 83       	std	Y+3, r26	; 0x03
     af4:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     af6:	10 92 0e 03 	sts	0x030E, r1
     afa:	10 92 0f 03 	sts	0x030F, r1
     afe:	10 92 10 03 	sts	0x0310, r1
     b02:	10 92 11 03 	sts	0x0311, r1
	ShaftCountLeft = 0;
     b06:	10 92 0a 03 	sts	0x030A, r1
     b0a:	10 92 0b 03 	sts	0x030B, r1
     b0e:	10 92 0c 03 	sts	0x030C, r1
     b12:	10 92 0d 03 	sts	0x030D, r1

    soft_left_2();
     b16:	0e 94 2b 05 	call	0xa56	; 0xa56 <soft_left_2>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     b1a:	20 91 0e 03 	lds	r18, 0x030E
     b1e:	30 91 0f 03 	lds	r19, 0x030F
     b22:	40 91 10 03 	lds	r20, 0x0310
     b26:	50 91 11 03 	lds	r21, 0x0311
     b2a:	1c 86       	std	Y+12, r1	; 0x0c
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	9a 81       	ldd	r25, Y+2	; 0x02
     b30:	ab 81       	ldd	r26, Y+3	; 0x03
     b32:	bc 81       	ldd	r27, Y+4	; 0x04
     b34:	28 17       	cp	r18, r24
     b36:	39 07       	cpc	r19, r25
     b38:	4a 07       	cpc	r20, r26
     b3a:	5b 07       	cpc	r21, r27
     b3c:	10 f0       	brcs	.+4      	; 0xb42 <soft_left_degrees_2+0xd8>
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	8c 87       	std	Y+12, r24	; 0x0c
     b42:	20 91 0a 03 	lds	r18, 0x030A
     b46:	30 91 0b 03 	lds	r19, 0x030B
     b4a:	40 91 0c 03 	lds	r20, 0x030C
     b4e:	50 91 0d 03 	lds	r21, 0x030D
     b52:	1b 86       	std	Y+11, r1	; 0x0b
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	9a 81       	ldd	r25, Y+2	; 0x02
     b58:	ab 81       	ldd	r26, Y+3	; 0x03
     b5a:	bc 81       	ldd	r27, Y+4	; 0x04
     b5c:	28 17       	cp	r18, r24
     b5e:	39 07       	cpc	r19, r25
     b60:	4a 07       	cpc	r20, r26
     b62:	5b 07       	cpc	r21, r27
     b64:	10 f0       	brcs	.+4      	; 0xb6a <soft_left_degrees_2+0x100>
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	9b 87       	std	Y+11, r25	; 0x0b
     b6a:	8c 85       	ldd	r24, Y+12	; 0x0c
     b6c:	9b 85       	ldd	r25, Y+11	; 0x0b
     b6e:	89 2b       	or	r24, r25
     b70:	88 23       	and	r24, r24
     b72:	99 f2       	breq	.-90     	; 0xb1a <soft_left_degrees_2+0xb0>
		break;
	}
	stop(); //Stop robot
     b74:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     b78:	2c 96       	adiw	r28, 0x0c	; 12
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
     b92:	88 e0       	ldi	r24, 0x08	; 8
     b94:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <right_degrees_2>:

void right_degrees_2(unsigned int degrees)
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	2c 97       	sbiw	r28, 0x0c	; 12
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	9a 87       	std	Y+10, r25	; 0x0a
     bb4:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	a0 e0       	ldi	r26, 0x00	; 0
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	8d 83       	std	Y+5, r24	; 0x05
     bc0:	9e 83       	std	Y+6, r25	; 0x06
     bc2:	af 83       	std	Y+7, r26	; 0x07
     bc4:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     bc6:	19 82       	std	Y+1, r1	; 0x01
     bc8:	1a 82       	std	Y+2, r1	; 0x02
     bca:	1b 82       	std	Y+3, r1	; 0x03
     bcc:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees * 2 / 4.090; // division by resolution to get shaft count
     bce:	89 85       	ldd	r24, Y+9	; 0x09
     bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd2:	cc 01       	movw	r24, r24
     bd4:	a0 e0       	ldi	r26, 0x00	; 0
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	bc 01       	movw	r22, r24
     bda:	cd 01       	movw	r24, r26
     bdc:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__floatunsisf>
     be0:	9b 01       	movw	r18, r22
     be2:	ac 01       	movw	r20, r24
     be4:	ca 01       	movw	r24, r20
     be6:	b9 01       	movw	r22, r18
     be8:	0e 94 25 1b 	call	0x364a	; 0x364a <__addsf3>
     bec:	dc 01       	movw	r26, r24
     bee:	cb 01       	movw	r24, r22
     bf0:	bc 01       	movw	r22, r24
     bf2:	cd 01       	movw	r24, r26
     bf4:	28 e4       	ldi	r18, 0x48	; 72
     bf6:	31 ee       	ldi	r19, 0xE1	; 225
     bf8:	42 e8       	ldi	r20, 0x82	; 130
     bfa:	50 e4       	ldi	r21, 0x40	; 64
     bfc:	0e 94 4c 1c 	call	0x3898	; 0x3898 <__divsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	8d 83       	std	Y+5, r24	; 0x05
     c06:	9e 83       	std	Y+6, r25	; 0x06
     c08:	af 83       	std	Y+7, r26	; 0x07
     c0a:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     c0c:	6d 81       	ldd	r22, Y+5	; 0x05
     c0e:	7e 81       	ldd	r23, Y+6	; 0x06
     c10:	8f 81       	ldd	r24, Y+7	; 0x07
     c12:	98 85       	ldd	r25, Y+8	; 0x08
     c14:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	cc 01       	movw	r24, r24
     c1e:	a0 e0       	ldi	r26, 0x00	; 0
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	9a 83       	std	Y+2, r25	; 0x02
     c26:	ab 83       	std	Y+3, r26	; 0x03
     c28:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     c2a:	10 92 0e 03 	sts	0x030E, r1
     c2e:	10 92 0f 03 	sts	0x030F, r1
     c32:	10 92 10 03 	sts	0x0310, r1
     c36:	10 92 11 03 	sts	0x0311, r1
	ShaftCountLeft = 0;
     c3a:	10 92 0a 03 	sts	0x030A, r1
     c3e:	10 92 0b 03 	sts	0x030B, r1
     c42:	10 92 0c 03 	sts	0x030C, r1
     c46:	10 92 0d 03 	sts	0x030D, r1

    soft_right_2();
     c4a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <soft_right_2>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     c4e:	20 91 0e 03 	lds	r18, 0x030E
     c52:	30 91 0f 03 	lds	r19, 0x030F
     c56:	40 91 10 03 	lds	r20, 0x0310
     c5a:	50 91 11 03 	lds	r21, 0x0311
     c5e:	1c 86       	std	Y+12, r1	; 0x0c
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	9a 81       	ldd	r25, Y+2	; 0x02
     c64:	ab 81       	ldd	r26, Y+3	; 0x03
     c66:	bc 81       	ldd	r27, Y+4	; 0x04
     c68:	28 17       	cp	r18, r24
     c6a:	39 07       	cpc	r19, r25
     c6c:	4a 07       	cpc	r20, r26
     c6e:	5b 07       	cpc	r21, r27
     c70:	10 f0       	brcs	.+4      	; 0xc76 <right_degrees_2+0xd8>
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	8c 87       	std	Y+12, r24	; 0x0c
     c76:	20 91 0a 03 	lds	r18, 0x030A
     c7a:	30 91 0b 03 	lds	r19, 0x030B
     c7e:	40 91 0c 03 	lds	r20, 0x030C
     c82:	50 91 0d 03 	lds	r21, 0x030D
     c86:	1b 86       	std	Y+11, r1	; 0x0b
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	9a 81       	ldd	r25, Y+2	; 0x02
     c8c:	ab 81       	ldd	r26, Y+3	; 0x03
     c8e:	bc 81       	ldd	r27, Y+4	; 0x04
     c90:	28 17       	cp	r18, r24
     c92:	39 07       	cpc	r19, r25
     c94:	4a 07       	cpc	r20, r26
     c96:	5b 07       	cpc	r21, r27
     c98:	10 f0       	brcs	.+4      	; 0xc9e <right_degrees_2+0x100>
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	9b 87       	std	Y+11, r25	; 0x0b
     c9e:	8c 85       	ldd	r24, Y+12	; 0x0c
     ca0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ca2:	89 2b       	or	r24, r25
     ca4:	88 23       	and	r24, r24
     ca6:	99 f2       	breq	.-90     	; 0xc4e <right_degrees_2+0xb0>
		break;
	}
	stop(); //Stop robot
     ca8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     cac:	2c 96       	adiw	r28, 0x0c	; 12
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <stop>:

void stop (void) //hard stop
{
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <adc_pin_config>:
Available functions in the library, (Total : 2)
****************************************************************/
unsigned char ADC_Conversion(unsigned char);

void adc_pin_config()
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
    DDRF = 0x00;    //All ADC Channels on port F set as inputs
     cda:	e0 e3       	ldi	r30, 0x30	; 48
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	10 82       	st	Z, r1
    DDRK = 0x00;    //All ADC Channels on port K set as inputs.
     ce0:	e7 e0       	ldi	r30, 0x07	; 7
     ce2:	f1 e0       	ldi	r31, 0x01	; 1
     ce4:	10 82       	st	Z, r1
    PORTF = 0x00;   //All ADC pins on port F pulled low.
     ce6:	e1 e3       	ldi	r30, 0x31	; 49
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	10 82       	st	Z, r1
    PORTK = 0x00;   //All ADC pins on port K pulled low.
     cec:	e8 e0       	ldi	r30, 0x08	; 8
     cee:	f1 e0       	ldi	r31, 0x01	; 1
     cf0:	10 82       	st	Z, r1
}
     cf2:	cf 91       	pop	r28
     cf4:	df 91       	pop	r29
     cf6:	08 95       	ret

00000cf8 <set_ADC>:

void set_ADC()
{
     cf8:	df 93       	push	r29
     cfa:	cf 93       	push	r28
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
    adc_pin_config();
     d00:	0e 94 69 06 	call	0xcd2	; 0xcd2 <adc_pin_config>

	ADCSRA = 0x00;
     d04:	ea e7       	ldi	r30, 0x7A	; 122
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     d0a:	eb e7       	ldi	r30, 0x7B	; 123
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     d10:	ec e7       	ldi	r30, 0x7C	; 124
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 e2       	ldi	r24, 0x20	; 32
     d16:	80 83       	st	Z, r24
	ACSR = 0x80;        //Disable analog comparator.
     d18:	e0 e5       	ldi	r30, 0x50	; 80
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 e8       	ldi	r24, 0x80	; 128
     d1e:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0 ( Prescalar 64)
     d20:	ea e7       	ldi	r30, 0x7A	; 122
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	86 e8       	ldi	r24, 0x86	; 134
     d26:	80 83       	st	Z, r24
}
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <ADC_Conversion>:

//Function For ADC Conversion
//Value of ch can be 1-15 for single ended input.
//ADC resolution 8 bit.
unsigned char ADC_Conversion(unsigned char Ch)
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	0f 92       	push	r0
     d34:	0f 92       	push	r0
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;

	if(Ch>7)
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	88 30       	cpi	r24, 0x08	; 8
     d40:	20 f0       	brcs	.+8      	; 0xd4a <ADC_Conversion+0x1c>
        ADCSRB = 0x08;
     d42:	eb e7       	ldi	r30, 0x7B	; 123
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	88 e0       	ldi	r24, 0x08	; 8
     d48:	80 83       	st	Z, r24

	Ch = Ch & 0x07;
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	87 70       	andi	r24, 0x07	; 7
     d4e:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;
     d50:	ec e7       	ldi	r30, 0x7C	; 124
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	80 62       	ori	r24, 0x20	; 32
     d58:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     d5a:	aa e7       	ldi	r26, 0x7A	; 122
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	ea e7       	ldi	r30, 0x7A	; 122
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	80 64       	ori	r24, 0x40	; 64
     d66:	8c 93       	st	X, r24

	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     d68:	ea e7       	ldi	r30, 0x7A	; 122
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	88 2f       	mov	r24, r24
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	80 71       	andi	r24, 0x10	; 16
     d74:	90 70       	andi	r25, 0x00	; 0
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	b9 f3       	breq	.-18     	; 0xd68 <ADC_Conversion+0x3a>

	a=ADCH;
     d7a:	e9 e7       	ldi	r30, 0x79	; 121
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10;       //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     d82:	aa e7       	ldi	r26, 0x7A	; 122
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	ea e7       	ldi	r30, 0x7A	; 122
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	80 61       	ori	r24, 0x10	; 16
     d8e:	8c 93       	st	X, r24
	ADCSRB = 0x00;
     d90:	eb e7       	ldi	r30, 0x7B	; 123
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	10 82       	st	Z, r1
	return a;
     d96:	89 81       	ldd	r24, Y+1	; 0x01
}
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <set_lcd>:
unsigned int hundred;
unsigned int thousand;
unsigned int million;

void set_lcd()
{
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
    lcd_port_config();
     daa:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <lcd_port_config>
    lcd_init();
     dae:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <lcd_init>
}
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <lcd_port_config>:

void lcd_port_config (void)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     dc0:	a7 e2       	ldi	r26, 0x27	; 39
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e7 e2       	ldi	r30, 0x27	; 39
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	87 6f       	ori	r24, 0xF7	; 247
     dcc:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     dce:	a8 e2       	ldi	r26, 0x28	; 40
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e8 e2       	ldi	r30, 0x28	; 40
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	80 78       	andi	r24, 0x80	; 128
     dda:	8c 93       	st	X, r24
}
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <lcd_set_4bit>:

//Function to Reset LCD
void lcd_set_4bit()
{
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	c0 57       	subi	r28, 0x70	; 112
     df0:	d0 40       	sbci	r29, 0x00	; 0
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	fe 01       	movw	r30, r28
     dfe:	e3 59       	subi	r30, 0x93	; 147
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	a0 e8       	ldi	r26, 0x80	; 128
     e08:	bf e3       	ldi	r27, 0x3F	; 63
     e0a:	80 83       	st	Z, r24
     e0c:	91 83       	std	Z+1, r25	; 0x01
     e0e:	a2 83       	std	Z+2, r26	; 0x02
     e10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e12:	8e 01       	movw	r16, r28
     e14:	07 59       	subi	r16, 0x97	; 151
     e16:	1f 4f       	sbci	r17, 0xFF	; 255
     e18:	fe 01       	movw	r30, r28
     e1a:	e3 59       	subi	r30, 0x93	; 147
     e1c:	ff 4f       	sbci	r31, 0xFF	; 255
     e1e:	60 81       	ld	r22, Z
     e20:	71 81       	ldd	r23, Z+1	; 0x01
     e22:	82 81       	ldd	r24, Z+2	; 0x02
     e24:	93 81       	ldd	r25, Z+3	; 0x03
     e26:	26 e6       	ldi	r18, 0x66	; 102
     e28:	36 e6       	ldi	r19, 0x66	; 102
     e2a:	46 e6       	ldi	r20, 0x66	; 102
     e2c:	55 e4       	ldi	r21, 0x45	; 69
     e2e:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	f8 01       	movw	r30, r16
     e38:	80 83       	st	Z, r24
     e3a:	91 83       	std	Z+1, r25	; 0x01
     e3c:	a2 83       	std	Z+2, r26	; 0x02
     e3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e40:	fe 01       	movw	r30, r28
     e42:	e7 59       	subi	r30, 0x97	; 151
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	60 81       	ld	r22, Z
     e48:	71 81       	ldd	r23, Z+1	; 0x01
     e4a:	82 81       	ldd	r24, Z+2	; 0x02
     e4c:	93 81       	ldd	r25, Z+3	; 0x03
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e8       	ldi	r20, 0x80	; 128
     e54:	5f e3       	ldi	r21, 0x3F	; 63
     e56:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
     e5a:	88 23       	and	r24, r24
     e5c:	44 f4       	brge	.+16     	; 0xe6e <lcd_set_4bit+0x8c>
		__ticks = 1;
     e5e:	fe 01       	movw	r30, r28
     e60:	e9 59       	subi	r30, 0x99	; 153
     e62:	ff 4f       	sbci	r31, 0xFF	; 255
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	91 83       	std	Z+1, r25	; 0x01
     e6a:	80 83       	st	Z, r24
     e6c:	64 c0       	rjmp	.+200    	; 0xf36 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     e6e:	fe 01       	movw	r30, r28
     e70:	e7 59       	subi	r30, 0x97	; 151
     e72:	ff 4f       	sbci	r31, 0xFF	; 255
     e74:	60 81       	ld	r22, Z
     e76:	71 81       	ldd	r23, Z+1	; 0x01
     e78:	82 81       	ldd	r24, Z+2	; 0x02
     e7a:	93 81       	ldd	r25, Z+3	; 0x03
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	3f ef       	ldi	r19, 0xFF	; 255
     e80:	4f e7       	ldi	r20, 0x7F	; 127
     e82:	57 e4       	ldi	r21, 0x47	; 71
     e84:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
     e88:	18 16       	cp	r1, r24
     e8a:	0c f0       	brlt	.+2      	; 0xe8e <lcd_set_4bit+0xac>
     e8c:	43 c0       	rjmp	.+134    	; 0xf14 <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e8e:	fe 01       	movw	r30, r28
     e90:	e3 59       	subi	r30, 0x93	; 147
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	60 81       	ld	r22, Z
     e96:	71 81       	ldd	r23, Z+1	; 0x01
     e98:	82 81       	ldd	r24, Z+2	; 0x02
     e9a:	93 81       	ldd	r25, Z+3	; 0x03
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	40 e2       	ldi	r20, 0x20	; 32
     ea2:	51 e4       	ldi	r21, 0x41	; 65
     ea4:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	8e 01       	movw	r16, r28
     eae:	09 59       	subi	r16, 0x99	; 153
     eb0:	1f 4f       	sbci	r17, 0xFF	; 255
     eb2:	bc 01       	movw	r22, r24
     eb4:	cd 01       	movw	r24, r26
     eb6:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	f8 01       	movw	r30, r16
     ec0:	91 83       	std	Z+1, r25	; 0x01
     ec2:	80 83       	st	Z, r24
     ec4:	1f c0       	rjmp	.+62     	; 0xf04 <lcd_set_4bit+0x122>
     ec6:	fe 01       	movw	r30, r28
     ec8:	eb 59       	subi	r30, 0x9B	; 155
     eca:	ff 4f       	sbci	r31, 0xFF	; 255
     ecc:	80 e7       	ldi	r24, 0x70	; 112
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	91 83       	std	Z+1, r25	; 0x01
     ed2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ed4:	fe 01       	movw	r30, r28
     ed6:	eb 59       	subi	r30, 0x9B	; 155
     ed8:	ff 4f       	sbci	r31, 0xFF	; 255
     eda:	80 81       	ld	r24, Z
     edc:	91 81       	ldd	r25, Z+1	; 0x01
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <lcd_set_4bit+0xfc>
     ee2:	fe 01       	movw	r30, r28
     ee4:	eb 59       	subi	r30, 0x9B	; 155
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	91 83       	std	Z+1, r25	; 0x01
     eea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eec:	de 01       	movw	r26, r28
     eee:	a9 59       	subi	r26, 0x99	; 153
     ef0:	bf 4f       	sbci	r27, 0xFF	; 255
     ef2:	fe 01       	movw	r30, r28
     ef4:	e9 59       	subi	r30, 0x99	; 153
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	80 81       	ld	r24, Z
     efa:	91 81       	ldd	r25, Z+1	; 0x01
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	11 96       	adiw	r26, 0x01	; 1
     f00:	9c 93       	st	X, r25
     f02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f04:	fe 01       	movw	r30, r28
     f06:	e9 59       	subi	r30, 0x99	; 153
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	d1 f6       	brne	.-76     	; 0xec6 <lcd_set_4bit+0xe4>
     f12:	27 c0       	rjmp	.+78     	; 0xf62 <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f14:	8e 01       	movw	r16, r28
     f16:	09 59       	subi	r16, 0x99	; 153
     f18:	1f 4f       	sbci	r17, 0xFF	; 255
     f1a:	fe 01       	movw	r30, r28
     f1c:	e7 59       	subi	r30, 0x97	; 151
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	60 81       	ld	r22, Z
     f22:	71 81       	ldd	r23, Z+1	; 0x01
     f24:	82 81       	ldd	r24, Z+2	; 0x02
     f26:	93 81       	ldd	r25, Z+3	; 0x03
     f28:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	f8 01       	movw	r30, r16
     f32:	91 83       	std	Z+1, r25	; 0x01
     f34:	80 83       	st	Z, r24
     f36:	de 01       	movw	r26, r28
     f38:	ad 59       	subi	r26, 0x9D	; 157
     f3a:	bf 4f       	sbci	r27, 0xFF	; 255
     f3c:	fe 01       	movw	r30, r28
     f3e:	e9 59       	subi	r30, 0x99	; 153
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	80 81       	ld	r24, Z
     f44:	91 81       	ldd	r25, Z+1	; 0x01
     f46:	8d 93       	st	X+, r24
     f48:	9c 93       	st	X, r25
     f4a:	fe 01       	movw	r30, r28
     f4c:	ed 59       	subi	r30, 0x9D	; 157
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	80 81       	ld	r24, Z
     f52:	91 81       	ldd	r25, Z+1	; 0x01
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <lcd_set_4bit+0x172>
     f58:	fe 01       	movw	r30, r28
     f5a:	ed 59       	subi	r30, 0x9D	; 157
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	91 83       	std	Z+1, r25	; 0x01
     f60:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     f62:	a8 e2       	ldi	r26, 0x28	; 40
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e8 e2       	ldi	r30, 0x28	; 40
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8e 7f       	andi	r24, 0xFE	; 254
     f6e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     f70:	a8 e2       	ldi	r26, 0x28	; 40
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e8 e2       	ldi	r30, 0x28	; 40
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	8d 7f       	andi	r24, 0xFD	; 253
     f7c:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     f7e:	e8 e2       	ldi	r30, 0x28	; 40
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 e3       	ldi	r24, 0x30	; 48
     f84:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     f86:	a8 e2       	ldi	r26, 0x28	; 40
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e8 e2       	ldi	r30, 0x28	; 40
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	84 60       	ori	r24, 0x04	; 4
     f92:	8c 93       	st	X, r24
     f94:	fe 01       	movw	r30, r28
     f96:	e1 5a       	subi	r30, 0xA1	; 161
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	a0 ea       	ldi	r26, 0xA0	; 160
     fa0:	b0 e4       	ldi	r27, 0x40	; 64
     fa2:	80 83       	st	Z, r24
     fa4:	91 83       	std	Z+1, r25	; 0x01
     fa6:	a2 83       	std	Z+2, r26	; 0x02
     fa8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     faa:	8e 01       	movw	r16, r28
     fac:	05 5a       	subi	r16, 0xA5	; 165
     fae:	1f 4f       	sbci	r17, 0xFF	; 255
     fb0:	fe 01       	movw	r30, r28
     fb2:	e1 5a       	subi	r30, 0xA1	; 161
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	60 81       	ld	r22, Z
     fb8:	71 81       	ldd	r23, Z+1	; 0x01
     fba:	82 81       	ldd	r24, Z+2	; 0x02
     fbc:	93 81       	ldd	r25, Z+3	; 0x03
     fbe:	26 e6       	ldi	r18, 0x66	; 102
     fc0:	36 e6       	ldi	r19, 0x66	; 102
     fc2:	46 e6       	ldi	r20, 0x66	; 102
     fc4:	55 e4       	ldi	r21, 0x45	; 69
     fc6:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	f8 01       	movw	r30, r16
     fd0:	80 83       	st	Z, r24
     fd2:	91 83       	std	Z+1, r25	; 0x01
     fd4:	a2 83       	std	Z+2, r26	; 0x02
     fd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fd8:	fe 01       	movw	r30, r28
     fda:	e5 5a       	subi	r30, 0xA5	; 165
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	60 81       	ld	r22, Z
     fe0:	71 81       	ldd	r23, Z+1	; 0x01
     fe2:	82 81       	ldd	r24, Z+2	; 0x02
     fe4:	93 81       	ldd	r25, Z+3	; 0x03
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e8       	ldi	r20, 0x80	; 128
     fec:	5f e3       	ldi	r21, 0x3F	; 63
     fee:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
     ff2:	88 23       	and	r24, r24
     ff4:	44 f4       	brge	.+16     	; 0x1006 <lcd_set_4bit+0x224>
		__ticks = 1;
     ff6:	fe 01       	movw	r30, r28
     ff8:	e7 5a       	subi	r30, 0xA7	; 167
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	91 83       	std	Z+1, r25	; 0x01
    1002:	80 83       	st	Z, r24
    1004:	64 c0       	rjmp	.+200    	; 0x10ce <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
    1006:	fe 01       	movw	r30, r28
    1008:	e5 5a       	subi	r30, 0xA5	; 165
    100a:	ff 4f       	sbci	r31, 0xFF	; 255
    100c:	60 81       	ld	r22, Z
    100e:	71 81       	ldd	r23, Z+1	; 0x01
    1010:	82 81       	ldd	r24, Z+2	; 0x02
    1012:	93 81       	ldd	r25, Z+3	; 0x03
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	3f ef       	ldi	r19, 0xFF	; 255
    1018:	4f e7       	ldi	r20, 0x7F	; 127
    101a:	57 e4       	ldi	r21, 0x47	; 71
    101c:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    1020:	18 16       	cp	r1, r24
    1022:	0c f0       	brlt	.+2      	; 0x1026 <lcd_set_4bit+0x244>
    1024:	43 c0       	rjmp	.+134    	; 0x10ac <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1026:	fe 01       	movw	r30, r28
    1028:	e1 5a       	subi	r30, 0xA1	; 161
    102a:	ff 4f       	sbci	r31, 0xFF	; 255
    102c:	60 81       	ld	r22, Z
    102e:	71 81       	ldd	r23, Z+1	; 0x01
    1030:	82 81       	ldd	r24, Z+2	; 0x02
    1032:	93 81       	ldd	r25, Z+3	; 0x03
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e2       	ldi	r20, 0x20	; 32
    103a:	51 e4       	ldi	r21, 0x41	; 65
    103c:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	8e 01       	movw	r16, r28
    1046:	07 5a       	subi	r16, 0xA7	; 167
    1048:	1f 4f       	sbci	r17, 0xFF	; 255
    104a:	bc 01       	movw	r22, r24
    104c:	cd 01       	movw	r24, r26
    104e:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	f8 01       	movw	r30, r16
    1058:	91 83       	std	Z+1, r25	; 0x01
    105a:	80 83       	st	Z, r24
    105c:	1f c0       	rjmp	.+62     	; 0x109c <lcd_set_4bit+0x2ba>
    105e:	fe 01       	movw	r30, r28
    1060:	e9 5a       	subi	r30, 0xA9	; 169
    1062:	ff 4f       	sbci	r31, 0xFF	; 255
    1064:	80 e7       	ldi	r24, 0x70	; 112
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	91 83       	std	Z+1, r25	; 0x01
    106a:	80 83       	st	Z, r24
    106c:	fe 01       	movw	r30, r28
    106e:	e9 5a       	subi	r30, 0xA9	; 169
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	80 81       	ld	r24, Z
    1074:	91 81       	ldd	r25, Z+1	; 0x01
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	f1 f7       	brne	.-4      	; 0x1076 <lcd_set_4bit+0x294>
    107a:	fe 01       	movw	r30, r28
    107c:	e9 5a       	subi	r30, 0xA9	; 169
    107e:	ff 4f       	sbci	r31, 0xFF	; 255
    1080:	91 83       	std	Z+1, r25	; 0x01
    1082:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1084:	de 01       	movw	r26, r28
    1086:	a7 5a       	subi	r26, 0xA7	; 167
    1088:	bf 4f       	sbci	r27, 0xFF	; 255
    108a:	fe 01       	movw	r30, r28
    108c:	e7 5a       	subi	r30, 0xA7	; 167
    108e:	ff 4f       	sbci	r31, 0xFF	; 255
    1090:	80 81       	ld	r24, Z
    1092:	91 81       	ldd	r25, Z+1	; 0x01
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	11 96       	adiw	r26, 0x01	; 1
    1098:	9c 93       	st	X, r25
    109a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109c:	fe 01       	movw	r30, r28
    109e:	e7 5a       	subi	r30, 0xA7	; 167
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	80 81       	ld	r24, Z
    10a4:	91 81       	ldd	r25, Z+1	; 0x01
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	d1 f6       	brne	.-76     	; 0x105e <lcd_set_4bit+0x27c>
    10aa:	27 c0       	rjmp	.+78     	; 0x10fa <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ac:	8e 01       	movw	r16, r28
    10ae:	07 5a       	subi	r16, 0xA7	; 167
    10b0:	1f 4f       	sbci	r17, 0xFF	; 255
    10b2:	fe 01       	movw	r30, r28
    10b4:	e5 5a       	subi	r30, 0xA5	; 165
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	60 81       	ld	r22, Z
    10ba:	71 81       	ldd	r23, Z+1	; 0x01
    10bc:	82 81       	ldd	r24, Z+2	; 0x02
    10be:	93 81       	ldd	r25, Z+3	; 0x03
    10c0:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	f8 01       	movw	r30, r16
    10ca:	91 83       	std	Z+1, r25	; 0x01
    10cc:	80 83       	st	Z, r24
    10ce:	de 01       	movw	r26, r28
    10d0:	ab 5a       	subi	r26, 0xAB	; 171
    10d2:	bf 4f       	sbci	r27, 0xFF	; 255
    10d4:	fe 01       	movw	r30, r28
    10d6:	e7 5a       	subi	r30, 0xA7	; 167
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	80 81       	ld	r24, Z
    10dc:	91 81       	ldd	r25, Z+1	; 0x01
    10de:	8d 93       	st	X+, r24
    10e0:	9c 93       	st	X, r25
    10e2:	fe 01       	movw	r30, r28
    10e4:	eb 5a       	subi	r30, 0xAB	; 171
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	80 81       	ld	r24, Z
    10ea:	91 81       	ldd	r25, Z+1	; 0x01
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	f1 f7       	brne	.-4      	; 0x10ec <lcd_set_4bit+0x30a>
    10f0:	fe 01       	movw	r30, r28
    10f2:	eb 5a       	subi	r30, 0xAB	; 171
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	91 83       	std	Z+1, r25	; 0x01
    10f8:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    10fa:	a8 e2       	ldi	r26, 0x28	; 40
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e8 e2       	ldi	r30, 0x28	; 40
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	8b 7f       	andi	r24, 0xFB	; 251
    1106:	8c 93       	st	X, r24
    1108:	fe 01       	movw	r30, r28
    110a:	ef 5a       	subi	r30, 0xAF	; 175
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	a0 e8       	ldi	r26, 0x80	; 128
    1114:	bf e3       	ldi	r27, 0x3F	; 63
    1116:	80 83       	st	Z, r24
    1118:	91 83       	std	Z+1, r25	; 0x01
    111a:	a2 83       	std	Z+2, r26	; 0x02
    111c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    111e:	8e 01       	movw	r16, r28
    1120:	03 5b       	subi	r16, 0xB3	; 179
    1122:	1f 4f       	sbci	r17, 0xFF	; 255
    1124:	fe 01       	movw	r30, r28
    1126:	ef 5a       	subi	r30, 0xAF	; 175
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	60 81       	ld	r22, Z
    112c:	71 81       	ldd	r23, Z+1	; 0x01
    112e:	82 81       	ldd	r24, Z+2	; 0x02
    1130:	93 81       	ldd	r25, Z+3	; 0x03
    1132:	26 e6       	ldi	r18, 0x66	; 102
    1134:	36 e6       	ldi	r19, 0x66	; 102
    1136:	46 e6       	ldi	r20, 0x66	; 102
    1138:	55 e4       	ldi	r21, 0x45	; 69
    113a:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	f8 01       	movw	r30, r16
    1144:	80 83       	st	Z, r24
    1146:	91 83       	std	Z+1, r25	; 0x01
    1148:	a2 83       	std	Z+2, r26	; 0x02
    114a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    114c:	fe 01       	movw	r30, r28
    114e:	e3 5b       	subi	r30, 0xB3	; 179
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	60 81       	ld	r22, Z
    1154:	71 81       	ldd	r23, Z+1	; 0x01
    1156:	82 81       	ldd	r24, Z+2	; 0x02
    1158:	93 81       	ldd	r25, Z+3	; 0x03
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	40 e8       	ldi	r20, 0x80	; 128
    1160:	5f e3       	ldi	r21, 0x3F	; 63
    1162:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
    1166:	88 23       	and	r24, r24
    1168:	44 f4       	brge	.+16     	; 0x117a <lcd_set_4bit+0x398>
		__ticks = 1;
    116a:	fe 01       	movw	r30, r28
    116c:	e5 5b       	subi	r30, 0xB5	; 181
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	91 83       	std	Z+1, r25	; 0x01
    1176:	80 83       	st	Z, r24
    1178:	64 c0       	rjmp	.+200    	; 0x1242 <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
    117a:	fe 01       	movw	r30, r28
    117c:	e3 5b       	subi	r30, 0xB3	; 179
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	60 81       	ld	r22, Z
    1182:	71 81       	ldd	r23, Z+1	; 0x01
    1184:	82 81       	ldd	r24, Z+2	; 0x02
    1186:	93 81       	ldd	r25, Z+3	; 0x03
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	3f ef       	ldi	r19, 0xFF	; 255
    118c:	4f e7       	ldi	r20, 0x7F	; 127
    118e:	57 e4       	ldi	r21, 0x47	; 71
    1190:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    1194:	18 16       	cp	r1, r24
    1196:	0c f0       	brlt	.+2      	; 0x119a <lcd_set_4bit+0x3b8>
    1198:	43 c0       	rjmp	.+134    	; 0x1220 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    119a:	fe 01       	movw	r30, r28
    119c:	ef 5a       	subi	r30, 0xAF	; 175
    119e:	ff 4f       	sbci	r31, 0xFF	; 255
    11a0:	60 81       	ld	r22, Z
    11a2:	71 81       	ldd	r23, Z+1	; 0x01
    11a4:	82 81       	ldd	r24, Z+2	; 0x02
    11a6:	93 81       	ldd	r25, Z+3	; 0x03
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e2       	ldi	r20, 0x20	; 32
    11ae:	51 e4       	ldi	r21, 0x41	; 65
    11b0:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	8e 01       	movw	r16, r28
    11ba:	05 5b       	subi	r16, 0xB5	; 181
    11bc:	1f 4f       	sbci	r17, 0xFF	; 255
    11be:	bc 01       	movw	r22, r24
    11c0:	cd 01       	movw	r24, r26
    11c2:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	f8 01       	movw	r30, r16
    11cc:	91 83       	std	Z+1, r25	; 0x01
    11ce:	80 83       	st	Z, r24
    11d0:	1f c0       	rjmp	.+62     	; 0x1210 <lcd_set_4bit+0x42e>
    11d2:	fe 01       	movw	r30, r28
    11d4:	e7 5b       	subi	r30, 0xB7	; 183
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
    11d8:	80 e7       	ldi	r24, 0x70	; 112
    11da:	91 e0       	ldi	r25, 0x01	; 1
    11dc:	91 83       	std	Z+1, r25	; 0x01
    11de:	80 83       	st	Z, r24
    11e0:	fe 01       	movw	r30, r28
    11e2:	e7 5b       	subi	r30, 0xB7	; 183
    11e4:	ff 4f       	sbci	r31, 0xFF	; 255
    11e6:	80 81       	ld	r24, Z
    11e8:	91 81       	ldd	r25, Z+1	; 0x01
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	f1 f7       	brne	.-4      	; 0x11ea <lcd_set_4bit+0x408>
    11ee:	fe 01       	movw	r30, r28
    11f0:	e7 5b       	subi	r30, 0xB7	; 183
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	91 83       	std	Z+1, r25	; 0x01
    11f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f8:	de 01       	movw	r26, r28
    11fa:	a5 5b       	subi	r26, 0xB5	; 181
    11fc:	bf 4f       	sbci	r27, 0xFF	; 255
    11fe:	fe 01       	movw	r30, r28
    1200:	e5 5b       	subi	r30, 0xB5	; 181
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	80 81       	ld	r24, Z
    1206:	91 81       	ldd	r25, Z+1	; 0x01
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	11 96       	adiw	r26, 0x01	; 1
    120c:	9c 93       	st	X, r25
    120e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1210:	fe 01       	movw	r30, r28
    1212:	e5 5b       	subi	r30, 0xB5	; 181
    1214:	ff 4f       	sbci	r31, 0xFF	; 255
    1216:	80 81       	ld	r24, Z
    1218:	91 81       	ldd	r25, Z+1	; 0x01
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	d1 f6       	brne	.-76     	; 0x11d2 <lcd_set_4bit+0x3f0>
    121e:	27 c0       	rjmp	.+78     	; 0x126e <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1220:	8e 01       	movw	r16, r28
    1222:	05 5b       	subi	r16, 0xB5	; 181
    1224:	1f 4f       	sbci	r17, 0xFF	; 255
    1226:	fe 01       	movw	r30, r28
    1228:	e3 5b       	subi	r30, 0xB3	; 179
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	60 81       	ld	r22, Z
    122e:	71 81       	ldd	r23, Z+1	; 0x01
    1230:	82 81       	ldd	r24, Z+2	; 0x02
    1232:	93 81       	ldd	r25, Z+3	; 0x03
    1234:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	f8 01       	movw	r30, r16
    123e:	91 83       	std	Z+1, r25	; 0x01
    1240:	80 83       	st	Z, r24
    1242:	de 01       	movw	r26, r28
    1244:	a9 5b       	subi	r26, 0xB9	; 185
    1246:	bf 4f       	sbci	r27, 0xFF	; 255
    1248:	fe 01       	movw	r30, r28
    124a:	e5 5b       	subi	r30, 0xB5	; 181
    124c:	ff 4f       	sbci	r31, 0xFF	; 255
    124e:	80 81       	ld	r24, Z
    1250:	91 81       	ldd	r25, Z+1	; 0x01
    1252:	8d 93       	st	X+, r24
    1254:	9c 93       	st	X, r25
    1256:	fe 01       	movw	r30, r28
    1258:	e9 5b       	subi	r30, 0xB9	; 185
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	80 81       	ld	r24, Z
    125e:	91 81       	ldd	r25, Z+1	; 0x01
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <lcd_set_4bit+0x47e>
    1264:	fe 01       	movw	r30, r28
    1266:	e9 5b       	subi	r30, 0xB9	; 185
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	91 83       	std	Z+1, r25	; 0x01
    126c:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    126e:	a8 e2       	ldi	r26, 0x28	; 40
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e8 e2       	ldi	r30, 0x28	; 40
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	8e 7f       	andi	r24, 0xFE	; 254
    127a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    127c:	a8 e2       	ldi	r26, 0x28	; 40
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e8 e2       	ldi	r30, 0x28	; 40
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	8d 7f       	andi	r24, 0xFD	; 253
    1288:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
    128a:	e8 e2       	ldi	r30, 0x28	; 40
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 e3       	ldi	r24, 0x30	; 48
    1290:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    1292:	a8 e2       	ldi	r26, 0x28	; 40
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e8 e2       	ldi	r30, 0x28	; 40
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	84 60       	ori	r24, 0x04	; 4
    129e:	8c 93       	st	X, r24
    12a0:	fe 01       	movw	r30, r28
    12a2:	ed 5b       	subi	r30, 0xBD	; 189
    12a4:	ff 4f       	sbci	r31, 0xFF	; 255
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	a0 ea       	ldi	r26, 0xA0	; 160
    12ac:	b0 e4       	ldi	r27, 0x40	; 64
    12ae:	80 83       	st	Z, r24
    12b0:	91 83       	std	Z+1, r25	; 0x01
    12b2:	a2 83       	std	Z+2, r26	; 0x02
    12b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b6:	8e 01       	movw	r16, r28
    12b8:	01 5c       	subi	r16, 0xC1	; 193
    12ba:	1f 4f       	sbci	r17, 0xFF	; 255
    12bc:	fe 01       	movw	r30, r28
    12be:	ed 5b       	subi	r30, 0xBD	; 189
    12c0:	ff 4f       	sbci	r31, 0xFF	; 255
    12c2:	60 81       	ld	r22, Z
    12c4:	71 81       	ldd	r23, Z+1	; 0x01
    12c6:	82 81       	ldd	r24, Z+2	; 0x02
    12c8:	93 81       	ldd	r25, Z+3	; 0x03
    12ca:	26 e6       	ldi	r18, 0x66	; 102
    12cc:	36 e6       	ldi	r19, 0x66	; 102
    12ce:	46 e6       	ldi	r20, 0x66	; 102
    12d0:	55 e4       	ldi	r21, 0x45	; 69
    12d2:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	f8 01       	movw	r30, r16
    12dc:	80 83       	st	Z, r24
    12de:	91 83       	std	Z+1, r25	; 0x01
    12e0:	a2 83       	std	Z+2, r26	; 0x02
    12e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12e4:	fe 01       	movw	r30, r28
    12e6:	ff 96       	adiw	r30, 0x3f	; 63
    12e8:	60 81       	ld	r22, Z
    12ea:	71 81       	ldd	r23, Z+1	; 0x01
    12ec:	82 81       	ldd	r24, Z+2	; 0x02
    12ee:	93 81       	ldd	r25, Z+3	; 0x03
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 e8       	ldi	r20, 0x80	; 128
    12f6:	5f e3       	ldi	r21, 0x3F	; 63
    12f8:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
    12fc:	88 23       	and	r24, r24
    12fe:	2c f4       	brge	.+10     	; 0x130a <lcd_set_4bit+0x528>
		__ticks = 1;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	9e af       	std	Y+62, r25	; 0x3e
    1306:	8d af       	std	Y+61, r24	; 0x3d
    1308:	46 c0       	rjmp	.+140    	; 0x1396 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
    130a:	fe 01       	movw	r30, r28
    130c:	ff 96       	adiw	r30, 0x3f	; 63
    130e:	60 81       	ld	r22, Z
    1310:	71 81       	ldd	r23, Z+1	; 0x01
    1312:	82 81       	ldd	r24, Z+2	; 0x02
    1314:	93 81       	ldd	r25, Z+3	; 0x03
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	3f ef       	ldi	r19, 0xFF	; 255
    131a:	4f e7       	ldi	r20, 0x7F	; 127
    131c:	57 e4       	ldi	r21, 0x47	; 71
    131e:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    1322:	18 16       	cp	r1, r24
    1324:	64 f5       	brge	.+88     	; 0x137e <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1326:	fe 01       	movw	r30, r28
    1328:	ed 5b       	subi	r30, 0xBD	; 189
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	60 81       	ld	r22, Z
    132e:	71 81       	ldd	r23, Z+1	; 0x01
    1330:	82 81       	ldd	r24, Z+2	; 0x02
    1332:	93 81       	ldd	r25, Z+3	; 0x03
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	40 e2       	ldi	r20, 0x20	; 32
    133a:	51 e4       	ldi	r21, 0x41	; 65
    133c:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	bc 01       	movw	r22, r24
    1346:	cd 01       	movw	r24, r26
    1348:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	9e af       	std	Y+62, r25	; 0x3e
    1352:	8d af       	std	Y+61, r24	; 0x3d
    1354:	0f c0       	rjmp	.+30     	; 0x1374 <lcd_set_4bit+0x592>
    1356:	80 e7       	ldi	r24, 0x70	; 112
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	9c af       	std	Y+60, r25	; 0x3c
    135c:	8b af       	std	Y+59, r24	; 0x3b
    135e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1360:	9c ad       	ldd	r25, Y+60	; 0x3c
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <lcd_set_4bit+0x580>
    1366:	9c af       	std	Y+60, r25	; 0x3c
    1368:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136a:	8d ad       	ldd	r24, Y+61	; 0x3d
    136c:	9e ad       	ldd	r25, Y+62	; 0x3e
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	9e af       	std	Y+62, r25	; 0x3e
    1372:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1374:	8d ad       	ldd	r24, Y+61	; 0x3d
    1376:	9e ad       	ldd	r25, Y+62	; 0x3e
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	69 f7       	brne	.-38     	; 0x1356 <lcd_set_4bit+0x574>
    137c:	16 c0       	rjmp	.+44     	; 0x13aa <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    137e:	fe 01       	movw	r30, r28
    1380:	ff 96       	adiw	r30, 0x3f	; 63
    1382:	60 81       	ld	r22, Z
    1384:	71 81       	ldd	r23, Z+1	; 0x01
    1386:	82 81       	ldd	r24, Z+2	; 0x02
    1388:	93 81       	ldd	r25, Z+3	; 0x03
    138a:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	9e af       	std	Y+62, r25	; 0x3e
    1394:	8d af       	std	Y+61, r24	; 0x3d
    1396:	8d ad       	ldd	r24, Y+61	; 0x3d
    1398:	9e ad       	ldd	r25, Y+62	; 0x3e
    139a:	9a af       	std	Y+58, r25	; 0x3a
    139c:	89 af       	std	Y+57, r24	; 0x39
    139e:	89 ad       	ldd	r24, Y+57	; 0x39
    13a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	f1 f7       	brne	.-4      	; 0x13a2 <lcd_set_4bit+0x5c0>
    13a6:	9a af       	std	Y+58, r25	; 0x3a
    13a8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    13aa:	a8 e2       	ldi	r26, 0x28	; 40
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e8 e2       	ldi	r30, 0x28	; 40
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	8b 7f       	andi	r24, 0xFB	; 251
    13b6:	8c 93       	st	X, r24
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	a0 e8       	ldi	r26, 0x80	; 128
    13be:	bf e3       	ldi	r27, 0x3F	; 63
    13c0:	8d ab       	std	Y+53, r24	; 0x35
    13c2:	9e ab       	std	Y+54, r25	; 0x36
    13c4:	af ab       	std	Y+55, r26	; 0x37
    13c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c8:	6d a9       	ldd	r22, Y+53	; 0x35
    13ca:	7e a9       	ldd	r23, Y+54	; 0x36
    13cc:	8f a9       	ldd	r24, Y+55	; 0x37
    13ce:	98 ad       	ldd	r25, Y+56	; 0x38
    13d0:	26 e6       	ldi	r18, 0x66	; 102
    13d2:	36 e6       	ldi	r19, 0x66	; 102
    13d4:	46 e6       	ldi	r20, 0x66	; 102
    13d6:	55 e4       	ldi	r21, 0x45	; 69
    13d8:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	89 ab       	std	Y+49, r24	; 0x31
    13e2:	9a ab       	std	Y+50, r25	; 0x32
    13e4:	ab ab       	std	Y+51, r26	; 0x33
    13e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13e8:	69 a9       	ldd	r22, Y+49	; 0x31
    13ea:	7a a9       	ldd	r23, Y+50	; 0x32
    13ec:	8b a9       	ldd	r24, Y+51	; 0x33
    13ee:	9c a9       	ldd	r25, Y+52	; 0x34
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e8       	ldi	r20, 0x80	; 128
    13f6:	5f e3       	ldi	r21, 0x3F	; 63
    13f8:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
    13fc:	88 23       	and	r24, r24
    13fe:	2c f4       	brge	.+10     	; 0x140a <lcd_set_4bit+0x628>
		__ticks = 1;
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	98 ab       	std	Y+48, r25	; 0x30
    1406:	8f a7       	std	Y+47, r24	; 0x2f
    1408:	3f c0       	rjmp	.+126    	; 0x1488 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
    140a:	69 a9       	ldd	r22, Y+49	; 0x31
    140c:	7a a9       	ldd	r23, Y+50	; 0x32
    140e:	8b a9       	ldd	r24, Y+51	; 0x33
    1410:	9c a9       	ldd	r25, Y+52	; 0x34
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	3f ef       	ldi	r19, 0xFF	; 255
    1416:	4f e7       	ldi	r20, 0x7F	; 127
    1418:	57 e4       	ldi	r21, 0x47	; 71
    141a:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    141e:	18 16       	cp	r1, r24
    1420:	4c f5       	brge	.+82     	; 0x1474 <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1422:	6d a9       	ldd	r22, Y+53	; 0x35
    1424:	7e a9       	ldd	r23, Y+54	; 0x36
    1426:	8f a9       	ldd	r24, Y+55	; 0x37
    1428:	98 ad       	ldd	r25, Y+56	; 0x38
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e2       	ldi	r20, 0x20	; 32
    1430:	51 e4       	ldi	r21, 0x41	; 65
    1432:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	bc 01       	movw	r22, r24
    143c:	cd 01       	movw	r24, r26
    143e:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	98 ab       	std	Y+48, r25	; 0x30
    1448:	8f a7       	std	Y+47, r24	; 0x2f
    144a:	0f c0       	rjmp	.+30     	; 0x146a <lcd_set_4bit+0x688>
    144c:	80 e7       	ldi	r24, 0x70	; 112
    144e:	91 e0       	ldi	r25, 0x01	; 1
    1450:	9e a7       	std	Y+46, r25	; 0x2e
    1452:	8d a7       	std	Y+45, r24	; 0x2d
    1454:	8d a5       	ldd	r24, Y+45	; 0x2d
    1456:	9e a5       	ldd	r25, Y+46	; 0x2e
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	f1 f7       	brne	.-4      	; 0x1458 <lcd_set_4bit+0x676>
    145c:	9e a7       	std	Y+46, r25	; 0x2e
    145e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1460:	8f a5       	ldd	r24, Y+47	; 0x2f
    1462:	98 a9       	ldd	r25, Y+48	; 0x30
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	98 ab       	std	Y+48, r25	; 0x30
    1468:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146a:	8f a5       	ldd	r24, Y+47	; 0x2f
    146c:	98 a9       	ldd	r25, Y+48	; 0x30
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	69 f7       	brne	.-38     	; 0x144c <lcd_set_4bit+0x66a>
    1472:	14 c0       	rjmp	.+40     	; 0x149c <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1474:	69 a9       	ldd	r22, Y+49	; 0x31
    1476:	7a a9       	ldd	r23, Y+50	; 0x32
    1478:	8b a9       	ldd	r24, Y+51	; 0x33
    147a:	9c a9       	ldd	r25, Y+52	; 0x34
    147c:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	98 ab       	std	Y+48, r25	; 0x30
    1486:	8f a7       	std	Y+47, r24	; 0x2f
    1488:	8f a5       	ldd	r24, Y+47	; 0x2f
    148a:	98 a9       	ldd	r25, Y+48	; 0x30
    148c:	9c a7       	std	Y+44, r25	; 0x2c
    148e:	8b a7       	std	Y+43, r24	; 0x2b
    1490:	8b a5       	ldd	r24, Y+43	; 0x2b
    1492:	9c a5       	ldd	r25, Y+44	; 0x2c
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <lcd_set_4bit+0x6b2>
    1498:	9c a7       	std	Y+44, r25	; 0x2c
    149a:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    149c:	a8 e2       	ldi	r26, 0x28	; 40
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e8 e2       	ldi	r30, 0x28	; 40
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8e 7f       	andi	r24, 0xFE	; 254
    14a8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    14aa:	a8 e2       	ldi	r26, 0x28	; 40
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e8 e2       	ldi	r30, 0x28	; 40
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8d 7f       	andi	r24, 0xFD	; 253
    14b6:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
    14b8:	e8 e2       	ldi	r30, 0x28	; 40
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 e3       	ldi	r24, 0x30	; 48
    14be:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    14c0:	a8 e2       	ldi	r26, 0x28	; 40
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e8 e2       	ldi	r30, 0x28	; 40
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	84 60       	ori	r24, 0x04	; 4
    14cc:	8c 93       	st	X, r24
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a0 ea       	ldi	r26, 0xA0	; 160
    14d4:	b0 e4       	ldi	r27, 0x40	; 64
    14d6:	8f a3       	std	Y+39, r24	; 0x27
    14d8:	98 a7       	std	Y+40, r25	; 0x28
    14da:	a9 a7       	std	Y+41, r26	; 0x29
    14dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14de:	6f a1       	ldd	r22, Y+39	; 0x27
    14e0:	78 a5       	ldd	r23, Y+40	; 0x28
    14e2:	89 a5       	ldd	r24, Y+41	; 0x29
    14e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    14e6:	26 e6       	ldi	r18, 0x66	; 102
    14e8:	36 e6       	ldi	r19, 0x66	; 102
    14ea:	46 e6       	ldi	r20, 0x66	; 102
    14ec:	55 e4       	ldi	r21, 0x45	; 69
    14ee:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	8b a3       	std	Y+35, r24	; 0x23
    14f8:	9c a3       	std	Y+36, r25	; 0x24
    14fa:	ad a3       	std	Y+37, r26	; 0x25
    14fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1500:	7c a1       	ldd	r23, Y+36	; 0x24
    1502:	8d a1       	ldd	r24, Y+37	; 0x25
    1504:	9e a1       	ldd	r25, Y+38	; 0x26
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e8       	ldi	r20, 0x80	; 128
    150c:	5f e3       	ldi	r21, 0x3F	; 63
    150e:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
    1512:	88 23       	and	r24, r24
    1514:	2c f4       	brge	.+10     	; 0x1520 <lcd_set_4bit+0x73e>
		__ticks = 1;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9a a3       	std	Y+34, r25	; 0x22
    151c:	89 a3       	std	Y+33, r24	; 0x21
    151e:	3f c0       	rjmp	.+126    	; 0x159e <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
    1520:	6b a1       	ldd	r22, Y+35	; 0x23
    1522:	7c a1       	ldd	r23, Y+36	; 0x24
    1524:	8d a1       	ldd	r24, Y+37	; 0x25
    1526:	9e a1       	ldd	r25, Y+38	; 0x26
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	3f ef       	ldi	r19, 0xFF	; 255
    152c:	4f e7       	ldi	r20, 0x7F	; 127
    152e:	57 e4       	ldi	r21, 0x47	; 71
    1530:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    1534:	18 16       	cp	r1, r24
    1536:	4c f5       	brge	.+82     	; 0x158a <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1538:	6f a1       	ldd	r22, Y+39	; 0x27
    153a:	78 a5       	ldd	r23, Y+40	; 0x28
    153c:	89 a5       	ldd	r24, Y+41	; 0x29
    153e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e2       	ldi	r20, 0x20	; 32
    1546:	51 e4       	ldi	r21, 0x41	; 65
    1548:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	bc 01       	movw	r22, r24
    1552:	cd 01       	movw	r24, r26
    1554:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	9a a3       	std	Y+34, r25	; 0x22
    155e:	89 a3       	std	Y+33, r24	; 0x21
    1560:	0f c0       	rjmp	.+30     	; 0x1580 <lcd_set_4bit+0x79e>
    1562:	80 e7       	ldi	r24, 0x70	; 112
    1564:	91 e0       	ldi	r25, 0x01	; 1
    1566:	98 a3       	std	Y+32, r25	; 0x20
    1568:	8f 8f       	std	Y+31, r24	; 0x1f
    156a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    156c:	98 a1       	ldd	r25, Y+32	; 0x20
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <lcd_set_4bit+0x78c>
    1572:	98 a3       	std	Y+32, r25	; 0x20
    1574:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1576:	89 a1       	ldd	r24, Y+33	; 0x21
    1578:	9a a1       	ldd	r25, Y+34	; 0x22
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	9a a3       	std	Y+34, r25	; 0x22
    157e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1580:	89 a1       	ldd	r24, Y+33	; 0x21
    1582:	9a a1       	ldd	r25, Y+34	; 0x22
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	69 f7       	brne	.-38     	; 0x1562 <lcd_set_4bit+0x780>
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158a:	6b a1       	ldd	r22, Y+35	; 0x23
    158c:	7c a1       	ldd	r23, Y+36	; 0x24
    158e:	8d a1       	ldd	r24, Y+37	; 0x25
    1590:	9e a1       	ldd	r25, Y+38	; 0x26
    1592:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	9a a3       	std	Y+34, r25	; 0x22
    159c:	89 a3       	std	Y+33, r24	; 0x21
    159e:	89 a1       	ldd	r24, Y+33	; 0x21
    15a0:	9a a1       	ldd	r25, Y+34	; 0x22
    15a2:	9e 8f       	std	Y+30, r25	; 0x1e
    15a4:	8d 8f       	std	Y+29, r24	; 0x1d
    15a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <lcd_set_4bit+0x7c8>
    15ae:	9e 8f       	std	Y+30, r25	; 0x1e
    15b0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    15b2:	a8 e2       	ldi	r26, 0x28	; 40
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e8 e2       	ldi	r30, 0x28	; 40
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	8b 7f       	andi	r24, 0xFB	; 251
    15be:	8c 93       	st	X, r24
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	a0 e8       	ldi	r26, 0x80	; 128
    15c6:	bf e3       	ldi	r27, 0x3F	; 63
    15c8:	89 8f       	std	Y+25, r24	; 0x19
    15ca:	9a 8f       	std	Y+26, r25	; 0x1a
    15cc:	ab 8f       	std	Y+27, r26	; 0x1b
    15ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d0:	69 8d       	ldd	r22, Y+25	; 0x19
    15d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15d8:	26 e6       	ldi	r18, 0x66	; 102
    15da:	36 e6       	ldi	r19, 0x66	; 102
    15dc:	46 e6       	ldi	r20, 0x66	; 102
    15de:	55 e4       	ldi	r21, 0x45	; 69
    15e0:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	8d 8b       	std	Y+21, r24	; 0x15
    15ea:	9e 8b       	std	Y+22, r25	; 0x16
    15ec:	af 8b       	std	Y+23, r26	; 0x17
    15ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15f0:	6d 89       	ldd	r22, Y+21	; 0x15
    15f2:	7e 89       	ldd	r23, Y+22	; 0x16
    15f4:	8f 89       	ldd	r24, Y+23	; 0x17
    15f6:	98 8d       	ldd	r25, Y+24	; 0x18
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 e8       	ldi	r20, 0x80	; 128
    15fe:	5f e3       	ldi	r21, 0x3F	; 63
    1600:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
    1604:	88 23       	and	r24, r24
    1606:	2c f4       	brge	.+10     	; 0x1612 <lcd_set_4bit+0x830>
		__ticks = 1;
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	9c 8b       	std	Y+20, r25	; 0x14
    160e:	8b 8b       	std	Y+19, r24	; 0x13
    1610:	3f c0       	rjmp	.+126    	; 0x1690 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
    1612:	6d 89       	ldd	r22, Y+21	; 0x15
    1614:	7e 89       	ldd	r23, Y+22	; 0x16
    1616:	8f 89       	ldd	r24, Y+23	; 0x17
    1618:	98 8d       	ldd	r25, Y+24	; 0x18
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	3f ef       	ldi	r19, 0xFF	; 255
    161e:	4f e7       	ldi	r20, 0x7F	; 127
    1620:	57 e4       	ldi	r21, 0x47	; 71
    1622:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    1626:	18 16       	cp	r1, r24
    1628:	4c f5       	brge	.+82     	; 0x167c <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162a:	69 8d       	ldd	r22, Y+25	; 0x19
    162c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    162e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1630:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e2       	ldi	r20, 0x20	; 32
    1638:	51 e4       	ldi	r21, 0x41	; 65
    163a:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	bc 01       	movw	r22, r24
    1644:	cd 01       	movw	r24, r26
    1646:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	9c 8b       	std	Y+20, r25	; 0x14
    1650:	8b 8b       	std	Y+19, r24	; 0x13
    1652:	0f c0       	rjmp	.+30     	; 0x1672 <lcd_set_4bit+0x890>
    1654:	80 e7       	ldi	r24, 0x70	; 112
    1656:	91 e0       	ldi	r25, 0x01	; 1
    1658:	9a 8b       	std	Y+18, r25	; 0x12
    165a:	89 8b       	std	Y+17, r24	; 0x11
    165c:	89 89       	ldd	r24, Y+17	; 0x11
    165e:	9a 89       	ldd	r25, Y+18	; 0x12
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	f1 f7       	brne	.-4      	; 0x1660 <lcd_set_4bit+0x87e>
    1664:	9a 8b       	std	Y+18, r25	; 0x12
    1666:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1668:	8b 89       	ldd	r24, Y+19	; 0x13
    166a:	9c 89       	ldd	r25, Y+20	; 0x14
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	9c 8b       	std	Y+20, r25	; 0x14
    1670:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1672:	8b 89       	ldd	r24, Y+19	; 0x13
    1674:	9c 89       	ldd	r25, Y+20	; 0x14
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	69 f7       	brne	.-38     	; 0x1654 <lcd_set_4bit+0x872>
    167a:	14 c0       	rjmp	.+40     	; 0x16a4 <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167c:	6d 89       	ldd	r22, Y+21	; 0x15
    167e:	7e 89       	ldd	r23, Y+22	; 0x16
    1680:	8f 89       	ldd	r24, Y+23	; 0x17
    1682:	98 8d       	ldd	r25, Y+24	; 0x18
    1684:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	9c 8b       	std	Y+20, r25	; 0x14
    168e:	8b 8b       	std	Y+19, r24	; 0x13
    1690:	8b 89       	ldd	r24, Y+19	; 0x13
    1692:	9c 89       	ldd	r25, Y+20	; 0x14
    1694:	98 8b       	std	Y+16, r25	; 0x10
    1696:	8f 87       	std	Y+15, r24	; 0x0f
    1698:	8f 85       	ldd	r24, Y+15	; 0x0f
    169a:	98 89       	ldd	r25, Y+16	; 0x10
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	f1 f7       	brne	.-4      	; 0x169c <lcd_set_4bit+0x8ba>
    16a0:	98 8b       	std	Y+16, r25	; 0x10
    16a2:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    16a4:	a8 e2       	ldi	r26, 0x28	; 40
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e8 e2       	ldi	r30, 0x28	; 40
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	8e 7f       	andi	r24, 0xFE	; 254
    16b0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    16b2:	a8 e2       	ldi	r26, 0x28	; 40
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e8 e2       	ldi	r30, 0x28	; 40
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	8d 7f       	andi	r24, 0xFD	; 253
    16be:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
    16c0:	e8 e2       	ldi	r30, 0x28	; 40
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 e2       	ldi	r24, 0x20	; 32
    16c6:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    16c8:	a8 e2       	ldi	r26, 0x28	; 40
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e8 e2       	ldi	r30, 0x28	; 40
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	84 60       	ori	r24, 0x04	; 4
    16d4:	8c 93       	st	X, r24
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	a0 ea       	ldi	r26, 0xA0	; 160
    16dc:	b0 e4       	ldi	r27, 0x40	; 64
    16de:	8b 87       	std	Y+11, r24	; 0x0b
    16e0:	9c 87       	std	Y+12, r25	; 0x0c
    16e2:	ad 87       	std	Y+13, r26	; 0x0d
    16e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ee:	26 e6       	ldi	r18, 0x66	; 102
    16f0:	36 e6       	ldi	r19, 0x66	; 102
    16f2:	46 e6       	ldi	r20, 0x66	; 102
    16f4:	55 e4       	ldi	r21, 0x45	; 69
    16f6:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	8f 83       	std	Y+7, r24	; 0x07
    1700:	98 87       	std	Y+8, r25	; 0x08
    1702:	a9 87       	std	Y+9, r26	; 0x09
    1704:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1706:	6f 81       	ldd	r22, Y+7	; 0x07
    1708:	78 85       	ldd	r23, Y+8	; 0x08
    170a:	89 85       	ldd	r24, Y+9	; 0x09
    170c:	9a 85       	ldd	r25, Y+10	; 0x0a
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e8       	ldi	r20, 0x80	; 128
    1714:	5f e3       	ldi	r21, 0x3F	; 63
    1716:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
    171a:	88 23       	and	r24, r24
    171c:	2c f4       	brge	.+10     	; 0x1728 <lcd_set_4bit+0x946>
		__ticks = 1;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	9e 83       	std	Y+6, r25	; 0x06
    1724:	8d 83       	std	Y+5, r24	; 0x05
    1726:	3f c0       	rjmp	.+126    	; 0x17a6 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
    1728:	6f 81       	ldd	r22, Y+7	; 0x07
    172a:	78 85       	ldd	r23, Y+8	; 0x08
    172c:	89 85       	ldd	r24, Y+9	; 0x09
    172e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	3f ef       	ldi	r19, 0xFF	; 255
    1734:	4f e7       	ldi	r20, 0x7F	; 127
    1736:	57 e4       	ldi	r21, 0x47	; 71
    1738:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    173c:	18 16       	cp	r1, r24
    173e:	4c f5       	brge	.+82     	; 0x1792 <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1740:	6b 85       	ldd	r22, Y+11	; 0x0b
    1742:	7c 85       	ldd	r23, Y+12	; 0x0c
    1744:	8d 85       	ldd	r24, Y+13	; 0x0d
    1746:	9e 85       	ldd	r25, Y+14	; 0x0e
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e2       	ldi	r20, 0x20	; 32
    174e:	51 e4       	ldi	r21, 0x41	; 65
    1750:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	9e 83       	std	Y+6, r25	; 0x06
    1766:	8d 83       	std	Y+5, r24	; 0x05
    1768:	0f c0       	rjmp	.+30     	; 0x1788 <lcd_set_4bit+0x9a6>
    176a:	80 e7       	ldi	r24, 0x70	; 112
    176c:	91 e0       	ldi	r25, 0x01	; 1
    176e:	9c 83       	std	Y+4, r25	; 0x04
    1770:	8b 83       	std	Y+3, r24	; 0x03
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	9c 81       	ldd	r25, Y+4	; 0x04
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <lcd_set_4bit+0x994>
    177a:	9c 83       	std	Y+4, r25	; 0x04
    177c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177e:	8d 81       	ldd	r24, Y+5	; 0x05
    1780:	9e 81       	ldd	r25, Y+6	; 0x06
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	9e 83       	std	Y+6, r25	; 0x06
    1786:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1788:	8d 81       	ldd	r24, Y+5	; 0x05
    178a:	9e 81       	ldd	r25, Y+6	; 0x06
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	69 f7       	brne	.-38     	; 0x176a <lcd_set_4bit+0x988>
    1790:	14 c0       	rjmp	.+40     	; 0x17ba <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1792:	6f 81       	ldd	r22, Y+7	; 0x07
    1794:	78 85       	ldd	r23, Y+8	; 0x08
    1796:	89 85       	ldd	r24, Y+9	; 0x09
    1798:	9a 85       	ldd	r25, Y+10	; 0x0a
    179a:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	9e 83       	std	Y+6, r25	; 0x06
    17a4:	8d 83       	std	Y+5, r24	; 0x05
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
    17a8:	9e 81       	ldd	r25, Y+6	; 0x06
    17aa:	9a 83       	std	Y+2, r25	; 0x02
    17ac:	89 83       	std	Y+1, r24	; 0x01
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	9a 81       	ldd	r25, Y+2	; 0x02
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <lcd_set_4bit+0x9d0>
    17b6:	9a 83       	std	Y+2, r25	; 0x02
    17b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    17ba:	a8 e2       	ldi	r26, 0x28	; 40
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e8 e2       	ldi	r30, 0x28	; 40
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	8b 7f       	andi	r24, 0xFB	; 251
    17c6:	8c 93       	st	X, r24


}
    17c8:	c0 59       	subi	r28, 0x90	; 144
    17ca:	df 4f       	sbci	r29, 0xFF	; 255
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	1f 91       	pop	r17
    17dc:	0f 91       	pop	r16
    17de:	08 95       	ret

000017e0 <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	2e 97       	sbiw	r28, 0x0e	; 14
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
	lcd_set_4bit();
    17f4:	0e 94 f1 06 	call	0xde2	; 0xde2 <lcd_set_4bit>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a0 e8       	ldi	r26, 0x80	; 128
    17fe:	bf e3       	ldi	r27, 0x3F	; 63
    1800:	8b 87       	std	Y+11, r24	; 0x0b
    1802:	9c 87       	std	Y+12, r25	; 0x0c
    1804:	ad 87       	std	Y+13, r26	; 0x0d
    1806:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1808:	6b 85       	ldd	r22, Y+11	; 0x0b
    180a:	7c 85       	ldd	r23, Y+12	; 0x0c
    180c:	8d 85       	ldd	r24, Y+13	; 0x0d
    180e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1810:	26 e6       	ldi	r18, 0x66	; 102
    1812:	36 e6       	ldi	r19, 0x66	; 102
    1814:	46 e6       	ldi	r20, 0x66	; 102
    1816:	55 e4       	ldi	r21, 0x45	; 69
    1818:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	8f 83       	std	Y+7, r24	; 0x07
    1822:	98 87       	std	Y+8, r25	; 0x08
    1824:	a9 87       	std	Y+9, r26	; 0x09
    1826:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1828:	6f 81       	ldd	r22, Y+7	; 0x07
    182a:	78 85       	ldd	r23, Y+8	; 0x08
    182c:	89 85       	ldd	r24, Y+9	; 0x09
    182e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e8       	ldi	r20, 0x80	; 128
    1836:	5f e3       	ldi	r21, 0x3F	; 63
    1838:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
    183c:	88 23       	and	r24, r24
    183e:	2c f4       	brge	.+10     	; 0x184a <lcd_init+0x6a>
		__ticks = 1;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9e 83       	std	Y+6, r25	; 0x06
    1846:	8d 83       	std	Y+5, r24	; 0x05
    1848:	3f c0       	rjmp	.+126    	; 0x18c8 <lcd_init+0xe8>
	else if (__tmp > 65535)
    184a:	6f 81       	ldd	r22, Y+7	; 0x07
    184c:	78 85       	ldd	r23, Y+8	; 0x08
    184e:	89 85       	ldd	r24, Y+9	; 0x09
    1850:	9a 85       	ldd	r25, Y+10	; 0x0a
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	3f ef       	ldi	r19, 0xFF	; 255
    1856:	4f e7       	ldi	r20, 0x7F	; 127
    1858:	57 e4       	ldi	r21, 0x47	; 71
    185a:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    185e:	18 16       	cp	r1, r24
    1860:	4c f5       	brge	.+82     	; 0x18b4 <lcd_init+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1862:	6b 85       	ldd	r22, Y+11	; 0x0b
    1864:	7c 85       	ldd	r23, Y+12	; 0x0c
    1866:	8d 85       	ldd	r24, Y+13	; 0x0d
    1868:	9e 85       	ldd	r25, Y+14	; 0x0e
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e2       	ldi	r20, 0x20	; 32
    1870:	51 e4       	ldi	r21, 0x41	; 65
    1872:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9e 83       	std	Y+6, r25	; 0x06
    1888:	8d 83       	std	Y+5, r24	; 0x05
    188a:	0f c0       	rjmp	.+30     	; 0x18aa <lcd_init+0xca>
    188c:	80 e7       	ldi	r24, 0x70	; 112
    188e:	91 e0       	ldi	r25, 0x01	; 1
    1890:	9c 83       	std	Y+4, r25	; 0x04
    1892:	8b 83       	std	Y+3, r24	; 0x03
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	9c 81       	ldd	r25, Y+4	; 0x04
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <lcd_init+0xb8>
    189c:	9c 83       	std	Y+4, r25	; 0x04
    189e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a0:	8d 81       	ldd	r24, Y+5	; 0x05
    18a2:	9e 81       	ldd	r25, Y+6	; 0x06
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	9e 81       	ldd	r25, Y+6	; 0x06
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	69 f7       	brne	.-38     	; 0x188c <lcd_init+0xac>
    18b2:	14 c0       	rjmp	.+40     	; 0x18dc <lcd_init+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b4:	6f 81       	ldd	r22, Y+7	; 0x07
    18b6:	78 85       	ldd	r23, Y+8	; 0x08
    18b8:	89 85       	ldd	r24, Y+9	; 0x09
    18ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    18bc:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	9e 83       	std	Y+6, r25	; 0x06
    18c6:	8d 83       	std	Y+5, r24	; 0x05
    18c8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ca:	9e 81       	ldd	r25, Y+6	; 0x06
    18cc:	9a 83       	std	Y+2, r25	; 0x02
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	9a 81       	ldd	r25, Y+2	; 0x02
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <lcd_init+0xf4>
    18d8:	9a 83       	std	Y+2, r25	; 0x02
    18da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
    18dc:	88 e2       	ldi	r24, 0x28	; 40
    18de:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_wr_command>
	lcd_wr_command(0x01);
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_wr_command>
	lcd_wr_command(0x06);
    18e8:	86 e0       	ldi	r24, 0x06	; 6
    18ea:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_wr_command>
	lcd_wr_command(0x0E);
    18ee:	8e e0       	ldi	r24, 0x0E	; 14
    18f0:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_wr_command>
	lcd_wr_command(0x80);
    18f4:	80 e8       	ldi	r24, 0x80	; 128
    18f6:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_wr_command>

}
    18fa:	2e 96       	adiw	r28, 0x0e	; 14
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <lcd_wr_command>:


//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	6e 97       	sbiw	r28, 0x1e	; 30
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
    1922:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1924:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
    1926:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1928:	80 7f       	andi	r24, 0xF0	; 240
    192a:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    192c:	a8 e2       	ldi	r26, 0x28	; 40
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e8 e2       	ldi	r30, 0x28	; 40
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	8f 70       	andi	r24, 0x0F	; 15
    1938:	8c 93       	st	X, r24
	lcd_port |= temp;
    193a:	a8 e2       	ldi	r26, 0x28	; 40
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e8 e2       	ldi	r30, 0x28	; 40
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	90 81       	ld	r25, Z
    1944:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1946:	89 2b       	or	r24, r25
    1948:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    194a:	a8 e2       	ldi	r26, 0x28	; 40
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e8 e2       	ldi	r30, 0x28	; 40
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	8e 7f       	andi	r24, 0xFE	; 254
    1956:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1958:	a8 e2       	ldi	r26, 0x28	; 40
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e8 e2       	ldi	r30, 0x28	; 40
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	8d 7f       	andi	r24, 0xFD	; 253
    1964:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1966:	a8 e2       	ldi	r26, 0x28	; 40
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e8 e2       	ldi	r30, 0x28	; 40
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	84 60       	ori	r24, 0x04	; 4
    1972:	8c 93       	st	X, r24
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	a0 ea       	ldi	r26, 0xA0	; 160
    197a:	b0 e4       	ldi	r27, 0x40	; 64
    197c:	89 8f       	std	Y+25, r24	; 0x19
    197e:	9a 8f       	std	Y+26, r25	; 0x1a
    1980:	ab 8f       	std	Y+27, r26	; 0x1b
    1982:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1984:	69 8d       	ldd	r22, Y+25	; 0x19
    1986:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1988:	8b 8d       	ldd	r24, Y+27	; 0x1b
    198a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    198c:	26 e6       	ldi	r18, 0x66	; 102
    198e:	36 e6       	ldi	r19, 0x66	; 102
    1990:	46 e6       	ldi	r20, 0x66	; 102
    1992:	55 e4       	ldi	r21, 0x45	; 69
    1994:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	8d 8b       	std	Y+21, r24	; 0x15
    199e:	9e 8b       	std	Y+22, r25	; 0x16
    19a0:	af 8b       	std	Y+23, r26	; 0x17
    19a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19a4:	6d 89       	ldd	r22, Y+21	; 0x15
    19a6:	7e 89       	ldd	r23, Y+22	; 0x16
    19a8:	8f 89       	ldd	r24, Y+23	; 0x17
    19aa:	98 8d       	ldd	r25, Y+24	; 0x18
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e8       	ldi	r20, 0x80	; 128
    19b2:	5f e3       	ldi	r21, 0x3F	; 63
    19b4:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
    19b8:	88 23       	and	r24, r24
    19ba:	2c f4       	brge	.+10     	; 0x19c6 <lcd_wr_command+0xba>
		__ticks = 1;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	9c 8b       	std	Y+20, r25	; 0x14
    19c2:	8b 8b       	std	Y+19, r24	; 0x13
    19c4:	3f c0       	rjmp	.+126    	; 0x1a44 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
    19c6:	6d 89       	ldd	r22, Y+21	; 0x15
    19c8:	7e 89       	ldd	r23, Y+22	; 0x16
    19ca:	8f 89       	ldd	r24, Y+23	; 0x17
    19cc:	98 8d       	ldd	r25, Y+24	; 0x18
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	3f ef       	ldi	r19, 0xFF	; 255
    19d2:	4f e7       	ldi	r20, 0x7F	; 127
    19d4:	57 e4       	ldi	r21, 0x47	; 71
    19d6:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    19da:	18 16       	cp	r1, r24
    19dc:	4c f5       	brge	.+82     	; 0x1a30 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19de:	69 8d       	ldd	r22, Y+25	; 0x19
    19e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e2       	ldi	r20, 0x20	; 32
    19ec:	51 e4       	ldi	r21, 0x41	; 65
    19ee:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	bc 01       	movw	r22, r24
    19f8:	cd 01       	movw	r24, r26
    19fa:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	9c 8b       	std	Y+20, r25	; 0x14
    1a04:	8b 8b       	std	Y+19, r24	; 0x13
    1a06:	0f c0       	rjmp	.+30     	; 0x1a26 <lcd_wr_command+0x11a>
    1a08:	80 e7       	ldi	r24, 0x70	; 112
    1a0a:	91 e0       	ldi	r25, 0x01	; 1
    1a0c:	9a 8b       	std	Y+18, r25	; 0x12
    1a0e:	89 8b       	std	Y+17, r24	; 0x11
    1a10:	89 89       	ldd	r24, Y+17	; 0x11
    1a12:	9a 89       	ldd	r25, Y+18	; 0x12
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <lcd_wr_command+0x108>
    1a18:	9a 8b       	std	Y+18, r25	; 0x12
    1a1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	9c 8b       	std	Y+20, r25	; 0x14
    1a24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a26:	8b 89       	ldd	r24, Y+19	; 0x13
    1a28:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	69 f7       	brne	.-38     	; 0x1a08 <lcd_wr_command+0xfc>
    1a2e:	14 c0       	rjmp	.+40     	; 0x1a58 <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a30:	6d 89       	ldd	r22, Y+21	; 0x15
    1a32:	7e 89       	ldd	r23, Y+22	; 0x16
    1a34:	8f 89       	ldd	r24, Y+23	; 0x17
    1a36:	98 8d       	ldd	r25, Y+24	; 0x18
    1a38:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9c 8b       	std	Y+20, r25	; 0x14
    1a42:	8b 8b       	std	Y+19, r24	; 0x13
    1a44:	8b 89       	ldd	r24, Y+19	; 0x13
    1a46:	9c 89       	ldd	r25, Y+20	; 0x14
    1a48:	98 8b       	std	Y+16, r25	; 0x10
    1a4a:	8f 87       	std	Y+15, r24	; 0x0f
    1a4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a4e:	98 89       	ldd	r25, Y+16	; 0x10
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <lcd_wr_command+0x144>
    1a54:	98 8b       	std	Y+16, r25	; 0x10
    1a56:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1a58:	a8 e2       	ldi	r26, 0x28	; 40
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e8 e2       	ldi	r30, 0x28	; 40
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	8b 7f       	andi	r24, 0xFB	; 251
    1a64:	8c 93       	st	X, r24

	cmd = cmd & 0x0F;
    1a66:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a68:	8f 70       	andi	r24, 0x0F	; 15
    1a6a:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    1a6c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a6e:	82 95       	swap	r24
    1a70:	80 7f       	andi	r24, 0xF0	; 240
    1a72:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1a74:	a8 e2       	ldi	r26, 0x28	; 40
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e8 e2       	ldi	r30, 0x28	; 40
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	8f 70       	andi	r24, 0x0F	; 15
    1a80:	8c 93       	st	X, r24
	lcd_port |= cmd;
    1a82:	a8 e2       	ldi	r26, 0x28	; 40
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e8 e2       	ldi	r30, 0x28	; 40
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	90 81       	ld	r25, Z
    1a8c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a8e:	89 2b       	or	r24, r25
    1a90:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    1a92:	a8 e2       	ldi	r26, 0x28	; 40
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e8 e2       	ldi	r30, 0x28	; 40
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	8e 7f       	andi	r24, 0xFE	; 254
    1a9e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1aa0:	a8 e2       	ldi	r26, 0x28	; 40
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e8 e2       	ldi	r30, 0x28	; 40
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	8d 7f       	andi	r24, 0xFD	; 253
    1aac:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1aae:	a8 e2       	ldi	r26, 0x28	; 40
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e8 e2       	ldi	r30, 0x28	; 40
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	84 60       	ori	r24, 0x04	; 4
    1aba:	8c 93       	st	X, r24
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	a0 ea       	ldi	r26, 0xA0	; 160
    1ac2:	b0 e4       	ldi	r27, 0x40	; 64
    1ac4:	8b 87       	std	Y+11, r24	; 0x0b
    1ac6:	9c 87       	std	Y+12, r25	; 0x0c
    1ac8:	ad 87       	std	Y+13, r26	; 0x0d
    1aca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1acc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ace:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad4:	26 e6       	ldi	r18, 0x66	; 102
    1ad6:	36 e6       	ldi	r19, 0x66	; 102
    1ad8:	46 e6       	ldi	r20, 0x66	; 102
    1ada:	55 e4       	ldi	r21, 0x45	; 69
    1adc:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	8f 83       	std	Y+7, r24	; 0x07
    1ae6:	98 87       	std	Y+8, r25	; 0x08
    1ae8:	a9 87       	std	Y+9, r26	; 0x09
    1aea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aec:	6f 81       	ldd	r22, Y+7	; 0x07
    1aee:	78 85       	ldd	r23, Y+8	; 0x08
    1af0:	89 85       	ldd	r24, Y+9	; 0x09
    1af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e8       	ldi	r20, 0x80	; 128
    1afa:	5f e3       	ldi	r21, 0x3F	; 63
    1afc:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
    1b00:	88 23       	and	r24, r24
    1b02:	2c f4       	brge	.+10     	; 0x1b0e <lcd_wr_command+0x202>
		__ticks = 1;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	9e 83       	std	Y+6, r25	; 0x06
    1b0a:	8d 83       	std	Y+5, r24	; 0x05
    1b0c:	3f c0       	rjmp	.+126    	; 0x1b8c <lcd_wr_command+0x280>
	else if (__tmp > 65535)
    1b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b10:	78 85       	ldd	r23, Y+8	; 0x08
    1b12:	89 85       	ldd	r24, Y+9	; 0x09
    1b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	3f ef       	ldi	r19, 0xFF	; 255
    1b1a:	4f e7       	ldi	r20, 0x7F	; 127
    1b1c:	57 e4       	ldi	r21, 0x47	; 71
    1b1e:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    1b22:	18 16       	cp	r1, r24
    1b24:	4c f5       	brge	.+82     	; 0x1b78 <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e2       	ldi	r20, 0x20	; 32
    1b34:	51 e4       	ldi	r21, 0x41	; 65
    1b36:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	9e 83       	std	Y+6, r25	; 0x06
    1b4c:	8d 83       	std	Y+5, r24	; 0x05
    1b4e:	0f c0       	rjmp	.+30     	; 0x1b6e <lcd_wr_command+0x262>
    1b50:	80 e7       	ldi	r24, 0x70	; 112
    1b52:	91 e0       	ldi	r25, 0x01	; 1
    1b54:	9c 83       	std	Y+4, r25	; 0x04
    1b56:	8b 83       	std	Y+3, r24	; 0x03
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <lcd_wr_command+0x250>
    1b60:	9c 83       	std	Y+4, r25	; 0x04
    1b62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	9e 81       	ldd	r25, Y+6	; 0x06
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	9e 83       	std	Y+6, r25	; 0x06
    1b6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	69 f7       	brne	.-38     	; 0x1b50 <lcd_wr_command+0x244>
    1b76:	14 c0       	rjmp	.+40     	; 0x1ba0 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b78:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7a:	78 85       	ldd	r23, Y+8	; 0x08
    1b7c:	89 85       	ldd	r24, Y+9	; 0x09
    1b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b80:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	9e 83       	std	Y+6, r25	; 0x06
    1b8a:	8d 83       	std	Y+5, r24	; 0x05
    1b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	9a 81       	ldd	r25, Y+2	; 0x02
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <lcd_wr_command+0x28c>
    1b9c:	9a 83       	std	Y+2, r25	; 0x02
    1b9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1ba0:	a8 e2       	ldi	r26, 0x28	; 40
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e8 e2       	ldi	r30, 0x28	; 40
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	8b 7f       	andi	r24, 0xFB	; 251
    1bac:	8c 93       	st	X, r24
}
    1bae:	6e 96       	adiw	r28, 0x1e	; 30
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	6e 97       	sbiw	r28, 0x1e	; 30
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    1bd6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bd8:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
    1bda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bdc:	80 7f       	andi	r24, 0xF0	; 240
    1bde:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    1be0:	a8 e2       	ldi	r26, 0x28	; 40
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e8 e2       	ldi	r30, 0x28	; 40
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	8f 70       	andi	r24, 0x0F	; 15
    1bec:	8c 93       	st	X, r24
	lcd_port |= temp;
    1bee:	a8 e2       	ldi	r26, 0x28	; 40
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e8 e2       	ldi	r30, 0x28	; 40
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	98 2f       	mov	r25, r24
    1bfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bfc:	89 2b       	or	r24, r25
    1bfe:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    1c00:	a8 e2       	ldi	r26, 0x28	; 40
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e8 e2       	ldi	r30, 0x28	; 40
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	81 60       	ori	r24, 0x01	; 1
    1c0c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1c0e:	a8 e2       	ldi	r26, 0x28	; 40
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e8 e2       	ldi	r30, 0x28	; 40
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	8d 7f       	andi	r24, 0xFD	; 253
    1c1a:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1c1c:	a8 e2       	ldi	r26, 0x28	; 40
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e8 e2       	ldi	r30, 0x28	; 40
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	84 60       	ori	r24, 0x04	; 4
    1c28:	8c 93       	st	X, r24
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	a0 ea       	ldi	r26, 0xA0	; 160
    1c30:	b0 e4       	ldi	r27, 0x40	; 64
    1c32:	89 8f       	std	Y+25, r24	; 0x19
    1c34:	9a 8f       	std	Y+26, r25	; 0x1a
    1c36:	ab 8f       	std	Y+27, r26	; 0x1b
    1c38:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c42:	26 e6       	ldi	r18, 0x66	; 102
    1c44:	36 e6       	ldi	r19, 0x66	; 102
    1c46:	46 e6       	ldi	r20, 0x66	; 102
    1c48:	55 e4       	ldi	r21, 0x45	; 69
    1c4a:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	8d 8b       	std	Y+21, r24	; 0x15
    1c54:	9e 8b       	std	Y+22, r25	; 0x16
    1c56:	af 8b       	std	Y+23, r26	; 0x17
    1c58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c60:	98 8d       	ldd	r25, Y+24	; 0x18
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e8       	ldi	r20, 0x80	; 128
    1c68:	5f e3       	ldi	r21, 0x3F	; 63
    1c6a:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
    1c6e:	88 23       	and	r24, r24
    1c70:	2c f4       	brge	.+10     	; 0x1c7c <lcd_wr_char+0xbc>
		__ticks = 1;
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	9c 8b       	std	Y+20, r25	; 0x14
    1c78:	8b 8b       	std	Y+19, r24	; 0x13
    1c7a:	3f c0       	rjmp	.+126    	; 0x1cfa <lcd_wr_char+0x13a>
	else if (__tmp > 65535)
    1c7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c80:	8f 89       	ldd	r24, Y+23	; 0x17
    1c82:	98 8d       	ldd	r25, Y+24	; 0x18
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	3f ef       	ldi	r19, 0xFF	; 255
    1c88:	4f e7       	ldi	r20, 0x7F	; 127
    1c8a:	57 e4       	ldi	r21, 0x47	; 71
    1c8c:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    1c90:	18 16       	cp	r1, r24
    1c92:	4c f5       	brge	.+82     	; 0x1ce6 <lcd_wr_char+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c94:	69 8d       	ldd	r22, Y+25	; 0x19
    1c96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e2       	ldi	r20, 0x20	; 32
    1ca2:	51 e4       	ldi	r21, 0x41	; 65
    1ca4:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	bc 01       	movw	r22, r24
    1cae:	cd 01       	movw	r24, r26
    1cb0:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	9c 8b       	std	Y+20, r25	; 0x14
    1cba:	8b 8b       	std	Y+19, r24	; 0x13
    1cbc:	0f c0       	rjmp	.+30     	; 0x1cdc <lcd_wr_char+0x11c>
    1cbe:	80 e7       	ldi	r24, 0x70	; 112
    1cc0:	91 e0       	ldi	r25, 0x01	; 1
    1cc2:	9a 8b       	std	Y+18, r25	; 0x12
    1cc4:	89 8b       	std	Y+17, r24	; 0x11
    1cc6:	89 89       	ldd	r24, Y+17	; 0x11
    1cc8:	9a 89       	ldd	r25, Y+18	; 0x12
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <lcd_wr_char+0x10a>
    1cce:	9a 8b       	std	Y+18, r25	; 0x12
    1cd0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	9c 8b       	std	Y+20, r25	; 0x14
    1cda:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cde:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	69 f7       	brne	.-38     	; 0x1cbe <lcd_wr_char+0xfe>
    1ce4:	14 c0       	rjmp	.+40     	; 0x1d0e <lcd_wr_char+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cea:	8f 89       	ldd	r24, Y+23	; 0x17
    1cec:	98 8d       	ldd	r25, Y+24	; 0x18
    1cee:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	9c 8b       	std	Y+20, r25	; 0x14
    1cf8:	8b 8b       	std	Y+19, r24	; 0x13
    1cfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfe:	98 8b       	std	Y+16, r25	; 0x10
    1d00:	8f 87       	std	Y+15, r24	; 0x0f
    1d02:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d04:	98 89       	ldd	r25, Y+16	; 0x10
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <lcd_wr_char+0x146>
    1d0a:	98 8b       	std	Y+16, r25	; 0x10
    1d0c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1d0e:	a8 e2       	ldi	r26, 0x28	; 40
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e8 e2       	ldi	r30, 0x28	; 40
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	8b 7f       	andi	r24, 0xFB	; 251
    1d1a:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    1d1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d1e:	8f 70       	andi	r24, 0x0F	; 15
    1d20:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1d22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d24:	99 27       	eor	r25, r25
    1d26:	87 fd       	sbrc	r24, 7
    1d28:	90 95       	com	r25
    1d2a:	82 95       	swap	r24
    1d2c:	92 95       	swap	r25
    1d2e:	90 7f       	andi	r25, 0xF0	; 240
    1d30:	98 27       	eor	r25, r24
    1d32:	80 7f       	andi	r24, 0xF0	; 240
    1d34:	98 27       	eor	r25, r24
    1d36:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1d38:	a8 e2       	ldi	r26, 0x28	; 40
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e8 e2       	ldi	r30, 0x28	; 40
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	8f 70       	andi	r24, 0x0F	; 15
    1d44:	8c 93       	st	X, r24
	lcd_port |= letter;
    1d46:	a8 e2       	ldi	r26, 0x28	; 40
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e8 e2       	ldi	r30, 0x28	; 40
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	98 2f       	mov	r25, r24
    1d52:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d54:	89 2b       	or	r24, r25
    1d56:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    1d58:	a8 e2       	ldi	r26, 0x28	; 40
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e8 e2       	ldi	r30, 0x28	; 40
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	81 60       	ori	r24, 0x01	; 1
    1d64:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1d66:	a8 e2       	ldi	r26, 0x28	; 40
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e8 e2       	ldi	r30, 0x28	; 40
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	8d 7f       	andi	r24, 0xFD	; 253
    1d72:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1d74:	a8 e2       	ldi	r26, 0x28	; 40
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	e8 e2       	ldi	r30, 0x28	; 40
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	84 60       	ori	r24, 0x04	; 4
    1d80:	8c 93       	st	X, r24
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	a0 ea       	ldi	r26, 0xA0	; 160
    1d88:	b0 e4       	ldi	r27, 0x40	; 64
    1d8a:	8b 87       	std	Y+11, r24	; 0x0b
    1d8c:	9c 87       	std	Y+12, r25	; 0x0c
    1d8e:	ad 87       	std	Y+13, r26	; 0x0d
    1d90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9a:	26 e6       	ldi	r18, 0x66	; 102
    1d9c:	36 e6       	ldi	r19, 0x66	; 102
    1d9e:	46 e6       	ldi	r20, 0x66	; 102
    1da0:	55 e4       	ldi	r21, 0x45	; 69
    1da2:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	8f 83       	std	Y+7, r24	; 0x07
    1dac:	98 87       	std	Y+8, r25	; 0x08
    1dae:	a9 87       	std	Y+9, r26	; 0x09
    1db0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1db2:	6f 81       	ldd	r22, Y+7	; 0x07
    1db4:	78 85       	ldd	r23, Y+8	; 0x08
    1db6:	89 85       	ldd	r24, Y+9	; 0x09
    1db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e8       	ldi	r20, 0x80	; 128
    1dc0:	5f e3       	ldi	r21, 0x3F	; 63
    1dc2:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
    1dc6:	88 23       	and	r24, r24
    1dc8:	2c f4       	brge	.+10     	; 0x1dd4 <lcd_wr_char+0x214>
		__ticks = 1;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9e 83       	std	Y+6, r25	; 0x06
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
    1dd2:	3f c0       	rjmp	.+126    	; 0x1e52 <lcd_wr_char+0x292>
	else if (__tmp > 65535)
    1dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd6:	78 85       	ldd	r23, Y+8	; 0x08
    1dd8:	89 85       	ldd	r24, Y+9	; 0x09
    1dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	3f ef       	ldi	r19, 0xFF	; 255
    1de0:	4f e7       	ldi	r20, 0x7F	; 127
    1de2:	57 e4       	ldi	r21, 0x47	; 71
    1de4:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    1de8:	18 16       	cp	r1, r24
    1dea:	4c f5       	brge	.+82     	; 0x1e3e <lcd_wr_char+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	51 e4       	ldi	r21, 0x41	; 65
    1dfc:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	bc 01       	movw	r22, r24
    1e06:	cd 01       	movw	r24, r26
    1e08:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9e 83       	std	Y+6, r25	; 0x06
    1e12:	8d 83       	std	Y+5, r24	; 0x05
    1e14:	0f c0       	rjmp	.+30     	; 0x1e34 <lcd_wr_char+0x274>
    1e16:	80 e7       	ldi	r24, 0x70	; 112
    1e18:	91 e0       	ldi	r25, 0x01	; 1
    1e1a:	9c 83       	std	Y+4, r25	; 0x04
    1e1c:	8b 83       	std	Y+3, r24	; 0x03
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	9c 81       	ldd	r25, Y+4	; 0x04
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <lcd_wr_char+0x262>
    1e26:	9c 83       	std	Y+4, r25	; 0x04
    1e28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	9e 83       	std	Y+6, r25	; 0x06
    1e32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e34:	8d 81       	ldd	r24, Y+5	; 0x05
    1e36:	9e 81       	ldd	r25, Y+6	; 0x06
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	69 f7       	brne	.-38     	; 0x1e16 <lcd_wr_char+0x256>
    1e3c:	14 c0       	rjmp	.+40     	; 0x1e66 <lcd_wr_char+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e40:	78 85       	ldd	r23, Y+8	; 0x08
    1e42:	89 85       	ldd	r24, Y+9	; 0x09
    1e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e46:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	9e 83       	std	Y+6, r25	; 0x06
    1e50:	8d 83       	std	Y+5, r24	; 0x05
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	9e 81       	ldd	r25, Y+6	; 0x06
    1e56:	9a 83       	std	Y+2, r25	; 0x02
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <lcd_wr_char+0x29e>
    1e62:	9a 83       	std	Y+2, r25	; 0x02
    1e64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1e66:	a8 e2       	ldi	r26, 0x28	; 40
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e8 e2       	ldi	r30, 0x28	; 40
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	8b 7f       	andi	r24, 0xFB	; 251
    1e72:	8c 93       	st	X, r24
}
    1e74:	6e 96       	adiw	r28, 0x1e	; 30
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	08 95       	ret

00001e86 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1e8e:	80 e8       	ldi	r24, 0x80	; 128
    1e90:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_wr_command>
}
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	0f 92       	push	r0
    1ea0:	0f 92       	push	r0
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	9a 83       	std	Y+2, r25	; 0x02
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	0a c0       	rjmp	.+20     	; 0x1ec0 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1eac:	e9 81       	ldd	r30, Y+1	; 0x01
    1eae:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb0:	80 81       	ld	r24, Z
    1eb2:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <lcd_wr_char>
		str++;
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eba:	01 96       	adiw	r24, 0x01	; 1
    1ebc:	9a 83       	std	Y+2, r25	; 0x02
    1ebe:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    1ec0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec4:	80 81       	ld	r24, Z
    1ec6:	88 23       	and	r24, r24
    1ec8:	89 f7       	brne	.-30     	; 0x1eac <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <lcd_cursor+0x6>
    1eda:	0f 92       	push	r0
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	33 27       	eor	r19, r19
    1eea:	27 fd       	sbrc	r18, 7
    1eec:	30 95       	com	r19
    1eee:	3c 83       	std	Y+4, r19	; 0x04
    1ef0:	2b 83       	std	Y+3, r18	; 0x03
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef6:	82 30       	cpi	r24, 0x02	; 2
    1ef8:	91 05       	cpc	r25, r1
    1efa:	d9 f0       	breq	.+54     	; 0x1f32 <lcd_cursor+0x5e>
    1efc:	2b 81       	ldd	r18, Y+3	; 0x03
    1efe:	3c 81       	ldd	r19, Y+4	; 0x04
    1f00:	23 30       	cpi	r18, 0x03	; 3
    1f02:	31 05       	cpc	r19, r1
    1f04:	34 f4       	brge	.+12     	; 0x1f12 <lcd_cursor+0x3e>
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0a:	81 30       	cpi	r24, 0x01	; 1
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	61 f0       	breq	.+24     	; 0x1f28 <lcd_cursor+0x54>
    1f10:	1e c0       	rjmp	.+60     	; 0x1f4e <lcd_cursor+0x7a>
    1f12:	2b 81       	ldd	r18, Y+3	; 0x03
    1f14:	3c 81       	ldd	r19, Y+4	; 0x04
    1f16:	23 30       	cpi	r18, 0x03	; 3
    1f18:	31 05       	cpc	r19, r1
    1f1a:	81 f0       	breq	.+32     	; 0x1f3c <lcd_cursor+0x68>
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f20:	84 30       	cpi	r24, 0x04	; 4
    1f22:	91 05       	cpc	r25, r1
    1f24:	81 f0       	breq	.+32     	; 0x1f46 <lcd_cursor+0x72>
    1f26:	13 c0       	rjmp	.+38     	; 0x1f4e <lcd_cursor+0x7a>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	81 58       	subi	r24, 0x81	; 129
    1f2c:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_wr_command>
    1f30:	0e c0       	rjmp	.+28     	; 0x1f4e <lcd_cursor+0x7a>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	81 54       	subi	r24, 0x41	; 65
    1f36:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_wr_command>
    1f3a:	09 c0       	rjmp	.+18     	; 0x1f4e <lcd_cursor+0x7a>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	8d 56       	subi	r24, 0x6D	; 109
    1f40:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_wr_command>
    1f44:	04 c0       	rjmp	.+8      	; 0x1f4e <lcd_cursor+0x7a>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	8d 52       	subi	r24, 0x2D	; 45
    1f4a:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_wr_command>
		default: break;
	}
}
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <lcd_print>:

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	27 97       	sbiw	r28, 0x07	; 7
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	8a 83       	std	Y+2, r24	; 0x02
    1f72:	6b 83       	std	Y+3, r22	; 0x03
    1f74:	5d 83       	std	Y+5, r21	; 0x05
    1f76:	4c 83       	std	Y+4, r20	; 0x04
    1f78:	3f 83       	std	Y+7, r19	; 0x07
    1f7a:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    1f7c:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	88 23       	and	r24, r24
    1f82:	19 f0       	breq	.+6      	; 0x1f8a <lcd_print+0x2e>
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	88 23       	and	r24, r24
    1f88:	19 f4       	brne	.+6      	; 0x1f90 <lcd_print+0x34>
	{
		lcd_home();
    1f8a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <lcd_home>
    1f8e:	04 c0       	rjmp	.+8      	; 0x1f98 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	6b 81       	ldd	r22, Y+3	; 0x03
    1f94:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    1f98:	8e 81       	ldd	r24, Y+6	; 0x06
    1f9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f9c:	85 30       	cpi	r24, 0x05	; 5
    1f9e:	91 05       	cpc	r25, r1
    1fa0:	19 f0       	breq	.+6      	; 0x1fa8 <lcd_print+0x4c>
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	81 30       	cpi	r24, 0x01	; 1
    1fa6:	a9 f4       	brne	.+42     	; 0x1fd2 <lcd_print+0x76>
	{
		million=value/10000+48;
    1fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1faa:	9d 81       	ldd	r25, Y+5	; 0x05
    1fac:	20 e1       	ldi	r18, 0x10	; 16
    1fae:	37 e2       	ldi	r19, 0x27	; 39
    1fb0:	b9 01       	movw	r22, r18
    1fb2:	0e 94 a8 20 	call	0x4150	; 0x4150 <__udivmodhi4>
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	c0 96       	adiw	r24, 0x30	; 48
    1fba:	90 93 1b 03 	sts	0x031B, r25
    1fbe:	80 93 1a 03 	sts	0x031A, r24
		lcd_wr_char(million);
    1fc2:	80 91 1a 03 	lds	r24, 0x031A
    1fc6:	90 91 1b 03 	lds	r25, 0x031B
    1fca:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <lcd_wr_char>
		flag=1;
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1fd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd4:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd6:	84 30       	cpi	r24, 0x04	; 4
    1fd8:	91 05       	cpc	r25, r1
    1fda:	19 f0       	breq	.+6      	; 0x1fe2 <lcd_print+0x86>
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	81 30       	cpi	r24, 0x01	; 1
    1fe0:	11 f5       	brne	.+68     	; 0x2026 <lcd_print+0xca>
	{
		temp = value/1000;
    1fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe6:	28 ee       	ldi	r18, 0xE8	; 232
    1fe8:	33 e0       	ldi	r19, 0x03	; 3
    1fea:	b9 01       	movw	r22, r18
    1fec:	0e 94 a8 20 	call	0x4150	; 0x4150 <__udivmodhi4>
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	90 93 1d 03 	sts	0x031D, r25
    1ff6:	80 93 1c 03 	sts	0x031C, r24
		thousand = temp%10 + 48;
    1ffa:	80 91 1c 03 	lds	r24, 0x031C
    1ffe:	90 91 1d 03 	lds	r25, 0x031D
    2002:	2a e0       	ldi	r18, 0x0A	; 10
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	b9 01       	movw	r22, r18
    2008:	0e 94 a8 20 	call	0x4150	; 0x4150 <__udivmodhi4>
    200c:	c0 96       	adiw	r24, 0x30	; 48
    200e:	90 93 2d 03 	sts	0x032D, r25
    2012:	80 93 2c 03 	sts	0x032C, r24
		lcd_wr_char(thousand);
    2016:	80 91 2c 03 	lds	r24, 0x032C
    201a:	90 91 2d 03 	lds	r25, 0x032D
    201e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <lcd_wr_char>
		flag=1;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    2026:	8e 81       	ldd	r24, Y+6	; 0x06
    2028:	9f 81       	ldd	r25, Y+7	; 0x07
    202a:	83 30       	cpi	r24, 0x03	; 3
    202c:	91 05       	cpc	r25, r1
    202e:	19 f0       	breq	.+6      	; 0x2036 <lcd_print+0xda>
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	81 30       	cpi	r24, 0x01	; 1
    2034:	11 f5       	brne	.+68     	; 0x207a <lcd_print+0x11e>
	{
		temp = value/100;
    2036:	8c 81       	ldd	r24, Y+4	; 0x04
    2038:	9d 81       	ldd	r25, Y+5	; 0x05
    203a:	24 e6       	ldi	r18, 0x64	; 100
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	b9 01       	movw	r22, r18
    2040:	0e 94 a8 20 	call	0x4150	; 0x4150 <__udivmodhi4>
    2044:	cb 01       	movw	r24, r22
    2046:	90 93 1d 03 	sts	0x031D, r25
    204a:	80 93 1c 03 	sts	0x031C, r24
		hundred = temp%10 + 48;
    204e:	80 91 1c 03 	lds	r24, 0x031C
    2052:	90 91 1d 03 	lds	r25, 0x031D
    2056:	2a e0       	ldi	r18, 0x0A	; 10
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	b9 01       	movw	r22, r18
    205c:	0e 94 a8 20 	call	0x4150	; 0x4150 <__udivmodhi4>
    2060:	c0 96       	adiw	r24, 0x30	; 48
    2062:	90 93 27 03 	sts	0x0327, r25
    2066:	80 93 26 03 	sts	0x0326, r24
		lcd_wr_char(hundred);
    206a:	80 91 26 03 	lds	r24, 0x0326
    206e:	90 91 27 03 	lds	r25, 0x0327
    2072:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <lcd_wr_char>
		flag=1;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    207a:	8e 81       	ldd	r24, Y+6	; 0x06
    207c:	9f 81       	ldd	r25, Y+7	; 0x07
    207e:	82 30       	cpi	r24, 0x02	; 2
    2080:	91 05       	cpc	r25, r1
    2082:	19 f0       	breq	.+6      	; 0x208a <lcd_print+0x12e>
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	81 30       	cpi	r24, 0x01	; 1
    2088:	11 f5       	brne	.+68     	; 0x20ce <lcd_print+0x172>
	{
		temp = value/10;
    208a:	8c 81       	ldd	r24, Y+4	; 0x04
    208c:	9d 81       	ldd	r25, Y+5	; 0x05
    208e:	2a e0       	ldi	r18, 0x0A	; 10
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	b9 01       	movw	r22, r18
    2094:	0e 94 a8 20 	call	0x4150	; 0x4150 <__udivmodhi4>
    2098:	cb 01       	movw	r24, r22
    209a:	90 93 1d 03 	sts	0x031D, r25
    209e:	80 93 1c 03 	sts	0x031C, r24
		tens = temp%10 + 48;
    20a2:	80 91 1c 03 	lds	r24, 0x031C
    20a6:	90 91 1d 03 	lds	r25, 0x031D
    20aa:	2a e0       	ldi	r18, 0x0A	; 10
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	b9 01       	movw	r22, r18
    20b0:	0e 94 a8 20 	call	0x4150	; 0x4150 <__udivmodhi4>
    20b4:	c0 96       	adiw	r24, 0x30	; 48
    20b6:	90 93 21 03 	sts	0x0321, r25
    20ba:	80 93 20 03 	sts	0x0320, r24
		lcd_wr_char(tens);
    20be:	80 91 20 03 	lds	r24, 0x0320
    20c2:	90 91 21 03 	lds	r25, 0x0321
    20c6:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <lcd_wr_char>
		flag=1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    20ce:	8e 81       	ldd	r24, Y+6	; 0x06
    20d0:	9f 81       	ldd	r25, Y+7	; 0x07
    20d2:	81 30       	cpi	r24, 0x01	; 1
    20d4:	91 05       	cpc	r25, r1
    20d6:	19 f0       	breq	.+6      	; 0x20de <lcd_print+0x182>
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	81 30       	cpi	r24, 0x01	; 1
    20dc:	91 f4       	brne	.+36     	; 0x2102 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    20de:	8c 81       	ldd	r24, Y+4	; 0x04
    20e0:	9d 81       	ldd	r25, Y+5	; 0x05
    20e2:	2a e0       	ldi	r18, 0x0A	; 10
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	b9 01       	movw	r22, r18
    20e8:	0e 94 a8 20 	call	0x4150	; 0x4150 <__udivmodhi4>
    20ec:	c0 96       	adiw	r24, 0x30	; 48
    20ee:	90 93 2b 03 	sts	0x032B, r25
    20f2:	80 93 2a 03 	sts	0x032A, r24
		lcd_wr_char(unit);
    20f6:	80 91 2a 03 	lds	r24, 0x032A
    20fa:	90 91 2b 03 	lds	r25, 0x032B
    20fe:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <lcd_wr_char>
	}
	if(digits>5)
    2102:	8e 81       	ldd	r24, Y+6	; 0x06
    2104:	9f 81       	ldd	r25, Y+7	; 0x07
    2106:	86 30       	cpi	r24, 0x06	; 6
    2108:	91 05       	cpc	r25, r1
    210a:	1c f0       	brlt	.+6      	; 0x2112 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    210c:	85 e4       	ldi	r24, 0x45	; 69
    210e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <lcd_wr_char>
	}

}
    2112:	27 96       	adiw	r28, 0x07	; 7
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <main>:
int error = 0, leftSpeed, rightSpeed, lastError = 0, node = 0;
int centre, sensorLeft, sensorRight;


int main(void)
{
    2124:	0f 93       	push	r16
    2126:	1f 93       	push	r17
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	ce 57       	subi	r28, 0x7E	; 126
    2132:	d0 40       	sbci	r29, 0x00	; 0
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61
    cli();
    213e:	f8 94       	cli
    set_lcd();
    2140:	0e 94 d1 06 	call	0xda2	; 0xda2 <set_lcd>
    set_motors();
    2144:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_motors>
    set_ADC();
    2148:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <set_ADC>
    sei();
    214c:	78 94       	sei

    PORTH |= (1<<3) | (1<<2);
    214e:	a2 e0       	ldi	r26, 0x02	; 2
    2150:	b1 e0       	ldi	r27, 0x01	; 1
    2152:	e2 e0       	ldi	r30, 0x02	; 2
    2154:	f1 e0       	ldi	r31, 0x01	; 1
    2156:	80 81       	ld	r24, Z
    2158:	8c 60       	ori	r24, 0x0C	; 12
    215a:	8c 93       	st	X, r24


    forward();
    215c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <forward>
    velocity(0,0);
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	60 e0       	ldi	r22, 0x00	; 0
    2164:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>


    while(1)
    {
        centre = ADC_Conversion(2);
    2168:	82 e0       	ldi	r24, 0x02	; 2
    216a:	0e 94 97 06 	call	0xd2e	; 0xd2e <ADC_Conversion>
    216e:	88 2f       	mov	r24, r24
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	90 93 23 03 	sts	0x0323, r25
    2176:	80 93 22 03 	sts	0x0322, r24
        sensorLeft = ADC_Conversion(3);
    217a:	83 e0       	ldi	r24, 0x03	; 3
    217c:	0e 94 97 06 	call	0xd2e	; 0xd2e <ADC_Conversion>
    2180:	88 2f       	mov	r24, r24
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	90 93 1f 03 	sts	0x031F, r25
    2188:	80 93 1e 03 	sts	0x031E, r24
        sensorRight = ADC_Conversion(1);
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	0e 94 97 06 	call	0xd2e	; 0xd2e <ADC_Conversion>
    2192:	88 2f       	mov	r24, r24
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	90 93 29 03 	sts	0x0329, r25
    219a:	80 93 28 03 	sts	0x0328, r24

        lcd_print(2, 1, sensorLeft, 3);
    219e:	80 91 1e 03 	lds	r24, 0x031E
    21a2:	90 91 1f 03 	lds	r25, 0x031F
    21a6:	9c 01       	movw	r18, r24
    21a8:	82 e0       	ldi	r24, 0x02	; 2
    21aa:	61 e0       	ldi	r22, 0x01	; 1
    21ac:	a9 01       	movw	r20, r18
    21ae:	23 e0       	ldi	r18, 0x03	; 3
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <lcd_print>
        lcd_print(2, 5, centre, 3);
    21b6:	80 91 22 03 	lds	r24, 0x0322
    21ba:	90 91 23 03 	lds	r25, 0x0323
    21be:	9c 01       	movw	r18, r24
    21c0:	82 e0       	ldi	r24, 0x02	; 2
    21c2:	65 e0       	ldi	r22, 0x05	; 5
    21c4:	a9 01       	movw	r20, r18
    21c6:	23 e0       	ldi	r18, 0x03	; 3
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <lcd_print>
        lcd_print(2, 9, sensorRight, 3);
    21ce:	80 91 28 03 	lds	r24, 0x0328
    21d2:	90 91 29 03 	lds	r25, 0x0329
    21d6:	9c 01       	movw	r18, r24
    21d8:	82 e0       	ldi	r24, 0x02	; 2
    21da:	69 e0       	ldi	r22, 0x09	; 9
    21dc:	a9 01       	movw	r20, r18
    21de:	23 e0       	ldi	r18, 0x03	; 3
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <lcd_print>

        if(centre > 115 && sensorLeft > 15 && sensorRight > 20)
    21e6:	80 91 22 03 	lds	r24, 0x0322
    21ea:	90 91 23 03 	lds	r25, 0x0323
    21ee:	84 37       	cpi	r24, 0x74	; 116
    21f0:	91 05       	cpc	r25, r1
    21f2:	ac f0       	brlt	.+42     	; 0x221e <__stack+0x1f>
    21f4:	80 91 1e 03 	lds	r24, 0x031E
    21f8:	90 91 1f 03 	lds	r25, 0x031F
    21fc:	80 31       	cpi	r24, 0x10	; 16
    21fe:	91 05       	cpc	r25, r1
    2200:	74 f0       	brlt	.+28     	; 0x221e <__stack+0x1f>
    2202:	80 91 28 03 	lds	r24, 0x0328
    2206:	90 91 29 03 	lds	r25, 0x0329
    220a:	85 31       	cpi	r24, 0x15	; 21
    220c:	91 05       	cpc	r25, r1
    220e:	3c f0       	brlt	.+14     	; 0x221e <__stack+0x1f>
            error = 100;
    2210:	84 e6       	ldi	r24, 0x64	; 100
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	90 93 13 03 	sts	0x0313, r25
    2218:	80 93 12 03 	sts	0x0312, r24
    221c:	ac c0       	rjmp	.+344    	; 0x2376 <__stack+0x177>

        else if(centre > 115)
    221e:	80 91 22 03 	lds	r24, 0x0322
    2222:	90 91 23 03 	lds	r25, 0x0323
    2226:	84 37       	cpi	r24, 0x74	; 116
    2228:	91 05       	cpc	r25, r1
    222a:	2c f0       	brlt	.+10     	; 0x2236 <__stack+0x37>
            error = 0;
    222c:	10 92 13 03 	sts	0x0313, r1
    2230:	10 92 12 03 	sts	0x0312, r1
    2234:	a0 c0       	rjmp	.+320    	; 0x2376 <__stack+0x177>

        else if(sensorLeft > 45)
    2236:	80 91 1e 03 	lds	r24, 0x031E
    223a:	90 91 1f 03 	lds	r25, 0x031F
    223e:	8e 32       	cpi	r24, 0x2E	; 46
    2240:	91 05       	cpc	r25, r1
    2242:	3c f0       	brlt	.+14     	; 0x2252 <__stack+0x53>
            error = 7;
    2244:	87 e0       	ldi	r24, 0x07	; 7
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	90 93 13 03 	sts	0x0313, r25
    224c:	80 93 12 03 	sts	0x0312, r24
    2250:	92 c0       	rjmp	.+292    	; 0x2376 <__stack+0x177>

        else if(sensorLeft > 25)
    2252:	80 91 1e 03 	lds	r24, 0x031E
    2256:	90 91 1f 03 	lds	r25, 0x031F
    225a:	8a 31       	cpi	r24, 0x1A	; 26
    225c:	91 05       	cpc	r25, r1
    225e:	3c f0       	brlt	.+14     	; 0x226e <__stack+0x6f>
            error = 6;
    2260:	86 e0       	ldi	r24, 0x06	; 6
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	90 93 13 03 	sts	0x0313, r25
    2268:	80 93 12 03 	sts	0x0312, r24
    226c:	84 c0       	rjmp	.+264    	; 0x2376 <__stack+0x177>

        else if(sensorLeft > 17)
    226e:	80 91 1e 03 	lds	r24, 0x031E
    2272:	90 91 1f 03 	lds	r25, 0x031F
    2276:	82 31       	cpi	r24, 0x12	; 18
    2278:	91 05       	cpc	r25, r1
    227a:	3c f0       	brlt	.+14     	; 0x228a <__stack+0x8b>
            error = 5;
    227c:	85 e0       	ldi	r24, 0x05	; 5
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	90 93 13 03 	sts	0x0313, r25
    2284:	80 93 12 03 	sts	0x0312, r24
    2288:	76 c0       	rjmp	.+236    	; 0x2376 <__stack+0x177>

        else if(sensorLeft > 9)
    228a:	80 91 1e 03 	lds	r24, 0x031E
    228e:	90 91 1f 03 	lds	r25, 0x031F
    2292:	8a 30       	cpi	r24, 0x0A	; 10
    2294:	91 05       	cpc	r25, r1
    2296:	3c f0       	brlt	.+14     	; 0x22a6 <__stack+0xa7>
            error = 4;
    2298:	84 e0       	ldi	r24, 0x04	; 4
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	90 93 13 03 	sts	0x0313, r25
    22a0:	80 93 12 03 	sts	0x0312, r24
    22a4:	68 c0       	rjmp	.+208    	; 0x2376 <__stack+0x177>

        else if(sensorRight > 110)
    22a6:	80 91 28 03 	lds	r24, 0x0328
    22aa:	90 91 29 03 	lds	r25, 0x0329
    22ae:	8f 36       	cpi	r24, 0x6F	; 111
    22b0:	91 05       	cpc	r25, r1
    22b2:	3c f0       	brlt	.+14     	; 0x22c2 <__stack+0xc3>
            error = -7;
    22b4:	89 ef       	ldi	r24, 0xF9	; 249
    22b6:	9f ef       	ldi	r25, 0xFF	; 255
    22b8:	90 93 13 03 	sts	0x0313, r25
    22bc:	80 93 12 03 	sts	0x0312, r24
    22c0:	5a c0       	rjmp	.+180    	; 0x2376 <__stack+0x177>

        else if(sensorRight > 85)
    22c2:	80 91 28 03 	lds	r24, 0x0328
    22c6:	90 91 29 03 	lds	r25, 0x0329
    22ca:	86 35       	cpi	r24, 0x56	; 86
    22cc:	91 05       	cpc	r25, r1
    22ce:	3c f0       	brlt	.+14     	; 0x22de <__stack+0xdf>
            error = -6;
    22d0:	8a ef       	ldi	r24, 0xFA	; 250
    22d2:	9f ef       	ldi	r25, 0xFF	; 255
    22d4:	90 93 13 03 	sts	0x0313, r25
    22d8:	80 93 12 03 	sts	0x0312, r24
    22dc:	4c c0       	rjmp	.+152    	; 0x2376 <__stack+0x177>

        else if(sensorRight > 55)
    22de:	80 91 28 03 	lds	r24, 0x0328
    22e2:	90 91 29 03 	lds	r25, 0x0329
    22e6:	88 33       	cpi	r24, 0x38	; 56
    22e8:	91 05       	cpc	r25, r1
    22ea:	3c f0       	brlt	.+14     	; 0x22fa <__stack+0xfb>
            error = -5;
    22ec:	8b ef       	ldi	r24, 0xFB	; 251
    22ee:	9f ef       	ldi	r25, 0xFF	; 255
    22f0:	90 93 13 03 	sts	0x0313, r25
    22f4:	80 93 12 03 	sts	0x0312, r24
    22f8:	3e c0       	rjmp	.+124    	; 0x2376 <__stack+0x177>

        else if(sensorRight > 35)
    22fa:	80 91 28 03 	lds	r24, 0x0328
    22fe:	90 91 29 03 	lds	r25, 0x0329
    2302:	84 32       	cpi	r24, 0x24	; 36
    2304:	91 05       	cpc	r25, r1
    2306:	3c f0       	brlt	.+14     	; 0x2316 <__stack+0x117>
            error = -4;
    2308:	8c ef       	ldi	r24, 0xFC	; 252
    230a:	9f ef       	ldi	r25, 0xFF	; 255
    230c:	90 93 13 03 	sts	0x0313, r25
    2310:	80 93 12 03 	sts	0x0312, r24
    2314:	30 c0       	rjmp	.+96     	; 0x2376 <__stack+0x177>

        else if(sensorRight > 25)
    2316:	80 91 28 03 	lds	r24, 0x0328
    231a:	90 91 29 03 	lds	r25, 0x0329
    231e:	8a 31       	cpi	r24, 0x1A	; 26
    2320:	91 05       	cpc	r25, r1
    2322:	3c f0       	brlt	.+14     	; 0x2332 <__stack+0x133>
            error = -3;
    2324:	8d ef       	ldi	r24, 0xFD	; 253
    2326:	9f ef       	ldi	r25, 0xFF	; 255
    2328:	90 93 13 03 	sts	0x0313, r25
    232c:	80 93 12 03 	sts	0x0312, r24
    2330:	22 c0       	rjmp	.+68     	; 0x2376 <__stack+0x177>

        else if(sensorRight > 18)
    2332:	80 91 28 03 	lds	r24, 0x0328
    2336:	90 91 29 03 	lds	r25, 0x0329
    233a:	83 31       	cpi	r24, 0x13	; 19
    233c:	91 05       	cpc	r25, r1
    233e:	3c f0       	brlt	.+14     	; 0x234e <__stack+0x14f>
            error = -2;
    2340:	8e ef       	ldi	r24, 0xFE	; 254
    2342:	9f ef       	ldi	r25, 0xFF	; 255
    2344:	90 93 13 03 	sts	0x0313, r25
    2348:	80 93 12 03 	sts	0x0312, r24
    234c:	14 c0       	rjmp	.+40     	; 0x2376 <__stack+0x177>

        else if(sensorRight > 15)
    234e:	80 91 28 03 	lds	r24, 0x0328
    2352:	90 91 29 03 	lds	r25, 0x0329
    2356:	80 31       	cpi	r24, 0x10	; 16
    2358:	91 05       	cpc	r25, r1
    235a:	3c f0       	brlt	.+14     	; 0x236a <__stack+0x16b>
            error = -1;
    235c:	8f ef       	ldi	r24, 0xFF	; 255
    235e:	9f ef       	ldi	r25, 0xFF	; 255
    2360:	90 93 13 03 	sts	0x0313, r25
    2364:	80 93 12 03 	sts	0x0312, r24
    2368:	06 c0       	rjmp	.+12     	; 0x2376 <__stack+0x177>

        else
            error = -100;
    236a:	8c e9       	ldi	r24, 0x9C	; 156
    236c:	9f ef       	ldi	r25, 0xFF	; 255
    236e:	90 93 13 03 	sts	0x0313, r25
    2372:	80 93 12 03 	sts	0x0312, r24


        if(error > -100 && error < 100)
    2376:	80 91 12 03 	lds	r24, 0x0312
    237a:	90 91 13 03 	lds	r25, 0x0313
    237e:	2f ef       	ldi	r18, 0xFF	; 255
    2380:	8d 39       	cpi	r24, 0x9D	; 157
    2382:	92 07       	cpc	r25, r18
    2384:	0c f4       	brge	.+2      	; 0x2388 <__stack+0x189>
    2386:	55 c0       	rjmp	.+170    	; 0x2432 <__stack+0x233>
    2388:	80 91 12 03 	lds	r24, 0x0312
    238c:	90 91 13 03 	lds	r25, 0x0313
    2390:	84 36       	cpi	r24, 0x64	; 100
    2392:	91 05       	cpc	r25, r1
    2394:	0c f0       	brlt	.+2      	; 0x2398 <__stack+0x199>
    2396:	4d c0       	rjmp	.+154    	; 0x2432 <__stack+0x233>
        {
            leftSpeed = 150 - error*kp;
    2398:	20 91 12 03 	lds	r18, 0x0312
    239c:	30 91 13 03 	lds	r19, 0x0313
    23a0:	80 91 00 02 	lds	r24, 0x0200
    23a4:	90 91 01 02 	lds	r25, 0x0201
    23a8:	a9 01       	movw	r20, r18
    23aa:	48 9f       	mul	r20, r24
    23ac:	90 01       	movw	r18, r0
    23ae:	49 9f       	mul	r20, r25
    23b0:	30 0d       	add	r19, r0
    23b2:	58 9f       	mul	r21, r24
    23b4:	30 0d       	add	r19, r0
    23b6:	11 24       	eor	r1, r1
    23b8:	86 e9       	ldi	r24, 0x96	; 150
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	82 1b       	sub	r24, r18
    23be:	93 0b       	sbc	r25, r19
    23c0:	90 93 19 03 	sts	0x0319, r25
    23c4:	80 93 18 03 	sts	0x0318, r24
            rightSpeed = 180 + error*kp;
    23c8:	20 91 12 03 	lds	r18, 0x0312
    23cc:	30 91 13 03 	lds	r19, 0x0313
    23d0:	80 91 00 02 	lds	r24, 0x0200
    23d4:	90 91 01 02 	lds	r25, 0x0201
    23d8:	fc 01       	movw	r30, r24
    23da:	2e 9f       	mul	r18, r30
    23dc:	c0 01       	movw	r24, r0
    23de:	2f 9f       	mul	r18, r31
    23e0:	90 0d       	add	r25, r0
    23e2:	3e 9f       	mul	r19, r30
    23e4:	90 0d       	add	r25, r0
    23e6:	11 24       	eor	r1, r1
    23e8:	8c 54       	subi	r24, 0x4C	; 76
    23ea:	9f 4f       	sbci	r25, 0xFF	; 255
    23ec:	90 93 25 03 	sts	0x0325, r25
    23f0:	80 93 24 03 	sts	0x0324, r24

            if(error>0)
    23f4:	80 91 12 03 	lds	r24, 0x0312
    23f8:	90 91 13 03 	lds	r25, 0x0313
    23fc:	18 16       	cp	r1, r24
    23fe:	19 06       	cpc	r1, r25
    2400:	4c f4       	brge	.+18     	; 0x2414 <__stack+0x215>
            {
                rightSpeed += 10;
    2402:	80 91 24 03 	lds	r24, 0x0324
    2406:	90 91 25 03 	lds	r25, 0x0325
    240a:	0a 96       	adiw	r24, 0x0a	; 10
    240c:	90 93 25 03 	sts	0x0325, r25
    2410:	80 93 24 03 	sts	0x0324, r24
            }
            velocity(leftSpeed, rightSpeed);
    2414:	80 91 18 03 	lds	r24, 0x0318
    2418:	90 91 19 03 	lds	r25, 0x0319
    241c:	28 2f       	mov	r18, r24
    241e:	80 91 24 03 	lds	r24, 0x0324
    2422:	90 91 25 03 	lds	r25, 0x0325
    2426:	98 2f       	mov	r25, r24
    2428:	82 2f       	mov	r24, r18
    242a:	69 2f       	mov	r22, r25
    242c:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    2430:	a9 c5       	rjmp	.+2898   	; 0x2f84 <__stack+0xd85>
        }

        else if (error == 100)
    2432:	80 91 12 03 	lds	r24, 0x0312
    2436:	90 91 13 03 	lds	r25, 0x0313
    243a:	84 36       	cpi	r24, 0x64	; 100
    243c:	91 05       	cpc	r25, r1
    243e:	09 f0       	breq	.+2      	; 0x2442 <__stack+0x243>
    2440:	a1 c5       	rjmp	.+2882   	; 0x2f84 <__stack+0xd85>
        {
            if(lastError != error)
    2442:	20 91 14 03 	lds	r18, 0x0314
    2446:	30 91 15 03 	lds	r19, 0x0315
    244a:	80 91 12 03 	lds	r24, 0x0312
    244e:	90 91 13 03 	lds	r25, 0x0313
    2452:	28 17       	cp	r18, r24
    2454:	39 07       	cpc	r19, r25
    2456:	09 f4       	brne	.+2      	; 0x245a <__stack+0x25b>
    2458:	bf c0       	rjmp	.+382    	; 0x25d8 <__stack+0x3d9>
            {
                stop();
    245a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
    245e:	fe 01       	movw	r30, r28
    2460:	e5 58       	subi	r30, 0x85	; 133
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	aa e7       	ldi	r26, 0x7A	; 122
    246a:	b4 e4       	ldi	r27, 0x44	; 68
    246c:	80 83       	st	Z, r24
    246e:	91 83       	std	Z+1, r25	; 0x01
    2470:	a2 83       	std	Z+2, r26	; 0x02
    2472:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2474:	8e 01       	movw	r16, r28
    2476:	09 58       	subi	r16, 0x89	; 137
    2478:	1f 4f       	sbci	r17, 0xFF	; 255
    247a:	fe 01       	movw	r30, r28
    247c:	e5 58       	subi	r30, 0x85	; 133
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	60 81       	ld	r22, Z
    2482:	71 81       	ldd	r23, Z+1	; 0x01
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	26 e6       	ldi	r18, 0x66	; 102
    248a:	36 e6       	ldi	r19, 0x66	; 102
    248c:	46 e6       	ldi	r20, 0x66	; 102
    248e:	55 e4       	ldi	r21, 0x45	; 69
    2490:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	f8 01       	movw	r30, r16
    249a:	80 83       	st	Z, r24
    249c:	91 83       	std	Z+1, r25	; 0x01
    249e:	a2 83       	std	Z+2, r26	; 0x02
    24a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24a2:	fe 01       	movw	r30, r28
    24a4:	e9 58       	subi	r30, 0x89	; 137
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	60 81       	ld	r22, Z
    24aa:	71 81       	ldd	r23, Z+1	; 0x01
    24ac:	82 81       	ldd	r24, Z+2	; 0x02
    24ae:	93 81       	ldd	r25, Z+3	; 0x03
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e8       	ldi	r20, 0x80	; 128
    24b6:	5f e3       	ldi	r21, 0x3F	; 63
    24b8:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
    24bc:	88 23       	and	r24, r24
    24be:	44 f4       	brge	.+16     	; 0x24d0 <__stack+0x2d1>
		__ticks = 1;
    24c0:	fe 01       	movw	r30, r28
    24c2:	eb 58       	subi	r30, 0x8B	; 139
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	91 83       	std	Z+1, r25	; 0x01
    24cc:	80 83       	st	Z, r24
    24ce:	64 c0       	rjmp	.+200    	; 0x2598 <__stack+0x399>
	else if (__tmp > 65535)
    24d0:	fe 01       	movw	r30, r28
    24d2:	e9 58       	subi	r30, 0x89	; 137
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	60 81       	ld	r22, Z
    24d8:	71 81       	ldd	r23, Z+1	; 0x01
    24da:	82 81       	ldd	r24, Z+2	; 0x02
    24dc:	93 81       	ldd	r25, Z+3	; 0x03
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	3f ef       	ldi	r19, 0xFF	; 255
    24e2:	4f e7       	ldi	r20, 0x7F	; 127
    24e4:	57 e4       	ldi	r21, 0x47	; 71
    24e6:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    24ea:	18 16       	cp	r1, r24
    24ec:	0c f0       	brlt	.+2      	; 0x24f0 <__stack+0x2f1>
    24ee:	43 c0       	rjmp	.+134    	; 0x2576 <__stack+0x377>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f0:	fe 01       	movw	r30, r28
    24f2:	e5 58       	subi	r30, 0x85	; 133
    24f4:	ff 4f       	sbci	r31, 0xFF	; 255
    24f6:	60 81       	ld	r22, Z
    24f8:	71 81       	ldd	r23, Z+1	; 0x01
    24fa:	82 81       	ldd	r24, Z+2	; 0x02
    24fc:	93 81       	ldd	r25, Z+3	; 0x03
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e2       	ldi	r20, 0x20	; 32
    2504:	51 e4       	ldi	r21, 0x41	; 65
    2506:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	8e 01       	movw	r16, r28
    2510:	0b 58       	subi	r16, 0x8B	; 139
    2512:	1f 4f       	sbci	r17, 0xFF	; 255
    2514:	bc 01       	movw	r22, r24
    2516:	cd 01       	movw	r24, r26
    2518:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	f8 01       	movw	r30, r16
    2522:	91 83       	std	Z+1, r25	; 0x01
    2524:	80 83       	st	Z, r24
    2526:	1f c0       	rjmp	.+62     	; 0x2566 <__stack+0x367>
    2528:	fe 01       	movw	r30, r28
    252a:	ed 58       	subi	r30, 0x8D	; 141
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 e7       	ldi	r24, 0x70	; 112
    2530:	91 e0       	ldi	r25, 0x01	; 1
    2532:	91 83       	std	Z+1, r25	; 0x01
    2534:	80 83       	st	Z, r24
    2536:	fe 01       	movw	r30, r28
    2538:	ed 58       	subi	r30, 0x8D	; 141
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	80 81       	ld	r24, Z
    253e:	91 81       	ldd	r25, Z+1	; 0x01
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	f1 f7       	brne	.-4      	; 0x2540 <__stack+0x341>
    2544:	fe 01       	movw	r30, r28
    2546:	ed 58       	subi	r30, 0x8D	; 141
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	91 83       	std	Z+1, r25	; 0x01
    254c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254e:	de 01       	movw	r26, r28
    2550:	ab 58       	subi	r26, 0x8B	; 139
    2552:	bf 4f       	sbci	r27, 0xFF	; 255
    2554:	fe 01       	movw	r30, r28
    2556:	eb 58       	subi	r30, 0x8B	; 139
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	80 81       	ld	r24, Z
    255c:	91 81       	ldd	r25, Z+1	; 0x01
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	11 96       	adiw	r26, 0x01	; 1
    2562:	9c 93       	st	X, r25
    2564:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2566:	fe 01       	movw	r30, r28
    2568:	eb 58       	subi	r30, 0x8B	; 139
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	80 81       	ld	r24, Z
    256e:	91 81       	ldd	r25, Z+1	; 0x01
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	d1 f6       	brne	.-76     	; 0x2528 <__stack+0x329>
    2574:	28 c0       	rjmp	.+80     	; 0x25c6 <__stack+0x3c7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2576:	8e 01       	movw	r16, r28
    2578:	0b 58       	subi	r16, 0x8B	; 139
    257a:	1f 4f       	sbci	r17, 0xFF	; 255
    257c:	fe 01       	movw	r30, r28
    257e:	e9 58       	subi	r30, 0x89	; 137
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	60 81       	ld	r22, Z
    2584:	71 81       	ldd	r23, Z+1	; 0x01
    2586:	82 81       	ldd	r24, Z+2	; 0x02
    2588:	93 81       	ldd	r25, Z+3	; 0x03
    258a:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	f8 01       	movw	r30, r16
    2594:	91 83       	std	Z+1, r25	; 0x01
    2596:	80 83       	st	Z, r24
    2598:	de 01       	movw	r26, r28
    259a:	af 58       	subi	r26, 0x8F	; 143
    259c:	bf 4f       	sbci	r27, 0xFF	; 255
    259e:	fe 01       	movw	r30, r28
    25a0:	eb 58       	subi	r30, 0x8B	; 139
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	80 81       	ld	r24, Z
    25a6:	91 81       	ldd	r25, Z+1	; 0x01
    25a8:	11 96       	adiw	r26, 0x01	; 1
    25aa:	9c 93       	st	X, r25
    25ac:	8e 93       	st	-X, r24
    25ae:	fe 01       	movw	r30, r28
    25b0:	ef 58       	subi	r30, 0x8F	; 143
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	80 81       	ld	r24, Z
    25b6:	91 81       	ldd	r25, Z+1	; 0x01
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	f1 f7       	brne	.-4      	; 0x25b8 <__stack+0x3b9>
    25bc:	fe 01       	movw	r30, r28
    25be:	ef 58       	subi	r30, 0x8F	; 143
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	91 83       	std	Z+1, r25	; 0x01
    25c4:	80 83       	st	Z, r24
                _delay_ms(1000);

                node++;
    25c6:	80 91 16 03 	lds	r24, 0x0316
    25ca:	90 91 17 03 	lds	r25, 0x0317
    25ce:	01 96       	adiw	r24, 0x01	; 1
    25d0:	90 93 17 03 	sts	0x0317, r25
    25d4:	80 93 16 03 	sts	0x0316, r24
            }

            if(node == 3)
    25d8:	80 91 16 03 	lds	r24, 0x0316
    25dc:	90 91 17 03 	lds	r25, 0x0317
    25e0:	83 30       	cpi	r24, 0x03	; 3
    25e2:	91 05       	cpc	r25, r1
    25e4:	09 f0       	breq	.+2      	; 0x25e8 <__stack+0x3e9>
    25e6:	c8 c2       	rjmp	.+1424   	; 0x2b78 <__stack+0x979>
    25e8:	fe 01       	movw	r30, r28
    25ea:	e3 59       	subi	r30, 0x93	; 147
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	aa e7       	ldi	r26, 0x7A	; 122
    25f4:	b4 e4       	ldi	r27, 0x44	; 68
    25f6:	80 83       	st	Z, r24
    25f8:	91 83       	std	Z+1, r25	; 0x01
    25fa:	a2 83       	std	Z+2, r26	; 0x02
    25fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fe:	8e 01       	movw	r16, r28
    2600:	07 59       	subi	r16, 0x97	; 151
    2602:	1f 4f       	sbci	r17, 0xFF	; 255
    2604:	fe 01       	movw	r30, r28
    2606:	e3 59       	subi	r30, 0x93	; 147
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	60 81       	ld	r22, Z
    260c:	71 81       	ldd	r23, Z+1	; 0x01
    260e:	82 81       	ldd	r24, Z+2	; 0x02
    2610:	93 81       	ldd	r25, Z+3	; 0x03
    2612:	26 e6       	ldi	r18, 0x66	; 102
    2614:	36 e6       	ldi	r19, 0x66	; 102
    2616:	46 e6       	ldi	r20, 0x66	; 102
    2618:	55 e4       	ldi	r21, 0x45	; 69
    261a:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	f8 01       	movw	r30, r16
    2624:	80 83       	st	Z, r24
    2626:	91 83       	std	Z+1, r25	; 0x01
    2628:	a2 83       	std	Z+2, r26	; 0x02
    262a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    262c:	fe 01       	movw	r30, r28
    262e:	e7 59       	subi	r30, 0x97	; 151
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	60 81       	ld	r22, Z
    2634:	71 81       	ldd	r23, Z+1	; 0x01
    2636:	82 81       	ldd	r24, Z+2	; 0x02
    2638:	93 81       	ldd	r25, Z+3	; 0x03
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e8       	ldi	r20, 0x80	; 128
    2640:	5f e3       	ldi	r21, 0x3F	; 63
    2642:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
    2646:	88 23       	and	r24, r24
    2648:	44 f4       	brge	.+16     	; 0x265a <__stack+0x45b>
		__ticks = 1;
    264a:	fe 01       	movw	r30, r28
    264c:	e9 59       	subi	r30, 0x99	; 153
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	91 83       	std	Z+1, r25	; 0x01
    2656:	80 83       	st	Z, r24
    2658:	64 c0       	rjmp	.+200    	; 0x2722 <__stack+0x523>
	else if (__tmp > 65535)
    265a:	fe 01       	movw	r30, r28
    265c:	e7 59       	subi	r30, 0x97	; 151
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	60 81       	ld	r22, Z
    2662:	71 81       	ldd	r23, Z+1	; 0x01
    2664:	82 81       	ldd	r24, Z+2	; 0x02
    2666:	93 81       	ldd	r25, Z+3	; 0x03
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	3f ef       	ldi	r19, 0xFF	; 255
    266c:	4f e7       	ldi	r20, 0x7F	; 127
    266e:	57 e4       	ldi	r21, 0x47	; 71
    2670:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    2674:	18 16       	cp	r1, r24
    2676:	0c f0       	brlt	.+2      	; 0x267a <__stack+0x47b>
    2678:	43 c0       	rjmp	.+134    	; 0x2700 <__stack+0x501>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267a:	fe 01       	movw	r30, r28
    267c:	e3 59       	subi	r30, 0x93	; 147
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	60 81       	ld	r22, Z
    2682:	71 81       	ldd	r23, Z+1	; 0x01
    2684:	82 81       	ldd	r24, Z+2	; 0x02
    2686:	93 81       	ldd	r25, Z+3	; 0x03
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e2       	ldi	r20, 0x20	; 32
    268e:	51 e4       	ldi	r21, 0x41	; 65
    2690:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	8e 01       	movw	r16, r28
    269a:	09 59       	subi	r16, 0x99	; 153
    269c:	1f 4f       	sbci	r17, 0xFF	; 255
    269e:	bc 01       	movw	r22, r24
    26a0:	cd 01       	movw	r24, r26
    26a2:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	f8 01       	movw	r30, r16
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	80 83       	st	Z, r24
    26b0:	1f c0       	rjmp	.+62     	; 0x26f0 <__stack+0x4f1>
    26b2:	fe 01       	movw	r30, r28
    26b4:	eb 59       	subi	r30, 0x9B	; 155
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	80 e7       	ldi	r24, 0x70	; 112
    26ba:	91 e0       	ldi	r25, 0x01	; 1
    26bc:	91 83       	std	Z+1, r25	; 0x01
    26be:	80 83       	st	Z, r24
    26c0:	fe 01       	movw	r30, r28
    26c2:	eb 59       	subi	r30, 0x9B	; 155
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <__stack+0x4cb>
    26ce:	fe 01       	movw	r30, r28
    26d0:	eb 59       	subi	r30, 0x9B	; 155
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	91 83       	std	Z+1, r25	; 0x01
    26d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d8:	de 01       	movw	r26, r28
    26da:	a9 59       	subi	r26, 0x99	; 153
    26dc:	bf 4f       	sbci	r27, 0xFF	; 255
    26de:	fe 01       	movw	r30, r28
    26e0:	e9 59       	subi	r30, 0x99	; 153
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	80 81       	ld	r24, Z
    26e6:	91 81       	ldd	r25, Z+1	; 0x01
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	11 96       	adiw	r26, 0x01	; 1
    26ec:	9c 93       	st	X, r25
    26ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f0:	fe 01       	movw	r30, r28
    26f2:	e9 59       	subi	r30, 0x99	; 153
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	80 81       	ld	r24, Z
    26f8:	91 81       	ldd	r25, Z+1	; 0x01
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	d1 f6       	brne	.-76     	; 0x26b2 <__stack+0x4b3>
    26fe:	27 c0       	rjmp	.+78     	; 0x274e <__stack+0x54f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2700:	8e 01       	movw	r16, r28
    2702:	09 59       	subi	r16, 0x99	; 153
    2704:	1f 4f       	sbci	r17, 0xFF	; 255
    2706:	fe 01       	movw	r30, r28
    2708:	e7 59       	subi	r30, 0x97	; 151
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	60 81       	ld	r22, Z
    270e:	71 81       	ldd	r23, Z+1	; 0x01
    2710:	82 81       	ldd	r24, Z+2	; 0x02
    2712:	93 81       	ldd	r25, Z+3	; 0x03
    2714:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	f8 01       	movw	r30, r16
    271e:	91 83       	std	Z+1, r25	; 0x01
    2720:	80 83       	st	Z, r24
    2722:	de 01       	movw	r26, r28
    2724:	ad 59       	subi	r26, 0x9D	; 157
    2726:	bf 4f       	sbci	r27, 0xFF	; 255
    2728:	fe 01       	movw	r30, r28
    272a:	e9 59       	subi	r30, 0x99	; 153
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	80 81       	ld	r24, Z
    2730:	91 81       	ldd	r25, Z+1	; 0x01
    2732:	8d 93       	st	X+, r24
    2734:	9c 93       	st	X, r25
    2736:	fe 01       	movw	r30, r28
    2738:	ed 59       	subi	r30, 0x9D	; 157
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	80 81       	ld	r24, Z
    273e:	91 81       	ldd	r25, Z+1	; 0x01
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	f1 f7       	brne	.-4      	; 0x2740 <__stack+0x541>
    2744:	fe 01       	movw	r30, r28
    2746:	ed 59       	subi	r30, 0x9D	; 157
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	91 83       	std	Z+1, r25	; 0x01
    274c:	80 83       	st	Z, r24
            {
                _delay_ms(1000);
                velocity(150, 180);
    274e:	86 e9       	ldi	r24, 0x96	; 150
    2750:	64 eb       	ldi	r22, 0xB4	; 180
    2752:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>

                line_follow_mm(80);
    2756:	80 e5       	ldi	r24, 0x50	; 80
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <line_follow_mm>
                stop();
    275e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
    2762:	fe 01       	movw	r30, r28
    2764:	e1 5a       	subi	r30, 0xA1	; 161
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	aa ef       	ldi	r26, 0xFA	; 250
    276e:	b4 e4       	ldi	r27, 0x44	; 68
    2770:	80 83       	st	Z, r24
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	a2 83       	std	Z+2, r26	; 0x02
    2776:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2778:	8e 01       	movw	r16, r28
    277a:	05 5a       	subi	r16, 0xA5	; 165
    277c:	1f 4f       	sbci	r17, 0xFF	; 255
    277e:	fe 01       	movw	r30, r28
    2780:	e1 5a       	subi	r30, 0xA1	; 161
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	60 81       	ld	r22, Z
    2786:	71 81       	ldd	r23, Z+1	; 0x01
    2788:	82 81       	ldd	r24, Z+2	; 0x02
    278a:	93 81       	ldd	r25, Z+3	; 0x03
    278c:	26 e6       	ldi	r18, 0x66	; 102
    278e:	36 e6       	ldi	r19, 0x66	; 102
    2790:	46 e6       	ldi	r20, 0x66	; 102
    2792:	55 e4       	ldi	r21, 0x45	; 69
    2794:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	f8 01       	movw	r30, r16
    279e:	80 83       	st	Z, r24
    27a0:	91 83       	std	Z+1, r25	; 0x01
    27a2:	a2 83       	std	Z+2, r26	; 0x02
    27a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27a6:	fe 01       	movw	r30, r28
    27a8:	e5 5a       	subi	r30, 0xA5	; 165
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	60 81       	ld	r22, Z
    27ae:	71 81       	ldd	r23, Z+1	; 0x01
    27b0:	82 81       	ldd	r24, Z+2	; 0x02
    27b2:	93 81       	ldd	r25, Z+3	; 0x03
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e8       	ldi	r20, 0x80	; 128
    27ba:	5f e3       	ldi	r21, 0x3F	; 63
    27bc:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
    27c0:	88 23       	and	r24, r24
    27c2:	44 f4       	brge	.+16     	; 0x27d4 <__stack+0x5d5>
		__ticks = 1;
    27c4:	fe 01       	movw	r30, r28
    27c6:	e7 5a       	subi	r30, 0xA7	; 167
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	91 83       	std	Z+1, r25	; 0x01
    27d0:	80 83       	st	Z, r24
    27d2:	64 c0       	rjmp	.+200    	; 0x289c <__stack+0x69d>
	else if (__tmp > 65535)
    27d4:	fe 01       	movw	r30, r28
    27d6:	e5 5a       	subi	r30, 0xA5	; 165
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	60 81       	ld	r22, Z
    27dc:	71 81       	ldd	r23, Z+1	; 0x01
    27de:	82 81       	ldd	r24, Z+2	; 0x02
    27e0:	93 81       	ldd	r25, Z+3	; 0x03
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	3f ef       	ldi	r19, 0xFF	; 255
    27e6:	4f e7       	ldi	r20, 0x7F	; 127
    27e8:	57 e4       	ldi	r21, 0x47	; 71
    27ea:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    27ee:	18 16       	cp	r1, r24
    27f0:	0c f0       	brlt	.+2      	; 0x27f4 <__stack+0x5f5>
    27f2:	43 c0       	rjmp	.+134    	; 0x287a <__stack+0x67b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f4:	fe 01       	movw	r30, r28
    27f6:	e1 5a       	subi	r30, 0xA1	; 161
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	60 81       	ld	r22, Z
    27fc:	71 81       	ldd	r23, Z+1	; 0x01
    27fe:	82 81       	ldd	r24, Z+2	; 0x02
    2800:	93 81       	ldd	r25, Z+3	; 0x03
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	40 e2       	ldi	r20, 0x20	; 32
    2808:	51 e4       	ldi	r21, 0x41	; 65
    280a:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	8e 01       	movw	r16, r28
    2814:	07 5a       	subi	r16, 0xA7	; 167
    2816:	1f 4f       	sbci	r17, 0xFF	; 255
    2818:	bc 01       	movw	r22, r24
    281a:	cd 01       	movw	r24, r26
    281c:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	f8 01       	movw	r30, r16
    2826:	91 83       	std	Z+1, r25	; 0x01
    2828:	80 83       	st	Z, r24
    282a:	1f c0       	rjmp	.+62     	; 0x286a <__stack+0x66b>
    282c:	fe 01       	movw	r30, r28
    282e:	e9 5a       	subi	r30, 0xA9	; 169
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	80 e7       	ldi	r24, 0x70	; 112
    2834:	91 e0       	ldi	r25, 0x01	; 1
    2836:	91 83       	std	Z+1, r25	; 0x01
    2838:	80 83       	st	Z, r24
    283a:	fe 01       	movw	r30, r28
    283c:	e9 5a       	subi	r30, 0xA9	; 169
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	80 81       	ld	r24, Z
    2842:	91 81       	ldd	r25, Z+1	; 0x01
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <__stack+0x645>
    2848:	fe 01       	movw	r30, r28
    284a:	e9 5a       	subi	r30, 0xA9	; 169
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	91 83       	std	Z+1, r25	; 0x01
    2850:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2852:	de 01       	movw	r26, r28
    2854:	a7 5a       	subi	r26, 0xA7	; 167
    2856:	bf 4f       	sbci	r27, 0xFF	; 255
    2858:	fe 01       	movw	r30, r28
    285a:	e7 5a       	subi	r30, 0xA7	; 167
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	80 81       	ld	r24, Z
    2860:	91 81       	ldd	r25, Z+1	; 0x01
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	11 96       	adiw	r26, 0x01	; 1
    2866:	9c 93       	st	X, r25
    2868:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286a:	fe 01       	movw	r30, r28
    286c:	e7 5a       	subi	r30, 0xA7	; 167
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	80 81       	ld	r24, Z
    2872:	91 81       	ldd	r25, Z+1	; 0x01
    2874:	00 97       	sbiw	r24, 0x00	; 0
    2876:	d1 f6       	brne	.-76     	; 0x282c <__stack+0x62d>
    2878:	27 c0       	rjmp	.+78     	; 0x28c8 <__stack+0x6c9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287a:	8e 01       	movw	r16, r28
    287c:	07 5a       	subi	r16, 0xA7	; 167
    287e:	1f 4f       	sbci	r17, 0xFF	; 255
    2880:	fe 01       	movw	r30, r28
    2882:	e5 5a       	subi	r30, 0xA5	; 165
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	60 81       	ld	r22, Z
    2888:	71 81       	ldd	r23, Z+1	; 0x01
    288a:	82 81       	ldd	r24, Z+2	; 0x02
    288c:	93 81       	ldd	r25, Z+3	; 0x03
    288e:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	f8 01       	movw	r30, r16
    2898:	91 83       	std	Z+1, r25	; 0x01
    289a:	80 83       	st	Z, r24
    289c:	de 01       	movw	r26, r28
    289e:	ab 5a       	subi	r26, 0xAB	; 171
    28a0:	bf 4f       	sbci	r27, 0xFF	; 255
    28a2:	fe 01       	movw	r30, r28
    28a4:	e7 5a       	subi	r30, 0xA7	; 167
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	80 81       	ld	r24, Z
    28aa:	91 81       	ldd	r25, Z+1	; 0x01
    28ac:	8d 93       	st	X+, r24
    28ae:	9c 93       	st	X, r25
    28b0:	fe 01       	movw	r30, r28
    28b2:	eb 5a       	subi	r30, 0xAB	; 171
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	80 81       	ld	r24, Z
    28b8:	91 81       	ldd	r25, Z+1	; 0x01
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	f1 f7       	brne	.-4      	; 0x28ba <__stack+0x6bb>
    28be:	fe 01       	movw	r30, r28
    28c0:	eb 5a       	subi	r30, 0xAB	; 171
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	91 83       	std	Z+1, r25	; 0x01
    28c6:	80 83       	st	Z, r24
                _delay_ms(2000);

                left();
    28c8:	0e 94 cf 02 	call	0x59e	; 0x59e <left>
    28cc:	fe 01       	movw	r30, r28
    28ce:	ef 5a       	subi	r30, 0xAF	; 175
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	aa e7       	ldi	r26, 0x7A	; 122
    28d8:	b4 e4       	ldi	r27, 0x44	; 68
    28da:	80 83       	st	Z, r24
    28dc:	91 83       	std	Z+1, r25	; 0x01
    28de:	a2 83       	std	Z+2, r26	; 0x02
    28e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e2:	8e 01       	movw	r16, r28
    28e4:	03 5b       	subi	r16, 0xB3	; 179
    28e6:	1f 4f       	sbci	r17, 0xFF	; 255
    28e8:	fe 01       	movw	r30, r28
    28ea:	ef 5a       	subi	r30, 0xAF	; 175
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	60 81       	ld	r22, Z
    28f0:	71 81       	ldd	r23, Z+1	; 0x01
    28f2:	82 81       	ldd	r24, Z+2	; 0x02
    28f4:	93 81       	ldd	r25, Z+3	; 0x03
    28f6:	26 e6       	ldi	r18, 0x66	; 102
    28f8:	36 e6       	ldi	r19, 0x66	; 102
    28fa:	46 e6       	ldi	r20, 0x66	; 102
    28fc:	55 e4       	ldi	r21, 0x45	; 69
    28fe:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	f8 01       	movw	r30, r16
    2908:	80 83       	st	Z, r24
    290a:	91 83       	std	Z+1, r25	; 0x01
    290c:	a2 83       	std	Z+2, r26	; 0x02
    290e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2910:	fe 01       	movw	r30, r28
    2912:	e3 5b       	subi	r30, 0xB3	; 179
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	60 81       	ld	r22, Z
    2918:	71 81       	ldd	r23, Z+1	; 0x01
    291a:	82 81       	ldd	r24, Z+2	; 0x02
    291c:	93 81       	ldd	r25, Z+3	; 0x03
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	40 e8       	ldi	r20, 0x80	; 128
    2924:	5f e3       	ldi	r21, 0x3F	; 63
    2926:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
    292a:	88 23       	and	r24, r24
    292c:	44 f4       	brge	.+16     	; 0x293e <__stack+0x73f>
		__ticks = 1;
    292e:	fe 01       	movw	r30, r28
    2930:	e5 5b       	subi	r30, 0xB5	; 181
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	91 83       	std	Z+1, r25	; 0x01
    293a:	80 83       	st	Z, r24
    293c:	64 c0       	rjmp	.+200    	; 0x2a06 <__stack+0x807>
	else if (__tmp > 65535)
    293e:	fe 01       	movw	r30, r28
    2940:	e3 5b       	subi	r30, 0xB3	; 179
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	60 81       	ld	r22, Z
    2946:	71 81       	ldd	r23, Z+1	; 0x01
    2948:	82 81       	ldd	r24, Z+2	; 0x02
    294a:	93 81       	ldd	r25, Z+3	; 0x03
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	3f ef       	ldi	r19, 0xFF	; 255
    2950:	4f e7       	ldi	r20, 0x7F	; 127
    2952:	57 e4       	ldi	r21, 0x47	; 71
    2954:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    2958:	18 16       	cp	r1, r24
    295a:	0c f0       	brlt	.+2      	; 0x295e <__stack+0x75f>
    295c:	43 c0       	rjmp	.+134    	; 0x29e4 <__stack+0x7e5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295e:	fe 01       	movw	r30, r28
    2960:	ef 5a       	subi	r30, 0xAF	; 175
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	60 81       	ld	r22, Z
    2966:	71 81       	ldd	r23, Z+1	; 0x01
    2968:	82 81       	ldd	r24, Z+2	; 0x02
    296a:	93 81       	ldd	r25, Z+3	; 0x03
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e2       	ldi	r20, 0x20	; 32
    2972:	51 e4       	ldi	r21, 0x41	; 65
    2974:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	8e 01       	movw	r16, r28
    297e:	05 5b       	subi	r16, 0xB5	; 181
    2980:	1f 4f       	sbci	r17, 0xFF	; 255
    2982:	bc 01       	movw	r22, r24
    2984:	cd 01       	movw	r24, r26
    2986:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	f8 01       	movw	r30, r16
    2990:	91 83       	std	Z+1, r25	; 0x01
    2992:	80 83       	st	Z, r24
    2994:	1f c0       	rjmp	.+62     	; 0x29d4 <__stack+0x7d5>
    2996:	fe 01       	movw	r30, r28
    2998:	e7 5b       	subi	r30, 0xB7	; 183
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	80 e7       	ldi	r24, 0x70	; 112
    299e:	91 e0       	ldi	r25, 0x01	; 1
    29a0:	91 83       	std	Z+1, r25	; 0x01
    29a2:	80 83       	st	Z, r24
    29a4:	fe 01       	movw	r30, r28
    29a6:	e7 5b       	subi	r30, 0xB7	; 183
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	80 81       	ld	r24, Z
    29ac:	91 81       	ldd	r25, Z+1	; 0x01
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	f1 f7       	brne	.-4      	; 0x29ae <__stack+0x7af>
    29b2:	fe 01       	movw	r30, r28
    29b4:	e7 5b       	subi	r30, 0xB7	; 183
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	91 83       	std	Z+1, r25	; 0x01
    29ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29bc:	de 01       	movw	r26, r28
    29be:	a5 5b       	subi	r26, 0xB5	; 181
    29c0:	bf 4f       	sbci	r27, 0xFF	; 255
    29c2:	fe 01       	movw	r30, r28
    29c4:	e5 5b       	subi	r30, 0xB5	; 181
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	80 81       	ld	r24, Z
    29ca:	91 81       	ldd	r25, Z+1	; 0x01
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	11 96       	adiw	r26, 0x01	; 1
    29d0:	9c 93       	st	X, r25
    29d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d4:	fe 01       	movw	r30, r28
    29d6:	e5 5b       	subi	r30, 0xB5	; 181
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	80 81       	ld	r24, Z
    29dc:	91 81       	ldd	r25, Z+1	; 0x01
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	d1 f6       	brne	.-76     	; 0x2996 <__stack+0x797>
    29e2:	27 c0       	rjmp	.+78     	; 0x2a32 <__stack+0x833>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e4:	8e 01       	movw	r16, r28
    29e6:	05 5b       	subi	r16, 0xB5	; 181
    29e8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ea:	fe 01       	movw	r30, r28
    29ec:	e3 5b       	subi	r30, 0xB3	; 179
    29ee:	ff 4f       	sbci	r31, 0xFF	; 255
    29f0:	60 81       	ld	r22, Z
    29f2:	71 81       	ldd	r23, Z+1	; 0x01
    29f4:	82 81       	ldd	r24, Z+2	; 0x02
    29f6:	93 81       	ldd	r25, Z+3	; 0x03
    29f8:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	f8 01       	movw	r30, r16
    2a02:	91 83       	std	Z+1, r25	; 0x01
    2a04:	80 83       	st	Z, r24
    2a06:	de 01       	movw	r26, r28
    2a08:	a9 5b       	subi	r26, 0xB9	; 185
    2a0a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	e5 5b       	subi	r30, 0xB5	; 181
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	80 81       	ld	r24, Z
    2a14:	91 81       	ldd	r25, Z+1	; 0x01
    2a16:	8d 93       	st	X+, r24
    2a18:	9c 93       	st	X, r25
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	e9 5b       	subi	r30, 0xB9	; 185
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	80 81       	ld	r24, Z
    2a22:	91 81       	ldd	r25, Z+1	; 0x01
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <__stack+0x825>
    2a28:	fe 01       	movw	r30, r28
    2a2a:	e9 5b       	subi	r30, 0xB9	; 185
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	91 83       	std	Z+1, r25	; 0x01
    2a30:	80 83       	st	Z, r24
                _delay_ms(1000);

                centre = ADC_Conversion(2);
    2a32:	82 e0       	ldi	r24, 0x02	; 2
    2a34:	0e 94 97 06 	call	0xd2e	; 0xd2e <ADC_Conversion>
    2a38:	88 2f       	mov	r24, r24
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	90 93 23 03 	sts	0x0323, r25
    2a40:	80 93 22 03 	sts	0x0322, r24
    2a44:	09 c0       	rjmp	.+18     	; 0x2a58 <__stack+0x859>

                while(centre < 120)
                {
                    centre = ADC_Conversion(2);
    2a46:	82 e0       	ldi	r24, 0x02	; 2
    2a48:	0e 94 97 06 	call	0xd2e	; 0xd2e <ADC_Conversion>
    2a4c:	88 2f       	mov	r24, r24
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	90 93 23 03 	sts	0x0323, r25
    2a54:	80 93 22 03 	sts	0x0322, r24
                left();
                _delay_ms(1000);

                centre = ADC_Conversion(2);

                while(centre < 120)
    2a58:	80 91 22 03 	lds	r24, 0x0322
    2a5c:	90 91 23 03 	lds	r25, 0x0323
    2a60:	88 37       	cpi	r24, 0x78	; 120
    2a62:	91 05       	cpc	r25, r1
    2a64:	84 f3       	brlt	.-32     	; 0x2a46 <__stack+0x847>
                {
                    centre = ADC_Conversion(2);
                }

                stop();
    2a66:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	ed 5b       	subi	r30, 0xBD	; 189
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	aa ef       	ldi	r26, 0xFA	; 250
    2a76:	b4 e4       	ldi	r27, 0x44	; 68
    2a78:	80 83       	st	Z, r24
    2a7a:	91 83       	std	Z+1, r25	; 0x01
    2a7c:	a2 83       	std	Z+2, r26	; 0x02
    2a7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a80:	8e 01       	movw	r16, r28
    2a82:	01 5c       	subi	r16, 0xC1	; 193
    2a84:	1f 4f       	sbci	r17, 0xFF	; 255
    2a86:	fe 01       	movw	r30, r28
    2a88:	ed 5b       	subi	r30, 0xBD	; 189
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	60 81       	ld	r22, Z
    2a8e:	71 81       	ldd	r23, Z+1	; 0x01
    2a90:	82 81       	ldd	r24, Z+2	; 0x02
    2a92:	93 81       	ldd	r25, Z+3	; 0x03
    2a94:	26 e6       	ldi	r18, 0x66	; 102
    2a96:	36 e6       	ldi	r19, 0x66	; 102
    2a98:	46 e6       	ldi	r20, 0x66	; 102
    2a9a:	55 e4       	ldi	r21, 0x45	; 69
    2a9c:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	f8 01       	movw	r30, r16
    2aa6:	80 83       	st	Z, r24
    2aa8:	91 83       	std	Z+1, r25	; 0x01
    2aaa:	a2 83       	std	Z+2, r26	; 0x02
    2aac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aae:	fe 01       	movw	r30, r28
    2ab0:	ff 96       	adiw	r30, 0x3f	; 63
    2ab2:	60 81       	ld	r22, Z
    2ab4:	71 81       	ldd	r23, Z+1	; 0x01
    2ab6:	82 81       	ldd	r24, Z+2	; 0x02
    2ab8:	93 81       	ldd	r25, Z+3	; 0x03
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	40 e8       	ldi	r20, 0x80	; 128
    2ac0:	5f e3       	ldi	r21, 0x3F	; 63
    2ac2:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
    2ac6:	88 23       	and	r24, r24
    2ac8:	2c f4       	brge	.+10     	; 0x2ad4 <__stack+0x8d5>
		__ticks = 1;
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	9e af       	std	Y+62, r25	; 0x3e
    2ad0:	8d af       	std	Y+61, r24	; 0x3d
    2ad2:	46 c0       	rjmp	.+140    	; 0x2b60 <__stack+0x961>
	else if (__tmp > 65535)
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	ff 96       	adiw	r30, 0x3f	; 63
    2ad8:	60 81       	ld	r22, Z
    2ada:	71 81       	ldd	r23, Z+1	; 0x01
    2adc:	82 81       	ldd	r24, Z+2	; 0x02
    2ade:	93 81       	ldd	r25, Z+3	; 0x03
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	3f ef       	ldi	r19, 0xFF	; 255
    2ae4:	4f e7       	ldi	r20, 0x7F	; 127
    2ae6:	57 e4       	ldi	r21, 0x47	; 71
    2ae8:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    2aec:	18 16       	cp	r1, r24
    2aee:	64 f5       	brge	.+88     	; 0x2b48 <__stack+0x949>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af0:	fe 01       	movw	r30, r28
    2af2:	ed 5b       	subi	r30, 0xBD	; 189
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	60 81       	ld	r22, Z
    2af8:	71 81       	ldd	r23, Z+1	; 0x01
    2afa:	82 81       	ldd	r24, Z+2	; 0x02
    2afc:	93 81       	ldd	r25, Z+3	; 0x03
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e2       	ldi	r20, 0x20	; 32
    2b04:	51 e4       	ldi	r21, 0x41	; 65
    2b06:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9e af       	std	Y+62, r25	; 0x3e
    2b1c:	8d af       	std	Y+61, r24	; 0x3d
    2b1e:	0f c0       	rjmp	.+30     	; 0x2b3e <__stack+0x93f>
    2b20:	80 e7       	ldi	r24, 0x70	; 112
    2b22:	91 e0       	ldi	r25, 0x01	; 1
    2b24:	9c af       	std	Y+60, r25	; 0x3c
    2b26:	8b af       	std	Y+59, r24	; 0x3b
    2b28:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b2a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <__stack+0x92d>
    2b30:	9c af       	std	Y+60, r25	; 0x3c
    2b32:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b34:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b36:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	9e af       	std	Y+62, r25	; 0x3e
    2b3c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b40:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	69 f7       	brne	.-38     	; 0x2b20 <__stack+0x921>
    2b46:	16 c0       	rjmp	.+44     	; 0x2b74 <__stack+0x975>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b48:	fe 01       	movw	r30, r28
    2b4a:	ff 96       	adiw	r30, 0x3f	; 63
    2b4c:	60 81       	ld	r22, Z
    2b4e:	71 81       	ldd	r23, Z+1	; 0x01
    2b50:	82 81       	ldd	r24, Z+2	; 0x02
    2b52:	93 81       	ldd	r25, Z+3	; 0x03
    2b54:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	9e af       	std	Y+62, r25	; 0x3e
    2b5e:	8d af       	std	Y+61, r24	; 0x3d
    2b60:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b62:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b64:	9a af       	std	Y+58, r25	; 0x3a
    2b66:	89 af       	std	Y+57, r24	; 0x39
    2b68:	89 ad       	ldd	r24, Y+57	; 0x39
    2b6a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b6c:	01 97       	sbiw	r24, 0x01	; 1
    2b6e:	f1 f7       	brne	.-4      	; 0x2b6c <__stack+0x96d>
    2b70:	9a af       	std	Y+58, r25	; 0x3a
    2b72:	89 af       	std	Y+57, r24	; 0x39
                _delay_ms(2000);

                forward();
    2b74:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <forward>
            }

            if(node == 4)
    2b78:	80 91 16 03 	lds	r24, 0x0316
    2b7c:	90 91 17 03 	lds	r25, 0x0317
    2b80:	84 30       	cpi	r24, 0x04	; 4
    2b82:	91 05       	cpc	r25, r1
    2b84:	09 f0       	breq	.+2      	; 0x2b88 <__stack+0x989>
    2b86:	f2 c1       	rjmp	.+996    	; 0x2f6c <__stack+0xd6d>
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	aa e7       	ldi	r26, 0x7A	; 122
    2b8e:	b4 e4       	ldi	r27, 0x44	; 68
    2b90:	8d ab       	std	Y+53, r24	; 0x35
    2b92:	9e ab       	std	Y+54, r25	; 0x36
    2b94:	af ab       	std	Y+55, r26	; 0x37
    2b96:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b98:	6d a9       	ldd	r22, Y+53	; 0x35
    2b9a:	7e a9       	ldd	r23, Y+54	; 0x36
    2b9c:	8f a9       	ldd	r24, Y+55	; 0x37
    2b9e:	98 ad       	ldd	r25, Y+56	; 0x38
    2ba0:	26 e6       	ldi	r18, 0x66	; 102
    2ba2:	36 e6       	ldi	r19, 0x66	; 102
    2ba4:	46 e6       	ldi	r20, 0x66	; 102
    2ba6:	55 e4       	ldi	r21, 0x45	; 69
    2ba8:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	89 ab       	std	Y+49, r24	; 0x31
    2bb2:	9a ab       	std	Y+50, r25	; 0x32
    2bb4:	ab ab       	std	Y+51, r26	; 0x33
    2bb6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bb8:	69 a9       	ldd	r22, Y+49	; 0x31
    2bba:	7a a9       	ldd	r23, Y+50	; 0x32
    2bbc:	8b a9       	ldd	r24, Y+51	; 0x33
    2bbe:	9c a9       	ldd	r25, Y+52	; 0x34
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	40 e8       	ldi	r20, 0x80	; 128
    2bc6:	5f e3       	ldi	r21, 0x3F	; 63
    2bc8:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
    2bcc:	88 23       	and	r24, r24
    2bce:	2c f4       	brge	.+10     	; 0x2bda <__stack+0x9db>
		__ticks = 1;
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	98 ab       	std	Y+48, r25	; 0x30
    2bd6:	8f a7       	std	Y+47, r24	; 0x2f
    2bd8:	3f c0       	rjmp	.+126    	; 0x2c58 <__stack+0xa59>
	else if (__tmp > 65535)
    2bda:	69 a9       	ldd	r22, Y+49	; 0x31
    2bdc:	7a a9       	ldd	r23, Y+50	; 0x32
    2bde:	8b a9       	ldd	r24, Y+51	; 0x33
    2be0:	9c a9       	ldd	r25, Y+52	; 0x34
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	3f ef       	ldi	r19, 0xFF	; 255
    2be6:	4f e7       	ldi	r20, 0x7F	; 127
    2be8:	57 e4       	ldi	r21, 0x47	; 71
    2bea:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    2bee:	18 16       	cp	r1, r24
    2bf0:	4c f5       	brge	.+82     	; 0x2c44 <__stack+0xa45>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf2:	6d a9       	ldd	r22, Y+53	; 0x35
    2bf4:	7e a9       	ldd	r23, Y+54	; 0x36
    2bf6:	8f a9       	ldd	r24, Y+55	; 0x37
    2bf8:	98 ad       	ldd	r25, Y+56	; 0x38
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	40 e2       	ldi	r20, 0x20	; 32
    2c00:	51 e4       	ldi	r21, 0x41	; 65
    2c02:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	bc 01       	movw	r22, r24
    2c0c:	cd 01       	movw	r24, r26
    2c0e:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	98 ab       	std	Y+48, r25	; 0x30
    2c18:	8f a7       	std	Y+47, r24	; 0x2f
    2c1a:	0f c0       	rjmp	.+30     	; 0x2c3a <__stack+0xa3b>
    2c1c:	80 e7       	ldi	r24, 0x70	; 112
    2c1e:	91 e0       	ldi	r25, 0x01	; 1
    2c20:	9e a7       	std	Y+46, r25	; 0x2e
    2c22:	8d a7       	std	Y+45, r24	; 0x2d
    2c24:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c26:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	f1 f7       	brne	.-4      	; 0x2c28 <__stack+0xa29>
    2c2c:	9e a7       	std	Y+46, r25	; 0x2e
    2c2e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c30:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c32:	98 a9       	ldd	r25, Y+48	; 0x30
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	98 ab       	std	Y+48, r25	; 0x30
    2c38:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c3e:	00 97       	sbiw	r24, 0x00	; 0
    2c40:	69 f7       	brne	.-38     	; 0x2c1c <__stack+0xa1d>
    2c42:	14 c0       	rjmp	.+40     	; 0x2c6c <__stack+0xa6d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c44:	69 a9       	ldd	r22, Y+49	; 0x31
    2c46:	7a a9       	ldd	r23, Y+50	; 0x32
    2c48:	8b a9       	ldd	r24, Y+51	; 0x33
    2c4a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c4c:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	98 ab       	std	Y+48, r25	; 0x30
    2c56:	8f a7       	std	Y+47, r24	; 0x2f
    2c58:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c5a:	98 a9       	ldd	r25, Y+48	; 0x30
    2c5c:	9c a7       	std	Y+44, r25	; 0x2c
    2c5e:	8b a7       	std	Y+43, r24	; 0x2b
    2c60:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c62:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c64:	01 97       	sbiw	r24, 0x01	; 1
    2c66:	f1 f7       	brne	.-4      	; 0x2c64 <__stack+0xa65>
    2c68:	9c a7       	std	Y+44, r25	; 0x2c
    2c6a:	8b a7       	std	Y+43, r24	; 0x2b
            {
                _delay_ms(1000);
                velocity(150, 180);
    2c6c:	86 e9       	ldi	r24, 0x96	; 150
    2c6e:	64 eb       	ldi	r22, 0xB4	; 180
    2c70:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>

                line_follow_mm(80);
    2c74:	80 e5       	ldi	r24, 0x50	; 80
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <line_follow_mm>
                stop();
    2c7c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	aa ef       	ldi	r26, 0xFA	; 250
    2c86:	b4 e4       	ldi	r27, 0x44	; 68
    2c88:	8f a3       	std	Y+39, r24	; 0x27
    2c8a:	98 a7       	std	Y+40, r25	; 0x28
    2c8c:	a9 a7       	std	Y+41, r26	; 0x29
    2c8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c90:	6f a1       	ldd	r22, Y+39	; 0x27
    2c92:	78 a5       	ldd	r23, Y+40	; 0x28
    2c94:	89 a5       	ldd	r24, Y+41	; 0x29
    2c96:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c98:	26 e6       	ldi	r18, 0x66	; 102
    2c9a:	36 e6       	ldi	r19, 0x66	; 102
    2c9c:	46 e6       	ldi	r20, 0x66	; 102
    2c9e:	55 e4       	ldi	r21, 0x45	; 69
    2ca0:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	8b a3       	std	Y+35, r24	; 0x23
    2caa:	9c a3       	std	Y+36, r25	; 0x24
    2cac:	ad a3       	std	Y+37, r26	; 0x25
    2cae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cb0:	6b a1       	ldd	r22, Y+35	; 0x23
    2cb2:	7c a1       	ldd	r23, Y+36	; 0x24
    2cb4:	8d a1       	ldd	r24, Y+37	; 0x25
    2cb6:	9e a1       	ldd	r25, Y+38	; 0x26
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	40 e8       	ldi	r20, 0x80	; 128
    2cbe:	5f e3       	ldi	r21, 0x3F	; 63
    2cc0:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
    2cc4:	88 23       	and	r24, r24
    2cc6:	2c f4       	brge	.+10     	; 0x2cd2 <__stack+0xad3>
		__ticks = 1;
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	9a a3       	std	Y+34, r25	; 0x22
    2cce:	89 a3       	std	Y+33, r24	; 0x21
    2cd0:	3f c0       	rjmp	.+126    	; 0x2d50 <__stack+0xb51>
	else if (__tmp > 65535)
    2cd2:	6b a1       	ldd	r22, Y+35	; 0x23
    2cd4:	7c a1       	ldd	r23, Y+36	; 0x24
    2cd6:	8d a1       	ldd	r24, Y+37	; 0x25
    2cd8:	9e a1       	ldd	r25, Y+38	; 0x26
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	3f ef       	ldi	r19, 0xFF	; 255
    2cde:	4f e7       	ldi	r20, 0x7F	; 127
    2ce0:	57 e4       	ldi	r21, 0x47	; 71
    2ce2:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    2ce6:	18 16       	cp	r1, r24
    2ce8:	4c f5       	brge	.+82     	; 0x2d3c <__stack+0xb3d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cea:	6f a1       	ldd	r22, Y+39	; 0x27
    2cec:	78 a5       	ldd	r23, Y+40	; 0x28
    2cee:	89 a5       	ldd	r24, Y+41	; 0x29
    2cf0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	40 e2       	ldi	r20, 0x20	; 32
    2cf8:	51 e4       	ldi	r21, 0x41	; 65
    2cfa:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	bc 01       	movw	r22, r24
    2d04:	cd 01       	movw	r24, r26
    2d06:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	9a a3       	std	Y+34, r25	; 0x22
    2d10:	89 a3       	std	Y+33, r24	; 0x21
    2d12:	0f c0       	rjmp	.+30     	; 0x2d32 <__stack+0xb33>
    2d14:	80 e7       	ldi	r24, 0x70	; 112
    2d16:	91 e0       	ldi	r25, 0x01	; 1
    2d18:	98 a3       	std	Y+32, r25	; 0x20
    2d1a:	8f 8f       	std	Y+31, r24	; 0x1f
    2d1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d1e:	98 a1       	ldd	r25, Y+32	; 0x20
    2d20:	01 97       	sbiw	r24, 0x01	; 1
    2d22:	f1 f7       	brne	.-4      	; 0x2d20 <__stack+0xb21>
    2d24:	98 a3       	std	Y+32, r25	; 0x20
    2d26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d28:	89 a1       	ldd	r24, Y+33	; 0x21
    2d2a:	9a a1       	ldd	r25, Y+34	; 0x22
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	9a a3       	std	Y+34, r25	; 0x22
    2d30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d32:	89 a1       	ldd	r24, Y+33	; 0x21
    2d34:	9a a1       	ldd	r25, Y+34	; 0x22
    2d36:	00 97       	sbiw	r24, 0x00	; 0
    2d38:	69 f7       	brne	.-38     	; 0x2d14 <__stack+0xb15>
    2d3a:	14 c0       	rjmp	.+40     	; 0x2d64 <__stack+0xb65>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d3c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d3e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d40:	8d a1       	ldd	r24, Y+37	; 0x25
    2d42:	9e a1       	ldd	r25, Y+38	; 0x26
    2d44:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	9a a3       	std	Y+34, r25	; 0x22
    2d4e:	89 a3       	std	Y+33, r24	; 0x21
    2d50:	89 a1       	ldd	r24, Y+33	; 0x21
    2d52:	9a a1       	ldd	r25, Y+34	; 0x22
    2d54:	9e 8f       	std	Y+30, r25	; 0x1e
    2d56:	8d 8f       	std	Y+29, r24	; 0x1d
    2d58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	f1 f7       	brne	.-4      	; 0x2d5c <__stack+0xb5d>
    2d60:	9e 8f       	std	Y+30, r25	; 0x1e
    2d62:	8d 8f       	std	Y+29, r24	; 0x1d
                _delay_ms(2000);

                right();
    2d64:	0e 94 63 03 	call	0x6c6	; 0x6c6 <right>
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	aa e7       	ldi	r26, 0x7A	; 122
    2d6e:	b4 e4       	ldi	r27, 0x44	; 68
    2d70:	89 8f       	std	Y+25, r24	; 0x19
    2d72:	9a 8f       	std	Y+26, r25	; 0x1a
    2d74:	ab 8f       	std	Y+27, r26	; 0x1b
    2d76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d78:	69 8d       	ldd	r22, Y+25	; 0x19
    2d7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d80:	26 e6       	ldi	r18, 0x66	; 102
    2d82:	36 e6       	ldi	r19, 0x66	; 102
    2d84:	46 e6       	ldi	r20, 0x66	; 102
    2d86:	55 e4       	ldi	r21, 0x45	; 69
    2d88:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	8d 8b       	std	Y+21, r24	; 0x15
    2d92:	9e 8b       	std	Y+22, r25	; 0x16
    2d94:	af 8b       	std	Y+23, r26	; 0x17
    2d96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d98:	6d 89       	ldd	r22, Y+21	; 0x15
    2d9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	40 e8       	ldi	r20, 0x80	; 128
    2da6:	5f e3       	ldi	r21, 0x3F	; 63
    2da8:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
    2dac:	88 23       	and	r24, r24
    2dae:	2c f4       	brge	.+10     	; 0x2dba <__stack+0xbbb>
		__ticks = 1;
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	9c 8b       	std	Y+20, r25	; 0x14
    2db6:	8b 8b       	std	Y+19, r24	; 0x13
    2db8:	3f c0       	rjmp	.+126    	; 0x2e38 <__stack+0xc39>
	else if (__tmp > 65535)
    2dba:	6d 89       	ldd	r22, Y+21	; 0x15
    2dbc:	7e 89       	ldd	r23, Y+22	; 0x16
    2dbe:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc0:	98 8d       	ldd	r25, Y+24	; 0x18
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	3f ef       	ldi	r19, 0xFF	; 255
    2dc6:	4f e7       	ldi	r20, 0x7F	; 127
    2dc8:	57 e4       	ldi	r21, 0x47	; 71
    2dca:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    2dce:	18 16       	cp	r1, r24
    2dd0:	4c f5       	brge	.+82     	; 0x2e24 <__stack+0xc25>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd2:	69 8d       	ldd	r22, Y+25	; 0x19
    2dd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	40 e2       	ldi	r20, 0x20	; 32
    2de0:	51 e4       	ldi	r21, 0x41	; 65
    2de2:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	bc 01       	movw	r22, r24
    2dec:	cd 01       	movw	r24, r26
    2dee:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	9c 8b       	std	Y+20, r25	; 0x14
    2df8:	8b 8b       	std	Y+19, r24	; 0x13
    2dfa:	0f c0       	rjmp	.+30     	; 0x2e1a <__stack+0xc1b>
    2dfc:	80 e7       	ldi	r24, 0x70	; 112
    2dfe:	91 e0       	ldi	r25, 0x01	; 1
    2e00:	9a 8b       	std	Y+18, r25	; 0x12
    2e02:	89 8b       	std	Y+17, r24	; 0x11
    2e04:	89 89       	ldd	r24, Y+17	; 0x11
    2e06:	9a 89       	ldd	r25, Y+18	; 0x12
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <__stack+0xc09>
    2e0c:	9a 8b       	std	Y+18, r25	; 0x12
    2e0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e10:	8b 89       	ldd	r24, Y+19	; 0x13
    2e12:	9c 89       	ldd	r25, Y+20	; 0x14
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	9c 8b       	std	Y+20, r25	; 0x14
    2e18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e1e:	00 97       	sbiw	r24, 0x00	; 0
    2e20:	69 f7       	brne	.-38     	; 0x2dfc <__stack+0xbfd>
    2e22:	14 c0       	rjmp	.+40     	; 0x2e4c <__stack+0xc4d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e24:	6d 89       	ldd	r22, Y+21	; 0x15
    2e26:	7e 89       	ldd	r23, Y+22	; 0x16
    2e28:	8f 89       	ldd	r24, Y+23	; 0x17
    2e2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e2c:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	9c 8b       	std	Y+20, r25	; 0x14
    2e36:	8b 8b       	std	Y+19, r24	; 0x13
    2e38:	8b 89       	ldd	r24, Y+19	; 0x13
    2e3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e3c:	98 8b       	std	Y+16, r25	; 0x10
    2e3e:	8f 87       	std	Y+15, r24	; 0x0f
    2e40:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e42:	98 89       	ldd	r25, Y+16	; 0x10
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	f1 f7       	brne	.-4      	; 0x2e44 <__stack+0xc45>
    2e48:	98 8b       	std	Y+16, r25	; 0x10
    2e4a:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(1000);

                centre = ADC_Conversion(2);
    2e4c:	82 e0       	ldi	r24, 0x02	; 2
    2e4e:	0e 94 97 06 	call	0xd2e	; 0xd2e <ADC_Conversion>
    2e52:	88 2f       	mov	r24, r24
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	90 93 23 03 	sts	0x0323, r25
    2e5a:	80 93 22 03 	sts	0x0322, r24
    2e5e:	09 c0       	rjmp	.+18     	; 0x2e72 <__stack+0xc73>

                while(centre < 120)
                {
                    centre = ADC_Conversion(2);
    2e60:	82 e0       	ldi	r24, 0x02	; 2
    2e62:	0e 94 97 06 	call	0xd2e	; 0xd2e <ADC_Conversion>
    2e66:	88 2f       	mov	r24, r24
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	90 93 23 03 	sts	0x0323, r25
    2e6e:	80 93 22 03 	sts	0x0322, r24
                right();
                _delay_ms(1000);

                centre = ADC_Conversion(2);

                while(centre < 120)
    2e72:	80 91 22 03 	lds	r24, 0x0322
    2e76:	90 91 23 03 	lds	r25, 0x0323
    2e7a:	88 37       	cpi	r24, 0x78	; 120
    2e7c:	91 05       	cpc	r25, r1
    2e7e:	84 f3       	brlt	.-32     	; 0x2e60 <__stack+0xc61>
                {
                    centre = ADC_Conversion(2);
                }

                stop();
    2e80:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	aa ef       	ldi	r26, 0xFA	; 250
    2e8a:	b4 e4       	ldi	r27, 0x44	; 68
    2e8c:	8b 87       	std	Y+11, r24	; 0x0b
    2e8e:	9c 87       	std	Y+12, r25	; 0x0c
    2e90:	ad 87       	std	Y+13, r26	; 0x0d
    2e92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e9c:	26 e6       	ldi	r18, 0x66	; 102
    2e9e:	36 e6       	ldi	r19, 0x66	; 102
    2ea0:	46 e6       	ldi	r20, 0x66	; 102
    2ea2:	55 e4       	ldi	r21, 0x45	; 69
    2ea4:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	8f 83       	std	Y+7, r24	; 0x07
    2eae:	98 87       	std	Y+8, r25	; 0x08
    2eb0:	a9 87       	std	Y+9, r26	; 0x09
    2eb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb6:	78 85       	ldd	r23, Y+8	; 0x08
    2eb8:	89 85       	ldd	r24, Y+9	; 0x09
    2eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	40 e8       	ldi	r20, 0x80	; 128
    2ec2:	5f e3       	ldi	r21, 0x3F	; 63
    2ec4:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__ltsf2>
    2ec8:	88 23       	and	r24, r24
    2eca:	2c f4       	brge	.+10     	; 0x2ed6 <__stack+0xcd7>
		__ticks = 1;
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	9e 83       	std	Y+6, r25	; 0x06
    2ed2:	8d 83       	std	Y+5, r24	; 0x05
    2ed4:	3f c0       	rjmp	.+126    	; 0x2f54 <__stack+0xd55>
	else if (__tmp > 65535)
    2ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed8:	78 85       	ldd	r23, Y+8	; 0x08
    2eda:	89 85       	ldd	r24, Y+9	; 0x09
    2edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	3f ef       	ldi	r19, 0xFF	; 255
    2ee2:	4f e7       	ldi	r20, 0x7F	; 127
    2ee4:	57 e4       	ldi	r21, 0x47	; 71
    2ee6:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__gtsf2>
    2eea:	18 16       	cp	r1, r24
    2eec:	4c f5       	brge	.+82     	; 0x2f40 <__stack+0xd41>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	40 e2       	ldi	r20, 0x20	; 32
    2efc:	51 e4       	ldi	r21, 0x41	; 65
    2efe:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__mulsf3>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	bc 01       	movw	r22, r24
    2f08:	cd 01       	movw	r24, r26
    2f0a:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	9e 83       	std	Y+6, r25	; 0x06
    2f14:	8d 83       	std	Y+5, r24	; 0x05
    2f16:	0f c0       	rjmp	.+30     	; 0x2f36 <__stack+0xd37>
    2f18:	80 e7       	ldi	r24, 0x70	; 112
    2f1a:	91 e0       	ldi	r25, 0x01	; 1
    2f1c:	9c 83       	std	Y+4, r25	; 0x04
    2f1e:	8b 83       	std	Y+3, r24	; 0x03
    2f20:	8b 81       	ldd	r24, Y+3	; 0x03
    2f22:	9c 81       	ldd	r25, Y+4	; 0x04
    2f24:	01 97       	sbiw	r24, 0x01	; 1
    2f26:	f1 f7       	brne	.-4      	; 0x2f24 <__stack+0xd25>
    2f28:	9c 83       	std	Y+4, r25	; 0x04
    2f2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	9e 83       	std	Y+6, r25	; 0x06
    2f34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f36:	8d 81       	ldd	r24, Y+5	; 0x05
    2f38:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3a:	00 97       	sbiw	r24, 0x00	; 0
    2f3c:	69 f7       	brne	.-38     	; 0x2f18 <__stack+0xd19>
    2f3e:	14 c0       	rjmp	.+40     	; 0x2f68 <__stack+0xd69>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f40:	6f 81       	ldd	r22, Y+7	; 0x07
    2f42:	78 85       	ldd	r23, Y+8	; 0x08
    2f44:	89 85       	ldd	r24, Y+9	; 0x09
    2f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f48:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	9e 83       	std	Y+6, r25	; 0x06
    2f52:	8d 83       	std	Y+5, r24	; 0x05
    2f54:	8d 81       	ldd	r24, Y+5	; 0x05
    2f56:	9e 81       	ldd	r25, Y+6	; 0x06
    2f58:	9a 83       	std	Y+2, r25	; 0x02
    2f5a:	89 83       	std	Y+1, r24	; 0x01
    2f5c:	89 81       	ldd	r24, Y+1	; 0x01
    2f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f60:	01 97       	sbiw	r24, 0x01	; 1
    2f62:	f1 f7       	brne	.-4      	; 0x2f60 <__stack+0xd61>
    2f64:	9a 83       	std	Y+2, r25	; 0x02
    2f66:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(2000);

                forward();
    2f68:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <forward>
            }

            if(node == 5)
    2f6c:	80 91 16 03 	lds	r24, 0x0316
    2f70:	90 91 17 03 	lds	r25, 0x0317
    2f74:	85 30       	cpi	r24, 0x05	; 5
    2f76:	91 05       	cpc	r25, r1
    2f78:	19 f4       	brne	.+6      	; 0x2f80 <__stack+0xd81>
            {
                stop();
    2f7a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
    2f7e:	ff cf       	rjmp	.-2      	; 0x2f7e <__stack+0xd7f>
                while(1);
            }

            else
            {
                forward();
    2f80:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <forward>
            }

        }

        lastError = error;
    2f84:	80 91 12 03 	lds	r24, 0x0312
    2f88:	90 91 13 03 	lds	r25, 0x0313
    2f8c:	90 93 15 03 	sts	0x0315, r25
    2f90:	80 93 14 03 	sts	0x0314, r24
    2f94:	e9 c8       	rjmp	.-3630   	; 0x2168 <main+0x44>

00002f96 <line_follow_mm>:




void line_follow_mm(int distance)
{
    2f96:	df 93       	push	r29
    2f98:	cf 93       	push	r28
    2f9a:	00 d0       	rcall	.+0      	; 0x2f9c <line_follow_mm+0x6>
    2f9c:	0f 92       	push	r0
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
    2fa2:	9c 83       	std	Y+4, r25	; 0x04
    2fa4:	8b 83       	std	Y+3, r24	; 0x03
    int reqCount = distance/5.338;
    2fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    2faa:	aa 27       	eor	r26, r26
    2fac:	97 fd       	sbrc	r25, 7
    2fae:	a0 95       	com	r26
    2fb0:	ba 2f       	mov	r27, r26
    2fb2:	bc 01       	movw	r22, r24
    2fb4:	cd 01       	movw	r24, r26
    2fb6:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__floatsisf>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	bc 01       	movw	r22, r24
    2fc0:	cd 01       	movw	r24, r26
    2fc2:	25 ee       	ldi	r18, 0xE5	; 229
    2fc4:	30 ed       	ldi	r19, 0xD0	; 208
    2fc6:	4a ea       	ldi	r20, 0xAA	; 170
    2fc8:	50 e4       	ldi	r21, 0x40	; 64
    2fca:	0e 94 4c 1c 	call	0x3898	; 0x3898 <__divsf3>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	bc 01       	movw	r22, r24
    2fd4:	cd 01       	movw	r24, r26
    2fd6:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__fixsfsi>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	9a 83       	std	Y+2, r25	; 0x02
    2fe0:	89 83       	std	Y+1, r24	; 0x01

    ShaftCountLeft = 0;
    2fe2:	10 92 0a 03 	sts	0x030A, r1
    2fe6:	10 92 0b 03 	sts	0x030B, r1
    2fea:	10 92 0c 03 	sts	0x030C, r1
    2fee:	10 92 0d 03 	sts	0x030D, r1
    forward();
    2ff2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <forward>
    2ff6:	64 c1       	rjmp	.+712    	; 0x32c0 <line_follow_mm+0x32a>

    while(ShaftCountLeft < reqCount)
    {
        centre = ADC_Conversion(2);
    2ff8:	82 e0       	ldi	r24, 0x02	; 2
    2ffa:	0e 94 97 06 	call	0xd2e	; 0xd2e <ADC_Conversion>
    2ffe:	88 2f       	mov	r24, r24
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	90 93 23 03 	sts	0x0323, r25
    3006:	80 93 22 03 	sts	0x0322, r24
        sensorLeft = ADC_Conversion(3);
    300a:	83 e0       	ldi	r24, 0x03	; 3
    300c:	0e 94 97 06 	call	0xd2e	; 0xd2e <ADC_Conversion>
    3010:	88 2f       	mov	r24, r24
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	90 93 1f 03 	sts	0x031F, r25
    3018:	80 93 1e 03 	sts	0x031E, r24
        sensorRight = ADC_Conversion(1);
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	0e 94 97 06 	call	0xd2e	; 0xd2e <ADC_Conversion>
    3022:	88 2f       	mov	r24, r24
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	90 93 29 03 	sts	0x0329, r25
    302a:	80 93 28 03 	sts	0x0328, r24

        lcd_print(2, 1, sensorLeft, 3);
    302e:	80 91 1e 03 	lds	r24, 0x031E
    3032:	90 91 1f 03 	lds	r25, 0x031F
    3036:	9c 01       	movw	r18, r24
    3038:	82 e0       	ldi	r24, 0x02	; 2
    303a:	61 e0       	ldi	r22, 0x01	; 1
    303c:	a9 01       	movw	r20, r18
    303e:	23 e0       	ldi	r18, 0x03	; 3
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <lcd_print>
        lcd_print(2, 5, centre, 3);
    3046:	80 91 22 03 	lds	r24, 0x0322
    304a:	90 91 23 03 	lds	r25, 0x0323
    304e:	9c 01       	movw	r18, r24
    3050:	82 e0       	ldi	r24, 0x02	; 2
    3052:	65 e0       	ldi	r22, 0x05	; 5
    3054:	a9 01       	movw	r20, r18
    3056:	23 e0       	ldi	r18, 0x03	; 3
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <lcd_print>
        lcd_print(2, 9, sensorRight, 3);
    305e:	80 91 28 03 	lds	r24, 0x0328
    3062:	90 91 29 03 	lds	r25, 0x0329
    3066:	9c 01       	movw	r18, r24
    3068:	82 e0       	ldi	r24, 0x02	; 2
    306a:	69 e0       	ldi	r22, 0x09	; 9
    306c:	a9 01       	movw	r20, r18
    306e:	23 e0       	ldi	r18, 0x03	; 3
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <lcd_print>

        if(centre > 115 && sensorLeft > 15 && sensorRight > 20)
    3076:	80 91 22 03 	lds	r24, 0x0322
    307a:	90 91 23 03 	lds	r25, 0x0323
    307e:	84 37       	cpi	r24, 0x74	; 116
    3080:	91 05       	cpc	r25, r1
    3082:	ac f0       	brlt	.+42     	; 0x30ae <line_follow_mm+0x118>
    3084:	80 91 1e 03 	lds	r24, 0x031E
    3088:	90 91 1f 03 	lds	r25, 0x031F
    308c:	80 31       	cpi	r24, 0x10	; 16
    308e:	91 05       	cpc	r25, r1
    3090:	74 f0       	brlt	.+28     	; 0x30ae <line_follow_mm+0x118>
    3092:	80 91 28 03 	lds	r24, 0x0328
    3096:	90 91 29 03 	lds	r25, 0x0329
    309a:	85 31       	cpi	r24, 0x15	; 21
    309c:	91 05       	cpc	r25, r1
    309e:	3c f0       	brlt	.+14     	; 0x30ae <line_follow_mm+0x118>
            error = 100;
    30a0:	84 e6       	ldi	r24, 0x64	; 100
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	90 93 13 03 	sts	0x0313, r25
    30a8:	80 93 12 03 	sts	0x0312, r24
    30ac:	ac c0       	rjmp	.+344    	; 0x3206 <line_follow_mm+0x270>

        else if(centre > 115)
    30ae:	80 91 22 03 	lds	r24, 0x0322
    30b2:	90 91 23 03 	lds	r25, 0x0323
    30b6:	84 37       	cpi	r24, 0x74	; 116
    30b8:	91 05       	cpc	r25, r1
    30ba:	2c f0       	brlt	.+10     	; 0x30c6 <line_follow_mm+0x130>
            error = 0;
    30bc:	10 92 13 03 	sts	0x0313, r1
    30c0:	10 92 12 03 	sts	0x0312, r1
    30c4:	a0 c0       	rjmp	.+320    	; 0x3206 <line_follow_mm+0x270>

        else if(sensorLeft > 45)
    30c6:	80 91 1e 03 	lds	r24, 0x031E
    30ca:	90 91 1f 03 	lds	r25, 0x031F
    30ce:	8e 32       	cpi	r24, 0x2E	; 46
    30d0:	91 05       	cpc	r25, r1
    30d2:	3c f0       	brlt	.+14     	; 0x30e2 <line_follow_mm+0x14c>
            error = 7;
    30d4:	87 e0       	ldi	r24, 0x07	; 7
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	90 93 13 03 	sts	0x0313, r25
    30dc:	80 93 12 03 	sts	0x0312, r24
    30e0:	92 c0       	rjmp	.+292    	; 0x3206 <line_follow_mm+0x270>

        else if(sensorLeft > 25)
    30e2:	80 91 1e 03 	lds	r24, 0x031E
    30e6:	90 91 1f 03 	lds	r25, 0x031F
    30ea:	8a 31       	cpi	r24, 0x1A	; 26
    30ec:	91 05       	cpc	r25, r1
    30ee:	3c f0       	brlt	.+14     	; 0x30fe <line_follow_mm+0x168>
            error = 6;
    30f0:	86 e0       	ldi	r24, 0x06	; 6
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	90 93 13 03 	sts	0x0313, r25
    30f8:	80 93 12 03 	sts	0x0312, r24
    30fc:	84 c0       	rjmp	.+264    	; 0x3206 <line_follow_mm+0x270>

        else if(sensorLeft > 17)
    30fe:	80 91 1e 03 	lds	r24, 0x031E
    3102:	90 91 1f 03 	lds	r25, 0x031F
    3106:	82 31       	cpi	r24, 0x12	; 18
    3108:	91 05       	cpc	r25, r1
    310a:	3c f0       	brlt	.+14     	; 0x311a <line_follow_mm+0x184>
            error = 5;
    310c:	85 e0       	ldi	r24, 0x05	; 5
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	90 93 13 03 	sts	0x0313, r25
    3114:	80 93 12 03 	sts	0x0312, r24
    3118:	76 c0       	rjmp	.+236    	; 0x3206 <line_follow_mm+0x270>

        else if(sensorLeft > 9)
    311a:	80 91 1e 03 	lds	r24, 0x031E
    311e:	90 91 1f 03 	lds	r25, 0x031F
    3122:	8a 30       	cpi	r24, 0x0A	; 10
    3124:	91 05       	cpc	r25, r1
    3126:	3c f0       	brlt	.+14     	; 0x3136 <line_follow_mm+0x1a0>
            error = 4;
    3128:	84 e0       	ldi	r24, 0x04	; 4
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	90 93 13 03 	sts	0x0313, r25
    3130:	80 93 12 03 	sts	0x0312, r24
    3134:	68 c0       	rjmp	.+208    	; 0x3206 <line_follow_mm+0x270>

        else if(sensorRight > 110)
    3136:	80 91 28 03 	lds	r24, 0x0328
    313a:	90 91 29 03 	lds	r25, 0x0329
    313e:	8f 36       	cpi	r24, 0x6F	; 111
    3140:	91 05       	cpc	r25, r1
    3142:	3c f0       	brlt	.+14     	; 0x3152 <line_follow_mm+0x1bc>
            error = -7;
    3144:	89 ef       	ldi	r24, 0xF9	; 249
    3146:	9f ef       	ldi	r25, 0xFF	; 255
    3148:	90 93 13 03 	sts	0x0313, r25
    314c:	80 93 12 03 	sts	0x0312, r24
    3150:	5a c0       	rjmp	.+180    	; 0x3206 <line_follow_mm+0x270>

        else if(sensorRight > 85)
    3152:	80 91 28 03 	lds	r24, 0x0328
    3156:	90 91 29 03 	lds	r25, 0x0329
    315a:	86 35       	cpi	r24, 0x56	; 86
    315c:	91 05       	cpc	r25, r1
    315e:	3c f0       	brlt	.+14     	; 0x316e <line_follow_mm+0x1d8>
            error = -6;
    3160:	8a ef       	ldi	r24, 0xFA	; 250
    3162:	9f ef       	ldi	r25, 0xFF	; 255
    3164:	90 93 13 03 	sts	0x0313, r25
    3168:	80 93 12 03 	sts	0x0312, r24
    316c:	4c c0       	rjmp	.+152    	; 0x3206 <line_follow_mm+0x270>

        else if(sensorRight > 55)
    316e:	80 91 28 03 	lds	r24, 0x0328
    3172:	90 91 29 03 	lds	r25, 0x0329
    3176:	88 33       	cpi	r24, 0x38	; 56
    3178:	91 05       	cpc	r25, r1
    317a:	3c f0       	brlt	.+14     	; 0x318a <line_follow_mm+0x1f4>
            error = -5;
    317c:	8b ef       	ldi	r24, 0xFB	; 251
    317e:	9f ef       	ldi	r25, 0xFF	; 255
    3180:	90 93 13 03 	sts	0x0313, r25
    3184:	80 93 12 03 	sts	0x0312, r24
    3188:	3e c0       	rjmp	.+124    	; 0x3206 <line_follow_mm+0x270>

        else if(sensorRight > 35)
    318a:	80 91 28 03 	lds	r24, 0x0328
    318e:	90 91 29 03 	lds	r25, 0x0329
    3192:	84 32       	cpi	r24, 0x24	; 36
    3194:	91 05       	cpc	r25, r1
    3196:	3c f0       	brlt	.+14     	; 0x31a6 <line_follow_mm+0x210>
            error = -4;
    3198:	8c ef       	ldi	r24, 0xFC	; 252
    319a:	9f ef       	ldi	r25, 0xFF	; 255
    319c:	90 93 13 03 	sts	0x0313, r25
    31a0:	80 93 12 03 	sts	0x0312, r24
    31a4:	30 c0       	rjmp	.+96     	; 0x3206 <line_follow_mm+0x270>

        else if(sensorRight > 25)
    31a6:	80 91 28 03 	lds	r24, 0x0328
    31aa:	90 91 29 03 	lds	r25, 0x0329
    31ae:	8a 31       	cpi	r24, 0x1A	; 26
    31b0:	91 05       	cpc	r25, r1
    31b2:	3c f0       	brlt	.+14     	; 0x31c2 <line_follow_mm+0x22c>
            error = -3;
    31b4:	8d ef       	ldi	r24, 0xFD	; 253
    31b6:	9f ef       	ldi	r25, 0xFF	; 255
    31b8:	90 93 13 03 	sts	0x0313, r25
    31bc:	80 93 12 03 	sts	0x0312, r24
    31c0:	22 c0       	rjmp	.+68     	; 0x3206 <line_follow_mm+0x270>

        else if(sensorRight > 18)
    31c2:	80 91 28 03 	lds	r24, 0x0328
    31c6:	90 91 29 03 	lds	r25, 0x0329
    31ca:	83 31       	cpi	r24, 0x13	; 19
    31cc:	91 05       	cpc	r25, r1
    31ce:	3c f0       	brlt	.+14     	; 0x31de <line_follow_mm+0x248>
            error = -2;
    31d0:	8e ef       	ldi	r24, 0xFE	; 254
    31d2:	9f ef       	ldi	r25, 0xFF	; 255
    31d4:	90 93 13 03 	sts	0x0313, r25
    31d8:	80 93 12 03 	sts	0x0312, r24
    31dc:	14 c0       	rjmp	.+40     	; 0x3206 <line_follow_mm+0x270>

        else if(sensorRight > 15)
    31de:	80 91 28 03 	lds	r24, 0x0328
    31e2:	90 91 29 03 	lds	r25, 0x0329
    31e6:	80 31       	cpi	r24, 0x10	; 16
    31e8:	91 05       	cpc	r25, r1
    31ea:	3c f0       	brlt	.+14     	; 0x31fa <line_follow_mm+0x264>
            error = -1;
    31ec:	8f ef       	ldi	r24, 0xFF	; 255
    31ee:	9f ef       	ldi	r25, 0xFF	; 255
    31f0:	90 93 13 03 	sts	0x0313, r25
    31f4:	80 93 12 03 	sts	0x0312, r24
    31f8:	06 c0       	rjmp	.+12     	; 0x3206 <line_follow_mm+0x270>

        else
            error = -100;
    31fa:	8c e9       	ldi	r24, 0x9C	; 156
    31fc:	9f ef       	ldi	r25, 0xFF	; 255
    31fe:	90 93 13 03 	sts	0x0313, r25
    3202:	80 93 12 03 	sts	0x0312, r24


        if(error > -100 && error < 100)
    3206:	80 91 12 03 	lds	r24, 0x0312
    320a:	90 91 13 03 	lds	r25, 0x0313
    320e:	2f ef       	ldi	r18, 0xFF	; 255
    3210:	8d 39       	cpi	r24, 0x9D	; 157
    3212:	92 07       	cpc	r25, r18
    3214:	0c f4       	brge	.+2      	; 0x3218 <line_follow_mm+0x282>
    3216:	54 c0       	rjmp	.+168    	; 0x32c0 <line_follow_mm+0x32a>
    3218:	80 91 12 03 	lds	r24, 0x0312
    321c:	90 91 13 03 	lds	r25, 0x0313
    3220:	84 36       	cpi	r24, 0x64	; 100
    3222:	91 05       	cpc	r25, r1
    3224:	0c f0       	brlt	.+2      	; 0x3228 <line_follow_mm+0x292>
    3226:	4c c0       	rjmp	.+152    	; 0x32c0 <line_follow_mm+0x32a>
        {
            leftSpeed = 150 - error*kp;
    3228:	20 91 12 03 	lds	r18, 0x0312
    322c:	30 91 13 03 	lds	r19, 0x0313
    3230:	80 91 00 02 	lds	r24, 0x0200
    3234:	90 91 01 02 	lds	r25, 0x0201
    3238:	a9 01       	movw	r20, r18
    323a:	48 9f       	mul	r20, r24
    323c:	90 01       	movw	r18, r0
    323e:	49 9f       	mul	r20, r25
    3240:	30 0d       	add	r19, r0
    3242:	58 9f       	mul	r21, r24
    3244:	30 0d       	add	r19, r0
    3246:	11 24       	eor	r1, r1
    3248:	86 e9       	ldi	r24, 0x96	; 150
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	82 1b       	sub	r24, r18
    324e:	93 0b       	sbc	r25, r19
    3250:	90 93 19 03 	sts	0x0319, r25
    3254:	80 93 18 03 	sts	0x0318, r24
            rightSpeed = 180 + error*kp;
    3258:	20 91 12 03 	lds	r18, 0x0312
    325c:	30 91 13 03 	lds	r19, 0x0313
    3260:	80 91 00 02 	lds	r24, 0x0200
    3264:	90 91 01 02 	lds	r25, 0x0201
    3268:	ac 01       	movw	r20, r24
    326a:	24 9f       	mul	r18, r20
    326c:	c0 01       	movw	r24, r0
    326e:	25 9f       	mul	r18, r21
    3270:	90 0d       	add	r25, r0
    3272:	34 9f       	mul	r19, r20
    3274:	90 0d       	add	r25, r0
    3276:	11 24       	eor	r1, r1
    3278:	8c 54       	subi	r24, 0x4C	; 76
    327a:	9f 4f       	sbci	r25, 0xFF	; 255
    327c:	90 93 25 03 	sts	0x0325, r25
    3280:	80 93 24 03 	sts	0x0324, r24

            if(error>0)
    3284:	80 91 12 03 	lds	r24, 0x0312
    3288:	90 91 13 03 	lds	r25, 0x0313
    328c:	18 16       	cp	r1, r24
    328e:	19 06       	cpc	r1, r25
    3290:	4c f4       	brge	.+18     	; 0x32a4 <line_follow_mm+0x30e>
            {
                rightSpeed += 10;
    3292:	80 91 24 03 	lds	r24, 0x0324
    3296:	90 91 25 03 	lds	r25, 0x0325
    329a:	0a 96       	adiw	r24, 0x0a	; 10
    329c:	90 93 25 03 	sts	0x0325, r25
    32a0:	80 93 24 03 	sts	0x0324, r24
            }
            velocity(leftSpeed, rightSpeed);
    32a4:	80 91 18 03 	lds	r24, 0x0318
    32a8:	90 91 19 03 	lds	r25, 0x0319
    32ac:	28 2f       	mov	r18, r24
    32ae:	80 91 24 03 	lds	r24, 0x0324
    32b2:	90 91 25 03 	lds	r25, 0x0325
    32b6:	98 2f       	mov	r25, r24
    32b8:	82 2f       	mov	r24, r18
    32ba:	69 2f       	mov	r22, r25
    32bc:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    int reqCount = distance/5.338;

    ShaftCountLeft = 0;
    forward();

    while(ShaftCountLeft < reqCount)
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
    32c2:	9a 81       	ldd	r25, Y+2	; 0x02
    32c4:	9c 01       	movw	r18, r24
    32c6:	44 27       	eor	r20, r20
    32c8:	37 fd       	sbrc	r19, 7
    32ca:	40 95       	com	r20
    32cc:	54 2f       	mov	r21, r20
    32ce:	80 91 0a 03 	lds	r24, 0x030A
    32d2:	90 91 0b 03 	lds	r25, 0x030B
    32d6:	a0 91 0c 03 	lds	r26, 0x030C
    32da:	b0 91 0d 03 	lds	r27, 0x030D
    32de:	82 17       	cp	r24, r18
    32e0:	93 07       	cpc	r25, r19
    32e2:	a4 07       	cpc	r26, r20
    32e4:	b5 07       	cpc	r27, r21
    32e6:	08 f4       	brcc	.+2      	; 0x32ea <line_follow_mm+0x354>
    32e8:	87 ce       	rjmp	.-754    	; 0x2ff8 <line_follow_mm+0x62>
                rightSpeed += 10;
            }
            velocity(leftSpeed, rightSpeed);
        }
    }
}
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	cf 91       	pop	r28
    32f4:	df 91       	pop	r29
    32f6:	08 95       	ret

000032f8 <__fixunssfsi>:
    32f8:	ef 92       	push	r14
    32fa:	ff 92       	push	r15
    32fc:	0f 93       	push	r16
    32fe:	1f 93       	push	r17
    3300:	7b 01       	movw	r14, r22
    3302:	8c 01       	movw	r16, r24
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	40 e0       	ldi	r20, 0x00	; 0
    330a:	5f e4       	ldi	r21, 0x4F	; 79
    330c:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <__gesf2>
    3310:	88 23       	and	r24, r24
    3312:	8c f0       	brlt	.+34     	; 0x3336 <__fixunssfsi+0x3e>
    3314:	c8 01       	movw	r24, r16
    3316:	b7 01       	movw	r22, r14
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	40 e0       	ldi	r20, 0x00	; 0
    331e:	5f e4       	ldi	r21, 0x4F	; 79
    3320:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <__subsf3>
    3324:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__fixsfsi>
    3328:	9b 01       	movw	r18, r22
    332a:	ac 01       	movw	r20, r24
    332c:	20 50       	subi	r18, 0x00	; 0
    332e:	30 40       	sbci	r19, 0x00	; 0
    3330:	40 40       	sbci	r20, 0x00	; 0
    3332:	50 48       	sbci	r21, 0x80	; 128
    3334:	06 c0       	rjmp	.+12     	; 0x3342 <__fixunssfsi+0x4a>
    3336:	c8 01       	movw	r24, r16
    3338:	b7 01       	movw	r22, r14
    333a:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__fixsfsi>
    333e:	9b 01       	movw	r18, r22
    3340:	ac 01       	movw	r20, r24
    3342:	b9 01       	movw	r22, r18
    3344:	ca 01       	movw	r24, r20
    3346:	1f 91       	pop	r17
    3348:	0f 91       	pop	r16
    334a:	ff 90       	pop	r15
    334c:	ef 90       	pop	r14
    334e:	08 95       	ret

00003350 <_fpadd_parts>:
    3350:	a0 e0       	ldi	r26, 0x00	; 0
    3352:	b0 e0       	ldi	r27, 0x00	; 0
    3354:	ee ea       	ldi	r30, 0xAE	; 174
    3356:	f9 e1       	ldi	r31, 0x19	; 25
    3358:	0c 94 bc 20 	jmp	0x4178	; 0x4178 <__prologue_saves__>
    335c:	dc 01       	movw	r26, r24
    335e:	2b 01       	movw	r4, r22
    3360:	fa 01       	movw	r30, r20
    3362:	9c 91       	ld	r25, X
    3364:	92 30       	cpi	r25, 0x02	; 2
    3366:	08 f4       	brcc	.+2      	; 0x336a <_fpadd_parts+0x1a>
    3368:	39 c1       	rjmp	.+626    	; 0x35dc <_fpadd_parts+0x28c>
    336a:	eb 01       	movw	r28, r22
    336c:	88 81       	ld	r24, Y
    336e:	82 30       	cpi	r24, 0x02	; 2
    3370:	08 f4       	brcc	.+2      	; 0x3374 <_fpadd_parts+0x24>
    3372:	33 c1       	rjmp	.+614    	; 0x35da <_fpadd_parts+0x28a>
    3374:	94 30       	cpi	r25, 0x04	; 4
    3376:	69 f4       	brne	.+26     	; 0x3392 <_fpadd_parts+0x42>
    3378:	84 30       	cpi	r24, 0x04	; 4
    337a:	09 f0       	breq	.+2      	; 0x337e <_fpadd_parts+0x2e>
    337c:	2f c1       	rjmp	.+606    	; 0x35dc <_fpadd_parts+0x28c>
    337e:	11 96       	adiw	r26, 0x01	; 1
    3380:	9c 91       	ld	r25, X
    3382:	11 97       	sbiw	r26, 0x01	; 1
    3384:	89 81       	ldd	r24, Y+1	; 0x01
    3386:	98 17       	cp	r25, r24
    3388:	09 f4       	brne	.+2      	; 0x338c <_fpadd_parts+0x3c>
    338a:	28 c1       	rjmp	.+592    	; 0x35dc <_fpadd_parts+0x28c>
    338c:	a2 e0       	ldi	r26, 0x02	; 2
    338e:	b2 e0       	ldi	r27, 0x02	; 2
    3390:	25 c1       	rjmp	.+586    	; 0x35dc <_fpadd_parts+0x28c>
    3392:	84 30       	cpi	r24, 0x04	; 4
    3394:	09 f4       	brne	.+2      	; 0x3398 <_fpadd_parts+0x48>
    3396:	21 c1       	rjmp	.+578    	; 0x35da <_fpadd_parts+0x28a>
    3398:	82 30       	cpi	r24, 0x02	; 2
    339a:	a9 f4       	brne	.+42     	; 0x33c6 <_fpadd_parts+0x76>
    339c:	92 30       	cpi	r25, 0x02	; 2
    339e:	09 f0       	breq	.+2      	; 0x33a2 <_fpadd_parts+0x52>
    33a0:	1d c1       	rjmp	.+570    	; 0x35dc <_fpadd_parts+0x28c>
    33a2:	9a 01       	movw	r18, r20
    33a4:	ad 01       	movw	r20, r26
    33a6:	88 e0       	ldi	r24, 0x08	; 8
    33a8:	ea 01       	movw	r28, r20
    33aa:	09 90       	ld	r0, Y+
    33ac:	ae 01       	movw	r20, r28
    33ae:	e9 01       	movw	r28, r18
    33b0:	09 92       	st	Y+, r0
    33b2:	9e 01       	movw	r18, r28
    33b4:	81 50       	subi	r24, 0x01	; 1
    33b6:	c1 f7       	brne	.-16     	; 0x33a8 <_fpadd_parts+0x58>
    33b8:	e2 01       	movw	r28, r4
    33ba:	89 81       	ldd	r24, Y+1	; 0x01
    33bc:	11 96       	adiw	r26, 0x01	; 1
    33be:	9c 91       	ld	r25, X
    33c0:	89 23       	and	r24, r25
    33c2:	81 83       	std	Z+1, r24	; 0x01
    33c4:	08 c1       	rjmp	.+528    	; 0x35d6 <_fpadd_parts+0x286>
    33c6:	92 30       	cpi	r25, 0x02	; 2
    33c8:	09 f4       	brne	.+2      	; 0x33cc <_fpadd_parts+0x7c>
    33ca:	07 c1       	rjmp	.+526    	; 0x35da <_fpadd_parts+0x28a>
    33cc:	12 96       	adiw	r26, 0x02	; 2
    33ce:	2d 90       	ld	r2, X+
    33d0:	3c 90       	ld	r3, X
    33d2:	13 97       	sbiw	r26, 0x03	; 3
    33d4:	eb 01       	movw	r28, r22
    33d6:	8a 81       	ldd	r24, Y+2	; 0x02
    33d8:	9b 81       	ldd	r25, Y+3	; 0x03
    33da:	14 96       	adiw	r26, 0x04	; 4
    33dc:	ad 90       	ld	r10, X+
    33de:	bd 90       	ld	r11, X+
    33e0:	cd 90       	ld	r12, X+
    33e2:	dc 90       	ld	r13, X
    33e4:	17 97       	sbiw	r26, 0x07	; 7
    33e6:	ec 80       	ldd	r14, Y+4	; 0x04
    33e8:	fd 80       	ldd	r15, Y+5	; 0x05
    33ea:	0e 81       	ldd	r16, Y+6	; 0x06
    33ec:	1f 81       	ldd	r17, Y+7	; 0x07
    33ee:	91 01       	movw	r18, r2
    33f0:	28 1b       	sub	r18, r24
    33f2:	39 0b       	sbc	r19, r25
    33f4:	b9 01       	movw	r22, r18
    33f6:	37 ff       	sbrs	r19, 7
    33f8:	04 c0       	rjmp	.+8      	; 0x3402 <_fpadd_parts+0xb2>
    33fa:	66 27       	eor	r22, r22
    33fc:	77 27       	eor	r23, r23
    33fe:	62 1b       	sub	r22, r18
    3400:	73 0b       	sbc	r23, r19
    3402:	60 32       	cpi	r22, 0x20	; 32
    3404:	71 05       	cpc	r23, r1
    3406:	0c f0       	brlt	.+2      	; 0x340a <_fpadd_parts+0xba>
    3408:	61 c0       	rjmp	.+194    	; 0x34cc <_fpadd_parts+0x17c>
    340a:	12 16       	cp	r1, r18
    340c:	13 06       	cpc	r1, r19
    340e:	6c f5       	brge	.+90     	; 0x346a <_fpadd_parts+0x11a>
    3410:	37 01       	movw	r6, r14
    3412:	48 01       	movw	r8, r16
    3414:	06 2e       	mov	r0, r22
    3416:	04 c0       	rjmp	.+8      	; 0x3420 <_fpadd_parts+0xd0>
    3418:	96 94       	lsr	r9
    341a:	87 94       	ror	r8
    341c:	77 94       	ror	r7
    341e:	67 94       	ror	r6
    3420:	0a 94       	dec	r0
    3422:	d2 f7       	brpl	.-12     	; 0x3418 <_fpadd_parts+0xc8>
    3424:	21 e0       	ldi	r18, 0x01	; 1
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	40 e0       	ldi	r20, 0x00	; 0
    342a:	50 e0       	ldi	r21, 0x00	; 0
    342c:	04 c0       	rjmp	.+8      	; 0x3436 <_fpadd_parts+0xe6>
    342e:	22 0f       	add	r18, r18
    3430:	33 1f       	adc	r19, r19
    3432:	44 1f       	adc	r20, r20
    3434:	55 1f       	adc	r21, r21
    3436:	6a 95       	dec	r22
    3438:	d2 f7       	brpl	.-12     	; 0x342e <_fpadd_parts+0xde>
    343a:	21 50       	subi	r18, 0x01	; 1
    343c:	30 40       	sbci	r19, 0x00	; 0
    343e:	40 40       	sbci	r20, 0x00	; 0
    3440:	50 40       	sbci	r21, 0x00	; 0
    3442:	2e 21       	and	r18, r14
    3444:	3f 21       	and	r19, r15
    3446:	40 23       	and	r20, r16
    3448:	51 23       	and	r21, r17
    344a:	21 15       	cp	r18, r1
    344c:	31 05       	cpc	r19, r1
    344e:	41 05       	cpc	r20, r1
    3450:	51 05       	cpc	r21, r1
    3452:	21 f0       	breq	.+8      	; 0x345c <_fpadd_parts+0x10c>
    3454:	21 e0       	ldi	r18, 0x01	; 1
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	40 e0       	ldi	r20, 0x00	; 0
    345a:	50 e0       	ldi	r21, 0x00	; 0
    345c:	79 01       	movw	r14, r18
    345e:	8a 01       	movw	r16, r20
    3460:	e6 28       	or	r14, r6
    3462:	f7 28       	or	r15, r7
    3464:	08 29       	or	r16, r8
    3466:	19 29       	or	r17, r9
    3468:	3c c0       	rjmp	.+120    	; 0x34e2 <_fpadd_parts+0x192>
    346a:	23 2b       	or	r18, r19
    346c:	d1 f1       	breq	.+116    	; 0x34e2 <_fpadd_parts+0x192>
    346e:	26 0e       	add	r2, r22
    3470:	37 1e       	adc	r3, r23
    3472:	35 01       	movw	r6, r10
    3474:	46 01       	movw	r8, r12
    3476:	06 2e       	mov	r0, r22
    3478:	04 c0       	rjmp	.+8      	; 0x3482 <_fpadd_parts+0x132>
    347a:	96 94       	lsr	r9
    347c:	87 94       	ror	r8
    347e:	77 94       	ror	r7
    3480:	67 94       	ror	r6
    3482:	0a 94       	dec	r0
    3484:	d2 f7       	brpl	.-12     	; 0x347a <_fpadd_parts+0x12a>
    3486:	21 e0       	ldi	r18, 0x01	; 1
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	40 e0       	ldi	r20, 0x00	; 0
    348c:	50 e0       	ldi	r21, 0x00	; 0
    348e:	04 c0       	rjmp	.+8      	; 0x3498 <_fpadd_parts+0x148>
    3490:	22 0f       	add	r18, r18
    3492:	33 1f       	adc	r19, r19
    3494:	44 1f       	adc	r20, r20
    3496:	55 1f       	adc	r21, r21
    3498:	6a 95       	dec	r22
    349a:	d2 f7       	brpl	.-12     	; 0x3490 <_fpadd_parts+0x140>
    349c:	21 50       	subi	r18, 0x01	; 1
    349e:	30 40       	sbci	r19, 0x00	; 0
    34a0:	40 40       	sbci	r20, 0x00	; 0
    34a2:	50 40       	sbci	r21, 0x00	; 0
    34a4:	2a 21       	and	r18, r10
    34a6:	3b 21       	and	r19, r11
    34a8:	4c 21       	and	r20, r12
    34aa:	5d 21       	and	r21, r13
    34ac:	21 15       	cp	r18, r1
    34ae:	31 05       	cpc	r19, r1
    34b0:	41 05       	cpc	r20, r1
    34b2:	51 05       	cpc	r21, r1
    34b4:	21 f0       	breq	.+8      	; 0x34be <_fpadd_parts+0x16e>
    34b6:	21 e0       	ldi	r18, 0x01	; 1
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	40 e0       	ldi	r20, 0x00	; 0
    34bc:	50 e0       	ldi	r21, 0x00	; 0
    34be:	59 01       	movw	r10, r18
    34c0:	6a 01       	movw	r12, r20
    34c2:	a6 28       	or	r10, r6
    34c4:	b7 28       	or	r11, r7
    34c6:	c8 28       	or	r12, r8
    34c8:	d9 28       	or	r13, r9
    34ca:	0b c0       	rjmp	.+22     	; 0x34e2 <_fpadd_parts+0x192>
    34cc:	82 15       	cp	r24, r2
    34ce:	93 05       	cpc	r25, r3
    34d0:	2c f0       	brlt	.+10     	; 0x34dc <_fpadd_parts+0x18c>
    34d2:	1c 01       	movw	r2, r24
    34d4:	aa 24       	eor	r10, r10
    34d6:	bb 24       	eor	r11, r11
    34d8:	65 01       	movw	r12, r10
    34da:	03 c0       	rjmp	.+6      	; 0x34e2 <_fpadd_parts+0x192>
    34dc:	ee 24       	eor	r14, r14
    34de:	ff 24       	eor	r15, r15
    34e0:	87 01       	movw	r16, r14
    34e2:	11 96       	adiw	r26, 0x01	; 1
    34e4:	9c 91       	ld	r25, X
    34e6:	d2 01       	movw	r26, r4
    34e8:	11 96       	adiw	r26, 0x01	; 1
    34ea:	8c 91       	ld	r24, X
    34ec:	98 17       	cp	r25, r24
    34ee:	09 f4       	brne	.+2      	; 0x34f2 <_fpadd_parts+0x1a2>
    34f0:	45 c0       	rjmp	.+138    	; 0x357c <_fpadd_parts+0x22c>
    34f2:	99 23       	and	r25, r25
    34f4:	39 f0       	breq	.+14     	; 0x3504 <_fpadd_parts+0x1b4>
    34f6:	a8 01       	movw	r20, r16
    34f8:	97 01       	movw	r18, r14
    34fa:	2a 19       	sub	r18, r10
    34fc:	3b 09       	sbc	r19, r11
    34fe:	4c 09       	sbc	r20, r12
    3500:	5d 09       	sbc	r21, r13
    3502:	06 c0       	rjmp	.+12     	; 0x3510 <_fpadd_parts+0x1c0>
    3504:	a6 01       	movw	r20, r12
    3506:	95 01       	movw	r18, r10
    3508:	2e 19       	sub	r18, r14
    350a:	3f 09       	sbc	r19, r15
    350c:	40 0b       	sbc	r20, r16
    350e:	51 0b       	sbc	r21, r17
    3510:	57 fd       	sbrc	r21, 7
    3512:	08 c0       	rjmp	.+16     	; 0x3524 <_fpadd_parts+0x1d4>
    3514:	11 82       	std	Z+1, r1	; 0x01
    3516:	33 82       	std	Z+3, r3	; 0x03
    3518:	22 82       	std	Z+2, r2	; 0x02
    351a:	24 83       	std	Z+4, r18	; 0x04
    351c:	35 83       	std	Z+5, r19	; 0x05
    351e:	46 83       	std	Z+6, r20	; 0x06
    3520:	57 83       	std	Z+7, r21	; 0x07
    3522:	1d c0       	rjmp	.+58     	; 0x355e <_fpadd_parts+0x20e>
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	81 83       	std	Z+1, r24	; 0x01
    3528:	33 82       	std	Z+3, r3	; 0x03
    352a:	22 82       	std	Z+2, r2	; 0x02
    352c:	88 27       	eor	r24, r24
    352e:	99 27       	eor	r25, r25
    3530:	dc 01       	movw	r26, r24
    3532:	82 1b       	sub	r24, r18
    3534:	93 0b       	sbc	r25, r19
    3536:	a4 0b       	sbc	r26, r20
    3538:	b5 0b       	sbc	r27, r21
    353a:	84 83       	std	Z+4, r24	; 0x04
    353c:	95 83       	std	Z+5, r25	; 0x05
    353e:	a6 83       	std	Z+6, r26	; 0x06
    3540:	b7 83       	std	Z+7, r27	; 0x07
    3542:	0d c0       	rjmp	.+26     	; 0x355e <_fpadd_parts+0x20e>
    3544:	22 0f       	add	r18, r18
    3546:	33 1f       	adc	r19, r19
    3548:	44 1f       	adc	r20, r20
    354a:	55 1f       	adc	r21, r21
    354c:	24 83       	std	Z+4, r18	; 0x04
    354e:	35 83       	std	Z+5, r19	; 0x05
    3550:	46 83       	std	Z+6, r20	; 0x06
    3552:	57 83       	std	Z+7, r21	; 0x07
    3554:	82 81       	ldd	r24, Z+2	; 0x02
    3556:	93 81       	ldd	r25, Z+3	; 0x03
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	93 83       	std	Z+3, r25	; 0x03
    355c:	82 83       	std	Z+2, r24	; 0x02
    355e:	24 81       	ldd	r18, Z+4	; 0x04
    3560:	35 81       	ldd	r19, Z+5	; 0x05
    3562:	46 81       	ldd	r20, Z+6	; 0x06
    3564:	57 81       	ldd	r21, Z+7	; 0x07
    3566:	da 01       	movw	r26, r20
    3568:	c9 01       	movw	r24, r18
    356a:	01 97       	sbiw	r24, 0x01	; 1
    356c:	a1 09       	sbc	r26, r1
    356e:	b1 09       	sbc	r27, r1
    3570:	8f 5f       	subi	r24, 0xFF	; 255
    3572:	9f 4f       	sbci	r25, 0xFF	; 255
    3574:	af 4f       	sbci	r26, 0xFF	; 255
    3576:	bf 43       	sbci	r27, 0x3F	; 63
    3578:	28 f3       	brcs	.-54     	; 0x3544 <_fpadd_parts+0x1f4>
    357a:	0b c0       	rjmp	.+22     	; 0x3592 <_fpadd_parts+0x242>
    357c:	91 83       	std	Z+1, r25	; 0x01
    357e:	33 82       	std	Z+3, r3	; 0x03
    3580:	22 82       	std	Z+2, r2	; 0x02
    3582:	ea 0c       	add	r14, r10
    3584:	fb 1c       	adc	r15, r11
    3586:	0c 1d       	adc	r16, r12
    3588:	1d 1d       	adc	r17, r13
    358a:	e4 82       	std	Z+4, r14	; 0x04
    358c:	f5 82       	std	Z+5, r15	; 0x05
    358e:	06 83       	std	Z+6, r16	; 0x06
    3590:	17 83       	std	Z+7, r17	; 0x07
    3592:	83 e0       	ldi	r24, 0x03	; 3
    3594:	80 83       	st	Z, r24
    3596:	24 81       	ldd	r18, Z+4	; 0x04
    3598:	35 81       	ldd	r19, Z+5	; 0x05
    359a:	46 81       	ldd	r20, Z+6	; 0x06
    359c:	57 81       	ldd	r21, Z+7	; 0x07
    359e:	57 ff       	sbrs	r21, 7
    35a0:	1a c0       	rjmp	.+52     	; 0x35d6 <_fpadd_parts+0x286>
    35a2:	c9 01       	movw	r24, r18
    35a4:	aa 27       	eor	r26, r26
    35a6:	97 fd       	sbrc	r25, 7
    35a8:	a0 95       	com	r26
    35aa:	ba 2f       	mov	r27, r26
    35ac:	81 70       	andi	r24, 0x01	; 1
    35ae:	90 70       	andi	r25, 0x00	; 0
    35b0:	a0 70       	andi	r26, 0x00	; 0
    35b2:	b0 70       	andi	r27, 0x00	; 0
    35b4:	56 95       	lsr	r21
    35b6:	47 95       	ror	r20
    35b8:	37 95       	ror	r19
    35ba:	27 95       	ror	r18
    35bc:	82 2b       	or	r24, r18
    35be:	93 2b       	or	r25, r19
    35c0:	a4 2b       	or	r26, r20
    35c2:	b5 2b       	or	r27, r21
    35c4:	84 83       	std	Z+4, r24	; 0x04
    35c6:	95 83       	std	Z+5, r25	; 0x05
    35c8:	a6 83       	std	Z+6, r26	; 0x06
    35ca:	b7 83       	std	Z+7, r27	; 0x07
    35cc:	82 81       	ldd	r24, Z+2	; 0x02
    35ce:	93 81       	ldd	r25, Z+3	; 0x03
    35d0:	01 96       	adiw	r24, 0x01	; 1
    35d2:	93 83       	std	Z+3, r25	; 0x03
    35d4:	82 83       	std	Z+2, r24	; 0x02
    35d6:	df 01       	movw	r26, r30
    35d8:	01 c0       	rjmp	.+2      	; 0x35dc <_fpadd_parts+0x28c>
    35da:	d2 01       	movw	r26, r4
    35dc:	cd 01       	movw	r24, r26
    35de:	cd b7       	in	r28, 0x3d	; 61
    35e0:	de b7       	in	r29, 0x3e	; 62
    35e2:	e2 e1       	ldi	r30, 0x12	; 18
    35e4:	0c 94 d8 20 	jmp	0x41b0	; 0x41b0 <__epilogue_restores__>

000035e8 <__subsf3>:
    35e8:	a0 e2       	ldi	r26, 0x20	; 32
    35ea:	b0 e0       	ldi	r27, 0x00	; 0
    35ec:	ea ef       	ldi	r30, 0xFA	; 250
    35ee:	fa e1       	ldi	r31, 0x1A	; 26
    35f0:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__prologue_saves__+0x18>
    35f4:	69 83       	std	Y+1, r22	; 0x01
    35f6:	7a 83       	std	Y+2, r23	; 0x02
    35f8:	8b 83       	std	Y+3, r24	; 0x03
    35fa:	9c 83       	std	Y+4, r25	; 0x04
    35fc:	2d 83       	std	Y+5, r18	; 0x05
    35fe:	3e 83       	std	Y+6, r19	; 0x06
    3600:	4f 83       	std	Y+7, r20	; 0x07
    3602:	58 87       	std	Y+8, r21	; 0x08
    3604:	e9 e0       	ldi	r30, 0x09	; 9
    3606:	ee 2e       	mov	r14, r30
    3608:	f1 2c       	mov	r15, r1
    360a:	ec 0e       	add	r14, r28
    360c:	fd 1e       	adc	r15, r29
    360e:	ce 01       	movw	r24, r28
    3610:	01 96       	adiw	r24, 0x01	; 1
    3612:	b7 01       	movw	r22, r14
    3614:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__unpack_f>
    3618:	8e 01       	movw	r16, r28
    361a:	0f 5e       	subi	r16, 0xEF	; 239
    361c:	1f 4f       	sbci	r17, 0xFF	; 255
    361e:	ce 01       	movw	r24, r28
    3620:	05 96       	adiw	r24, 0x05	; 5
    3622:	b8 01       	movw	r22, r16
    3624:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__unpack_f>
    3628:	8a 89       	ldd	r24, Y+18	; 0x12
    362a:	91 e0       	ldi	r25, 0x01	; 1
    362c:	89 27       	eor	r24, r25
    362e:	8a 8b       	std	Y+18, r24	; 0x12
    3630:	c7 01       	movw	r24, r14
    3632:	b8 01       	movw	r22, r16
    3634:	ae 01       	movw	r20, r28
    3636:	47 5e       	subi	r20, 0xE7	; 231
    3638:	5f 4f       	sbci	r21, 0xFF	; 255
    363a:	0e 94 a8 19 	call	0x3350	; 0x3350 <_fpadd_parts>
    363e:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__pack_f>
    3642:	a0 96       	adiw	r28, 0x20	; 32
    3644:	e6 e0       	ldi	r30, 0x06	; 6
    3646:	0c 94 e4 20 	jmp	0x41c8	; 0x41c8 <__epilogue_restores__+0x18>

0000364a <__addsf3>:
    364a:	a0 e2       	ldi	r26, 0x20	; 32
    364c:	b0 e0       	ldi	r27, 0x00	; 0
    364e:	eb e2       	ldi	r30, 0x2B	; 43
    3650:	fb e1       	ldi	r31, 0x1B	; 27
    3652:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__prologue_saves__+0x18>
    3656:	69 83       	std	Y+1, r22	; 0x01
    3658:	7a 83       	std	Y+2, r23	; 0x02
    365a:	8b 83       	std	Y+3, r24	; 0x03
    365c:	9c 83       	std	Y+4, r25	; 0x04
    365e:	2d 83       	std	Y+5, r18	; 0x05
    3660:	3e 83       	std	Y+6, r19	; 0x06
    3662:	4f 83       	std	Y+7, r20	; 0x07
    3664:	58 87       	std	Y+8, r21	; 0x08
    3666:	f9 e0       	ldi	r31, 0x09	; 9
    3668:	ef 2e       	mov	r14, r31
    366a:	f1 2c       	mov	r15, r1
    366c:	ec 0e       	add	r14, r28
    366e:	fd 1e       	adc	r15, r29
    3670:	ce 01       	movw	r24, r28
    3672:	01 96       	adiw	r24, 0x01	; 1
    3674:	b7 01       	movw	r22, r14
    3676:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__unpack_f>
    367a:	8e 01       	movw	r16, r28
    367c:	0f 5e       	subi	r16, 0xEF	; 239
    367e:	1f 4f       	sbci	r17, 0xFF	; 255
    3680:	ce 01       	movw	r24, r28
    3682:	05 96       	adiw	r24, 0x05	; 5
    3684:	b8 01       	movw	r22, r16
    3686:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__unpack_f>
    368a:	c7 01       	movw	r24, r14
    368c:	b8 01       	movw	r22, r16
    368e:	ae 01       	movw	r20, r28
    3690:	47 5e       	subi	r20, 0xE7	; 231
    3692:	5f 4f       	sbci	r21, 0xFF	; 255
    3694:	0e 94 a8 19 	call	0x3350	; 0x3350 <_fpadd_parts>
    3698:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__pack_f>
    369c:	a0 96       	adiw	r28, 0x20	; 32
    369e:	e6 e0       	ldi	r30, 0x06	; 6
    36a0:	0c 94 e4 20 	jmp	0x41c8	; 0x41c8 <__epilogue_restores__+0x18>

000036a4 <__mulsf3>:
    36a4:	a0 e2       	ldi	r26, 0x20	; 32
    36a6:	b0 e0       	ldi	r27, 0x00	; 0
    36a8:	e8 e5       	ldi	r30, 0x58	; 88
    36aa:	fb e1       	ldi	r31, 0x1B	; 27
    36ac:	0c 94 bc 20 	jmp	0x4178	; 0x4178 <__prologue_saves__>
    36b0:	69 83       	std	Y+1, r22	; 0x01
    36b2:	7a 83       	std	Y+2, r23	; 0x02
    36b4:	8b 83       	std	Y+3, r24	; 0x03
    36b6:	9c 83       	std	Y+4, r25	; 0x04
    36b8:	2d 83       	std	Y+5, r18	; 0x05
    36ba:	3e 83       	std	Y+6, r19	; 0x06
    36bc:	4f 83       	std	Y+7, r20	; 0x07
    36be:	58 87       	std	Y+8, r21	; 0x08
    36c0:	ce 01       	movw	r24, r28
    36c2:	01 96       	adiw	r24, 0x01	; 1
    36c4:	be 01       	movw	r22, r28
    36c6:	67 5f       	subi	r22, 0xF7	; 247
    36c8:	7f 4f       	sbci	r23, 0xFF	; 255
    36ca:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__unpack_f>
    36ce:	ce 01       	movw	r24, r28
    36d0:	05 96       	adiw	r24, 0x05	; 5
    36d2:	be 01       	movw	r22, r28
    36d4:	6f 5e       	subi	r22, 0xEF	; 239
    36d6:	7f 4f       	sbci	r23, 0xFF	; 255
    36d8:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__unpack_f>
    36dc:	99 85       	ldd	r25, Y+9	; 0x09
    36de:	92 30       	cpi	r25, 0x02	; 2
    36e0:	88 f0       	brcs	.+34     	; 0x3704 <__mulsf3+0x60>
    36e2:	89 89       	ldd	r24, Y+17	; 0x11
    36e4:	82 30       	cpi	r24, 0x02	; 2
    36e6:	c8 f0       	brcs	.+50     	; 0x371a <__mulsf3+0x76>
    36e8:	94 30       	cpi	r25, 0x04	; 4
    36ea:	19 f4       	brne	.+6      	; 0x36f2 <__mulsf3+0x4e>
    36ec:	82 30       	cpi	r24, 0x02	; 2
    36ee:	51 f4       	brne	.+20     	; 0x3704 <__mulsf3+0x60>
    36f0:	04 c0       	rjmp	.+8      	; 0x36fa <__mulsf3+0x56>
    36f2:	84 30       	cpi	r24, 0x04	; 4
    36f4:	29 f4       	brne	.+10     	; 0x3700 <__mulsf3+0x5c>
    36f6:	92 30       	cpi	r25, 0x02	; 2
    36f8:	81 f4       	brne	.+32     	; 0x371a <__mulsf3+0x76>
    36fa:	82 e0       	ldi	r24, 0x02	; 2
    36fc:	92 e0       	ldi	r25, 0x02	; 2
    36fe:	c6 c0       	rjmp	.+396    	; 0x388c <__mulsf3+0x1e8>
    3700:	92 30       	cpi	r25, 0x02	; 2
    3702:	49 f4       	brne	.+18     	; 0x3716 <__mulsf3+0x72>
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	9a 85       	ldd	r25, Y+10	; 0x0a
    3708:	8a 89       	ldd	r24, Y+18	; 0x12
    370a:	98 13       	cpse	r25, r24
    370c:	21 e0       	ldi	r18, 0x01	; 1
    370e:	2a 87       	std	Y+10, r18	; 0x0a
    3710:	ce 01       	movw	r24, r28
    3712:	09 96       	adiw	r24, 0x09	; 9
    3714:	bb c0       	rjmp	.+374    	; 0x388c <__mulsf3+0x1e8>
    3716:	82 30       	cpi	r24, 0x02	; 2
    3718:	49 f4       	brne	.+18     	; 0x372c <__mulsf3+0x88>
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	9a 85       	ldd	r25, Y+10	; 0x0a
    371e:	8a 89       	ldd	r24, Y+18	; 0x12
    3720:	98 13       	cpse	r25, r24
    3722:	21 e0       	ldi	r18, 0x01	; 1
    3724:	2a 8b       	std	Y+18, r18	; 0x12
    3726:	ce 01       	movw	r24, r28
    3728:	41 96       	adiw	r24, 0x11	; 17
    372a:	b0 c0       	rjmp	.+352    	; 0x388c <__mulsf3+0x1e8>
    372c:	2d 84       	ldd	r2, Y+13	; 0x0d
    372e:	3e 84       	ldd	r3, Y+14	; 0x0e
    3730:	4f 84       	ldd	r4, Y+15	; 0x0f
    3732:	58 88       	ldd	r5, Y+16	; 0x10
    3734:	6d 88       	ldd	r6, Y+21	; 0x15
    3736:	7e 88       	ldd	r7, Y+22	; 0x16
    3738:	8f 88       	ldd	r8, Y+23	; 0x17
    373a:	98 8c       	ldd	r9, Y+24	; 0x18
    373c:	ee 24       	eor	r14, r14
    373e:	ff 24       	eor	r15, r15
    3740:	87 01       	movw	r16, r14
    3742:	aa 24       	eor	r10, r10
    3744:	bb 24       	eor	r11, r11
    3746:	65 01       	movw	r12, r10
    3748:	40 e0       	ldi	r20, 0x00	; 0
    374a:	50 e0       	ldi	r21, 0x00	; 0
    374c:	60 e0       	ldi	r22, 0x00	; 0
    374e:	70 e0       	ldi	r23, 0x00	; 0
    3750:	e0 e0       	ldi	r30, 0x00	; 0
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	c1 01       	movw	r24, r2
    3756:	81 70       	andi	r24, 0x01	; 1
    3758:	90 70       	andi	r25, 0x00	; 0
    375a:	89 2b       	or	r24, r25
    375c:	e9 f0       	breq	.+58     	; 0x3798 <__mulsf3+0xf4>
    375e:	e6 0c       	add	r14, r6
    3760:	f7 1c       	adc	r15, r7
    3762:	08 1d       	adc	r16, r8
    3764:	19 1d       	adc	r17, r9
    3766:	9a 01       	movw	r18, r20
    3768:	ab 01       	movw	r20, r22
    376a:	2a 0d       	add	r18, r10
    376c:	3b 1d       	adc	r19, r11
    376e:	4c 1d       	adc	r20, r12
    3770:	5d 1d       	adc	r21, r13
    3772:	80 e0       	ldi	r24, 0x00	; 0
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	a0 e0       	ldi	r26, 0x00	; 0
    3778:	b0 e0       	ldi	r27, 0x00	; 0
    377a:	e6 14       	cp	r14, r6
    377c:	f7 04       	cpc	r15, r7
    377e:	08 05       	cpc	r16, r8
    3780:	19 05       	cpc	r17, r9
    3782:	20 f4       	brcc	.+8      	; 0x378c <__mulsf3+0xe8>
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	a0 e0       	ldi	r26, 0x00	; 0
    378a:	b0 e0       	ldi	r27, 0x00	; 0
    378c:	ba 01       	movw	r22, r20
    378e:	a9 01       	movw	r20, r18
    3790:	48 0f       	add	r20, r24
    3792:	59 1f       	adc	r21, r25
    3794:	6a 1f       	adc	r22, r26
    3796:	7b 1f       	adc	r23, r27
    3798:	aa 0c       	add	r10, r10
    379a:	bb 1c       	adc	r11, r11
    379c:	cc 1c       	adc	r12, r12
    379e:	dd 1c       	adc	r13, r13
    37a0:	97 fe       	sbrs	r9, 7
    37a2:	08 c0       	rjmp	.+16     	; 0x37b4 <__mulsf3+0x110>
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	a0 e0       	ldi	r26, 0x00	; 0
    37aa:	b0 e0       	ldi	r27, 0x00	; 0
    37ac:	a8 2a       	or	r10, r24
    37ae:	b9 2a       	or	r11, r25
    37b0:	ca 2a       	or	r12, r26
    37b2:	db 2a       	or	r13, r27
    37b4:	31 96       	adiw	r30, 0x01	; 1
    37b6:	e0 32       	cpi	r30, 0x20	; 32
    37b8:	f1 05       	cpc	r31, r1
    37ba:	49 f0       	breq	.+18     	; 0x37ce <__mulsf3+0x12a>
    37bc:	66 0c       	add	r6, r6
    37be:	77 1c       	adc	r7, r7
    37c0:	88 1c       	adc	r8, r8
    37c2:	99 1c       	adc	r9, r9
    37c4:	56 94       	lsr	r5
    37c6:	47 94       	ror	r4
    37c8:	37 94       	ror	r3
    37ca:	27 94       	ror	r2
    37cc:	c3 cf       	rjmp	.-122    	; 0x3754 <__mulsf3+0xb0>
    37ce:	fa 85       	ldd	r31, Y+10	; 0x0a
    37d0:	ea 89       	ldd	r30, Y+18	; 0x12
    37d2:	2b 89       	ldd	r18, Y+19	; 0x13
    37d4:	3c 89       	ldd	r19, Y+20	; 0x14
    37d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    37d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    37da:	28 0f       	add	r18, r24
    37dc:	39 1f       	adc	r19, r25
    37de:	2e 5f       	subi	r18, 0xFE	; 254
    37e0:	3f 4f       	sbci	r19, 0xFF	; 255
    37e2:	17 c0       	rjmp	.+46     	; 0x3812 <__mulsf3+0x16e>
    37e4:	ca 01       	movw	r24, r20
    37e6:	81 70       	andi	r24, 0x01	; 1
    37e8:	90 70       	andi	r25, 0x00	; 0
    37ea:	89 2b       	or	r24, r25
    37ec:	61 f0       	breq	.+24     	; 0x3806 <__mulsf3+0x162>
    37ee:	16 95       	lsr	r17
    37f0:	07 95       	ror	r16
    37f2:	f7 94       	ror	r15
    37f4:	e7 94       	ror	r14
    37f6:	80 e0       	ldi	r24, 0x00	; 0
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	a0 e0       	ldi	r26, 0x00	; 0
    37fc:	b0 e8       	ldi	r27, 0x80	; 128
    37fe:	e8 2a       	or	r14, r24
    3800:	f9 2a       	or	r15, r25
    3802:	0a 2b       	or	r16, r26
    3804:	1b 2b       	or	r17, r27
    3806:	76 95       	lsr	r23
    3808:	67 95       	ror	r22
    380a:	57 95       	ror	r21
    380c:	47 95       	ror	r20
    380e:	2f 5f       	subi	r18, 0xFF	; 255
    3810:	3f 4f       	sbci	r19, 0xFF	; 255
    3812:	77 fd       	sbrc	r23, 7
    3814:	e7 cf       	rjmp	.-50     	; 0x37e4 <__mulsf3+0x140>
    3816:	0c c0       	rjmp	.+24     	; 0x3830 <__mulsf3+0x18c>
    3818:	44 0f       	add	r20, r20
    381a:	55 1f       	adc	r21, r21
    381c:	66 1f       	adc	r22, r22
    381e:	77 1f       	adc	r23, r23
    3820:	17 fd       	sbrc	r17, 7
    3822:	41 60       	ori	r20, 0x01	; 1
    3824:	ee 0c       	add	r14, r14
    3826:	ff 1c       	adc	r15, r15
    3828:	00 1f       	adc	r16, r16
    382a:	11 1f       	adc	r17, r17
    382c:	21 50       	subi	r18, 0x01	; 1
    382e:	30 40       	sbci	r19, 0x00	; 0
    3830:	40 30       	cpi	r20, 0x00	; 0
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	59 07       	cpc	r21, r25
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	69 07       	cpc	r22, r25
    383a:	90 e4       	ldi	r25, 0x40	; 64
    383c:	79 07       	cpc	r23, r25
    383e:	60 f3       	brcs	.-40     	; 0x3818 <__mulsf3+0x174>
    3840:	2b 8f       	std	Y+27, r18	; 0x1b
    3842:	3c 8f       	std	Y+28, r19	; 0x1c
    3844:	db 01       	movw	r26, r22
    3846:	ca 01       	movw	r24, r20
    3848:	8f 77       	andi	r24, 0x7F	; 127
    384a:	90 70       	andi	r25, 0x00	; 0
    384c:	a0 70       	andi	r26, 0x00	; 0
    384e:	b0 70       	andi	r27, 0x00	; 0
    3850:	80 34       	cpi	r24, 0x40	; 64
    3852:	91 05       	cpc	r25, r1
    3854:	a1 05       	cpc	r26, r1
    3856:	b1 05       	cpc	r27, r1
    3858:	61 f4       	brne	.+24     	; 0x3872 <__mulsf3+0x1ce>
    385a:	47 fd       	sbrc	r20, 7
    385c:	0a c0       	rjmp	.+20     	; 0x3872 <__mulsf3+0x1ce>
    385e:	e1 14       	cp	r14, r1
    3860:	f1 04       	cpc	r15, r1
    3862:	01 05       	cpc	r16, r1
    3864:	11 05       	cpc	r17, r1
    3866:	29 f0       	breq	.+10     	; 0x3872 <__mulsf3+0x1ce>
    3868:	40 5c       	subi	r20, 0xC0	; 192
    386a:	5f 4f       	sbci	r21, 0xFF	; 255
    386c:	6f 4f       	sbci	r22, 0xFF	; 255
    386e:	7f 4f       	sbci	r23, 0xFF	; 255
    3870:	40 78       	andi	r20, 0x80	; 128
    3872:	1a 8e       	std	Y+26, r1	; 0x1a
    3874:	fe 17       	cp	r31, r30
    3876:	11 f0       	breq	.+4      	; 0x387c <__mulsf3+0x1d8>
    3878:	81 e0       	ldi	r24, 0x01	; 1
    387a:	8a 8f       	std	Y+26, r24	; 0x1a
    387c:	4d 8f       	std	Y+29, r20	; 0x1d
    387e:	5e 8f       	std	Y+30, r21	; 0x1e
    3880:	6f 8f       	std	Y+31, r22	; 0x1f
    3882:	78 a3       	std	Y+32, r23	; 0x20
    3884:	83 e0       	ldi	r24, 0x03	; 3
    3886:	89 8f       	std	Y+25, r24	; 0x19
    3888:	ce 01       	movw	r24, r28
    388a:	49 96       	adiw	r24, 0x19	; 25
    388c:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__pack_f>
    3890:	a0 96       	adiw	r28, 0x20	; 32
    3892:	e2 e1       	ldi	r30, 0x12	; 18
    3894:	0c 94 d8 20 	jmp	0x41b0	; 0x41b0 <__epilogue_restores__>

00003898 <__divsf3>:
    3898:	a8 e1       	ldi	r26, 0x18	; 24
    389a:	b0 e0       	ldi	r27, 0x00	; 0
    389c:	e2 e5       	ldi	r30, 0x52	; 82
    389e:	fc e1       	ldi	r31, 0x1C	; 28
    38a0:	0c 94 c4 20 	jmp	0x4188	; 0x4188 <__prologue_saves__+0x10>
    38a4:	69 83       	std	Y+1, r22	; 0x01
    38a6:	7a 83       	std	Y+2, r23	; 0x02
    38a8:	8b 83       	std	Y+3, r24	; 0x03
    38aa:	9c 83       	std	Y+4, r25	; 0x04
    38ac:	2d 83       	std	Y+5, r18	; 0x05
    38ae:	3e 83       	std	Y+6, r19	; 0x06
    38b0:	4f 83       	std	Y+7, r20	; 0x07
    38b2:	58 87       	std	Y+8, r21	; 0x08
    38b4:	b9 e0       	ldi	r27, 0x09	; 9
    38b6:	eb 2e       	mov	r14, r27
    38b8:	f1 2c       	mov	r15, r1
    38ba:	ec 0e       	add	r14, r28
    38bc:	fd 1e       	adc	r15, r29
    38be:	ce 01       	movw	r24, r28
    38c0:	01 96       	adiw	r24, 0x01	; 1
    38c2:	b7 01       	movw	r22, r14
    38c4:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__unpack_f>
    38c8:	8e 01       	movw	r16, r28
    38ca:	0f 5e       	subi	r16, 0xEF	; 239
    38cc:	1f 4f       	sbci	r17, 0xFF	; 255
    38ce:	ce 01       	movw	r24, r28
    38d0:	05 96       	adiw	r24, 0x05	; 5
    38d2:	b8 01       	movw	r22, r16
    38d4:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__unpack_f>
    38d8:	29 85       	ldd	r18, Y+9	; 0x09
    38da:	22 30       	cpi	r18, 0x02	; 2
    38dc:	08 f4       	brcc	.+2      	; 0x38e0 <__divsf3+0x48>
    38de:	7e c0       	rjmp	.+252    	; 0x39dc <__divsf3+0x144>
    38e0:	39 89       	ldd	r19, Y+17	; 0x11
    38e2:	32 30       	cpi	r19, 0x02	; 2
    38e4:	10 f4       	brcc	.+4      	; 0x38ea <__divsf3+0x52>
    38e6:	b8 01       	movw	r22, r16
    38e8:	7c c0       	rjmp	.+248    	; 0x39e2 <__divsf3+0x14a>
    38ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    38ec:	9a 89       	ldd	r25, Y+18	; 0x12
    38ee:	89 27       	eor	r24, r25
    38f0:	8a 87       	std	Y+10, r24	; 0x0a
    38f2:	24 30       	cpi	r18, 0x04	; 4
    38f4:	11 f0       	breq	.+4      	; 0x38fa <__divsf3+0x62>
    38f6:	22 30       	cpi	r18, 0x02	; 2
    38f8:	31 f4       	brne	.+12     	; 0x3906 <__divsf3+0x6e>
    38fa:	23 17       	cp	r18, r19
    38fc:	09 f0       	breq	.+2      	; 0x3900 <__divsf3+0x68>
    38fe:	6e c0       	rjmp	.+220    	; 0x39dc <__divsf3+0x144>
    3900:	62 e0       	ldi	r22, 0x02	; 2
    3902:	72 e0       	ldi	r23, 0x02	; 2
    3904:	6e c0       	rjmp	.+220    	; 0x39e2 <__divsf3+0x14a>
    3906:	34 30       	cpi	r19, 0x04	; 4
    3908:	39 f4       	brne	.+14     	; 0x3918 <__divsf3+0x80>
    390a:	1d 86       	std	Y+13, r1	; 0x0d
    390c:	1e 86       	std	Y+14, r1	; 0x0e
    390e:	1f 86       	std	Y+15, r1	; 0x0f
    3910:	18 8a       	std	Y+16, r1	; 0x10
    3912:	1c 86       	std	Y+12, r1	; 0x0c
    3914:	1b 86       	std	Y+11, r1	; 0x0b
    3916:	04 c0       	rjmp	.+8      	; 0x3920 <__divsf3+0x88>
    3918:	32 30       	cpi	r19, 0x02	; 2
    391a:	21 f4       	brne	.+8      	; 0x3924 <__divsf3+0x8c>
    391c:	84 e0       	ldi	r24, 0x04	; 4
    391e:	89 87       	std	Y+9, r24	; 0x09
    3920:	b7 01       	movw	r22, r14
    3922:	5f c0       	rjmp	.+190    	; 0x39e2 <__divsf3+0x14a>
    3924:	2b 85       	ldd	r18, Y+11	; 0x0b
    3926:	3c 85       	ldd	r19, Y+12	; 0x0c
    3928:	8b 89       	ldd	r24, Y+19	; 0x13
    392a:	9c 89       	ldd	r25, Y+20	; 0x14
    392c:	28 1b       	sub	r18, r24
    392e:	39 0b       	sbc	r19, r25
    3930:	3c 87       	std	Y+12, r19	; 0x0c
    3932:	2b 87       	std	Y+11, r18	; 0x0b
    3934:	ed 84       	ldd	r14, Y+13	; 0x0d
    3936:	fe 84       	ldd	r15, Y+14	; 0x0e
    3938:	0f 85       	ldd	r16, Y+15	; 0x0f
    393a:	18 89       	ldd	r17, Y+16	; 0x10
    393c:	ad 88       	ldd	r10, Y+21	; 0x15
    393e:	be 88       	ldd	r11, Y+22	; 0x16
    3940:	cf 88       	ldd	r12, Y+23	; 0x17
    3942:	d8 8c       	ldd	r13, Y+24	; 0x18
    3944:	ea 14       	cp	r14, r10
    3946:	fb 04       	cpc	r15, r11
    3948:	0c 05       	cpc	r16, r12
    394a:	1d 05       	cpc	r17, r13
    394c:	40 f4       	brcc	.+16     	; 0x395e <__divsf3+0xc6>
    394e:	ee 0c       	add	r14, r14
    3950:	ff 1c       	adc	r15, r15
    3952:	00 1f       	adc	r16, r16
    3954:	11 1f       	adc	r17, r17
    3956:	21 50       	subi	r18, 0x01	; 1
    3958:	30 40       	sbci	r19, 0x00	; 0
    395a:	3c 87       	std	Y+12, r19	; 0x0c
    395c:	2b 87       	std	Y+11, r18	; 0x0b
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	40 e0       	ldi	r20, 0x00	; 0
    3964:	50 e0       	ldi	r21, 0x00	; 0
    3966:	80 e0       	ldi	r24, 0x00	; 0
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	a0 e0       	ldi	r26, 0x00	; 0
    396c:	b0 e4       	ldi	r27, 0x40	; 64
    396e:	60 e0       	ldi	r22, 0x00	; 0
    3970:	70 e0       	ldi	r23, 0x00	; 0
    3972:	ea 14       	cp	r14, r10
    3974:	fb 04       	cpc	r15, r11
    3976:	0c 05       	cpc	r16, r12
    3978:	1d 05       	cpc	r17, r13
    397a:	40 f0       	brcs	.+16     	; 0x398c <__divsf3+0xf4>
    397c:	28 2b       	or	r18, r24
    397e:	39 2b       	or	r19, r25
    3980:	4a 2b       	or	r20, r26
    3982:	5b 2b       	or	r21, r27
    3984:	ea 18       	sub	r14, r10
    3986:	fb 08       	sbc	r15, r11
    3988:	0c 09       	sbc	r16, r12
    398a:	1d 09       	sbc	r17, r13
    398c:	b6 95       	lsr	r27
    398e:	a7 95       	ror	r26
    3990:	97 95       	ror	r25
    3992:	87 95       	ror	r24
    3994:	ee 0c       	add	r14, r14
    3996:	ff 1c       	adc	r15, r15
    3998:	00 1f       	adc	r16, r16
    399a:	11 1f       	adc	r17, r17
    399c:	6f 5f       	subi	r22, 0xFF	; 255
    399e:	7f 4f       	sbci	r23, 0xFF	; 255
    39a0:	6f 31       	cpi	r22, 0x1F	; 31
    39a2:	71 05       	cpc	r23, r1
    39a4:	31 f7       	brne	.-52     	; 0x3972 <__divsf3+0xda>
    39a6:	da 01       	movw	r26, r20
    39a8:	c9 01       	movw	r24, r18
    39aa:	8f 77       	andi	r24, 0x7F	; 127
    39ac:	90 70       	andi	r25, 0x00	; 0
    39ae:	a0 70       	andi	r26, 0x00	; 0
    39b0:	b0 70       	andi	r27, 0x00	; 0
    39b2:	80 34       	cpi	r24, 0x40	; 64
    39b4:	91 05       	cpc	r25, r1
    39b6:	a1 05       	cpc	r26, r1
    39b8:	b1 05       	cpc	r27, r1
    39ba:	61 f4       	brne	.+24     	; 0x39d4 <__divsf3+0x13c>
    39bc:	27 fd       	sbrc	r18, 7
    39be:	0a c0       	rjmp	.+20     	; 0x39d4 <__divsf3+0x13c>
    39c0:	e1 14       	cp	r14, r1
    39c2:	f1 04       	cpc	r15, r1
    39c4:	01 05       	cpc	r16, r1
    39c6:	11 05       	cpc	r17, r1
    39c8:	29 f0       	breq	.+10     	; 0x39d4 <__divsf3+0x13c>
    39ca:	20 5c       	subi	r18, 0xC0	; 192
    39cc:	3f 4f       	sbci	r19, 0xFF	; 255
    39ce:	4f 4f       	sbci	r20, 0xFF	; 255
    39d0:	5f 4f       	sbci	r21, 0xFF	; 255
    39d2:	20 78       	andi	r18, 0x80	; 128
    39d4:	2d 87       	std	Y+13, r18	; 0x0d
    39d6:	3e 87       	std	Y+14, r19	; 0x0e
    39d8:	4f 87       	std	Y+15, r20	; 0x0f
    39da:	58 8b       	std	Y+16, r21	; 0x10
    39dc:	be 01       	movw	r22, r28
    39de:	67 5f       	subi	r22, 0xF7	; 247
    39e0:	7f 4f       	sbci	r23, 0xFF	; 255
    39e2:	cb 01       	movw	r24, r22
    39e4:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__pack_f>
    39e8:	68 96       	adiw	r28, 0x18	; 24
    39ea:	ea e0       	ldi	r30, 0x0A	; 10
    39ec:	0c 94 e0 20 	jmp	0x41c0	; 0x41c0 <__epilogue_restores__+0x10>

000039f0 <__gtsf2>:
    39f0:	a8 e1       	ldi	r26, 0x18	; 24
    39f2:	b0 e0       	ldi	r27, 0x00	; 0
    39f4:	ee ef       	ldi	r30, 0xFE	; 254
    39f6:	fc e1       	ldi	r31, 0x1C	; 28
    39f8:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__prologue_saves__+0x18>
    39fc:	69 83       	std	Y+1, r22	; 0x01
    39fe:	7a 83       	std	Y+2, r23	; 0x02
    3a00:	8b 83       	std	Y+3, r24	; 0x03
    3a02:	9c 83       	std	Y+4, r25	; 0x04
    3a04:	2d 83       	std	Y+5, r18	; 0x05
    3a06:	3e 83       	std	Y+6, r19	; 0x06
    3a08:	4f 83       	std	Y+7, r20	; 0x07
    3a0a:	58 87       	std	Y+8, r21	; 0x08
    3a0c:	89 e0       	ldi	r24, 0x09	; 9
    3a0e:	e8 2e       	mov	r14, r24
    3a10:	f1 2c       	mov	r15, r1
    3a12:	ec 0e       	add	r14, r28
    3a14:	fd 1e       	adc	r15, r29
    3a16:	ce 01       	movw	r24, r28
    3a18:	01 96       	adiw	r24, 0x01	; 1
    3a1a:	b7 01       	movw	r22, r14
    3a1c:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__unpack_f>
    3a20:	8e 01       	movw	r16, r28
    3a22:	0f 5e       	subi	r16, 0xEF	; 239
    3a24:	1f 4f       	sbci	r17, 0xFF	; 255
    3a26:	ce 01       	movw	r24, r28
    3a28:	05 96       	adiw	r24, 0x05	; 5
    3a2a:	b8 01       	movw	r22, r16
    3a2c:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__unpack_f>
    3a30:	89 85       	ldd	r24, Y+9	; 0x09
    3a32:	82 30       	cpi	r24, 0x02	; 2
    3a34:	40 f0       	brcs	.+16     	; 0x3a46 <__gtsf2+0x56>
    3a36:	89 89       	ldd	r24, Y+17	; 0x11
    3a38:	82 30       	cpi	r24, 0x02	; 2
    3a3a:	28 f0       	brcs	.+10     	; 0x3a46 <__gtsf2+0x56>
    3a3c:	c7 01       	movw	r24, r14
    3a3e:	b8 01       	movw	r22, r16
    3a40:	0e 94 4f 20 	call	0x409e	; 0x409e <__fpcmp_parts_f>
    3a44:	01 c0       	rjmp	.+2      	; 0x3a48 <__gtsf2+0x58>
    3a46:	8f ef       	ldi	r24, 0xFF	; 255
    3a48:	68 96       	adiw	r28, 0x18	; 24
    3a4a:	e6 e0       	ldi	r30, 0x06	; 6
    3a4c:	0c 94 e4 20 	jmp	0x41c8	; 0x41c8 <__epilogue_restores__+0x18>

00003a50 <__gesf2>:
    3a50:	a8 e1       	ldi	r26, 0x18	; 24
    3a52:	b0 e0       	ldi	r27, 0x00	; 0
    3a54:	ee e2       	ldi	r30, 0x2E	; 46
    3a56:	fd e1       	ldi	r31, 0x1D	; 29
    3a58:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__prologue_saves__+0x18>
    3a5c:	69 83       	std	Y+1, r22	; 0x01
    3a5e:	7a 83       	std	Y+2, r23	; 0x02
    3a60:	8b 83       	std	Y+3, r24	; 0x03
    3a62:	9c 83       	std	Y+4, r25	; 0x04
    3a64:	2d 83       	std	Y+5, r18	; 0x05
    3a66:	3e 83       	std	Y+6, r19	; 0x06
    3a68:	4f 83       	std	Y+7, r20	; 0x07
    3a6a:	58 87       	std	Y+8, r21	; 0x08
    3a6c:	89 e0       	ldi	r24, 0x09	; 9
    3a6e:	e8 2e       	mov	r14, r24
    3a70:	f1 2c       	mov	r15, r1
    3a72:	ec 0e       	add	r14, r28
    3a74:	fd 1e       	adc	r15, r29
    3a76:	ce 01       	movw	r24, r28
    3a78:	01 96       	adiw	r24, 0x01	; 1
    3a7a:	b7 01       	movw	r22, r14
    3a7c:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__unpack_f>
    3a80:	8e 01       	movw	r16, r28
    3a82:	0f 5e       	subi	r16, 0xEF	; 239
    3a84:	1f 4f       	sbci	r17, 0xFF	; 255
    3a86:	ce 01       	movw	r24, r28
    3a88:	05 96       	adiw	r24, 0x05	; 5
    3a8a:	b8 01       	movw	r22, r16
    3a8c:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__unpack_f>
    3a90:	89 85       	ldd	r24, Y+9	; 0x09
    3a92:	82 30       	cpi	r24, 0x02	; 2
    3a94:	40 f0       	brcs	.+16     	; 0x3aa6 <__gesf2+0x56>
    3a96:	89 89       	ldd	r24, Y+17	; 0x11
    3a98:	82 30       	cpi	r24, 0x02	; 2
    3a9a:	28 f0       	brcs	.+10     	; 0x3aa6 <__gesf2+0x56>
    3a9c:	c7 01       	movw	r24, r14
    3a9e:	b8 01       	movw	r22, r16
    3aa0:	0e 94 4f 20 	call	0x409e	; 0x409e <__fpcmp_parts_f>
    3aa4:	01 c0       	rjmp	.+2      	; 0x3aa8 <__gesf2+0x58>
    3aa6:	8f ef       	ldi	r24, 0xFF	; 255
    3aa8:	68 96       	adiw	r28, 0x18	; 24
    3aaa:	e6 e0       	ldi	r30, 0x06	; 6
    3aac:	0c 94 e4 20 	jmp	0x41c8	; 0x41c8 <__epilogue_restores__+0x18>

00003ab0 <__ltsf2>:
    3ab0:	a8 e1       	ldi	r26, 0x18	; 24
    3ab2:	b0 e0       	ldi	r27, 0x00	; 0
    3ab4:	ee e5       	ldi	r30, 0x5E	; 94
    3ab6:	fd e1       	ldi	r31, 0x1D	; 29
    3ab8:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__prologue_saves__+0x18>
    3abc:	69 83       	std	Y+1, r22	; 0x01
    3abe:	7a 83       	std	Y+2, r23	; 0x02
    3ac0:	8b 83       	std	Y+3, r24	; 0x03
    3ac2:	9c 83       	std	Y+4, r25	; 0x04
    3ac4:	2d 83       	std	Y+5, r18	; 0x05
    3ac6:	3e 83       	std	Y+6, r19	; 0x06
    3ac8:	4f 83       	std	Y+7, r20	; 0x07
    3aca:	58 87       	std	Y+8, r21	; 0x08
    3acc:	89 e0       	ldi	r24, 0x09	; 9
    3ace:	e8 2e       	mov	r14, r24
    3ad0:	f1 2c       	mov	r15, r1
    3ad2:	ec 0e       	add	r14, r28
    3ad4:	fd 1e       	adc	r15, r29
    3ad6:	ce 01       	movw	r24, r28
    3ad8:	01 96       	adiw	r24, 0x01	; 1
    3ada:	b7 01       	movw	r22, r14
    3adc:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__unpack_f>
    3ae0:	8e 01       	movw	r16, r28
    3ae2:	0f 5e       	subi	r16, 0xEF	; 239
    3ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ae6:	ce 01       	movw	r24, r28
    3ae8:	05 96       	adiw	r24, 0x05	; 5
    3aea:	b8 01       	movw	r22, r16
    3aec:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__unpack_f>
    3af0:	89 85       	ldd	r24, Y+9	; 0x09
    3af2:	82 30       	cpi	r24, 0x02	; 2
    3af4:	40 f0       	brcs	.+16     	; 0x3b06 <__ltsf2+0x56>
    3af6:	89 89       	ldd	r24, Y+17	; 0x11
    3af8:	82 30       	cpi	r24, 0x02	; 2
    3afa:	28 f0       	brcs	.+10     	; 0x3b06 <__ltsf2+0x56>
    3afc:	c7 01       	movw	r24, r14
    3afe:	b8 01       	movw	r22, r16
    3b00:	0e 94 4f 20 	call	0x409e	; 0x409e <__fpcmp_parts_f>
    3b04:	01 c0       	rjmp	.+2      	; 0x3b08 <__ltsf2+0x58>
    3b06:	81 e0       	ldi	r24, 0x01	; 1
    3b08:	68 96       	adiw	r28, 0x18	; 24
    3b0a:	e6 e0       	ldi	r30, 0x06	; 6
    3b0c:	0c 94 e4 20 	jmp	0x41c8	; 0x41c8 <__epilogue_restores__+0x18>

00003b10 <__floatsisf>:
    3b10:	a8 e0       	ldi	r26, 0x08	; 8
    3b12:	b0 e0       	ldi	r27, 0x00	; 0
    3b14:	ee e8       	ldi	r30, 0x8E	; 142
    3b16:	fd e1       	ldi	r31, 0x1D	; 29
    3b18:	0c 94 c5 20 	jmp	0x418a	; 0x418a <__prologue_saves__+0x12>
    3b1c:	9b 01       	movw	r18, r22
    3b1e:	ac 01       	movw	r20, r24
    3b20:	83 e0       	ldi	r24, 0x03	; 3
    3b22:	89 83       	std	Y+1, r24	; 0x01
    3b24:	da 01       	movw	r26, r20
    3b26:	c9 01       	movw	r24, r18
    3b28:	88 27       	eor	r24, r24
    3b2a:	b7 fd       	sbrc	r27, 7
    3b2c:	83 95       	inc	r24
    3b2e:	99 27       	eor	r25, r25
    3b30:	aa 27       	eor	r26, r26
    3b32:	bb 27       	eor	r27, r27
    3b34:	b8 2e       	mov	r11, r24
    3b36:	21 15       	cp	r18, r1
    3b38:	31 05       	cpc	r19, r1
    3b3a:	41 05       	cpc	r20, r1
    3b3c:	51 05       	cpc	r21, r1
    3b3e:	19 f4       	brne	.+6      	; 0x3b46 <__floatsisf+0x36>
    3b40:	82 e0       	ldi	r24, 0x02	; 2
    3b42:	89 83       	std	Y+1, r24	; 0x01
    3b44:	3a c0       	rjmp	.+116    	; 0x3bba <__floatsisf+0xaa>
    3b46:	88 23       	and	r24, r24
    3b48:	a9 f0       	breq	.+42     	; 0x3b74 <__floatsisf+0x64>
    3b4a:	20 30       	cpi	r18, 0x00	; 0
    3b4c:	80 e0       	ldi	r24, 0x00	; 0
    3b4e:	38 07       	cpc	r19, r24
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	48 07       	cpc	r20, r24
    3b54:	80 e8       	ldi	r24, 0x80	; 128
    3b56:	58 07       	cpc	r21, r24
    3b58:	29 f4       	brne	.+10     	; 0x3b64 <__floatsisf+0x54>
    3b5a:	60 e0       	ldi	r22, 0x00	; 0
    3b5c:	70 e0       	ldi	r23, 0x00	; 0
    3b5e:	80 e0       	ldi	r24, 0x00	; 0
    3b60:	9f ec       	ldi	r25, 0xCF	; 207
    3b62:	30 c0       	rjmp	.+96     	; 0x3bc4 <__floatsisf+0xb4>
    3b64:	ee 24       	eor	r14, r14
    3b66:	ff 24       	eor	r15, r15
    3b68:	87 01       	movw	r16, r14
    3b6a:	e2 1a       	sub	r14, r18
    3b6c:	f3 0a       	sbc	r15, r19
    3b6e:	04 0b       	sbc	r16, r20
    3b70:	15 0b       	sbc	r17, r21
    3b72:	02 c0       	rjmp	.+4      	; 0x3b78 <__floatsisf+0x68>
    3b74:	79 01       	movw	r14, r18
    3b76:	8a 01       	movw	r16, r20
    3b78:	8e e1       	ldi	r24, 0x1E	; 30
    3b7a:	c8 2e       	mov	r12, r24
    3b7c:	d1 2c       	mov	r13, r1
    3b7e:	dc 82       	std	Y+4, r13	; 0x04
    3b80:	cb 82       	std	Y+3, r12	; 0x03
    3b82:	ed 82       	std	Y+5, r14	; 0x05
    3b84:	fe 82       	std	Y+6, r15	; 0x06
    3b86:	0f 83       	std	Y+7, r16	; 0x07
    3b88:	18 87       	std	Y+8, r17	; 0x08
    3b8a:	c8 01       	movw	r24, r16
    3b8c:	b7 01       	movw	r22, r14
    3b8e:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__clzsi2>
    3b92:	01 97       	sbiw	r24, 0x01	; 1
    3b94:	18 16       	cp	r1, r24
    3b96:	19 06       	cpc	r1, r25
    3b98:	84 f4       	brge	.+32     	; 0x3bba <__floatsisf+0xaa>
    3b9a:	08 2e       	mov	r0, r24
    3b9c:	04 c0       	rjmp	.+8      	; 0x3ba6 <__floatsisf+0x96>
    3b9e:	ee 0c       	add	r14, r14
    3ba0:	ff 1c       	adc	r15, r15
    3ba2:	00 1f       	adc	r16, r16
    3ba4:	11 1f       	adc	r17, r17
    3ba6:	0a 94       	dec	r0
    3ba8:	d2 f7       	brpl	.-12     	; 0x3b9e <__floatsisf+0x8e>
    3baa:	ed 82       	std	Y+5, r14	; 0x05
    3bac:	fe 82       	std	Y+6, r15	; 0x06
    3bae:	0f 83       	std	Y+7, r16	; 0x07
    3bb0:	18 87       	std	Y+8, r17	; 0x08
    3bb2:	c8 1a       	sub	r12, r24
    3bb4:	d9 0a       	sbc	r13, r25
    3bb6:	dc 82       	std	Y+4, r13	; 0x04
    3bb8:	cb 82       	std	Y+3, r12	; 0x03
    3bba:	ba 82       	std	Y+2, r11	; 0x02
    3bbc:	ce 01       	movw	r24, r28
    3bbe:	01 96       	adiw	r24, 0x01	; 1
    3bc0:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__pack_f>
    3bc4:	28 96       	adiw	r28, 0x08	; 8
    3bc6:	e9 e0       	ldi	r30, 0x09	; 9
    3bc8:	0c 94 e1 20 	jmp	0x41c2	; 0x41c2 <__epilogue_restores__+0x12>

00003bcc <__fixsfsi>:
    3bcc:	ac e0       	ldi	r26, 0x0C	; 12
    3bce:	b0 e0       	ldi	r27, 0x00	; 0
    3bd0:	ec ee       	ldi	r30, 0xEC	; 236
    3bd2:	fd e1       	ldi	r31, 0x1D	; 29
    3bd4:	0c 94 cc 20 	jmp	0x4198	; 0x4198 <__prologue_saves__+0x20>
    3bd8:	69 83       	std	Y+1, r22	; 0x01
    3bda:	7a 83       	std	Y+2, r23	; 0x02
    3bdc:	8b 83       	std	Y+3, r24	; 0x03
    3bde:	9c 83       	std	Y+4, r25	; 0x04
    3be0:	ce 01       	movw	r24, r28
    3be2:	01 96       	adiw	r24, 0x01	; 1
    3be4:	be 01       	movw	r22, r28
    3be6:	6b 5f       	subi	r22, 0xFB	; 251
    3be8:	7f 4f       	sbci	r23, 0xFF	; 255
    3bea:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__unpack_f>
    3bee:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf0:	82 30       	cpi	r24, 0x02	; 2
    3bf2:	61 f1       	breq	.+88     	; 0x3c4c <__fixsfsi+0x80>
    3bf4:	82 30       	cpi	r24, 0x02	; 2
    3bf6:	50 f1       	brcs	.+84     	; 0x3c4c <__fixsfsi+0x80>
    3bf8:	84 30       	cpi	r24, 0x04	; 4
    3bfa:	21 f4       	brne	.+8      	; 0x3c04 <__fixsfsi+0x38>
    3bfc:	8e 81       	ldd	r24, Y+6	; 0x06
    3bfe:	88 23       	and	r24, r24
    3c00:	51 f1       	breq	.+84     	; 0x3c56 <__fixsfsi+0x8a>
    3c02:	2e c0       	rjmp	.+92     	; 0x3c60 <__fixsfsi+0x94>
    3c04:	2f 81       	ldd	r18, Y+7	; 0x07
    3c06:	38 85       	ldd	r19, Y+8	; 0x08
    3c08:	37 fd       	sbrc	r19, 7
    3c0a:	20 c0       	rjmp	.+64     	; 0x3c4c <__fixsfsi+0x80>
    3c0c:	6e 81       	ldd	r22, Y+6	; 0x06
    3c0e:	2f 31       	cpi	r18, 0x1F	; 31
    3c10:	31 05       	cpc	r19, r1
    3c12:	1c f0       	brlt	.+6      	; 0x3c1a <__fixsfsi+0x4e>
    3c14:	66 23       	and	r22, r22
    3c16:	f9 f0       	breq	.+62     	; 0x3c56 <__fixsfsi+0x8a>
    3c18:	23 c0       	rjmp	.+70     	; 0x3c60 <__fixsfsi+0x94>
    3c1a:	8e e1       	ldi	r24, 0x1E	; 30
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	82 1b       	sub	r24, r18
    3c20:	93 0b       	sbc	r25, r19
    3c22:	29 85       	ldd	r18, Y+9	; 0x09
    3c24:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c26:	4b 85       	ldd	r20, Y+11	; 0x0b
    3c28:	5c 85       	ldd	r21, Y+12	; 0x0c
    3c2a:	04 c0       	rjmp	.+8      	; 0x3c34 <__fixsfsi+0x68>
    3c2c:	56 95       	lsr	r21
    3c2e:	47 95       	ror	r20
    3c30:	37 95       	ror	r19
    3c32:	27 95       	ror	r18
    3c34:	8a 95       	dec	r24
    3c36:	d2 f7       	brpl	.-12     	; 0x3c2c <__fixsfsi+0x60>
    3c38:	66 23       	and	r22, r22
    3c3a:	b1 f0       	breq	.+44     	; 0x3c68 <__fixsfsi+0x9c>
    3c3c:	50 95       	com	r21
    3c3e:	40 95       	com	r20
    3c40:	30 95       	com	r19
    3c42:	21 95       	neg	r18
    3c44:	3f 4f       	sbci	r19, 0xFF	; 255
    3c46:	4f 4f       	sbci	r20, 0xFF	; 255
    3c48:	5f 4f       	sbci	r21, 0xFF	; 255
    3c4a:	0e c0       	rjmp	.+28     	; 0x3c68 <__fixsfsi+0x9c>
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	40 e0       	ldi	r20, 0x00	; 0
    3c52:	50 e0       	ldi	r21, 0x00	; 0
    3c54:	09 c0       	rjmp	.+18     	; 0x3c68 <__fixsfsi+0x9c>
    3c56:	2f ef       	ldi	r18, 0xFF	; 255
    3c58:	3f ef       	ldi	r19, 0xFF	; 255
    3c5a:	4f ef       	ldi	r20, 0xFF	; 255
    3c5c:	5f e7       	ldi	r21, 0x7F	; 127
    3c5e:	04 c0       	rjmp	.+8      	; 0x3c68 <__fixsfsi+0x9c>
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	30 e0       	ldi	r19, 0x00	; 0
    3c64:	40 e0       	ldi	r20, 0x00	; 0
    3c66:	50 e8       	ldi	r21, 0x80	; 128
    3c68:	b9 01       	movw	r22, r18
    3c6a:	ca 01       	movw	r24, r20
    3c6c:	2c 96       	adiw	r28, 0x0c	; 12
    3c6e:	e2 e0       	ldi	r30, 0x02	; 2
    3c70:	0c 94 e8 20 	jmp	0x41d0	; 0x41d0 <__epilogue_restores__+0x20>

00003c74 <__floatunsisf>:
    3c74:	a8 e0       	ldi	r26, 0x08	; 8
    3c76:	b0 e0       	ldi	r27, 0x00	; 0
    3c78:	e0 e4       	ldi	r30, 0x40	; 64
    3c7a:	fe e1       	ldi	r31, 0x1E	; 30
    3c7c:	0c 94 c4 20 	jmp	0x4188	; 0x4188 <__prologue_saves__+0x10>
    3c80:	7b 01       	movw	r14, r22
    3c82:	8c 01       	movw	r16, r24
    3c84:	61 15       	cp	r22, r1
    3c86:	71 05       	cpc	r23, r1
    3c88:	81 05       	cpc	r24, r1
    3c8a:	91 05       	cpc	r25, r1
    3c8c:	19 f4       	brne	.+6      	; 0x3c94 <__floatunsisf+0x20>
    3c8e:	82 e0       	ldi	r24, 0x02	; 2
    3c90:	89 83       	std	Y+1, r24	; 0x01
    3c92:	60 c0       	rjmp	.+192    	; 0x3d54 <__floatunsisf+0xe0>
    3c94:	83 e0       	ldi	r24, 0x03	; 3
    3c96:	89 83       	std	Y+1, r24	; 0x01
    3c98:	8e e1       	ldi	r24, 0x1E	; 30
    3c9a:	c8 2e       	mov	r12, r24
    3c9c:	d1 2c       	mov	r13, r1
    3c9e:	dc 82       	std	Y+4, r13	; 0x04
    3ca0:	cb 82       	std	Y+3, r12	; 0x03
    3ca2:	ed 82       	std	Y+5, r14	; 0x05
    3ca4:	fe 82       	std	Y+6, r15	; 0x06
    3ca6:	0f 83       	std	Y+7, r16	; 0x07
    3ca8:	18 87       	std	Y+8, r17	; 0x08
    3caa:	c8 01       	movw	r24, r16
    3cac:	b7 01       	movw	r22, r14
    3cae:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__clzsi2>
    3cb2:	fc 01       	movw	r30, r24
    3cb4:	31 97       	sbiw	r30, 0x01	; 1
    3cb6:	f7 ff       	sbrs	r31, 7
    3cb8:	3b c0       	rjmp	.+118    	; 0x3d30 <__floatunsisf+0xbc>
    3cba:	22 27       	eor	r18, r18
    3cbc:	33 27       	eor	r19, r19
    3cbe:	2e 1b       	sub	r18, r30
    3cc0:	3f 0b       	sbc	r19, r31
    3cc2:	57 01       	movw	r10, r14
    3cc4:	68 01       	movw	r12, r16
    3cc6:	02 2e       	mov	r0, r18
    3cc8:	04 c0       	rjmp	.+8      	; 0x3cd2 <__floatunsisf+0x5e>
    3cca:	d6 94       	lsr	r13
    3ccc:	c7 94       	ror	r12
    3cce:	b7 94       	ror	r11
    3cd0:	a7 94       	ror	r10
    3cd2:	0a 94       	dec	r0
    3cd4:	d2 f7       	brpl	.-12     	; 0x3cca <__floatunsisf+0x56>
    3cd6:	40 e0       	ldi	r20, 0x00	; 0
    3cd8:	50 e0       	ldi	r21, 0x00	; 0
    3cda:	60 e0       	ldi	r22, 0x00	; 0
    3cdc:	70 e0       	ldi	r23, 0x00	; 0
    3cde:	81 e0       	ldi	r24, 0x01	; 1
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	a0 e0       	ldi	r26, 0x00	; 0
    3ce4:	b0 e0       	ldi	r27, 0x00	; 0
    3ce6:	04 c0       	rjmp	.+8      	; 0x3cf0 <__floatunsisf+0x7c>
    3ce8:	88 0f       	add	r24, r24
    3cea:	99 1f       	adc	r25, r25
    3cec:	aa 1f       	adc	r26, r26
    3cee:	bb 1f       	adc	r27, r27
    3cf0:	2a 95       	dec	r18
    3cf2:	d2 f7       	brpl	.-12     	; 0x3ce8 <__floatunsisf+0x74>
    3cf4:	01 97       	sbiw	r24, 0x01	; 1
    3cf6:	a1 09       	sbc	r26, r1
    3cf8:	b1 09       	sbc	r27, r1
    3cfa:	8e 21       	and	r24, r14
    3cfc:	9f 21       	and	r25, r15
    3cfe:	a0 23       	and	r26, r16
    3d00:	b1 23       	and	r27, r17
    3d02:	00 97       	sbiw	r24, 0x00	; 0
    3d04:	a1 05       	cpc	r26, r1
    3d06:	b1 05       	cpc	r27, r1
    3d08:	21 f0       	breq	.+8      	; 0x3d12 <__floatunsisf+0x9e>
    3d0a:	41 e0       	ldi	r20, 0x01	; 1
    3d0c:	50 e0       	ldi	r21, 0x00	; 0
    3d0e:	60 e0       	ldi	r22, 0x00	; 0
    3d10:	70 e0       	ldi	r23, 0x00	; 0
    3d12:	4a 29       	or	r20, r10
    3d14:	5b 29       	or	r21, r11
    3d16:	6c 29       	or	r22, r12
    3d18:	7d 29       	or	r23, r13
    3d1a:	4d 83       	std	Y+5, r20	; 0x05
    3d1c:	5e 83       	std	Y+6, r21	; 0x06
    3d1e:	6f 83       	std	Y+7, r22	; 0x07
    3d20:	78 87       	std	Y+8, r23	; 0x08
    3d22:	8e e1       	ldi	r24, 0x1E	; 30
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	8e 1b       	sub	r24, r30
    3d28:	9f 0b       	sbc	r25, r31
    3d2a:	9c 83       	std	Y+4, r25	; 0x04
    3d2c:	8b 83       	std	Y+3, r24	; 0x03
    3d2e:	12 c0       	rjmp	.+36     	; 0x3d54 <__floatunsisf+0xe0>
    3d30:	30 97       	sbiw	r30, 0x00	; 0
    3d32:	81 f0       	breq	.+32     	; 0x3d54 <__floatunsisf+0xe0>
    3d34:	0e 2e       	mov	r0, r30
    3d36:	04 c0       	rjmp	.+8      	; 0x3d40 <__floatunsisf+0xcc>
    3d38:	ee 0c       	add	r14, r14
    3d3a:	ff 1c       	adc	r15, r15
    3d3c:	00 1f       	adc	r16, r16
    3d3e:	11 1f       	adc	r17, r17
    3d40:	0a 94       	dec	r0
    3d42:	d2 f7       	brpl	.-12     	; 0x3d38 <__floatunsisf+0xc4>
    3d44:	ed 82       	std	Y+5, r14	; 0x05
    3d46:	fe 82       	std	Y+6, r15	; 0x06
    3d48:	0f 83       	std	Y+7, r16	; 0x07
    3d4a:	18 87       	std	Y+8, r17	; 0x08
    3d4c:	ce 1a       	sub	r12, r30
    3d4e:	df 0a       	sbc	r13, r31
    3d50:	dc 82       	std	Y+4, r13	; 0x04
    3d52:	cb 82       	std	Y+3, r12	; 0x03
    3d54:	1a 82       	std	Y+2, r1	; 0x02
    3d56:	ce 01       	movw	r24, r28
    3d58:	01 96       	adiw	r24, 0x01	; 1
    3d5a:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__pack_f>
    3d5e:	28 96       	adiw	r28, 0x08	; 8
    3d60:	ea e0       	ldi	r30, 0x0A	; 10
    3d62:	0c 94 e0 20 	jmp	0x41c0	; 0x41c0 <__epilogue_restores__+0x10>

00003d66 <__clzsi2>:
    3d66:	ef 92       	push	r14
    3d68:	ff 92       	push	r15
    3d6a:	0f 93       	push	r16
    3d6c:	1f 93       	push	r17
    3d6e:	7b 01       	movw	r14, r22
    3d70:	8c 01       	movw	r16, r24
    3d72:	80 e0       	ldi	r24, 0x00	; 0
    3d74:	e8 16       	cp	r14, r24
    3d76:	80 e0       	ldi	r24, 0x00	; 0
    3d78:	f8 06       	cpc	r15, r24
    3d7a:	81 e0       	ldi	r24, 0x01	; 1
    3d7c:	08 07       	cpc	r16, r24
    3d7e:	80 e0       	ldi	r24, 0x00	; 0
    3d80:	18 07       	cpc	r17, r24
    3d82:	88 f4       	brcc	.+34     	; 0x3da6 <__clzsi2+0x40>
    3d84:	8f ef       	ldi	r24, 0xFF	; 255
    3d86:	e8 16       	cp	r14, r24
    3d88:	f1 04       	cpc	r15, r1
    3d8a:	01 05       	cpc	r16, r1
    3d8c:	11 05       	cpc	r17, r1
    3d8e:	31 f0       	breq	.+12     	; 0x3d9c <__clzsi2+0x36>
    3d90:	28 f0       	brcs	.+10     	; 0x3d9c <__clzsi2+0x36>
    3d92:	88 e0       	ldi	r24, 0x08	; 8
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	a0 e0       	ldi	r26, 0x00	; 0
    3d98:	b0 e0       	ldi	r27, 0x00	; 0
    3d9a:	17 c0       	rjmp	.+46     	; 0x3dca <__clzsi2+0x64>
    3d9c:	80 e0       	ldi	r24, 0x00	; 0
    3d9e:	90 e0       	ldi	r25, 0x00	; 0
    3da0:	a0 e0       	ldi	r26, 0x00	; 0
    3da2:	b0 e0       	ldi	r27, 0x00	; 0
    3da4:	12 c0       	rjmp	.+36     	; 0x3dca <__clzsi2+0x64>
    3da6:	80 e0       	ldi	r24, 0x00	; 0
    3da8:	e8 16       	cp	r14, r24
    3daa:	80 e0       	ldi	r24, 0x00	; 0
    3dac:	f8 06       	cpc	r15, r24
    3dae:	80 e0       	ldi	r24, 0x00	; 0
    3db0:	08 07       	cpc	r16, r24
    3db2:	81 e0       	ldi	r24, 0x01	; 1
    3db4:	18 07       	cpc	r17, r24
    3db6:	28 f0       	brcs	.+10     	; 0x3dc2 <__clzsi2+0x5c>
    3db8:	88 e1       	ldi	r24, 0x18	; 24
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	a0 e0       	ldi	r26, 0x00	; 0
    3dbe:	b0 e0       	ldi	r27, 0x00	; 0
    3dc0:	04 c0       	rjmp	.+8      	; 0x3dca <__clzsi2+0x64>
    3dc2:	80 e1       	ldi	r24, 0x10	; 16
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	a0 e0       	ldi	r26, 0x00	; 0
    3dc8:	b0 e0       	ldi	r27, 0x00	; 0
    3dca:	20 e2       	ldi	r18, 0x20	; 32
    3dcc:	30 e0       	ldi	r19, 0x00	; 0
    3dce:	40 e0       	ldi	r20, 0x00	; 0
    3dd0:	50 e0       	ldi	r21, 0x00	; 0
    3dd2:	28 1b       	sub	r18, r24
    3dd4:	39 0b       	sbc	r19, r25
    3dd6:	4a 0b       	sbc	r20, r26
    3dd8:	5b 0b       	sbc	r21, r27
    3dda:	04 c0       	rjmp	.+8      	; 0x3de4 <__clzsi2+0x7e>
    3ddc:	16 95       	lsr	r17
    3dde:	07 95       	ror	r16
    3de0:	f7 94       	ror	r15
    3de2:	e7 94       	ror	r14
    3de4:	8a 95       	dec	r24
    3de6:	d2 f7       	brpl	.-12     	; 0x3ddc <__clzsi2+0x76>
    3de8:	f7 01       	movw	r30, r14
    3dea:	e6 5f       	subi	r30, 0xF6	; 246
    3dec:	fd 4f       	sbci	r31, 0xFD	; 253
    3dee:	80 81       	ld	r24, Z
    3df0:	28 1b       	sub	r18, r24
    3df2:	31 09       	sbc	r19, r1
    3df4:	41 09       	sbc	r20, r1
    3df6:	51 09       	sbc	r21, r1
    3df8:	c9 01       	movw	r24, r18
    3dfa:	1f 91       	pop	r17
    3dfc:	0f 91       	pop	r16
    3dfe:	ff 90       	pop	r15
    3e00:	ef 90       	pop	r14
    3e02:	08 95       	ret

00003e04 <__pack_f>:
    3e04:	df 92       	push	r13
    3e06:	ef 92       	push	r14
    3e08:	ff 92       	push	r15
    3e0a:	0f 93       	push	r16
    3e0c:	1f 93       	push	r17
    3e0e:	fc 01       	movw	r30, r24
    3e10:	e4 80       	ldd	r14, Z+4	; 0x04
    3e12:	f5 80       	ldd	r15, Z+5	; 0x05
    3e14:	06 81       	ldd	r16, Z+6	; 0x06
    3e16:	17 81       	ldd	r17, Z+7	; 0x07
    3e18:	d1 80       	ldd	r13, Z+1	; 0x01
    3e1a:	80 81       	ld	r24, Z
    3e1c:	82 30       	cpi	r24, 0x02	; 2
    3e1e:	48 f4       	brcc	.+18     	; 0x3e32 <__pack_f+0x2e>
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	a0 e1       	ldi	r26, 0x10	; 16
    3e26:	b0 e0       	ldi	r27, 0x00	; 0
    3e28:	e8 2a       	or	r14, r24
    3e2a:	f9 2a       	or	r15, r25
    3e2c:	0a 2b       	or	r16, r26
    3e2e:	1b 2b       	or	r17, r27
    3e30:	a5 c0       	rjmp	.+330    	; 0x3f7c <__pack_f+0x178>
    3e32:	84 30       	cpi	r24, 0x04	; 4
    3e34:	09 f4       	brne	.+2      	; 0x3e38 <__pack_f+0x34>
    3e36:	9f c0       	rjmp	.+318    	; 0x3f76 <__pack_f+0x172>
    3e38:	82 30       	cpi	r24, 0x02	; 2
    3e3a:	21 f4       	brne	.+8      	; 0x3e44 <__pack_f+0x40>
    3e3c:	ee 24       	eor	r14, r14
    3e3e:	ff 24       	eor	r15, r15
    3e40:	87 01       	movw	r16, r14
    3e42:	05 c0       	rjmp	.+10     	; 0x3e4e <__pack_f+0x4a>
    3e44:	e1 14       	cp	r14, r1
    3e46:	f1 04       	cpc	r15, r1
    3e48:	01 05       	cpc	r16, r1
    3e4a:	11 05       	cpc	r17, r1
    3e4c:	19 f4       	brne	.+6      	; 0x3e54 <__pack_f+0x50>
    3e4e:	e0 e0       	ldi	r30, 0x00	; 0
    3e50:	f0 e0       	ldi	r31, 0x00	; 0
    3e52:	96 c0       	rjmp	.+300    	; 0x3f80 <__pack_f+0x17c>
    3e54:	62 81       	ldd	r22, Z+2	; 0x02
    3e56:	73 81       	ldd	r23, Z+3	; 0x03
    3e58:	9f ef       	ldi	r25, 0xFF	; 255
    3e5a:	62 38       	cpi	r22, 0x82	; 130
    3e5c:	79 07       	cpc	r23, r25
    3e5e:	0c f0       	brlt	.+2      	; 0x3e62 <__pack_f+0x5e>
    3e60:	5b c0       	rjmp	.+182    	; 0x3f18 <__pack_f+0x114>
    3e62:	22 e8       	ldi	r18, 0x82	; 130
    3e64:	3f ef       	ldi	r19, 0xFF	; 255
    3e66:	26 1b       	sub	r18, r22
    3e68:	37 0b       	sbc	r19, r23
    3e6a:	2a 31       	cpi	r18, 0x1A	; 26
    3e6c:	31 05       	cpc	r19, r1
    3e6e:	2c f0       	brlt	.+10     	; 0x3e7a <__pack_f+0x76>
    3e70:	20 e0       	ldi	r18, 0x00	; 0
    3e72:	30 e0       	ldi	r19, 0x00	; 0
    3e74:	40 e0       	ldi	r20, 0x00	; 0
    3e76:	50 e0       	ldi	r21, 0x00	; 0
    3e78:	2a c0       	rjmp	.+84     	; 0x3ece <__pack_f+0xca>
    3e7a:	b8 01       	movw	r22, r16
    3e7c:	a7 01       	movw	r20, r14
    3e7e:	02 2e       	mov	r0, r18
    3e80:	04 c0       	rjmp	.+8      	; 0x3e8a <__pack_f+0x86>
    3e82:	76 95       	lsr	r23
    3e84:	67 95       	ror	r22
    3e86:	57 95       	ror	r21
    3e88:	47 95       	ror	r20
    3e8a:	0a 94       	dec	r0
    3e8c:	d2 f7       	brpl	.-12     	; 0x3e82 <__pack_f+0x7e>
    3e8e:	81 e0       	ldi	r24, 0x01	; 1
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	a0 e0       	ldi	r26, 0x00	; 0
    3e94:	b0 e0       	ldi	r27, 0x00	; 0
    3e96:	04 c0       	rjmp	.+8      	; 0x3ea0 <__pack_f+0x9c>
    3e98:	88 0f       	add	r24, r24
    3e9a:	99 1f       	adc	r25, r25
    3e9c:	aa 1f       	adc	r26, r26
    3e9e:	bb 1f       	adc	r27, r27
    3ea0:	2a 95       	dec	r18
    3ea2:	d2 f7       	brpl	.-12     	; 0x3e98 <__pack_f+0x94>
    3ea4:	01 97       	sbiw	r24, 0x01	; 1
    3ea6:	a1 09       	sbc	r26, r1
    3ea8:	b1 09       	sbc	r27, r1
    3eaa:	8e 21       	and	r24, r14
    3eac:	9f 21       	and	r25, r15
    3eae:	a0 23       	and	r26, r16
    3eb0:	b1 23       	and	r27, r17
    3eb2:	00 97       	sbiw	r24, 0x00	; 0
    3eb4:	a1 05       	cpc	r26, r1
    3eb6:	b1 05       	cpc	r27, r1
    3eb8:	21 f0       	breq	.+8      	; 0x3ec2 <__pack_f+0xbe>
    3eba:	81 e0       	ldi	r24, 0x01	; 1
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	a0 e0       	ldi	r26, 0x00	; 0
    3ec0:	b0 e0       	ldi	r27, 0x00	; 0
    3ec2:	9a 01       	movw	r18, r20
    3ec4:	ab 01       	movw	r20, r22
    3ec6:	28 2b       	or	r18, r24
    3ec8:	39 2b       	or	r19, r25
    3eca:	4a 2b       	or	r20, r26
    3ecc:	5b 2b       	or	r21, r27
    3ece:	da 01       	movw	r26, r20
    3ed0:	c9 01       	movw	r24, r18
    3ed2:	8f 77       	andi	r24, 0x7F	; 127
    3ed4:	90 70       	andi	r25, 0x00	; 0
    3ed6:	a0 70       	andi	r26, 0x00	; 0
    3ed8:	b0 70       	andi	r27, 0x00	; 0
    3eda:	80 34       	cpi	r24, 0x40	; 64
    3edc:	91 05       	cpc	r25, r1
    3ede:	a1 05       	cpc	r26, r1
    3ee0:	b1 05       	cpc	r27, r1
    3ee2:	39 f4       	brne	.+14     	; 0x3ef2 <__pack_f+0xee>
    3ee4:	27 ff       	sbrs	r18, 7
    3ee6:	09 c0       	rjmp	.+18     	; 0x3efa <__pack_f+0xf6>
    3ee8:	20 5c       	subi	r18, 0xC0	; 192
    3eea:	3f 4f       	sbci	r19, 0xFF	; 255
    3eec:	4f 4f       	sbci	r20, 0xFF	; 255
    3eee:	5f 4f       	sbci	r21, 0xFF	; 255
    3ef0:	04 c0       	rjmp	.+8      	; 0x3efa <__pack_f+0xf6>
    3ef2:	21 5c       	subi	r18, 0xC1	; 193
    3ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ef6:	4f 4f       	sbci	r20, 0xFF	; 255
    3ef8:	5f 4f       	sbci	r21, 0xFF	; 255
    3efa:	e0 e0       	ldi	r30, 0x00	; 0
    3efc:	f0 e0       	ldi	r31, 0x00	; 0
    3efe:	20 30       	cpi	r18, 0x00	; 0
    3f00:	a0 e0       	ldi	r26, 0x00	; 0
    3f02:	3a 07       	cpc	r19, r26
    3f04:	a0 e0       	ldi	r26, 0x00	; 0
    3f06:	4a 07       	cpc	r20, r26
    3f08:	a0 e4       	ldi	r26, 0x40	; 64
    3f0a:	5a 07       	cpc	r21, r26
    3f0c:	10 f0       	brcs	.+4      	; 0x3f12 <__pack_f+0x10e>
    3f0e:	e1 e0       	ldi	r30, 0x01	; 1
    3f10:	f0 e0       	ldi	r31, 0x00	; 0
    3f12:	79 01       	movw	r14, r18
    3f14:	8a 01       	movw	r16, r20
    3f16:	27 c0       	rjmp	.+78     	; 0x3f66 <__pack_f+0x162>
    3f18:	60 38       	cpi	r22, 0x80	; 128
    3f1a:	71 05       	cpc	r23, r1
    3f1c:	64 f5       	brge	.+88     	; 0x3f76 <__pack_f+0x172>
    3f1e:	fb 01       	movw	r30, r22
    3f20:	e1 58       	subi	r30, 0x81	; 129
    3f22:	ff 4f       	sbci	r31, 0xFF	; 255
    3f24:	d8 01       	movw	r26, r16
    3f26:	c7 01       	movw	r24, r14
    3f28:	8f 77       	andi	r24, 0x7F	; 127
    3f2a:	90 70       	andi	r25, 0x00	; 0
    3f2c:	a0 70       	andi	r26, 0x00	; 0
    3f2e:	b0 70       	andi	r27, 0x00	; 0
    3f30:	80 34       	cpi	r24, 0x40	; 64
    3f32:	91 05       	cpc	r25, r1
    3f34:	a1 05       	cpc	r26, r1
    3f36:	b1 05       	cpc	r27, r1
    3f38:	39 f4       	brne	.+14     	; 0x3f48 <__pack_f+0x144>
    3f3a:	e7 fe       	sbrs	r14, 7
    3f3c:	0d c0       	rjmp	.+26     	; 0x3f58 <__pack_f+0x154>
    3f3e:	80 e4       	ldi	r24, 0x40	; 64
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	a0 e0       	ldi	r26, 0x00	; 0
    3f44:	b0 e0       	ldi	r27, 0x00	; 0
    3f46:	04 c0       	rjmp	.+8      	; 0x3f50 <__pack_f+0x14c>
    3f48:	8f e3       	ldi	r24, 0x3F	; 63
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	a0 e0       	ldi	r26, 0x00	; 0
    3f4e:	b0 e0       	ldi	r27, 0x00	; 0
    3f50:	e8 0e       	add	r14, r24
    3f52:	f9 1e       	adc	r15, r25
    3f54:	0a 1f       	adc	r16, r26
    3f56:	1b 1f       	adc	r17, r27
    3f58:	17 ff       	sbrs	r17, 7
    3f5a:	05 c0       	rjmp	.+10     	; 0x3f66 <__pack_f+0x162>
    3f5c:	16 95       	lsr	r17
    3f5e:	07 95       	ror	r16
    3f60:	f7 94       	ror	r15
    3f62:	e7 94       	ror	r14
    3f64:	31 96       	adiw	r30, 0x01	; 1
    3f66:	87 e0       	ldi	r24, 0x07	; 7
    3f68:	16 95       	lsr	r17
    3f6a:	07 95       	ror	r16
    3f6c:	f7 94       	ror	r15
    3f6e:	e7 94       	ror	r14
    3f70:	8a 95       	dec	r24
    3f72:	d1 f7       	brne	.-12     	; 0x3f68 <__pack_f+0x164>
    3f74:	05 c0       	rjmp	.+10     	; 0x3f80 <__pack_f+0x17c>
    3f76:	ee 24       	eor	r14, r14
    3f78:	ff 24       	eor	r15, r15
    3f7a:	87 01       	movw	r16, r14
    3f7c:	ef ef       	ldi	r30, 0xFF	; 255
    3f7e:	f0 e0       	ldi	r31, 0x00	; 0
    3f80:	6e 2f       	mov	r22, r30
    3f82:	67 95       	ror	r22
    3f84:	66 27       	eor	r22, r22
    3f86:	67 95       	ror	r22
    3f88:	90 2f       	mov	r25, r16
    3f8a:	9f 77       	andi	r25, 0x7F	; 127
    3f8c:	d7 94       	ror	r13
    3f8e:	dd 24       	eor	r13, r13
    3f90:	d7 94       	ror	r13
    3f92:	8e 2f       	mov	r24, r30
    3f94:	86 95       	lsr	r24
    3f96:	49 2f       	mov	r20, r25
    3f98:	46 2b       	or	r20, r22
    3f9a:	58 2f       	mov	r21, r24
    3f9c:	5d 29       	or	r21, r13
    3f9e:	b7 01       	movw	r22, r14
    3fa0:	ca 01       	movw	r24, r20
    3fa2:	1f 91       	pop	r17
    3fa4:	0f 91       	pop	r16
    3fa6:	ff 90       	pop	r15
    3fa8:	ef 90       	pop	r14
    3faa:	df 90       	pop	r13
    3fac:	08 95       	ret

00003fae <__unpack_f>:
    3fae:	fc 01       	movw	r30, r24
    3fb0:	db 01       	movw	r26, r22
    3fb2:	40 81       	ld	r20, Z
    3fb4:	51 81       	ldd	r21, Z+1	; 0x01
    3fb6:	22 81       	ldd	r18, Z+2	; 0x02
    3fb8:	62 2f       	mov	r22, r18
    3fba:	6f 77       	andi	r22, 0x7F	; 127
    3fbc:	70 e0       	ldi	r23, 0x00	; 0
    3fbe:	22 1f       	adc	r18, r18
    3fc0:	22 27       	eor	r18, r18
    3fc2:	22 1f       	adc	r18, r18
    3fc4:	93 81       	ldd	r25, Z+3	; 0x03
    3fc6:	89 2f       	mov	r24, r25
    3fc8:	88 0f       	add	r24, r24
    3fca:	82 2b       	or	r24, r18
    3fcc:	28 2f       	mov	r18, r24
    3fce:	30 e0       	ldi	r19, 0x00	; 0
    3fd0:	99 1f       	adc	r25, r25
    3fd2:	99 27       	eor	r25, r25
    3fd4:	99 1f       	adc	r25, r25
    3fd6:	11 96       	adiw	r26, 0x01	; 1
    3fd8:	9c 93       	st	X, r25
    3fda:	11 97       	sbiw	r26, 0x01	; 1
    3fdc:	21 15       	cp	r18, r1
    3fde:	31 05       	cpc	r19, r1
    3fe0:	a9 f5       	brne	.+106    	; 0x404c <__unpack_f+0x9e>
    3fe2:	41 15       	cp	r20, r1
    3fe4:	51 05       	cpc	r21, r1
    3fe6:	61 05       	cpc	r22, r1
    3fe8:	71 05       	cpc	r23, r1
    3fea:	11 f4       	brne	.+4      	; 0x3ff0 <__unpack_f+0x42>
    3fec:	82 e0       	ldi	r24, 0x02	; 2
    3fee:	37 c0       	rjmp	.+110    	; 0x405e <__unpack_f+0xb0>
    3ff0:	82 e8       	ldi	r24, 0x82	; 130
    3ff2:	9f ef       	ldi	r25, 0xFF	; 255
    3ff4:	13 96       	adiw	r26, 0x03	; 3
    3ff6:	9c 93       	st	X, r25
    3ff8:	8e 93       	st	-X, r24
    3ffa:	12 97       	sbiw	r26, 0x02	; 2
    3ffc:	9a 01       	movw	r18, r20
    3ffe:	ab 01       	movw	r20, r22
    4000:	67 e0       	ldi	r22, 0x07	; 7
    4002:	22 0f       	add	r18, r18
    4004:	33 1f       	adc	r19, r19
    4006:	44 1f       	adc	r20, r20
    4008:	55 1f       	adc	r21, r21
    400a:	6a 95       	dec	r22
    400c:	d1 f7       	brne	.-12     	; 0x4002 <__unpack_f+0x54>
    400e:	83 e0       	ldi	r24, 0x03	; 3
    4010:	8c 93       	st	X, r24
    4012:	0d c0       	rjmp	.+26     	; 0x402e <__unpack_f+0x80>
    4014:	22 0f       	add	r18, r18
    4016:	33 1f       	adc	r19, r19
    4018:	44 1f       	adc	r20, r20
    401a:	55 1f       	adc	r21, r21
    401c:	12 96       	adiw	r26, 0x02	; 2
    401e:	8d 91       	ld	r24, X+
    4020:	9c 91       	ld	r25, X
    4022:	13 97       	sbiw	r26, 0x03	; 3
    4024:	01 97       	sbiw	r24, 0x01	; 1
    4026:	13 96       	adiw	r26, 0x03	; 3
    4028:	9c 93       	st	X, r25
    402a:	8e 93       	st	-X, r24
    402c:	12 97       	sbiw	r26, 0x02	; 2
    402e:	20 30       	cpi	r18, 0x00	; 0
    4030:	80 e0       	ldi	r24, 0x00	; 0
    4032:	38 07       	cpc	r19, r24
    4034:	80 e0       	ldi	r24, 0x00	; 0
    4036:	48 07       	cpc	r20, r24
    4038:	80 e4       	ldi	r24, 0x40	; 64
    403a:	58 07       	cpc	r21, r24
    403c:	58 f3       	brcs	.-42     	; 0x4014 <__unpack_f+0x66>
    403e:	14 96       	adiw	r26, 0x04	; 4
    4040:	2d 93       	st	X+, r18
    4042:	3d 93       	st	X+, r19
    4044:	4d 93       	st	X+, r20
    4046:	5c 93       	st	X, r21
    4048:	17 97       	sbiw	r26, 0x07	; 7
    404a:	08 95       	ret
    404c:	2f 3f       	cpi	r18, 0xFF	; 255
    404e:	31 05       	cpc	r19, r1
    4050:	79 f4       	brne	.+30     	; 0x4070 <__unpack_f+0xc2>
    4052:	41 15       	cp	r20, r1
    4054:	51 05       	cpc	r21, r1
    4056:	61 05       	cpc	r22, r1
    4058:	71 05       	cpc	r23, r1
    405a:	19 f4       	brne	.+6      	; 0x4062 <__unpack_f+0xb4>
    405c:	84 e0       	ldi	r24, 0x04	; 4
    405e:	8c 93       	st	X, r24
    4060:	08 95       	ret
    4062:	64 ff       	sbrs	r22, 4
    4064:	03 c0       	rjmp	.+6      	; 0x406c <__unpack_f+0xbe>
    4066:	81 e0       	ldi	r24, 0x01	; 1
    4068:	8c 93       	st	X, r24
    406a:	12 c0       	rjmp	.+36     	; 0x4090 <__unpack_f+0xe2>
    406c:	1c 92       	st	X, r1
    406e:	10 c0       	rjmp	.+32     	; 0x4090 <__unpack_f+0xe2>
    4070:	2f 57       	subi	r18, 0x7F	; 127
    4072:	30 40       	sbci	r19, 0x00	; 0
    4074:	13 96       	adiw	r26, 0x03	; 3
    4076:	3c 93       	st	X, r19
    4078:	2e 93       	st	-X, r18
    407a:	12 97       	sbiw	r26, 0x02	; 2
    407c:	83 e0       	ldi	r24, 0x03	; 3
    407e:	8c 93       	st	X, r24
    4080:	87 e0       	ldi	r24, 0x07	; 7
    4082:	44 0f       	add	r20, r20
    4084:	55 1f       	adc	r21, r21
    4086:	66 1f       	adc	r22, r22
    4088:	77 1f       	adc	r23, r23
    408a:	8a 95       	dec	r24
    408c:	d1 f7       	brne	.-12     	; 0x4082 <__unpack_f+0xd4>
    408e:	70 64       	ori	r23, 0x40	; 64
    4090:	14 96       	adiw	r26, 0x04	; 4
    4092:	4d 93       	st	X+, r20
    4094:	5d 93       	st	X+, r21
    4096:	6d 93       	st	X+, r22
    4098:	7c 93       	st	X, r23
    409a:	17 97       	sbiw	r26, 0x07	; 7
    409c:	08 95       	ret

0000409e <__fpcmp_parts_f>:
    409e:	1f 93       	push	r17
    40a0:	dc 01       	movw	r26, r24
    40a2:	fb 01       	movw	r30, r22
    40a4:	9c 91       	ld	r25, X
    40a6:	92 30       	cpi	r25, 0x02	; 2
    40a8:	08 f4       	brcc	.+2      	; 0x40ac <__fpcmp_parts_f+0xe>
    40aa:	47 c0       	rjmp	.+142    	; 0x413a <__fpcmp_parts_f+0x9c>
    40ac:	80 81       	ld	r24, Z
    40ae:	82 30       	cpi	r24, 0x02	; 2
    40b0:	08 f4       	brcc	.+2      	; 0x40b4 <__fpcmp_parts_f+0x16>
    40b2:	43 c0       	rjmp	.+134    	; 0x413a <__fpcmp_parts_f+0x9c>
    40b4:	94 30       	cpi	r25, 0x04	; 4
    40b6:	51 f4       	brne	.+20     	; 0x40cc <__fpcmp_parts_f+0x2e>
    40b8:	11 96       	adiw	r26, 0x01	; 1
    40ba:	1c 91       	ld	r17, X
    40bc:	84 30       	cpi	r24, 0x04	; 4
    40be:	99 f5       	brne	.+102    	; 0x4126 <__fpcmp_parts_f+0x88>
    40c0:	81 81       	ldd	r24, Z+1	; 0x01
    40c2:	68 2f       	mov	r22, r24
    40c4:	70 e0       	ldi	r23, 0x00	; 0
    40c6:	61 1b       	sub	r22, r17
    40c8:	71 09       	sbc	r23, r1
    40ca:	3f c0       	rjmp	.+126    	; 0x414a <__fpcmp_parts_f+0xac>
    40cc:	84 30       	cpi	r24, 0x04	; 4
    40ce:	21 f0       	breq	.+8      	; 0x40d8 <__fpcmp_parts_f+0x3a>
    40d0:	92 30       	cpi	r25, 0x02	; 2
    40d2:	31 f4       	brne	.+12     	; 0x40e0 <__fpcmp_parts_f+0x42>
    40d4:	82 30       	cpi	r24, 0x02	; 2
    40d6:	b9 f1       	breq	.+110    	; 0x4146 <__fpcmp_parts_f+0xa8>
    40d8:	81 81       	ldd	r24, Z+1	; 0x01
    40da:	88 23       	and	r24, r24
    40dc:	89 f1       	breq	.+98     	; 0x4140 <__fpcmp_parts_f+0xa2>
    40de:	2d c0       	rjmp	.+90     	; 0x413a <__fpcmp_parts_f+0x9c>
    40e0:	11 96       	adiw	r26, 0x01	; 1
    40e2:	1c 91       	ld	r17, X
    40e4:	11 97       	sbiw	r26, 0x01	; 1
    40e6:	82 30       	cpi	r24, 0x02	; 2
    40e8:	f1 f0       	breq	.+60     	; 0x4126 <__fpcmp_parts_f+0x88>
    40ea:	81 81       	ldd	r24, Z+1	; 0x01
    40ec:	18 17       	cp	r17, r24
    40ee:	d9 f4       	brne	.+54     	; 0x4126 <__fpcmp_parts_f+0x88>
    40f0:	12 96       	adiw	r26, 0x02	; 2
    40f2:	2d 91       	ld	r18, X+
    40f4:	3c 91       	ld	r19, X
    40f6:	13 97       	sbiw	r26, 0x03	; 3
    40f8:	82 81       	ldd	r24, Z+2	; 0x02
    40fa:	93 81       	ldd	r25, Z+3	; 0x03
    40fc:	82 17       	cp	r24, r18
    40fe:	93 07       	cpc	r25, r19
    4100:	94 f0       	brlt	.+36     	; 0x4126 <__fpcmp_parts_f+0x88>
    4102:	28 17       	cp	r18, r24
    4104:	39 07       	cpc	r19, r25
    4106:	bc f0       	brlt	.+46     	; 0x4136 <__fpcmp_parts_f+0x98>
    4108:	14 96       	adiw	r26, 0x04	; 4
    410a:	8d 91       	ld	r24, X+
    410c:	9d 91       	ld	r25, X+
    410e:	0d 90       	ld	r0, X+
    4110:	bc 91       	ld	r27, X
    4112:	a0 2d       	mov	r26, r0
    4114:	24 81       	ldd	r18, Z+4	; 0x04
    4116:	35 81       	ldd	r19, Z+5	; 0x05
    4118:	46 81       	ldd	r20, Z+6	; 0x06
    411a:	57 81       	ldd	r21, Z+7	; 0x07
    411c:	28 17       	cp	r18, r24
    411e:	39 07       	cpc	r19, r25
    4120:	4a 07       	cpc	r20, r26
    4122:	5b 07       	cpc	r21, r27
    4124:	18 f4       	brcc	.+6      	; 0x412c <__fpcmp_parts_f+0x8e>
    4126:	11 23       	and	r17, r17
    4128:	41 f0       	breq	.+16     	; 0x413a <__fpcmp_parts_f+0x9c>
    412a:	0a c0       	rjmp	.+20     	; 0x4140 <__fpcmp_parts_f+0xa2>
    412c:	82 17       	cp	r24, r18
    412e:	93 07       	cpc	r25, r19
    4130:	a4 07       	cpc	r26, r20
    4132:	b5 07       	cpc	r27, r21
    4134:	40 f4       	brcc	.+16     	; 0x4146 <__fpcmp_parts_f+0xa8>
    4136:	11 23       	and	r17, r17
    4138:	19 f0       	breq	.+6      	; 0x4140 <__fpcmp_parts_f+0xa2>
    413a:	61 e0       	ldi	r22, 0x01	; 1
    413c:	70 e0       	ldi	r23, 0x00	; 0
    413e:	05 c0       	rjmp	.+10     	; 0x414a <__fpcmp_parts_f+0xac>
    4140:	6f ef       	ldi	r22, 0xFF	; 255
    4142:	7f ef       	ldi	r23, 0xFF	; 255
    4144:	02 c0       	rjmp	.+4      	; 0x414a <__fpcmp_parts_f+0xac>
    4146:	60 e0       	ldi	r22, 0x00	; 0
    4148:	70 e0       	ldi	r23, 0x00	; 0
    414a:	cb 01       	movw	r24, r22
    414c:	1f 91       	pop	r17
    414e:	08 95       	ret

00004150 <__udivmodhi4>:
    4150:	aa 1b       	sub	r26, r26
    4152:	bb 1b       	sub	r27, r27
    4154:	51 e1       	ldi	r21, 0x11	; 17
    4156:	07 c0       	rjmp	.+14     	; 0x4166 <__udivmodhi4_ep>

00004158 <__udivmodhi4_loop>:
    4158:	aa 1f       	adc	r26, r26
    415a:	bb 1f       	adc	r27, r27
    415c:	a6 17       	cp	r26, r22
    415e:	b7 07       	cpc	r27, r23
    4160:	10 f0       	brcs	.+4      	; 0x4166 <__udivmodhi4_ep>
    4162:	a6 1b       	sub	r26, r22
    4164:	b7 0b       	sbc	r27, r23

00004166 <__udivmodhi4_ep>:
    4166:	88 1f       	adc	r24, r24
    4168:	99 1f       	adc	r25, r25
    416a:	5a 95       	dec	r21
    416c:	a9 f7       	brne	.-22     	; 0x4158 <__udivmodhi4_loop>
    416e:	80 95       	com	r24
    4170:	90 95       	com	r25
    4172:	bc 01       	movw	r22, r24
    4174:	cd 01       	movw	r24, r26
    4176:	08 95       	ret

00004178 <__prologue_saves__>:
    4178:	2f 92       	push	r2
    417a:	3f 92       	push	r3
    417c:	4f 92       	push	r4
    417e:	5f 92       	push	r5
    4180:	6f 92       	push	r6
    4182:	7f 92       	push	r7
    4184:	8f 92       	push	r8
    4186:	9f 92       	push	r9
    4188:	af 92       	push	r10
    418a:	bf 92       	push	r11
    418c:	cf 92       	push	r12
    418e:	df 92       	push	r13
    4190:	ef 92       	push	r14
    4192:	ff 92       	push	r15
    4194:	0f 93       	push	r16
    4196:	1f 93       	push	r17
    4198:	cf 93       	push	r28
    419a:	df 93       	push	r29
    419c:	cd b7       	in	r28, 0x3d	; 61
    419e:	de b7       	in	r29, 0x3e	; 62
    41a0:	ca 1b       	sub	r28, r26
    41a2:	db 0b       	sbc	r29, r27
    41a4:	0f b6       	in	r0, 0x3f	; 63
    41a6:	f8 94       	cli
    41a8:	de bf       	out	0x3e, r29	; 62
    41aa:	0f be       	out	0x3f, r0	; 63
    41ac:	cd bf       	out	0x3d, r28	; 61
    41ae:	19 94       	eijmp

000041b0 <__epilogue_restores__>:
    41b0:	2a 88       	ldd	r2, Y+18	; 0x12
    41b2:	39 88       	ldd	r3, Y+17	; 0x11
    41b4:	48 88       	ldd	r4, Y+16	; 0x10
    41b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    41b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    41ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    41bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    41be:	9b 84       	ldd	r9, Y+11	; 0x0b
    41c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    41c2:	b9 84       	ldd	r11, Y+9	; 0x09
    41c4:	c8 84       	ldd	r12, Y+8	; 0x08
    41c6:	df 80       	ldd	r13, Y+7	; 0x07
    41c8:	ee 80       	ldd	r14, Y+6	; 0x06
    41ca:	fd 80       	ldd	r15, Y+5	; 0x05
    41cc:	0c 81       	ldd	r16, Y+4	; 0x04
    41ce:	1b 81       	ldd	r17, Y+3	; 0x03
    41d0:	aa 81       	ldd	r26, Y+2	; 0x02
    41d2:	b9 81       	ldd	r27, Y+1	; 0x01
    41d4:	ce 0f       	add	r28, r30
    41d6:	d1 1d       	adc	r29, r1
    41d8:	0f b6       	in	r0, 0x3f	; 63
    41da:	f8 94       	cli
    41dc:	de bf       	out	0x3e, r29	; 62
    41de:	0f be       	out	0x3f, r0	; 63
    41e0:	cd bf       	out	0x3d, r28	; 61
    41e2:	ed 01       	movw	r28, r26
    41e4:	08 95       	ret

000041e6 <_exit>:
    41e6:	f8 94       	cli

000041e8 <__stop_program>:
    41e8:	ff cf       	rjmp	.-2      	; 0x41e8 <__stop_program>
