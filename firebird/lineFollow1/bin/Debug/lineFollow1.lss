
bin\Debug\lineFollow1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000114  00800200  00002ff6  000030aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ff6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800314  00800314  000031be  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000031be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  000031c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000394  00000000  00000000  000031e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c59  00000000  00000000  00003575  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000252  00000000  00000000  000041ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010dd  00000000  00000000  00004420  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00005500  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ca  00000000  00000000  000057b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_5>
      18:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 ef       	ldi	r30, 0xF6	; 246
      fc:	ff e2       	ldi	r31, 0x2F	; 47
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 31       	cpi	r26, 0x14	; 20
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a4 e1       	ldi	r26, 0x14	; 20
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ae 32       	cpi	r26, 0x2E	; 46
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 92 10 	call	0x2124	; 0x2124 <main>
     122:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <timer5_init>:
    void left_position_encoder_interrupt_init (void);
    void right_position_encoder_interrupt_init (void);


void timer5_init()
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
     132:	e1 e2       	ldi	r30, 0x21	; 33
     134:	f1 e0       	ldi	r31, 0x01	; 1
     136:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     138:	e5 e2       	ldi	r30, 0x25	; 37
     13a:	f1 e0       	ldi	r31, 0x01	; 1
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     140:	e4 e2       	ldi	r30, 0x24	; 36
     142:	f1 e0       	ldi	r31, 0x01	; 1
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     148:	e9 e2       	ldi	r30, 0x29	; 41
     14a:	f1 e0       	ldi	r31, 0x01	; 1
     14c:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     14e:	e8 e2       	ldi	r30, 0x28	; 40
     150:	f1 e0       	ldi	r31, 0x01	; 1
     152:	8f ef       	ldi	r24, 0xFF	; 255
     154:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     156:	eb e2       	ldi	r30, 0x2B	; 43
     158:	f1 e0       	ldi	r31, 0x01	; 1
     15a:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     15c:	ea e2       	ldi	r30, 0x2A	; 42
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	8f ef       	ldi	r24, 0xFF	; 255
     162:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     164:	ed e2       	ldi	r30, 0x2D	; 45
     166:	f1 e0       	ldi	r31, 0x01	; 1
     168:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     16a:	ec e2       	ldi	r30, 0x2C	; 44
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	8f ef       	ldi	r24, 0xFF	; 255
     170:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     172:	e0 e2       	ldi	r30, 0x20	; 32
     174:	f1 e0       	ldi	r31, 0x01	; 1
     176:	89 ea       	ldi	r24, 0xA9	; 169
     178:	80 83       	st	Z, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     17a:	e1 e2       	ldi	r30, 0x21	; 33
     17c:	f1 e0       	ldi	r31, 0x01	; 1
     17e:	8b e0       	ldi	r24, 0x0B	; 11
     180:	80 83       	st	Z, r24
}
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <velocity>:

void velocity (unsigned char left_motor, unsigned char right_motor)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	0f 92       	push	r0
     18e:	0f 92       	push	r0
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
     194:	89 83       	std	Y+1, r24	; 0x01
     196:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
     198:	e8 e2       	ldi	r30, 0x28	; 40
     19a:	f1 e0       	ldi	r31, 0x01	; 1
     19c:	89 81       	ldd	r24, Y+1	; 0x01
     19e:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
     1a0:	ea e2       	ldi	r30, 0x2A	; 42
     1a2:	f1 e0       	ldi	r31, 0x01	; 1
     1a4:	8a 81       	ldd	r24, Y+2	; 0x02
     1a6:	80 83       	st	Z, r24
}
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
     1ac:	cf 91       	pop	r28
     1ae:	df 91       	pop	r29
     1b0:	08 95       	ret

000001b2 <motion_pin_config>:

void motion_pin_config (void)
{
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F; //set direction of the PORTA 3 to PORTA 0 pins as output
     1ba:	a1 e2       	ldi	r26, 0x21	; 33
     1bc:	b0 e0       	ldi	r27, 0x00	; 0
     1be:	e1 e2       	ldi	r30, 0x21	; 33
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	8f 60       	ori	r24, 0x0F	; 15
     1c6:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0; // set initial value of the PORTA 3 to PORTA 0 pins to logic 0
     1c8:	a2 e2       	ldi	r26, 0x22	; 34
     1ca:	b0 e0       	ldi	r27, 0x00	; 0
     1cc:	e2 e2       	ldi	r30, 0x22	; 34
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	80 81       	ld	r24, Z
     1d2:	80 7f       	andi	r24, 0xF0	; 240
     1d4:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     1d6:	aa e0       	ldi	r26, 0x0A	; 10
     1d8:	b1 e0       	ldi	r27, 0x01	; 1
     1da:	ea e0       	ldi	r30, 0x0A	; 10
     1dc:	f1 e0       	ldi	r31, 0x01	; 1
     1de:	80 81       	ld	r24, Z
     1e0:	88 61       	ori	r24, 0x18	; 24
     1e2:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM
     1e4:	ab e0       	ldi	r26, 0x0B	; 11
     1e6:	b1 e0       	ldi	r27, 0x01	; 1
     1e8:	eb e0       	ldi	r30, 0x0B	; 11
     1ea:	f1 e0       	ldi	r31, 0x01	; 1
     1ec:	80 81       	ld	r24, Z
     1ee:	88 61       	ori	r24, 0x18	; 24
     1f0:	8c 93       	st	X, r24
}
     1f2:	cf 91       	pop	r28
     1f4:	df 91       	pop	r29
     1f6:	08 95       	ret

000001f8 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
     1f8:	df 93       	push	r29
     1fa:	cf 93       	push	r28
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     200:	ad e2       	ldi	r26, 0x2D	; 45
     202:	b0 e0       	ldi	r27, 0x00	; 0
     204:	ed e2       	ldi	r30, 0x2D	; 45
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	8f 7e       	andi	r24, 0xEF	; 239
     20c:	8c 93       	st	X, r24
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     20e:	ae e2       	ldi	r26, 0x2E	; 46
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	ee e2       	ldi	r30, 0x2E	; 46
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	80 61       	ori	r24, 0x10	; 16
     21a:	8c 93       	st	X, r24
}
     21c:	cf 91       	pop	r28
     21e:	df 91       	pop	r29
     220:	08 95       	ret

00000222 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
     222:	df 93       	push	r29
     224:	cf 93       	push	r28
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     22a:	ad e2       	ldi	r26, 0x2D	; 45
     22c:	b0 e0       	ldi	r27, 0x00	; 0
     22e:	ed e2       	ldi	r30, 0x2D	; 45
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	8f 7d       	andi	r24, 0xDF	; 223
     236:	8c 93       	st	X, r24
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     238:	ae e2       	ldi	r26, 0x2E	; 46
     23a:	b0 e0       	ldi	r27, 0x00	; 0
     23c:	ee e2       	ldi	r30, 0x2E	; 46
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	80 62       	ori	r24, 0x20	; 32
     244:	8c 93       	st	X, r24
}
     246:	cf 91       	pop	r28
     248:	df 91       	pop	r29
     24a:	08 95       	ret

0000024c <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
     24c:	df 93       	push	r29
     24e:	cf 93       	push	r28
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
     254:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     256:	aa e6       	ldi	r26, 0x6A	; 106
     258:	b0 e0       	ldi	r27, 0x00	; 0
     25a:	ea e6       	ldi	r30, 0x6A	; 106
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	82 60       	ori	r24, 0x02	; 2
     262:	8c 93       	st	X, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     264:	ad e3       	ldi	r26, 0x3D	; 61
     266:	b0 e0       	ldi	r27, 0x00	; 0
     268:	ed e3       	ldi	r30, 0x3D	; 61
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	80 61       	ori	r24, 0x10	; 16
     270:	8c 93       	st	X, r24
	sei();   // Enables the global interrupt
     272:	78 94       	sei
}
     274:	cf 91       	pop	r28
     276:	df 91       	pop	r29
     278:	08 95       	ret

0000027a <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
     27a:	df 93       	push	r29
     27c:	cf 93       	push	r28
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
     282:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     284:	aa e6       	ldi	r26, 0x6A	; 106
     286:	b0 e0       	ldi	r27, 0x00	; 0
     288:	ea e6       	ldi	r30, 0x6A	; 106
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	88 60       	ori	r24, 0x08	; 8
     290:	8c 93       	st	X, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     292:	ad e3       	ldi	r26, 0x3D	; 61
     294:	b0 e0       	ldi	r27, 0x00	; 0
     296:	ed e3       	ldi	r30, 0x3D	; 61
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	80 81       	ld	r24, Z
     29c:	80 62       	ori	r24, 0x20	; 32
     29e:	8c 93       	st	X, r24
	sei();   // Enables the global interrupt
     2a0:	78 94       	sei
}
     2a2:	cf 91       	pop	r28
     2a4:	df 91       	pop	r29
     2a6:	08 95       	ret

000002a8 <set_motors>:

void set_motors()
{
     2a8:	df 93       	push	r29
     2aa:	cf 93       	push	r28
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
    motion_pin_config();
     2b0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <motion_pin_config>
    left_encoder_pin_config();
     2b4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <left_encoder_pin_config>
    right_encoder_pin_config();
     2b8:	0e 94 11 01 	call	0x222	; 0x222 <right_encoder_pin_config>
    left_position_encoder_interrupt_init();
     2bc:	0e 94 26 01 	call	0x24c	; 0x24c <left_position_encoder_interrupt_init>
    right_position_encoder_interrupt_init();
     2c0:	0e 94 3d 01 	call	0x27a	; 0x27a <right_position_encoder_interrupt_init>
    timer5_init();
     2c4:	0e 94 95 00 	call	0x12a	; 0x12a <timer5_init>
}
     2c8:	cf 91       	pop	r28
     2ca:	df 91       	pop	r29
     2cc:	08 95       	ret

000002ce <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     2ce:	1f 92       	push	r1
     2d0:	0f 92       	push	r0
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	0f 92       	push	r0
     2d6:	11 24       	eor	r1, r1
     2d8:	8f 93       	push	r24
     2da:	9f 93       	push	r25
     2dc:	af 93       	push	r26
     2de:	bf 93       	push	r27
     2e0:	df 93       	push	r29
     2e2:	cf 93       	push	r28
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
	ShaftCountRight++;  //increment right shaft position count
     2e8:	80 91 18 03 	lds	r24, 0x0318
     2ec:	90 91 19 03 	lds	r25, 0x0319
     2f0:	a0 91 1a 03 	lds	r26, 0x031A
     2f4:	b0 91 1b 03 	lds	r27, 0x031B
     2f8:	01 96       	adiw	r24, 0x01	; 1
     2fa:	a1 1d       	adc	r26, r1
     2fc:	b1 1d       	adc	r27, r1
     2fe:	80 93 18 03 	sts	0x0318, r24
     302:	90 93 19 03 	sts	0x0319, r25
     306:	a0 93 1a 03 	sts	0x031A, r26
     30a:	b0 93 1b 03 	sts	0x031B, r27
}
     30e:	cf 91       	pop	r28
     310:	df 91       	pop	r29
     312:	bf 91       	pop	r27
     314:	af 91       	pop	r26
     316:	9f 91       	pop	r25
     318:	8f 91       	pop	r24
     31a:	0f 90       	pop	r0
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	0f 90       	pop	r0
     320:	1f 90       	pop	r1
     322:	18 95       	reti

00000324 <__vector_5>:

//ISR for left position encoder
ISR(INT4_vect)
{
     324:	1f 92       	push	r1
     326:	0f 92       	push	r0
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	0f 92       	push	r0
     32c:	11 24       	eor	r1, r1
     32e:	8f 93       	push	r24
     330:	9f 93       	push	r25
     332:	af 93       	push	r26
     334:	bf 93       	push	r27
     336:	df 93       	push	r29
     338:	cf 93       	push	r28
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft++;  //increment left shaft position count
     33e:	80 91 14 03 	lds	r24, 0x0314
     342:	90 91 15 03 	lds	r25, 0x0315
     346:	a0 91 16 03 	lds	r26, 0x0316
     34a:	b0 91 17 03 	lds	r27, 0x0317
     34e:	01 96       	adiw	r24, 0x01	; 1
     350:	a1 1d       	adc	r26, r1
     352:	b1 1d       	adc	r27, r1
     354:	80 93 14 03 	sts	0x0314, r24
     358:	90 93 15 03 	sts	0x0315, r25
     35c:	a0 93 16 03 	sts	0x0316, r26
     360:	b0 93 17 03 	sts	0x0317, r27
}
     364:	cf 91       	pop	r28
     366:	df 91       	pop	r29
     368:	bf 91       	pop	r27
     36a:	af 91       	pop	r26
     36c:	9f 91       	pop	r25
     36e:	8f 91       	pop	r24
     370:	0f 90       	pop	r0
     372:	0f be       	out	0x3f, r0	; 63
     374:	0f 90       	pop	r0
     376:	1f 90       	pop	r1
     378:	18 95       	reti

0000037a <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
     37a:	df 93       	push	r29
     37c:	cf 93       	push	r28
     37e:	0f 92       	push	r0
     380:	0f 92       	push	r0
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
     386:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
     388:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
     38a:	8a 81       	ldd	r24, Y+2	; 0x02
     38c:	8f 70       	andi	r24, 0x0F	; 15
     38e:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 			// reading the PORTA's original status
     390:	e2 e2       	ldi	r30, 0x22	; 34
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	80 81       	ld	r24, Z
     396:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	80 7f       	andi	r24, 0xF0	; 240
     39c:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     39e:	99 81       	ldd	r25, Y+1	; 0x01
     3a0:	8a 81       	ldd	r24, Y+2	; 0x02
     3a2:	89 2b       	or	r24, r25
     3a4:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 			// setting the command to the port
     3a6:	e2 e2       	ldi	r30, 0x22	; 34
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	80 83       	st	Z, r24
}
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	cf 91       	pop	r28
     3b4:	df 91       	pop	r29
     3b6:	08 95       	ret

000003b8 <forward>:


void forward (void) //both wheels forward
{
     3b8:	df 93       	push	r29
     3ba:	cf 93       	push	r28
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
    motion_set(0x06);
     3c0:	86 e0       	ldi	r24, 0x06	; 6
     3c2:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     3c6:	cf 91       	pop	r28
     3c8:	df 91       	pop	r29
     3ca:	08 95       	ret

000003cc <forward_mm>:

void forward_mm(unsigned int distance)
{
     3cc:	df 93       	push	r29
     3ce:	cf 93       	push	r28
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	2a 97       	sbiw	r28, 0x0a	; 10
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
     3e0:	9a 87       	std	Y+10, r25	; 0x0a
     3e2:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	a0 e0       	ldi	r26, 0x00	; 0
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	8d 83       	std	Y+5, r24	; 0x05
     3ee:	9e 83       	std	Y+6, r25	; 0x06
     3f0:	af 83       	std	Y+7, r26	; 0x07
     3f2:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     3f4:	19 82       	std	Y+1, r1	; 0x01
     3f6:	1a 82       	std	Y+2, r1	; 0x02
     3f8:	1b 82       	std	Y+3, r1	; 0x03
     3fa:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = distance / 5.338; // division by resolution to get shaft count
     3fc:	89 85       	ldd	r24, Y+9	; 0x09
     3fe:	9a 85       	ldd	r25, Y+10	; 0x0a
     400:	cc 01       	movw	r24, r24
     402:	a0 e0       	ldi	r26, 0x00	; 0
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	bc 01       	movw	r22, r24
     408:	cd 01       	movw	r24, r26
     40a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__floatunsisf>
     40e:	dc 01       	movw	r26, r24
     410:	cb 01       	movw	r24, r22
     412:	bc 01       	movw	r22, r24
     414:	cd 01       	movw	r24, r26
     416:	25 ee       	ldi	r18, 0xE5	; 229
     418:	30 ed       	ldi	r19, 0xD0	; 208
     41a:	4a ea       	ldi	r20, 0xAA	; 170
     41c:	50 e4       	ldi	r21, 0x40	; 64
     41e:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divsf3>
     422:	dc 01       	movw	r26, r24
     424:	cb 01       	movw	r24, r22
     426:	8d 83       	std	Y+5, r24	; 0x05
     428:	9e 83       	std	Y+6, r25	; 0x06
     42a:	af 83       	std	Y+7, r26	; 0x07
     42c:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     42e:	6d 81       	ldd	r22, Y+5	; 0x05
     430:	7e 81       	ldd	r23, Y+6	; 0x06
     432:	8f 81       	ldd	r24, Y+7	; 0x07
     434:	98 85       	ldd	r25, Y+8	; 0x08
     436:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
     43a:	dc 01       	movw	r26, r24
     43c:	cb 01       	movw	r24, r22
     43e:	89 83       	std	Y+1, r24	; 0x01
     440:	9a 83       	std	Y+2, r25	; 0x02
     442:	ab 83       	std	Y+3, r26	; 0x03
     444:	bc 83       	std	Y+4, r27	; 0x04

	ShaftCountRight = 0;
     446:	10 92 18 03 	sts	0x0318, r1
     44a:	10 92 19 03 	sts	0x0319, r1
     44e:	10 92 1a 03 	sts	0x031A, r1
     452:	10 92 1b 03 	sts	0x031B, r1
	ShaftCountLeft = 0;
     456:	10 92 14 03 	sts	0x0314, r1
     45a:	10 92 15 03 	sts	0x0315, r1
     45e:	10 92 16 03 	sts	0x0316, r1
     462:	10 92 17 03 	sts	0x0317, r1
    forward();
     466:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <forward>

	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt || ShaftCountLeft > ReqdShaftCountInt)
     46a:	20 91 18 03 	lds	r18, 0x0318
     46e:	30 91 19 03 	lds	r19, 0x0319
     472:	40 91 1a 03 	lds	r20, 0x031A
     476:	50 91 1b 03 	lds	r21, 0x031B
     47a:	89 81       	ldd	r24, Y+1	; 0x01
     47c:	9a 81       	ldd	r25, Y+2	; 0x02
     47e:	ab 81       	ldd	r26, Y+3	; 0x03
     480:	bc 81       	ldd	r27, Y+4	; 0x04
     482:	82 17       	cp	r24, r18
     484:	93 07       	cpc	r25, r19
     486:	a4 07       	cpc	r26, r20
     488:	b5 07       	cpc	r27, r21
     48a:	88 f0       	brcs	.+34     	; 0x4ae <forward_mm+0xe2>
     48c:	20 91 14 03 	lds	r18, 0x0314
     490:	30 91 15 03 	lds	r19, 0x0315
     494:	40 91 16 03 	lds	r20, 0x0316
     498:	50 91 17 03 	lds	r21, 0x0317
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	9a 81       	ldd	r25, Y+2	; 0x02
     4a0:	ab 81       	ldd	r26, Y+3	; 0x03
     4a2:	bc 81       	ldd	r27, Y+4	; 0x04
     4a4:	82 17       	cp	r24, r18
     4a6:	93 07       	cpc	r25, r19
     4a8:	a4 07       	cpc	r26, r20
     4aa:	b5 07       	cpc	r27, r21
     4ac:	f0 f6       	brcc	.-68     	; 0x46a <forward_mm+0x9e>
		{
			break;
		}
	}
	stop(); //Stop robot
     4ae:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     4b2:	2a 96       	adiw	r28, 0x0a	; 10
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
     4be:	cf 91       	pop	r28
     4c0:	df 91       	pop	r29
     4c2:	08 95       	ret

000004c4 <back>:

void back (void) //both wheels backward
{
     4c4:	df 93       	push	r29
     4c6:	cf 93       	push	r28
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
     4cc:	89 e0       	ldi	r24, 0x09	; 9
     4ce:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     4d2:	cf 91       	pop	r28
     4d4:	df 91       	pop	r29
     4d6:	08 95       	ret

000004d8 <back_mm>:

void back_mm (unsigned int distance)
{
     4d8:	df 93       	push	r29
     4da:	cf 93       	push	r28
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	2a 97       	sbiw	r28, 0x0a	; 10
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	f8 94       	cli
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	cd bf       	out	0x3d, r28	; 61
     4ec:	9a 87       	std	Y+10, r25	; 0x0a
     4ee:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	a0 e0       	ldi	r26, 0x00	; 0
     4f6:	b0 e0       	ldi	r27, 0x00	; 0
     4f8:	8d 83       	std	Y+5, r24	; 0x05
     4fa:	9e 83       	std	Y+6, r25	; 0x06
     4fc:	af 83       	std	Y+7, r26	; 0x07
     4fe:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     500:	19 82       	std	Y+1, r1	; 0x01
     502:	1a 82       	std	Y+2, r1	; 0x02
     504:	1b 82       	std	Y+3, r1	; 0x03
     506:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = distance / 5.338; // division by resolution to get shaft count
     508:	89 85       	ldd	r24, Y+9	; 0x09
     50a:	9a 85       	ldd	r25, Y+10	; 0x0a
     50c:	cc 01       	movw	r24, r24
     50e:	a0 e0       	ldi	r26, 0x00	; 0
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	bc 01       	movw	r22, r24
     514:	cd 01       	movw	r24, r26
     516:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__floatunsisf>
     51a:	dc 01       	movw	r26, r24
     51c:	cb 01       	movw	r24, r22
     51e:	bc 01       	movw	r22, r24
     520:	cd 01       	movw	r24, r26
     522:	25 ee       	ldi	r18, 0xE5	; 229
     524:	30 ed       	ldi	r19, 0xD0	; 208
     526:	4a ea       	ldi	r20, 0xAA	; 170
     528:	50 e4       	ldi	r21, 0x40	; 64
     52a:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divsf3>
     52e:	dc 01       	movw	r26, r24
     530:	cb 01       	movw	r24, r22
     532:	8d 83       	std	Y+5, r24	; 0x05
     534:	9e 83       	std	Y+6, r25	; 0x06
     536:	af 83       	std	Y+7, r26	; 0x07
     538:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     53a:	6d 81       	ldd	r22, Y+5	; 0x05
     53c:	7e 81       	ldd	r23, Y+6	; 0x06
     53e:	8f 81       	ldd	r24, Y+7	; 0x07
     540:	98 85       	ldd	r25, Y+8	; 0x08
     542:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
     546:	dc 01       	movw	r26, r24
     548:	cb 01       	movw	r24, r22
     54a:	89 83       	std	Y+1, r24	; 0x01
     54c:	9a 83       	std	Y+2, r25	; 0x02
     54e:	ab 83       	std	Y+3, r26	; 0x03
     550:	bc 83       	std	Y+4, r27	; 0x04

    //Counting any one of the shaft counts.
	ShaftCountRight = 0;
     552:	10 92 18 03 	sts	0x0318, r1
     556:	10 92 19 03 	sts	0x0319, r1
     55a:	10 92 1a 03 	sts	0x031A, r1
     55e:	10 92 1b 03 	sts	0x031B, r1
    back();
     562:	0e 94 62 02 	call	0x4c4	; 0x4c4 <back>

	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
     566:	20 91 18 03 	lds	r18, 0x0318
     56a:	30 91 19 03 	lds	r19, 0x0319
     56e:	40 91 1a 03 	lds	r20, 0x031A
     572:	50 91 1b 03 	lds	r21, 0x031B
     576:	89 81       	ldd	r24, Y+1	; 0x01
     578:	9a 81       	ldd	r25, Y+2	; 0x02
     57a:	ab 81       	ldd	r26, Y+3	; 0x03
     57c:	bc 81       	ldd	r27, Y+4	; 0x04
     57e:	82 17       	cp	r24, r18
     580:	93 07       	cpc	r25, r19
     582:	a4 07       	cpc	r26, r20
     584:	b5 07       	cpc	r27, r21
     586:	78 f7       	brcc	.-34     	; 0x566 <back_mm+0x8e>
		{
			break;
		}
	}
	stop(); //Stop robot
     588:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     58c:	2a 96       	adiw	r28, 0x0a	; 10
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
     598:	cf 91       	pop	r28
     59a:	df 91       	pop	r29
     59c:	08 95       	ret

0000059e <left>:

void left (void) //Left wheel backward, Right wheel forward
{
     59e:	df 93       	push	r29
     5a0:	cf 93       	push	r28
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
     5a6:	85 e0       	ldi	r24, 0x05	; 5
     5a8:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     5ac:	cf 91       	pop	r28
     5ae:	df 91       	pop	r29
     5b0:	08 95       	ret

000005b2 <left_degrees>:

void left_degrees(unsigned int degrees)
{
     5b2:	df 93       	push	r29
     5b4:	cf 93       	push	r28
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
     5ba:	2c 97       	sbiw	r28, 0x0c	; 12
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	f8 94       	cli
     5c0:	de bf       	out	0x3e, r29	; 62
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	cd bf       	out	0x3d, r28	; 61
     5c6:	9a 87       	std	Y+10, r25	; 0x0a
     5c8:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	a0 e0       	ldi	r26, 0x00	; 0
     5d0:	b0 e0       	ldi	r27, 0x00	; 0
     5d2:	8d 83       	std	Y+5, r24	; 0x05
     5d4:	9e 83       	std	Y+6, r25	; 0x06
     5d6:	af 83       	std	Y+7, r26	; 0x07
     5d8:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     5da:	19 82       	std	Y+1, r1	; 0x01
     5dc:	1a 82       	std	Y+2, r1	; 0x02
     5de:	1b 82       	std	Y+3, r1	; 0x03
     5e0:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees/ 4.090; // division by resolution to get shaft count
     5e2:	89 85       	ldd	r24, Y+9	; 0x09
     5e4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5e6:	cc 01       	movw	r24, r24
     5e8:	a0 e0       	ldi	r26, 0x00	; 0
     5ea:	b0 e0       	ldi	r27, 0x00	; 0
     5ec:	bc 01       	movw	r22, r24
     5ee:	cd 01       	movw	r24, r26
     5f0:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__floatunsisf>
     5f4:	dc 01       	movw	r26, r24
     5f6:	cb 01       	movw	r24, r22
     5f8:	bc 01       	movw	r22, r24
     5fa:	cd 01       	movw	r24, r26
     5fc:	28 e4       	ldi	r18, 0x48	; 72
     5fe:	31 ee       	ldi	r19, 0xE1	; 225
     600:	42 e8       	ldi	r20, 0x82	; 130
     602:	50 e4       	ldi	r21, 0x40	; 64
     604:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divsf3>
     608:	dc 01       	movw	r26, r24
     60a:	cb 01       	movw	r24, r22
     60c:	8d 83       	std	Y+5, r24	; 0x05
     60e:	9e 83       	std	Y+6, r25	; 0x06
     610:	af 83       	std	Y+7, r26	; 0x07
     612:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     614:	6d 81       	ldd	r22, Y+5	; 0x05
     616:	7e 81       	ldd	r23, Y+6	; 0x06
     618:	8f 81       	ldd	r24, Y+7	; 0x07
     61a:	98 85       	ldd	r25, Y+8	; 0x08
     61c:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
     620:	dc 01       	movw	r26, r24
     622:	cb 01       	movw	r24, r22
     624:	cc 01       	movw	r24, r24
     626:	a0 e0       	ldi	r26, 0x00	; 0
     628:	b0 e0       	ldi	r27, 0x00	; 0
     62a:	89 83       	std	Y+1, r24	; 0x01
     62c:	9a 83       	std	Y+2, r25	; 0x02
     62e:	ab 83       	std	Y+3, r26	; 0x03
     630:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     632:	10 92 18 03 	sts	0x0318, r1
     636:	10 92 19 03 	sts	0x0319, r1
     63a:	10 92 1a 03 	sts	0x031A, r1
     63e:	10 92 1b 03 	sts	0x031B, r1
	ShaftCountLeft = 0;
     642:	10 92 14 03 	sts	0x0314, r1
     646:	10 92 15 03 	sts	0x0315, r1
     64a:	10 92 16 03 	sts	0x0316, r1
     64e:	10 92 17 03 	sts	0x0317, r1

    left();
     652:	0e 94 cf 02 	call	0x59e	; 0x59e <left>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     656:	20 91 18 03 	lds	r18, 0x0318
     65a:	30 91 19 03 	lds	r19, 0x0319
     65e:	40 91 1a 03 	lds	r20, 0x031A
     662:	50 91 1b 03 	lds	r21, 0x031B
     666:	1c 86       	std	Y+12, r1	; 0x0c
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	9a 81       	ldd	r25, Y+2	; 0x02
     66c:	ab 81       	ldd	r26, Y+3	; 0x03
     66e:	bc 81       	ldd	r27, Y+4	; 0x04
     670:	28 17       	cp	r18, r24
     672:	39 07       	cpc	r19, r25
     674:	4a 07       	cpc	r20, r26
     676:	5b 07       	cpc	r21, r27
     678:	10 f0       	brcs	.+4      	; 0x67e <left_degrees+0xcc>
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	8c 87       	std	Y+12, r24	; 0x0c
     67e:	20 91 14 03 	lds	r18, 0x0314
     682:	30 91 15 03 	lds	r19, 0x0315
     686:	40 91 16 03 	lds	r20, 0x0316
     68a:	50 91 17 03 	lds	r21, 0x0317
     68e:	1b 86       	std	Y+11, r1	; 0x0b
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	9a 81       	ldd	r25, Y+2	; 0x02
     694:	ab 81       	ldd	r26, Y+3	; 0x03
     696:	bc 81       	ldd	r27, Y+4	; 0x04
     698:	28 17       	cp	r18, r24
     69a:	39 07       	cpc	r19, r25
     69c:	4a 07       	cpc	r20, r26
     69e:	5b 07       	cpc	r21, r27
     6a0:	10 f0       	brcs	.+4      	; 0x6a6 <left_degrees+0xf4>
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	9b 87       	std	Y+11, r25	; 0x0b
     6a6:	8c 85       	ldd	r24, Y+12	; 0x0c
     6a8:	9b 85       	ldd	r25, Y+11	; 0x0b
     6aa:	89 2b       	or	r24, r25
     6ac:	88 23       	and	r24, r24
     6ae:	99 f2       	breq	.-90     	; 0x656 <left_degrees+0xa4>
		break;
	}
	stop(); //Stop robot
     6b0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     6b4:	2c 96       	adiw	r28, 0x0c	; 12
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	cf 91       	pop	r28
     6c2:	df 91       	pop	r29
     6c4:	08 95       	ret

000006c6 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
     6c6:	df 93       	push	r29
     6c8:	cf 93       	push	r28
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
     6ce:	8a e0       	ldi	r24, 0x0A	; 10
     6d0:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     6d4:	cf 91       	pop	r28
     6d6:	df 91       	pop	r29
     6d8:	08 95       	ret

000006da <right_degrees>:

void right_degrees(unsigned int degrees)
{
     6da:	df 93       	push	r29
     6dc:	cf 93       	push	r28
     6de:	cd b7       	in	r28, 0x3d	; 61
     6e0:	de b7       	in	r29, 0x3e	; 62
     6e2:	2c 97       	sbiw	r28, 0x0c	; 12
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	cd bf       	out	0x3d, r28	; 61
     6ee:	9a 87       	std	Y+10, r25	; 0x0a
     6f0:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	a0 e0       	ldi	r26, 0x00	; 0
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	8d 83       	std	Y+5, r24	; 0x05
     6fc:	9e 83       	std	Y+6, r25	; 0x06
     6fe:	af 83       	std	Y+7, r26	; 0x07
     700:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     702:	19 82       	std	Y+1, r1	; 0x01
     704:	1a 82       	std	Y+2, r1	; 0x02
     706:	1b 82       	std	Y+3, r1	; 0x03
     708:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees/ 4.090; // division by resolution to get shaft count
     70a:	89 85       	ldd	r24, Y+9	; 0x09
     70c:	9a 85       	ldd	r25, Y+10	; 0x0a
     70e:	cc 01       	movw	r24, r24
     710:	a0 e0       	ldi	r26, 0x00	; 0
     712:	b0 e0       	ldi	r27, 0x00	; 0
     714:	bc 01       	movw	r22, r24
     716:	cd 01       	movw	r24, r26
     718:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__floatunsisf>
     71c:	dc 01       	movw	r26, r24
     71e:	cb 01       	movw	r24, r22
     720:	bc 01       	movw	r22, r24
     722:	cd 01       	movw	r24, r26
     724:	28 e4       	ldi	r18, 0x48	; 72
     726:	31 ee       	ldi	r19, 0xE1	; 225
     728:	42 e8       	ldi	r20, 0x82	; 130
     72a:	50 e4       	ldi	r21, 0x40	; 64
     72c:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divsf3>
     730:	dc 01       	movw	r26, r24
     732:	cb 01       	movw	r24, r22
     734:	8d 83       	std	Y+5, r24	; 0x05
     736:	9e 83       	std	Y+6, r25	; 0x06
     738:	af 83       	std	Y+7, r26	; 0x07
     73a:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     73c:	6d 81       	ldd	r22, Y+5	; 0x05
     73e:	7e 81       	ldd	r23, Y+6	; 0x06
     740:	8f 81       	ldd	r24, Y+7	; 0x07
     742:	98 85       	ldd	r25, Y+8	; 0x08
     744:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
     748:	dc 01       	movw	r26, r24
     74a:	cb 01       	movw	r24, r22
     74c:	cc 01       	movw	r24, r24
     74e:	a0 e0       	ldi	r26, 0x00	; 0
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	89 83       	std	Y+1, r24	; 0x01
     754:	9a 83       	std	Y+2, r25	; 0x02
     756:	ab 83       	std	Y+3, r26	; 0x03
     758:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     75a:	10 92 18 03 	sts	0x0318, r1
     75e:	10 92 19 03 	sts	0x0319, r1
     762:	10 92 1a 03 	sts	0x031A, r1
     766:	10 92 1b 03 	sts	0x031B, r1
	ShaftCountLeft = 0;
     76a:	10 92 14 03 	sts	0x0314, r1
     76e:	10 92 15 03 	sts	0x0315, r1
     772:	10 92 16 03 	sts	0x0316, r1
     776:	10 92 17 03 	sts	0x0317, r1

    right();
     77a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <right>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     77e:	20 91 18 03 	lds	r18, 0x0318
     782:	30 91 19 03 	lds	r19, 0x0319
     786:	40 91 1a 03 	lds	r20, 0x031A
     78a:	50 91 1b 03 	lds	r21, 0x031B
     78e:	1c 86       	std	Y+12, r1	; 0x0c
     790:	89 81       	ldd	r24, Y+1	; 0x01
     792:	9a 81       	ldd	r25, Y+2	; 0x02
     794:	ab 81       	ldd	r26, Y+3	; 0x03
     796:	bc 81       	ldd	r27, Y+4	; 0x04
     798:	28 17       	cp	r18, r24
     79a:	39 07       	cpc	r19, r25
     79c:	4a 07       	cpc	r20, r26
     79e:	5b 07       	cpc	r21, r27
     7a0:	10 f0       	brcs	.+4      	; 0x7a6 <right_degrees+0xcc>
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	8c 87       	std	Y+12, r24	; 0x0c
     7a6:	20 91 14 03 	lds	r18, 0x0314
     7aa:	30 91 15 03 	lds	r19, 0x0315
     7ae:	40 91 16 03 	lds	r20, 0x0316
     7b2:	50 91 17 03 	lds	r21, 0x0317
     7b6:	1b 86       	std	Y+11, r1	; 0x0b
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	9a 81       	ldd	r25, Y+2	; 0x02
     7bc:	ab 81       	ldd	r26, Y+3	; 0x03
     7be:	bc 81       	ldd	r27, Y+4	; 0x04
     7c0:	28 17       	cp	r18, r24
     7c2:	39 07       	cpc	r19, r25
     7c4:	4a 07       	cpc	r20, r26
     7c6:	5b 07       	cpc	r21, r27
     7c8:	10 f0       	brcs	.+4      	; 0x7ce <right_degrees+0xf4>
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	9b 87       	std	Y+11, r25	; 0x0b
     7ce:	8c 85       	ldd	r24, Y+12	; 0x0c
     7d0:	9b 85       	ldd	r25, Y+11	; 0x0b
     7d2:	89 2b       	or	r24, r25
     7d4:	88 23       	and	r24, r24
     7d6:	99 f2       	breq	.-90     	; 0x77e <right_degrees+0xa4>
		break;
	}
	stop(); //Stop robot
     7d8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     7dc:	2c 96       	adiw	r28, 0x0c	; 12
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	de bf       	out	0x3e, r29	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	cf 91       	pop	r28
     7ea:	df 91       	pop	r29
     7ec:	08 95       	ret

000007ee <soft_left>:


void soft_left (void) //Left wheel stationary, Right wheel forward
{
     7ee:	df 93       	push	r29
     7f0:	cf 93       	push	r28
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
     7f6:	84 e0       	ldi	r24, 0x04	; 4
     7f8:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     7fc:	cf 91       	pop	r28
     7fe:	df 91       	pop	r29
     800:	08 95       	ret

00000802 <soft_left_degrees>:

void soft_left_degrees(unsigned int degrees)
{
     802:	df 93       	push	r29
     804:	cf 93       	push	r28
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	2c 97       	sbiw	r28, 0x0c	; 12
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	de bf       	out	0x3e, r29	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	cd bf       	out	0x3d, r28	; 61
     816:	9a 87       	std	Y+10, r25	; 0x0a
     818:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	a0 e0       	ldi	r26, 0x00	; 0
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	8d 83       	std	Y+5, r24	; 0x05
     824:	9e 83       	std	Y+6, r25	; 0x06
     826:	af 83       	std	Y+7, r26	; 0x07
     828:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     82a:	19 82       	std	Y+1, r1	; 0x01
     82c:	1a 82       	std	Y+2, r1	; 0x02
     82e:	1b 82       	std	Y+3, r1	; 0x03
     830:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees * 2 / 4.090; // division by resolution to get shaft count
     832:	89 85       	ldd	r24, Y+9	; 0x09
     834:	9a 85       	ldd	r25, Y+10	; 0x0a
     836:	cc 01       	movw	r24, r24
     838:	a0 e0       	ldi	r26, 0x00	; 0
     83a:	b0 e0       	ldi	r27, 0x00	; 0
     83c:	bc 01       	movw	r22, r24
     83e:	cd 01       	movw	r24, r26
     840:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__floatunsisf>
     844:	9b 01       	movw	r18, r22
     846:	ac 01       	movw	r20, r24
     848:	ca 01       	movw	r24, r20
     84a:	b9 01       	movw	r22, r18
     84c:	0e 94 89 12 	call	0x2512	; 0x2512 <__addsf3>
     850:	dc 01       	movw	r26, r24
     852:	cb 01       	movw	r24, r22
     854:	bc 01       	movw	r22, r24
     856:	cd 01       	movw	r24, r26
     858:	28 e4       	ldi	r18, 0x48	; 72
     85a:	31 ee       	ldi	r19, 0xE1	; 225
     85c:	42 e8       	ldi	r20, 0x82	; 130
     85e:	50 e4       	ldi	r21, 0x40	; 64
     860:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divsf3>
     864:	dc 01       	movw	r26, r24
     866:	cb 01       	movw	r24, r22
     868:	8d 83       	std	Y+5, r24	; 0x05
     86a:	9e 83       	std	Y+6, r25	; 0x06
     86c:	af 83       	std	Y+7, r26	; 0x07
     86e:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     870:	6d 81       	ldd	r22, Y+5	; 0x05
     872:	7e 81       	ldd	r23, Y+6	; 0x06
     874:	8f 81       	ldd	r24, Y+7	; 0x07
     876:	98 85       	ldd	r25, Y+8	; 0x08
     878:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
     87c:	dc 01       	movw	r26, r24
     87e:	cb 01       	movw	r24, r22
     880:	cc 01       	movw	r24, r24
     882:	a0 e0       	ldi	r26, 0x00	; 0
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	89 83       	std	Y+1, r24	; 0x01
     888:	9a 83       	std	Y+2, r25	; 0x02
     88a:	ab 83       	std	Y+3, r26	; 0x03
     88c:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     88e:	10 92 18 03 	sts	0x0318, r1
     892:	10 92 19 03 	sts	0x0319, r1
     896:	10 92 1a 03 	sts	0x031A, r1
     89a:	10 92 1b 03 	sts	0x031B, r1
	ShaftCountLeft = 0;
     89e:	10 92 14 03 	sts	0x0314, r1
     8a2:	10 92 15 03 	sts	0x0315, r1
     8a6:	10 92 16 03 	sts	0x0316, r1
     8aa:	10 92 17 03 	sts	0x0317, r1

    soft_left();
     8ae:	0e 94 f7 03 	call	0x7ee	; 0x7ee <soft_left>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     8b2:	20 91 18 03 	lds	r18, 0x0318
     8b6:	30 91 19 03 	lds	r19, 0x0319
     8ba:	40 91 1a 03 	lds	r20, 0x031A
     8be:	50 91 1b 03 	lds	r21, 0x031B
     8c2:	1c 86       	std	Y+12, r1	; 0x0c
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	9a 81       	ldd	r25, Y+2	; 0x02
     8c8:	ab 81       	ldd	r26, Y+3	; 0x03
     8ca:	bc 81       	ldd	r27, Y+4	; 0x04
     8cc:	28 17       	cp	r18, r24
     8ce:	39 07       	cpc	r19, r25
     8d0:	4a 07       	cpc	r20, r26
     8d2:	5b 07       	cpc	r21, r27
     8d4:	10 f0       	brcs	.+4      	; 0x8da <soft_left_degrees+0xd8>
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	8c 87       	std	Y+12, r24	; 0x0c
     8da:	20 91 14 03 	lds	r18, 0x0314
     8de:	30 91 15 03 	lds	r19, 0x0315
     8e2:	40 91 16 03 	lds	r20, 0x0316
     8e6:	50 91 17 03 	lds	r21, 0x0317
     8ea:	1b 86       	std	Y+11, r1	; 0x0b
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
     8f0:	ab 81       	ldd	r26, Y+3	; 0x03
     8f2:	bc 81       	ldd	r27, Y+4	; 0x04
     8f4:	28 17       	cp	r18, r24
     8f6:	39 07       	cpc	r19, r25
     8f8:	4a 07       	cpc	r20, r26
     8fa:	5b 07       	cpc	r21, r27
     8fc:	10 f0       	brcs	.+4      	; 0x902 <soft_left_degrees+0x100>
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	9b 87       	std	Y+11, r25	; 0x0b
     902:	8c 85       	ldd	r24, Y+12	; 0x0c
     904:	9b 85       	ldd	r25, Y+11	; 0x0b
     906:	89 2b       	or	r24, r25
     908:	88 23       	and	r24, r24
     90a:	99 f2       	breq	.-90     	; 0x8b2 <soft_left_degrees+0xb0>
		break;
	}
	stop(); //Stop robot
     90c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     910:	2c 96       	adiw	r28, 0x0c	; 12
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	cf 91       	pop	r28
     91e:	df 91       	pop	r29
     920:	08 95       	ret

00000922 <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
     922:	df 93       	push	r29
     924:	cf 93       	push	r28
     926:	cd b7       	in	r28, 0x3d	; 61
     928:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     930:	cf 91       	pop	r28
     932:	df 91       	pop	r29
     934:	08 95       	ret

00000936 <soft_right_degrees>:

void soft_right_degrees(unsigned int degrees)
{
     936:	df 93       	push	r29
     938:	cf 93       	push	r28
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
     93e:	2c 97       	sbiw	r28, 0x0c	; 12
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	9a 87       	std	Y+10, r25	; 0x0a
     94c:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	a0 e0       	ldi	r26, 0x00	; 0
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	8d 83       	std	Y+5, r24	; 0x05
     958:	9e 83       	std	Y+6, r25	; 0x06
     95a:	af 83       	std	Y+7, r26	; 0x07
     95c:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     95e:	19 82       	std	Y+1, r1	; 0x01
     960:	1a 82       	std	Y+2, r1	; 0x02
     962:	1b 82       	std	Y+3, r1	; 0x03
     964:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees * 2 / 4.090; // division by resolution to get shaft count
     966:	89 85       	ldd	r24, Y+9	; 0x09
     968:	9a 85       	ldd	r25, Y+10	; 0x0a
     96a:	cc 01       	movw	r24, r24
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	bc 01       	movw	r22, r24
     972:	cd 01       	movw	r24, r26
     974:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__floatunsisf>
     978:	9b 01       	movw	r18, r22
     97a:	ac 01       	movw	r20, r24
     97c:	ca 01       	movw	r24, r20
     97e:	b9 01       	movw	r22, r18
     980:	0e 94 89 12 	call	0x2512	; 0x2512 <__addsf3>
     984:	dc 01       	movw	r26, r24
     986:	cb 01       	movw	r24, r22
     988:	bc 01       	movw	r22, r24
     98a:	cd 01       	movw	r24, r26
     98c:	28 e4       	ldi	r18, 0x48	; 72
     98e:	31 ee       	ldi	r19, 0xE1	; 225
     990:	42 e8       	ldi	r20, 0x82	; 130
     992:	50 e4       	ldi	r21, 0x40	; 64
     994:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divsf3>
     998:	dc 01       	movw	r26, r24
     99a:	cb 01       	movw	r24, r22
     99c:	8d 83       	std	Y+5, r24	; 0x05
     99e:	9e 83       	std	Y+6, r25	; 0x06
     9a0:	af 83       	std	Y+7, r26	; 0x07
     9a2:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     9a4:	6d 81       	ldd	r22, Y+5	; 0x05
     9a6:	7e 81       	ldd	r23, Y+6	; 0x06
     9a8:	8f 81       	ldd	r24, Y+7	; 0x07
     9aa:	98 85       	ldd	r25, Y+8	; 0x08
     9ac:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	cc 01       	movw	r24, r24
     9b6:	a0 e0       	ldi	r26, 0x00	; 0
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	89 83       	std	Y+1, r24	; 0x01
     9bc:	9a 83       	std	Y+2, r25	; 0x02
     9be:	ab 83       	std	Y+3, r26	; 0x03
     9c0:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     9c2:	10 92 18 03 	sts	0x0318, r1
     9c6:	10 92 19 03 	sts	0x0319, r1
     9ca:	10 92 1a 03 	sts	0x031A, r1
     9ce:	10 92 1b 03 	sts	0x031B, r1
	ShaftCountLeft = 0;
     9d2:	10 92 14 03 	sts	0x0314, r1
     9d6:	10 92 15 03 	sts	0x0315, r1
     9da:	10 92 16 03 	sts	0x0316, r1
     9de:	10 92 17 03 	sts	0x0317, r1

    soft_right();
     9e2:	0e 94 91 04 	call	0x922	; 0x922 <soft_right>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     9e6:	20 91 18 03 	lds	r18, 0x0318
     9ea:	30 91 19 03 	lds	r19, 0x0319
     9ee:	40 91 1a 03 	lds	r20, 0x031A
     9f2:	50 91 1b 03 	lds	r21, 0x031B
     9f6:	1c 86       	std	Y+12, r1	; 0x0c
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	9a 81       	ldd	r25, Y+2	; 0x02
     9fc:	ab 81       	ldd	r26, Y+3	; 0x03
     9fe:	bc 81       	ldd	r27, Y+4	; 0x04
     a00:	28 17       	cp	r18, r24
     a02:	39 07       	cpc	r19, r25
     a04:	4a 07       	cpc	r20, r26
     a06:	5b 07       	cpc	r21, r27
     a08:	10 f0       	brcs	.+4      	; 0xa0e <soft_right_degrees+0xd8>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	8c 87       	std	Y+12, r24	; 0x0c
     a0e:	20 91 14 03 	lds	r18, 0x0314
     a12:	30 91 15 03 	lds	r19, 0x0315
     a16:	40 91 16 03 	lds	r20, 0x0316
     a1a:	50 91 17 03 	lds	r21, 0x0317
     a1e:	1b 86       	std	Y+11, r1	; 0x0b
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	9a 81       	ldd	r25, Y+2	; 0x02
     a24:	ab 81       	ldd	r26, Y+3	; 0x03
     a26:	bc 81       	ldd	r27, Y+4	; 0x04
     a28:	28 17       	cp	r18, r24
     a2a:	39 07       	cpc	r19, r25
     a2c:	4a 07       	cpc	r20, r26
     a2e:	5b 07       	cpc	r21, r27
     a30:	10 f0       	brcs	.+4      	; 0xa36 <soft_right_degrees+0x100>
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	9b 87       	std	Y+11, r25	; 0x0b
     a36:	8c 85       	ldd	r24, Y+12	; 0x0c
     a38:	9b 85       	ldd	r25, Y+11	; 0x0b
     a3a:	89 2b       	or	r24, r25
     a3c:	88 23       	and	r24, r24
     a3e:	99 f2       	breq	.-90     	; 0x9e6 <soft_right_degrees+0xb0>
		break;
	}
	stop(); //Stop robot
     a40:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     a44:	2c 96       	adiw	r28, 0x0c	; 12
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	cd bf       	out	0x3d, r28	; 61
     a50:	cf 91       	pop	r28
     a52:	df 91       	pop	r29
     a54:	08 95       	ret

00000a56 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
     a56:	df 93       	push	r29
     a58:	cf 93       	push	r28
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     a64:	cf 91       	pop	r28
     a66:	df 91       	pop	r29
     a68:	08 95       	ret

00000a6a <soft_left_degrees_2>:

void soft_left_degrees_2(unsigned int degrees)
{
     a6a:	df 93       	push	r29
     a6c:	cf 93       	push	r28
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
     a72:	2c 97       	sbiw	r28, 0x0c	; 12
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	f8 94       	cli
     a78:	de bf       	out	0x3e, r29	; 62
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	cd bf       	out	0x3d, r28	; 61
     a7e:	9a 87       	std	Y+10, r25	; 0x0a
     a80:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	b0 e0       	ldi	r27, 0x00	; 0
     a8a:	8d 83       	std	Y+5, r24	; 0x05
     a8c:	9e 83       	std	Y+6, r25	; 0x06
     a8e:	af 83       	std	Y+7, r26	; 0x07
     a90:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     a92:	19 82       	std	Y+1, r1	; 0x01
     a94:	1a 82       	std	Y+2, r1	; 0x02
     a96:	1b 82       	std	Y+3, r1	; 0x03
     a98:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees * 2 / 4.090; // division by resolution to get shaft count
     a9a:	89 85       	ldd	r24, Y+9	; 0x09
     a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a9e:	cc 01       	movw	r24, r24
     aa0:	a0 e0       	ldi	r26, 0x00	; 0
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	bc 01       	movw	r22, r24
     aa6:	cd 01       	movw	r24, r26
     aa8:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__floatunsisf>
     aac:	9b 01       	movw	r18, r22
     aae:	ac 01       	movw	r20, r24
     ab0:	ca 01       	movw	r24, r20
     ab2:	b9 01       	movw	r22, r18
     ab4:	0e 94 89 12 	call	0x2512	; 0x2512 <__addsf3>
     ab8:	dc 01       	movw	r26, r24
     aba:	cb 01       	movw	r24, r22
     abc:	bc 01       	movw	r22, r24
     abe:	cd 01       	movw	r24, r26
     ac0:	28 e4       	ldi	r18, 0x48	; 72
     ac2:	31 ee       	ldi	r19, 0xE1	; 225
     ac4:	42 e8       	ldi	r20, 0x82	; 130
     ac6:	50 e4       	ldi	r21, 0x40	; 64
     ac8:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divsf3>
     acc:	dc 01       	movw	r26, r24
     ace:	cb 01       	movw	r24, r22
     ad0:	8d 83       	std	Y+5, r24	; 0x05
     ad2:	9e 83       	std	Y+6, r25	; 0x06
     ad4:	af 83       	std	Y+7, r26	; 0x07
     ad6:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     ad8:	6d 81       	ldd	r22, Y+5	; 0x05
     ada:	7e 81       	ldd	r23, Y+6	; 0x06
     adc:	8f 81       	ldd	r24, Y+7	; 0x07
     ade:	98 85       	ldd	r25, Y+8	; 0x08
     ae0:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
     ae4:	dc 01       	movw	r26, r24
     ae6:	cb 01       	movw	r24, r22
     ae8:	cc 01       	movw	r24, r24
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	89 83       	std	Y+1, r24	; 0x01
     af0:	9a 83       	std	Y+2, r25	; 0x02
     af2:	ab 83       	std	Y+3, r26	; 0x03
     af4:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     af6:	10 92 18 03 	sts	0x0318, r1
     afa:	10 92 19 03 	sts	0x0319, r1
     afe:	10 92 1a 03 	sts	0x031A, r1
     b02:	10 92 1b 03 	sts	0x031B, r1
	ShaftCountLeft = 0;
     b06:	10 92 14 03 	sts	0x0314, r1
     b0a:	10 92 15 03 	sts	0x0315, r1
     b0e:	10 92 16 03 	sts	0x0316, r1
     b12:	10 92 17 03 	sts	0x0317, r1

    soft_left_2();
     b16:	0e 94 2b 05 	call	0xa56	; 0xa56 <soft_left_2>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     b1a:	20 91 18 03 	lds	r18, 0x0318
     b1e:	30 91 19 03 	lds	r19, 0x0319
     b22:	40 91 1a 03 	lds	r20, 0x031A
     b26:	50 91 1b 03 	lds	r21, 0x031B
     b2a:	1c 86       	std	Y+12, r1	; 0x0c
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	9a 81       	ldd	r25, Y+2	; 0x02
     b30:	ab 81       	ldd	r26, Y+3	; 0x03
     b32:	bc 81       	ldd	r27, Y+4	; 0x04
     b34:	28 17       	cp	r18, r24
     b36:	39 07       	cpc	r19, r25
     b38:	4a 07       	cpc	r20, r26
     b3a:	5b 07       	cpc	r21, r27
     b3c:	10 f0       	brcs	.+4      	; 0xb42 <soft_left_degrees_2+0xd8>
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	8c 87       	std	Y+12, r24	; 0x0c
     b42:	20 91 14 03 	lds	r18, 0x0314
     b46:	30 91 15 03 	lds	r19, 0x0315
     b4a:	40 91 16 03 	lds	r20, 0x0316
     b4e:	50 91 17 03 	lds	r21, 0x0317
     b52:	1b 86       	std	Y+11, r1	; 0x0b
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	9a 81       	ldd	r25, Y+2	; 0x02
     b58:	ab 81       	ldd	r26, Y+3	; 0x03
     b5a:	bc 81       	ldd	r27, Y+4	; 0x04
     b5c:	28 17       	cp	r18, r24
     b5e:	39 07       	cpc	r19, r25
     b60:	4a 07       	cpc	r20, r26
     b62:	5b 07       	cpc	r21, r27
     b64:	10 f0       	brcs	.+4      	; 0xb6a <soft_left_degrees_2+0x100>
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	9b 87       	std	Y+11, r25	; 0x0b
     b6a:	8c 85       	ldd	r24, Y+12	; 0x0c
     b6c:	9b 85       	ldd	r25, Y+11	; 0x0b
     b6e:	89 2b       	or	r24, r25
     b70:	88 23       	and	r24, r24
     b72:	99 f2       	breq	.-90     	; 0xb1a <soft_left_degrees_2+0xb0>
		break;
	}
	stop(); //Stop robot
     b74:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     b78:	2c 96       	adiw	r28, 0x0c	; 12
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
     b92:	88 e0       	ldi	r24, 0x08	; 8
     b94:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <right_degrees_2>:

void right_degrees_2(unsigned int degrees)
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	2c 97       	sbiw	r28, 0x0c	; 12
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	9a 87       	std	Y+10, r25	; 0x0a
     bb4:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	a0 e0       	ldi	r26, 0x00	; 0
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	8d 83       	std	Y+5, r24	; 0x05
     bc0:	9e 83       	std	Y+6, r25	; 0x06
     bc2:	af 83       	std	Y+7, r26	; 0x07
     bc4:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     bc6:	19 82       	std	Y+1, r1	; 0x01
     bc8:	1a 82       	std	Y+2, r1	; 0x02
     bca:	1b 82       	std	Y+3, r1	; 0x03
     bcc:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees * 2 / 4.090; // division by resolution to get shaft count
     bce:	89 85       	ldd	r24, Y+9	; 0x09
     bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd2:	cc 01       	movw	r24, r24
     bd4:	a0 e0       	ldi	r26, 0x00	; 0
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	bc 01       	movw	r22, r24
     bda:	cd 01       	movw	r24, r26
     bdc:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__floatunsisf>
     be0:	9b 01       	movw	r18, r22
     be2:	ac 01       	movw	r20, r24
     be4:	ca 01       	movw	r24, r20
     be6:	b9 01       	movw	r22, r18
     be8:	0e 94 89 12 	call	0x2512	; 0x2512 <__addsf3>
     bec:	dc 01       	movw	r26, r24
     bee:	cb 01       	movw	r24, r22
     bf0:	bc 01       	movw	r22, r24
     bf2:	cd 01       	movw	r24, r26
     bf4:	28 e4       	ldi	r18, 0x48	; 72
     bf6:	31 ee       	ldi	r19, 0xE1	; 225
     bf8:	42 e8       	ldi	r20, 0x82	; 130
     bfa:	50 e4       	ldi	r21, 0x40	; 64
     bfc:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	8d 83       	std	Y+5, r24	; 0x05
     c06:	9e 83       	std	Y+6, r25	; 0x06
     c08:	af 83       	std	Y+7, r26	; 0x07
     c0a:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     c0c:	6d 81       	ldd	r22, Y+5	; 0x05
     c0e:	7e 81       	ldd	r23, Y+6	; 0x06
     c10:	8f 81       	ldd	r24, Y+7	; 0x07
     c12:	98 85       	ldd	r25, Y+8	; 0x08
     c14:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	cc 01       	movw	r24, r24
     c1e:	a0 e0       	ldi	r26, 0x00	; 0
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	9a 83       	std	Y+2, r25	; 0x02
     c26:	ab 83       	std	Y+3, r26	; 0x03
     c28:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     c2a:	10 92 18 03 	sts	0x0318, r1
     c2e:	10 92 19 03 	sts	0x0319, r1
     c32:	10 92 1a 03 	sts	0x031A, r1
     c36:	10 92 1b 03 	sts	0x031B, r1
	ShaftCountLeft = 0;
     c3a:	10 92 14 03 	sts	0x0314, r1
     c3e:	10 92 15 03 	sts	0x0315, r1
     c42:	10 92 16 03 	sts	0x0316, r1
     c46:	10 92 17 03 	sts	0x0317, r1

    soft_right_2();
     c4a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <soft_right_2>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     c4e:	20 91 18 03 	lds	r18, 0x0318
     c52:	30 91 19 03 	lds	r19, 0x0319
     c56:	40 91 1a 03 	lds	r20, 0x031A
     c5a:	50 91 1b 03 	lds	r21, 0x031B
     c5e:	1c 86       	std	Y+12, r1	; 0x0c
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	9a 81       	ldd	r25, Y+2	; 0x02
     c64:	ab 81       	ldd	r26, Y+3	; 0x03
     c66:	bc 81       	ldd	r27, Y+4	; 0x04
     c68:	28 17       	cp	r18, r24
     c6a:	39 07       	cpc	r19, r25
     c6c:	4a 07       	cpc	r20, r26
     c6e:	5b 07       	cpc	r21, r27
     c70:	10 f0       	brcs	.+4      	; 0xc76 <right_degrees_2+0xd8>
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	8c 87       	std	Y+12, r24	; 0x0c
     c76:	20 91 14 03 	lds	r18, 0x0314
     c7a:	30 91 15 03 	lds	r19, 0x0315
     c7e:	40 91 16 03 	lds	r20, 0x0316
     c82:	50 91 17 03 	lds	r21, 0x0317
     c86:	1b 86       	std	Y+11, r1	; 0x0b
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	9a 81       	ldd	r25, Y+2	; 0x02
     c8c:	ab 81       	ldd	r26, Y+3	; 0x03
     c8e:	bc 81       	ldd	r27, Y+4	; 0x04
     c90:	28 17       	cp	r18, r24
     c92:	39 07       	cpc	r19, r25
     c94:	4a 07       	cpc	r20, r26
     c96:	5b 07       	cpc	r21, r27
     c98:	10 f0       	brcs	.+4      	; 0xc9e <right_degrees_2+0x100>
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	9b 87       	std	Y+11, r25	; 0x0b
     c9e:	8c 85       	ldd	r24, Y+12	; 0x0c
     ca0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ca2:	89 2b       	or	r24, r25
     ca4:	88 23       	and	r24, r24
     ca6:	99 f2       	breq	.-90     	; 0xc4e <right_degrees_2+0xb0>
		break;
	}
	stop(); //Stop robot
     ca8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <stop>
}
     cac:	2c 96       	adiw	r28, 0x0c	; 12
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <stop>:

void stop (void) //hard stop
{
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	0e 94 bd 01 	call	0x37a	; 0x37a <motion_set>
}
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <set_lcd>:
unsigned int hundred;
unsigned int thousand;
unsigned int million;

void set_lcd()
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
    lcd_port_config();
     cda:	0e 94 74 06 	call	0xce8	; 0xce8 <lcd_port_config>
    lcd_init();
     cde:	0e 94 88 0b 	call	0x1710	; 0x1710 <lcd_init>
}
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <lcd_port_config>:

void lcd_port_config (void)
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     cf0:	a7 e2       	ldi	r26, 0x27	; 39
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e7 e2       	ldi	r30, 0x27	; 39
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	87 6f       	ori	r24, 0xF7	; 247
     cfc:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     cfe:	a8 e2       	ldi	r26, 0x28	; 40
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e8 e2       	ldi	r30, 0x28	; 40
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	80 78       	andi	r24, 0x80	; 128
     d0a:	8c 93       	st	X, r24
}
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <lcd_set_4bit>:

//Function to Reset LCD
void lcd_set_4bit()
{
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	c0 57       	subi	r28, 0x70	; 112
     d20:	d0 40       	sbci	r29, 0x00	; 0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	de bf       	out	0x3e, r29	; 62
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	cd bf       	out	0x3d, r28	; 61
     d2c:	fe 01       	movw	r30, r28
     d2e:	e3 59       	subi	r30, 0x93	; 147
     d30:	ff 4f       	sbci	r31, 0xFF	; 255
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	a0 e8       	ldi	r26, 0x80	; 128
     d38:	bf e3       	ldi	r27, 0x3F	; 63
     d3a:	80 83       	st	Z, r24
     d3c:	91 83       	std	Z+1, r25	; 0x01
     d3e:	a2 83       	std	Z+2, r26	; 0x02
     d40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d42:	8e 01       	movw	r16, r28
     d44:	07 59       	subi	r16, 0x97	; 151
     d46:	1f 4f       	sbci	r17, 0xFF	; 255
     d48:	fe 01       	movw	r30, r28
     d4a:	e3 59       	subi	r30, 0x93	; 147
     d4c:	ff 4f       	sbci	r31, 0xFF	; 255
     d4e:	60 81       	ld	r22, Z
     d50:	71 81       	ldd	r23, Z+1	; 0x01
     d52:	82 81       	ldd	r24, Z+2	; 0x02
     d54:	93 81       	ldd	r25, Z+3	; 0x03
     d56:	26 e6       	ldi	r18, 0x66	; 102
     d58:	36 e6       	ldi	r19, 0x66	; 102
     d5a:	46 e6       	ldi	r20, 0x66	; 102
     d5c:	55 e4       	ldi	r21, 0x45	; 69
     d5e:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	f8 01       	movw	r30, r16
     d68:	80 83       	st	Z, r24
     d6a:	91 83       	std	Z+1, r25	; 0x01
     d6c:	a2 83       	std	Z+2, r26	; 0x02
     d6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d70:	fe 01       	movw	r30, r28
     d72:	e7 59       	subi	r30, 0x97	; 151
     d74:	ff 4f       	sbci	r31, 0xFF	; 255
     d76:	60 81       	ld	r22, Z
     d78:	71 81       	ldd	r23, Z+1	; 0x01
     d7a:	82 81       	ldd	r24, Z+2	; 0x02
     d7c:	93 81       	ldd	r25, Z+3	; 0x03
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e8       	ldi	r20, 0x80	; 128
     d84:	5f e3       	ldi	r21, 0x3F	; 63
     d86:	0e 94 bc 14 	call	0x2978	; 0x2978 <__ltsf2>
     d8a:	88 23       	and	r24, r24
     d8c:	44 f4       	brge	.+16     	; 0xd9e <lcd_set_4bit+0x8c>
		__ticks = 1;
     d8e:	fe 01       	movw	r30, r28
     d90:	e9 59       	subi	r30, 0x99	; 153
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	91 83       	std	Z+1, r25	; 0x01
     d9a:	80 83       	st	Z, r24
     d9c:	64 c0       	rjmp	.+200    	; 0xe66 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     d9e:	fe 01       	movw	r30, r28
     da0:	e7 59       	subi	r30, 0x97	; 151
     da2:	ff 4f       	sbci	r31, 0xFF	; 255
     da4:	60 81       	ld	r22, Z
     da6:	71 81       	ldd	r23, Z+1	; 0x01
     da8:	82 81       	ldd	r24, Z+2	; 0x02
     daa:	93 81       	ldd	r25, Z+3	; 0x03
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	3f ef       	ldi	r19, 0xFF	; 255
     db0:	4f e7       	ldi	r20, 0x7F	; 127
     db2:	57 e4       	ldi	r21, 0x47	; 71
     db4:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__gtsf2>
     db8:	18 16       	cp	r1, r24
     dba:	0c f0       	brlt	.+2      	; 0xdbe <lcd_set_4bit+0xac>
     dbc:	43 c0       	rjmp	.+134    	; 0xe44 <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dbe:	fe 01       	movw	r30, r28
     dc0:	e3 59       	subi	r30, 0x93	; 147
     dc2:	ff 4f       	sbci	r31, 0xFF	; 255
     dc4:	60 81       	ld	r22, Z
     dc6:	71 81       	ldd	r23, Z+1	; 0x01
     dc8:	82 81       	ldd	r24, Z+2	; 0x02
     dca:	93 81       	ldd	r25, Z+3	; 0x03
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	40 e2       	ldi	r20, 0x20	; 32
     dd2:	51 e4       	ldi	r21, 0x41	; 65
     dd4:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	8e 01       	movw	r16, r28
     dde:	09 59       	subi	r16, 0x99	; 153
     de0:	1f 4f       	sbci	r17, 0xFF	; 255
     de2:	bc 01       	movw	r22, r24
     de4:	cd 01       	movw	r24, r26
     de6:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	f8 01       	movw	r30, r16
     df0:	91 83       	std	Z+1, r25	; 0x01
     df2:	80 83       	st	Z, r24
     df4:	1f c0       	rjmp	.+62     	; 0xe34 <lcd_set_4bit+0x122>
     df6:	fe 01       	movw	r30, r28
     df8:	eb 59       	subi	r30, 0x9B	; 155
     dfa:	ff 4f       	sbci	r31, 0xFF	; 255
     dfc:	80 e7       	ldi	r24, 0x70	; 112
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	91 83       	std	Z+1, r25	; 0x01
     e02:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e04:	fe 01       	movw	r30, r28
     e06:	eb 59       	subi	r30, 0x9B	; 155
     e08:	ff 4f       	sbci	r31, 0xFF	; 255
     e0a:	80 81       	ld	r24, Z
     e0c:	91 81       	ldd	r25, Z+1	; 0x01
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	f1 f7       	brne	.-4      	; 0xe0e <lcd_set_4bit+0xfc>
     e12:	fe 01       	movw	r30, r28
     e14:	eb 59       	subi	r30, 0x9B	; 155
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	91 83       	std	Z+1, r25	; 0x01
     e1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e1c:	de 01       	movw	r26, r28
     e1e:	a9 59       	subi	r26, 0x99	; 153
     e20:	bf 4f       	sbci	r27, 0xFF	; 255
     e22:	fe 01       	movw	r30, r28
     e24:	e9 59       	subi	r30, 0x99	; 153
     e26:	ff 4f       	sbci	r31, 0xFF	; 255
     e28:	80 81       	ld	r24, Z
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	11 96       	adiw	r26, 0x01	; 1
     e30:	9c 93       	st	X, r25
     e32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e34:	fe 01       	movw	r30, r28
     e36:	e9 59       	subi	r30, 0x99	; 153
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	80 81       	ld	r24, Z
     e3c:	91 81       	ldd	r25, Z+1	; 0x01
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	d1 f6       	brne	.-76     	; 0xdf6 <lcd_set_4bit+0xe4>
     e42:	27 c0       	rjmp	.+78     	; 0xe92 <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e44:	8e 01       	movw	r16, r28
     e46:	09 59       	subi	r16, 0x99	; 153
     e48:	1f 4f       	sbci	r17, 0xFF	; 255
     e4a:	fe 01       	movw	r30, r28
     e4c:	e7 59       	subi	r30, 0x97	; 151
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	60 81       	ld	r22, Z
     e52:	71 81       	ldd	r23, Z+1	; 0x01
     e54:	82 81       	ldd	r24, Z+2	; 0x02
     e56:	93 81       	ldd	r25, Z+3	; 0x03
     e58:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	f8 01       	movw	r30, r16
     e62:	91 83       	std	Z+1, r25	; 0x01
     e64:	80 83       	st	Z, r24
     e66:	de 01       	movw	r26, r28
     e68:	ad 59       	subi	r26, 0x9D	; 157
     e6a:	bf 4f       	sbci	r27, 0xFF	; 255
     e6c:	fe 01       	movw	r30, r28
     e6e:	e9 59       	subi	r30, 0x99	; 153
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	80 81       	ld	r24, Z
     e74:	91 81       	ldd	r25, Z+1	; 0x01
     e76:	8d 93       	st	X+, r24
     e78:	9c 93       	st	X, r25
     e7a:	fe 01       	movw	r30, r28
     e7c:	ed 59       	subi	r30, 0x9D	; 157
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	80 81       	ld	r24, Z
     e82:	91 81       	ldd	r25, Z+1	; 0x01
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	f1 f7       	brne	.-4      	; 0xe84 <lcd_set_4bit+0x172>
     e88:	fe 01       	movw	r30, r28
     e8a:	ed 59       	subi	r30, 0x9D	; 157
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	91 83       	std	Z+1, r25	; 0x01
     e90:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     e92:	a8 e2       	ldi	r26, 0x28	; 40
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e8 e2       	ldi	r30, 0x28	; 40
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	8e 7f       	andi	r24, 0xFE	; 254
     e9e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     ea0:	a8 e2       	ldi	r26, 0x28	; 40
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e8 e2       	ldi	r30, 0x28	; 40
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	8d 7f       	andi	r24, 0xFD	; 253
     eac:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     eae:	e8 e2       	ldi	r30, 0x28	; 40
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 e3       	ldi	r24, 0x30	; 48
     eb4:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     eb6:	a8 e2       	ldi	r26, 0x28	; 40
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e8 e2       	ldi	r30, 0x28	; 40
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	84 60       	ori	r24, 0x04	; 4
     ec2:	8c 93       	st	X, r24
     ec4:	fe 01       	movw	r30, r28
     ec6:	e1 5a       	subi	r30, 0xA1	; 161
     ec8:	ff 4f       	sbci	r31, 0xFF	; 255
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	a0 ea       	ldi	r26, 0xA0	; 160
     ed0:	b0 e4       	ldi	r27, 0x40	; 64
     ed2:	80 83       	st	Z, r24
     ed4:	91 83       	std	Z+1, r25	; 0x01
     ed6:	a2 83       	std	Z+2, r26	; 0x02
     ed8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eda:	8e 01       	movw	r16, r28
     edc:	05 5a       	subi	r16, 0xA5	; 165
     ede:	1f 4f       	sbci	r17, 0xFF	; 255
     ee0:	fe 01       	movw	r30, r28
     ee2:	e1 5a       	subi	r30, 0xA1	; 161
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	60 81       	ld	r22, Z
     ee8:	71 81       	ldd	r23, Z+1	; 0x01
     eea:	82 81       	ldd	r24, Z+2	; 0x02
     eec:	93 81       	ldd	r25, Z+3	; 0x03
     eee:	26 e6       	ldi	r18, 0x66	; 102
     ef0:	36 e6       	ldi	r19, 0x66	; 102
     ef2:	46 e6       	ldi	r20, 0x66	; 102
     ef4:	55 e4       	ldi	r21, 0x45	; 69
     ef6:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	f8 01       	movw	r30, r16
     f00:	80 83       	st	Z, r24
     f02:	91 83       	std	Z+1, r25	; 0x01
     f04:	a2 83       	std	Z+2, r26	; 0x02
     f06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f08:	fe 01       	movw	r30, r28
     f0a:	e5 5a       	subi	r30, 0xA5	; 165
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	60 81       	ld	r22, Z
     f10:	71 81       	ldd	r23, Z+1	; 0x01
     f12:	82 81       	ldd	r24, Z+2	; 0x02
     f14:	93 81       	ldd	r25, Z+3	; 0x03
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e8       	ldi	r20, 0x80	; 128
     f1c:	5f e3       	ldi	r21, 0x3F	; 63
     f1e:	0e 94 bc 14 	call	0x2978	; 0x2978 <__ltsf2>
     f22:	88 23       	and	r24, r24
     f24:	44 f4       	brge	.+16     	; 0xf36 <lcd_set_4bit+0x224>
		__ticks = 1;
     f26:	fe 01       	movw	r30, r28
     f28:	e7 5a       	subi	r30, 0xA7	; 167
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	91 83       	std	Z+1, r25	; 0x01
     f32:	80 83       	st	Z, r24
     f34:	64 c0       	rjmp	.+200    	; 0xffe <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     f36:	fe 01       	movw	r30, r28
     f38:	e5 5a       	subi	r30, 0xA5	; 165
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	60 81       	ld	r22, Z
     f3e:	71 81       	ldd	r23, Z+1	; 0x01
     f40:	82 81       	ldd	r24, Z+2	; 0x02
     f42:	93 81       	ldd	r25, Z+3	; 0x03
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	3f ef       	ldi	r19, 0xFF	; 255
     f48:	4f e7       	ldi	r20, 0x7F	; 127
     f4a:	57 e4       	ldi	r21, 0x47	; 71
     f4c:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__gtsf2>
     f50:	18 16       	cp	r1, r24
     f52:	0c f0       	brlt	.+2      	; 0xf56 <lcd_set_4bit+0x244>
     f54:	43 c0       	rjmp	.+134    	; 0xfdc <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f56:	fe 01       	movw	r30, r28
     f58:	e1 5a       	subi	r30, 0xA1	; 161
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	60 81       	ld	r22, Z
     f5e:	71 81       	ldd	r23, Z+1	; 0x01
     f60:	82 81       	ldd	r24, Z+2	; 0x02
     f62:	93 81       	ldd	r25, Z+3	; 0x03
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 e2       	ldi	r20, 0x20	; 32
     f6a:	51 e4       	ldi	r21, 0x41	; 65
     f6c:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	8e 01       	movw	r16, r28
     f76:	07 5a       	subi	r16, 0xA7	; 167
     f78:	1f 4f       	sbci	r17, 0xFF	; 255
     f7a:	bc 01       	movw	r22, r24
     f7c:	cd 01       	movw	r24, r26
     f7e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	f8 01       	movw	r30, r16
     f88:	91 83       	std	Z+1, r25	; 0x01
     f8a:	80 83       	st	Z, r24
     f8c:	1f c0       	rjmp	.+62     	; 0xfcc <lcd_set_4bit+0x2ba>
     f8e:	fe 01       	movw	r30, r28
     f90:	e9 5a       	subi	r30, 0xA9	; 169
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	80 e7       	ldi	r24, 0x70	; 112
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	91 83       	std	Z+1, r25	; 0x01
     f9a:	80 83       	st	Z, r24
     f9c:	fe 01       	movw	r30, r28
     f9e:	e9 5a       	subi	r30, 0xA9	; 169
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	80 81       	ld	r24, Z
     fa4:	91 81       	ldd	r25, Z+1	; 0x01
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <lcd_set_4bit+0x294>
     faa:	fe 01       	movw	r30, r28
     fac:	e9 5a       	subi	r30, 0xA9	; 169
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb4:	de 01       	movw	r26, r28
     fb6:	a7 5a       	subi	r26, 0xA7	; 167
     fb8:	bf 4f       	sbci	r27, 0xFF	; 255
     fba:	fe 01       	movw	r30, r28
     fbc:	e7 5a       	subi	r30, 0xA7	; 167
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	80 81       	ld	r24, Z
     fc2:	91 81       	ldd	r25, Z+1	; 0x01
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	11 96       	adiw	r26, 0x01	; 1
     fc8:	9c 93       	st	X, r25
     fca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fcc:	fe 01       	movw	r30, r28
     fce:	e7 5a       	subi	r30, 0xA7	; 167
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	80 81       	ld	r24, Z
     fd4:	91 81       	ldd	r25, Z+1	; 0x01
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	d1 f6       	brne	.-76     	; 0xf8e <lcd_set_4bit+0x27c>
     fda:	27 c0       	rjmp	.+78     	; 0x102a <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fdc:	8e 01       	movw	r16, r28
     fde:	07 5a       	subi	r16, 0xA7	; 167
     fe0:	1f 4f       	sbci	r17, 0xFF	; 255
     fe2:	fe 01       	movw	r30, r28
     fe4:	e5 5a       	subi	r30, 0xA5	; 165
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	60 81       	ld	r22, Z
     fea:	71 81       	ldd	r23, Z+1	; 0x01
     fec:	82 81       	ldd	r24, Z+2	; 0x02
     fee:	93 81       	ldd	r25, Z+3	; 0x03
     ff0:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	f8 01       	movw	r30, r16
     ffa:	91 83       	std	Z+1, r25	; 0x01
     ffc:	80 83       	st	Z, r24
     ffe:	de 01       	movw	r26, r28
    1000:	ab 5a       	subi	r26, 0xAB	; 171
    1002:	bf 4f       	sbci	r27, 0xFF	; 255
    1004:	fe 01       	movw	r30, r28
    1006:	e7 5a       	subi	r30, 0xA7	; 167
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	80 81       	ld	r24, Z
    100c:	91 81       	ldd	r25, Z+1	; 0x01
    100e:	8d 93       	st	X+, r24
    1010:	9c 93       	st	X, r25
    1012:	fe 01       	movw	r30, r28
    1014:	eb 5a       	subi	r30, 0xAB	; 171
    1016:	ff 4f       	sbci	r31, 0xFF	; 255
    1018:	80 81       	ld	r24, Z
    101a:	91 81       	ldd	r25, Z+1	; 0x01
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	f1 f7       	brne	.-4      	; 0x101c <lcd_set_4bit+0x30a>
    1020:	fe 01       	movw	r30, r28
    1022:	eb 5a       	subi	r30, 0xAB	; 171
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	91 83       	std	Z+1, r25	; 0x01
    1028:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    102a:	a8 e2       	ldi	r26, 0x28	; 40
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e8 e2       	ldi	r30, 0x28	; 40
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	8b 7f       	andi	r24, 0xFB	; 251
    1036:	8c 93       	st	X, r24
    1038:	fe 01       	movw	r30, r28
    103a:	ef 5a       	subi	r30, 0xAF	; 175
    103c:	ff 4f       	sbci	r31, 0xFF	; 255
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	a0 e8       	ldi	r26, 0x80	; 128
    1044:	bf e3       	ldi	r27, 0x3F	; 63
    1046:	80 83       	st	Z, r24
    1048:	91 83       	std	Z+1, r25	; 0x01
    104a:	a2 83       	std	Z+2, r26	; 0x02
    104c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    104e:	8e 01       	movw	r16, r28
    1050:	03 5b       	subi	r16, 0xB3	; 179
    1052:	1f 4f       	sbci	r17, 0xFF	; 255
    1054:	fe 01       	movw	r30, r28
    1056:	ef 5a       	subi	r30, 0xAF	; 175
    1058:	ff 4f       	sbci	r31, 0xFF	; 255
    105a:	60 81       	ld	r22, Z
    105c:	71 81       	ldd	r23, Z+1	; 0x01
    105e:	82 81       	ldd	r24, Z+2	; 0x02
    1060:	93 81       	ldd	r25, Z+3	; 0x03
    1062:	26 e6       	ldi	r18, 0x66	; 102
    1064:	36 e6       	ldi	r19, 0x66	; 102
    1066:	46 e6       	ldi	r20, 0x66	; 102
    1068:	55 e4       	ldi	r21, 0x45	; 69
    106a:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	f8 01       	movw	r30, r16
    1074:	80 83       	st	Z, r24
    1076:	91 83       	std	Z+1, r25	; 0x01
    1078:	a2 83       	std	Z+2, r26	; 0x02
    107a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    107c:	fe 01       	movw	r30, r28
    107e:	e3 5b       	subi	r30, 0xB3	; 179
    1080:	ff 4f       	sbci	r31, 0xFF	; 255
    1082:	60 81       	ld	r22, Z
    1084:	71 81       	ldd	r23, Z+1	; 0x01
    1086:	82 81       	ldd	r24, Z+2	; 0x02
    1088:	93 81       	ldd	r25, Z+3	; 0x03
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	40 e8       	ldi	r20, 0x80	; 128
    1090:	5f e3       	ldi	r21, 0x3F	; 63
    1092:	0e 94 bc 14 	call	0x2978	; 0x2978 <__ltsf2>
    1096:	88 23       	and	r24, r24
    1098:	44 f4       	brge	.+16     	; 0x10aa <lcd_set_4bit+0x398>
		__ticks = 1;
    109a:	fe 01       	movw	r30, r28
    109c:	e5 5b       	subi	r30, 0xB5	; 181
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	91 83       	std	Z+1, r25	; 0x01
    10a6:	80 83       	st	Z, r24
    10a8:	64 c0       	rjmp	.+200    	; 0x1172 <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
    10aa:	fe 01       	movw	r30, r28
    10ac:	e3 5b       	subi	r30, 0xB3	; 179
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	60 81       	ld	r22, Z
    10b2:	71 81       	ldd	r23, Z+1	; 0x01
    10b4:	82 81       	ldd	r24, Z+2	; 0x02
    10b6:	93 81       	ldd	r25, Z+3	; 0x03
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	3f ef       	ldi	r19, 0xFF	; 255
    10bc:	4f e7       	ldi	r20, 0x7F	; 127
    10be:	57 e4       	ldi	r21, 0x47	; 71
    10c0:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__gtsf2>
    10c4:	18 16       	cp	r1, r24
    10c6:	0c f0       	brlt	.+2      	; 0x10ca <lcd_set_4bit+0x3b8>
    10c8:	43 c0       	rjmp	.+134    	; 0x1150 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ca:	fe 01       	movw	r30, r28
    10cc:	ef 5a       	subi	r30, 0xAF	; 175
    10ce:	ff 4f       	sbci	r31, 0xFF	; 255
    10d0:	60 81       	ld	r22, Z
    10d2:	71 81       	ldd	r23, Z+1	; 0x01
    10d4:	82 81       	ldd	r24, Z+2	; 0x02
    10d6:	93 81       	ldd	r25, Z+3	; 0x03
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	40 e2       	ldi	r20, 0x20	; 32
    10de:	51 e4       	ldi	r21, 0x41	; 65
    10e0:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	8e 01       	movw	r16, r28
    10ea:	05 5b       	subi	r16, 0xB5	; 181
    10ec:	1f 4f       	sbci	r17, 0xFF	; 255
    10ee:	bc 01       	movw	r22, r24
    10f0:	cd 01       	movw	r24, r26
    10f2:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	f8 01       	movw	r30, r16
    10fc:	91 83       	std	Z+1, r25	; 0x01
    10fe:	80 83       	st	Z, r24
    1100:	1f c0       	rjmp	.+62     	; 0x1140 <lcd_set_4bit+0x42e>
    1102:	fe 01       	movw	r30, r28
    1104:	e7 5b       	subi	r30, 0xB7	; 183
    1106:	ff 4f       	sbci	r31, 0xFF	; 255
    1108:	80 e7       	ldi	r24, 0x70	; 112
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	91 83       	std	Z+1, r25	; 0x01
    110e:	80 83       	st	Z, r24
    1110:	fe 01       	movw	r30, r28
    1112:	e7 5b       	subi	r30, 0xB7	; 183
    1114:	ff 4f       	sbci	r31, 0xFF	; 255
    1116:	80 81       	ld	r24, Z
    1118:	91 81       	ldd	r25, Z+1	; 0x01
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <lcd_set_4bit+0x408>
    111e:	fe 01       	movw	r30, r28
    1120:	e7 5b       	subi	r30, 0xB7	; 183
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	91 83       	std	Z+1, r25	; 0x01
    1126:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1128:	de 01       	movw	r26, r28
    112a:	a5 5b       	subi	r26, 0xB5	; 181
    112c:	bf 4f       	sbci	r27, 0xFF	; 255
    112e:	fe 01       	movw	r30, r28
    1130:	e5 5b       	subi	r30, 0xB5	; 181
    1132:	ff 4f       	sbci	r31, 0xFF	; 255
    1134:	80 81       	ld	r24, Z
    1136:	91 81       	ldd	r25, Z+1	; 0x01
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	11 96       	adiw	r26, 0x01	; 1
    113c:	9c 93       	st	X, r25
    113e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1140:	fe 01       	movw	r30, r28
    1142:	e5 5b       	subi	r30, 0xB5	; 181
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	80 81       	ld	r24, Z
    1148:	91 81       	ldd	r25, Z+1	; 0x01
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	d1 f6       	brne	.-76     	; 0x1102 <lcd_set_4bit+0x3f0>
    114e:	27 c0       	rjmp	.+78     	; 0x119e <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1150:	8e 01       	movw	r16, r28
    1152:	05 5b       	subi	r16, 0xB5	; 181
    1154:	1f 4f       	sbci	r17, 0xFF	; 255
    1156:	fe 01       	movw	r30, r28
    1158:	e3 5b       	subi	r30, 0xB3	; 179
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	60 81       	ld	r22, Z
    115e:	71 81       	ldd	r23, Z+1	; 0x01
    1160:	82 81       	ldd	r24, Z+2	; 0x02
    1162:	93 81       	ldd	r25, Z+3	; 0x03
    1164:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	f8 01       	movw	r30, r16
    116e:	91 83       	std	Z+1, r25	; 0x01
    1170:	80 83       	st	Z, r24
    1172:	de 01       	movw	r26, r28
    1174:	a9 5b       	subi	r26, 0xB9	; 185
    1176:	bf 4f       	sbci	r27, 0xFF	; 255
    1178:	fe 01       	movw	r30, r28
    117a:	e5 5b       	subi	r30, 0xB5	; 181
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	80 81       	ld	r24, Z
    1180:	91 81       	ldd	r25, Z+1	; 0x01
    1182:	8d 93       	st	X+, r24
    1184:	9c 93       	st	X, r25
    1186:	fe 01       	movw	r30, r28
    1188:	e9 5b       	subi	r30, 0xB9	; 185
    118a:	ff 4f       	sbci	r31, 0xFF	; 255
    118c:	80 81       	ld	r24, Z
    118e:	91 81       	ldd	r25, Z+1	; 0x01
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <lcd_set_4bit+0x47e>
    1194:	fe 01       	movw	r30, r28
    1196:	e9 5b       	subi	r30, 0xB9	; 185
    1198:	ff 4f       	sbci	r31, 0xFF	; 255
    119a:	91 83       	std	Z+1, r25	; 0x01
    119c:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    119e:	a8 e2       	ldi	r26, 0x28	; 40
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e8 e2       	ldi	r30, 0x28	; 40
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	8e 7f       	andi	r24, 0xFE	; 254
    11aa:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    11ac:	a8 e2       	ldi	r26, 0x28	; 40
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e8 e2       	ldi	r30, 0x28	; 40
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	8d 7f       	andi	r24, 0xFD	; 253
    11b8:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
    11ba:	e8 e2       	ldi	r30, 0x28	; 40
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 e3       	ldi	r24, 0x30	; 48
    11c0:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    11c2:	a8 e2       	ldi	r26, 0x28	; 40
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e8 e2       	ldi	r30, 0x28	; 40
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	84 60       	ori	r24, 0x04	; 4
    11ce:	8c 93       	st	X, r24
    11d0:	fe 01       	movw	r30, r28
    11d2:	ed 5b       	subi	r30, 0xBD	; 189
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	a0 ea       	ldi	r26, 0xA0	; 160
    11dc:	b0 e4       	ldi	r27, 0x40	; 64
    11de:	80 83       	st	Z, r24
    11e0:	91 83       	std	Z+1, r25	; 0x01
    11e2:	a2 83       	std	Z+2, r26	; 0x02
    11e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e6:	8e 01       	movw	r16, r28
    11e8:	01 5c       	subi	r16, 0xC1	; 193
    11ea:	1f 4f       	sbci	r17, 0xFF	; 255
    11ec:	fe 01       	movw	r30, r28
    11ee:	ed 5b       	subi	r30, 0xBD	; 189
    11f0:	ff 4f       	sbci	r31, 0xFF	; 255
    11f2:	60 81       	ld	r22, Z
    11f4:	71 81       	ldd	r23, Z+1	; 0x01
    11f6:	82 81       	ldd	r24, Z+2	; 0x02
    11f8:	93 81       	ldd	r25, Z+3	; 0x03
    11fa:	26 e6       	ldi	r18, 0x66	; 102
    11fc:	36 e6       	ldi	r19, 0x66	; 102
    11fe:	46 e6       	ldi	r20, 0x66	; 102
    1200:	55 e4       	ldi	r21, 0x45	; 69
    1202:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	f8 01       	movw	r30, r16
    120c:	80 83       	st	Z, r24
    120e:	91 83       	std	Z+1, r25	; 0x01
    1210:	a2 83       	std	Z+2, r26	; 0x02
    1212:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1214:	fe 01       	movw	r30, r28
    1216:	ff 96       	adiw	r30, 0x3f	; 63
    1218:	60 81       	ld	r22, Z
    121a:	71 81       	ldd	r23, Z+1	; 0x01
    121c:	82 81       	ldd	r24, Z+2	; 0x02
    121e:	93 81       	ldd	r25, Z+3	; 0x03
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e8       	ldi	r20, 0x80	; 128
    1226:	5f e3       	ldi	r21, 0x3F	; 63
    1228:	0e 94 bc 14 	call	0x2978	; 0x2978 <__ltsf2>
    122c:	88 23       	and	r24, r24
    122e:	2c f4       	brge	.+10     	; 0x123a <lcd_set_4bit+0x528>
		__ticks = 1;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	9e af       	std	Y+62, r25	; 0x3e
    1236:	8d af       	std	Y+61, r24	; 0x3d
    1238:	46 c0       	rjmp	.+140    	; 0x12c6 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
    123a:	fe 01       	movw	r30, r28
    123c:	ff 96       	adiw	r30, 0x3f	; 63
    123e:	60 81       	ld	r22, Z
    1240:	71 81       	ldd	r23, Z+1	; 0x01
    1242:	82 81       	ldd	r24, Z+2	; 0x02
    1244:	93 81       	ldd	r25, Z+3	; 0x03
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	3f ef       	ldi	r19, 0xFF	; 255
    124a:	4f e7       	ldi	r20, 0x7F	; 127
    124c:	57 e4       	ldi	r21, 0x47	; 71
    124e:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__gtsf2>
    1252:	18 16       	cp	r1, r24
    1254:	64 f5       	brge	.+88     	; 0x12ae <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1256:	fe 01       	movw	r30, r28
    1258:	ed 5b       	subi	r30, 0xBD	; 189
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	60 81       	ld	r22, Z
    125e:	71 81       	ldd	r23, Z+1	; 0x01
    1260:	82 81       	ldd	r24, Z+2	; 0x02
    1262:	93 81       	ldd	r25, Z+3	; 0x03
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e2       	ldi	r20, 0x20	; 32
    126a:	51 e4       	ldi	r21, 0x41	; 65
    126c:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	bc 01       	movw	r22, r24
    1276:	cd 01       	movw	r24, r26
    1278:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	9e af       	std	Y+62, r25	; 0x3e
    1282:	8d af       	std	Y+61, r24	; 0x3d
    1284:	0f c0       	rjmp	.+30     	; 0x12a4 <lcd_set_4bit+0x592>
    1286:	80 e7       	ldi	r24, 0x70	; 112
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	9c af       	std	Y+60, r25	; 0x3c
    128c:	8b af       	std	Y+59, r24	; 0x3b
    128e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1290:	9c ad       	ldd	r25, Y+60	; 0x3c
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	f1 f7       	brne	.-4      	; 0x1292 <lcd_set_4bit+0x580>
    1296:	9c af       	std	Y+60, r25	; 0x3c
    1298:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    129a:	8d ad       	ldd	r24, Y+61	; 0x3d
    129c:	9e ad       	ldd	r25, Y+62	; 0x3e
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	9e af       	std	Y+62, r25	; 0x3e
    12a2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    12a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	69 f7       	brne	.-38     	; 0x1286 <lcd_set_4bit+0x574>
    12ac:	16 c0       	rjmp	.+44     	; 0x12da <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ae:	fe 01       	movw	r30, r28
    12b0:	ff 96       	adiw	r30, 0x3f	; 63
    12b2:	60 81       	ld	r22, Z
    12b4:	71 81       	ldd	r23, Z+1	; 0x01
    12b6:	82 81       	ldd	r24, Z+2	; 0x02
    12b8:	93 81       	ldd	r25, Z+3	; 0x03
    12ba:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	9e af       	std	Y+62, r25	; 0x3e
    12c4:	8d af       	std	Y+61, r24	; 0x3d
    12c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    12c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    12ca:	9a af       	std	Y+58, r25	; 0x3a
    12cc:	89 af       	std	Y+57, r24	; 0x39
    12ce:	89 ad       	ldd	r24, Y+57	; 0x39
    12d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <lcd_set_4bit+0x5c0>
    12d6:	9a af       	std	Y+58, r25	; 0x3a
    12d8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    12da:	a8 e2       	ldi	r26, 0x28	; 40
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e8 e2       	ldi	r30, 0x28	; 40
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8b 7f       	andi	r24, 0xFB	; 251
    12e6:	8c 93       	st	X, r24
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	a0 e8       	ldi	r26, 0x80	; 128
    12ee:	bf e3       	ldi	r27, 0x3F	; 63
    12f0:	8d ab       	std	Y+53, r24	; 0x35
    12f2:	9e ab       	std	Y+54, r25	; 0x36
    12f4:	af ab       	std	Y+55, r26	; 0x37
    12f6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f8:	6d a9       	ldd	r22, Y+53	; 0x35
    12fa:	7e a9       	ldd	r23, Y+54	; 0x36
    12fc:	8f a9       	ldd	r24, Y+55	; 0x37
    12fe:	98 ad       	ldd	r25, Y+56	; 0x38
    1300:	26 e6       	ldi	r18, 0x66	; 102
    1302:	36 e6       	ldi	r19, 0x66	; 102
    1304:	46 e6       	ldi	r20, 0x66	; 102
    1306:	55 e4       	ldi	r21, 0x45	; 69
    1308:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	89 ab       	std	Y+49, r24	; 0x31
    1312:	9a ab       	std	Y+50, r25	; 0x32
    1314:	ab ab       	std	Y+51, r26	; 0x33
    1316:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1318:	69 a9       	ldd	r22, Y+49	; 0x31
    131a:	7a a9       	ldd	r23, Y+50	; 0x32
    131c:	8b a9       	ldd	r24, Y+51	; 0x33
    131e:	9c a9       	ldd	r25, Y+52	; 0x34
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e8       	ldi	r20, 0x80	; 128
    1326:	5f e3       	ldi	r21, 0x3F	; 63
    1328:	0e 94 bc 14 	call	0x2978	; 0x2978 <__ltsf2>
    132c:	88 23       	and	r24, r24
    132e:	2c f4       	brge	.+10     	; 0x133a <lcd_set_4bit+0x628>
		__ticks = 1;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	98 ab       	std	Y+48, r25	; 0x30
    1336:	8f a7       	std	Y+47, r24	; 0x2f
    1338:	3f c0       	rjmp	.+126    	; 0x13b8 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
    133a:	69 a9       	ldd	r22, Y+49	; 0x31
    133c:	7a a9       	ldd	r23, Y+50	; 0x32
    133e:	8b a9       	ldd	r24, Y+51	; 0x33
    1340:	9c a9       	ldd	r25, Y+52	; 0x34
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	3f ef       	ldi	r19, 0xFF	; 255
    1346:	4f e7       	ldi	r20, 0x7F	; 127
    1348:	57 e4       	ldi	r21, 0x47	; 71
    134a:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__gtsf2>
    134e:	18 16       	cp	r1, r24
    1350:	4c f5       	brge	.+82     	; 0x13a4 <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1352:	6d a9       	ldd	r22, Y+53	; 0x35
    1354:	7e a9       	ldd	r23, Y+54	; 0x36
    1356:	8f a9       	ldd	r24, Y+55	; 0x37
    1358:	98 ad       	ldd	r25, Y+56	; 0x38
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	40 e2       	ldi	r20, 0x20	; 32
    1360:	51 e4       	ldi	r21, 0x41	; 65
    1362:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	98 ab       	std	Y+48, r25	; 0x30
    1378:	8f a7       	std	Y+47, r24	; 0x2f
    137a:	0f c0       	rjmp	.+30     	; 0x139a <lcd_set_4bit+0x688>
    137c:	80 e7       	ldi	r24, 0x70	; 112
    137e:	91 e0       	ldi	r25, 0x01	; 1
    1380:	9e a7       	std	Y+46, r25	; 0x2e
    1382:	8d a7       	std	Y+45, r24	; 0x2d
    1384:	8d a5       	ldd	r24, Y+45	; 0x2d
    1386:	9e a5       	ldd	r25, Y+46	; 0x2e
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <lcd_set_4bit+0x676>
    138c:	9e a7       	std	Y+46, r25	; 0x2e
    138e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1390:	8f a5       	ldd	r24, Y+47	; 0x2f
    1392:	98 a9       	ldd	r25, Y+48	; 0x30
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	98 ab       	std	Y+48, r25	; 0x30
    1398:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139a:	8f a5       	ldd	r24, Y+47	; 0x2f
    139c:	98 a9       	ldd	r25, Y+48	; 0x30
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	69 f7       	brne	.-38     	; 0x137c <lcd_set_4bit+0x66a>
    13a2:	14 c0       	rjmp	.+40     	; 0x13cc <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a4:	69 a9       	ldd	r22, Y+49	; 0x31
    13a6:	7a a9       	ldd	r23, Y+50	; 0x32
    13a8:	8b a9       	ldd	r24, Y+51	; 0x33
    13aa:	9c a9       	ldd	r25, Y+52	; 0x34
    13ac:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	98 ab       	std	Y+48, r25	; 0x30
    13b6:	8f a7       	std	Y+47, r24	; 0x2f
    13b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ba:	98 a9       	ldd	r25, Y+48	; 0x30
    13bc:	9c a7       	std	Y+44, r25	; 0x2c
    13be:	8b a7       	std	Y+43, r24	; 0x2b
    13c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    13c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <lcd_set_4bit+0x6b2>
    13c8:	9c a7       	std	Y+44, r25	; 0x2c
    13ca:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    13cc:	a8 e2       	ldi	r26, 0x28	; 40
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e8 e2       	ldi	r30, 0x28	; 40
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	8e 7f       	andi	r24, 0xFE	; 254
    13d8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    13da:	a8 e2       	ldi	r26, 0x28	; 40
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e8 e2       	ldi	r30, 0x28	; 40
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	8d 7f       	andi	r24, 0xFD	; 253
    13e6:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
    13e8:	e8 e2       	ldi	r30, 0x28	; 40
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 e3       	ldi	r24, 0x30	; 48
    13ee:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    13f0:	a8 e2       	ldi	r26, 0x28	; 40
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e8 e2       	ldi	r30, 0x28	; 40
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	84 60       	ori	r24, 0x04	; 4
    13fc:	8c 93       	st	X, r24
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	a0 ea       	ldi	r26, 0xA0	; 160
    1404:	b0 e4       	ldi	r27, 0x40	; 64
    1406:	8f a3       	std	Y+39, r24	; 0x27
    1408:	98 a7       	std	Y+40, r25	; 0x28
    140a:	a9 a7       	std	Y+41, r26	; 0x29
    140c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140e:	6f a1       	ldd	r22, Y+39	; 0x27
    1410:	78 a5       	ldd	r23, Y+40	; 0x28
    1412:	89 a5       	ldd	r24, Y+41	; 0x29
    1414:	9a a5       	ldd	r25, Y+42	; 0x2a
    1416:	26 e6       	ldi	r18, 0x66	; 102
    1418:	36 e6       	ldi	r19, 0x66	; 102
    141a:	46 e6       	ldi	r20, 0x66	; 102
    141c:	55 e4       	ldi	r21, 0x45	; 69
    141e:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	8b a3       	std	Y+35, r24	; 0x23
    1428:	9c a3       	std	Y+36, r25	; 0x24
    142a:	ad a3       	std	Y+37, r26	; 0x25
    142c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    142e:	6b a1       	ldd	r22, Y+35	; 0x23
    1430:	7c a1       	ldd	r23, Y+36	; 0x24
    1432:	8d a1       	ldd	r24, Y+37	; 0x25
    1434:	9e a1       	ldd	r25, Y+38	; 0x26
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	40 e8       	ldi	r20, 0x80	; 128
    143c:	5f e3       	ldi	r21, 0x3F	; 63
    143e:	0e 94 bc 14 	call	0x2978	; 0x2978 <__ltsf2>
    1442:	88 23       	and	r24, r24
    1444:	2c f4       	brge	.+10     	; 0x1450 <lcd_set_4bit+0x73e>
		__ticks = 1;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	9a a3       	std	Y+34, r25	; 0x22
    144c:	89 a3       	std	Y+33, r24	; 0x21
    144e:	3f c0       	rjmp	.+126    	; 0x14ce <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
    1450:	6b a1       	ldd	r22, Y+35	; 0x23
    1452:	7c a1       	ldd	r23, Y+36	; 0x24
    1454:	8d a1       	ldd	r24, Y+37	; 0x25
    1456:	9e a1       	ldd	r25, Y+38	; 0x26
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	3f ef       	ldi	r19, 0xFF	; 255
    145c:	4f e7       	ldi	r20, 0x7F	; 127
    145e:	57 e4       	ldi	r21, 0x47	; 71
    1460:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__gtsf2>
    1464:	18 16       	cp	r1, r24
    1466:	4c f5       	brge	.+82     	; 0x14ba <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1468:	6f a1       	ldd	r22, Y+39	; 0x27
    146a:	78 a5       	ldd	r23, Y+40	; 0x28
    146c:	89 a5       	ldd	r24, Y+41	; 0x29
    146e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e2       	ldi	r20, 0x20	; 32
    1476:	51 e4       	ldi	r21, 0x41	; 65
    1478:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	bc 01       	movw	r22, r24
    1482:	cd 01       	movw	r24, r26
    1484:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	9a a3       	std	Y+34, r25	; 0x22
    148e:	89 a3       	std	Y+33, r24	; 0x21
    1490:	0f c0       	rjmp	.+30     	; 0x14b0 <lcd_set_4bit+0x79e>
    1492:	80 e7       	ldi	r24, 0x70	; 112
    1494:	91 e0       	ldi	r25, 0x01	; 1
    1496:	98 a3       	std	Y+32, r25	; 0x20
    1498:	8f 8f       	std	Y+31, r24	; 0x1f
    149a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    149c:	98 a1       	ldd	r25, Y+32	; 0x20
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <lcd_set_4bit+0x78c>
    14a2:	98 a3       	std	Y+32, r25	; 0x20
    14a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a6:	89 a1       	ldd	r24, Y+33	; 0x21
    14a8:	9a a1       	ldd	r25, Y+34	; 0x22
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	9a a3       	std	Y+34, r25	; 0x22
    14ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b0:	89 a1       	ldd	r24, Y+33	; 0x21
    14b2:	9a a1       	ldd	r25, Y+34	; 0x22
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	69 f7       	brne	.-38     	; 0x1492 <lcd_set_4bit+0x780>
    14b8:	14 c0       	rjmp	.+40     	; 0x14e2 <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ba:	6b a1       	ldd	r22, Y+35	; 0x23
    14bc:	7c a1       	ldd	r23, Y+36	; 0x24
    14be:	8d a1       	ldd	r24, Y+37	; 0x25
    14c0:	9e a1       	ldd	r25, Y+38	; 0x26
    14c2:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	9a a3       	std	Y+34, r25	; 0x22
    14cc:	89 a3       	std	Y+33, r24	; 0x21
    14ce:	89 a1       	ldd	r24, Y+33	; 0x21
    14d0:	9a a1       	ldd	r25, Y+34	; 0x22
    14d2:	9e 8f       	std	Y+30, r25	; 0x1e
    14d4:	8d 8f       	std	Y+29, r24	; 0x1d
    14d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <lcd_set_4bit+0x7c8>
    14de:	9e 8f       	std	Y+30, r25	; 0x1e
    14e0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    14e2:	a8 e2       	ldi	r26, 0x28	; 40
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e8 e2       	ldi	r30, 0x28	; 40
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	8b 7f       	andi	r24, 0xFB	; 251
    14ee:	8c 93       	st	X, r24
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	a0 e8       	ldi	r26, 0x80	; 128
    14f6:	bf e3       	ldi	r27, 0x3F	; 63
    14f8:	89 8f       	std	Y+25, r24	; 0x19
    14fa:	9a 8f       	std	Y+26, r25	; 0x1a
    14fc:	ab 8f       	std	Y+27, r26	; 0x1b
    14fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1500:	69 8d       	ldd	r22, Y+25	; 0x19
    1502:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1504:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1506:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1508:	26 e6       	ldi	r18, 0x66	; 102
    150a:	36 e6       	ldi	r19, 0x66	; 102
    150c:	46 e6       	ldi	r20, 0x66	; 102
    150e:	55 e4       	ldi	r21, 0x45	; 69
    1510:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	8d 8b       	std	Y+21, r24	; 0x15
    151a:	9e 8b       	std	Y+22, r25	; 0x16
    151c:	af 8b       	std	Y+23, r26	; 0x17
    151e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1520:	6d 89       	ldd	r22, Y+21	; 0x15
    1522:	7e 89       	ldd	r23, Y+22	; 0x16
    1524:	8f 89       	ldd	r24, Y+23	; 0x17
    1526:	98 8d       	ldd	r25, Y+24	; 0x18
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e8       	ldi	r20, 0x80	; 128
    152e:	5f e3       	ldi	r21, 0x3F	; 63
    1530:	0e 94 bc 14 	call	0x2978	; 0x2978 <__ltsf2>
    1534:	88 23       	and	r24, r24
    1536:	2c f4       	brge	.+10     	; 0x1542 <lcd_set_4bit+0x830>
		__ticks = 1;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	9c 8b       	std	Y+20, r25	; 0x14
    153e:	8b 8b       	std	Y+19, r24	; 0x13
    1540:	3f c0       	rjmp	.+126    	; 0x15c0 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
    1542:	6d 89       	ldd	r22, Y+21	; 0x15
    1544:	7e 89       	ldd	r23, Y+22	; 0x16
    1546:	8f 89       	ldd	r24, Y+23	; 0x17
    1548:	98 8d       	ldd	r25, Y+24	; 0x18
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	3f ef       	ldi	r19, 0xFF	; 255
    154e:	4f e7       	ldi	r20, 0x7F	; 127
    1550:	57 e4       	ldi	r21, 0x47	; 71
    1552:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__gtsf2>
    1556:	18 16       	cp	r1, r24
    1558:	4c f5       	brge	.+82     	; 0x15ac <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    155a:	69 8d       	ldd	r22, Y+25	; 0x19
    155c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    155e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1560:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	40 e2       	ldi	r20, 0x20	; 32
    1568:	51 e4       	ldi	r21, 0x41	; 65
    156a:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	bc 01       	movw	r22, r24
    1574:	cd 01       	movw	r24, r26
    1576:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	9c 8b       	std	Y+20, r25	; 0x14
    1580:	8b 8b       	std	Y+19, r24	; 0x13
    1582:	0f c0       	rjmp	.+30     	; 0x15a2 <lcd_set_4bit+0x890>
    1584:	80 e7       	ldi	r24, 0x70	; 112
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	9a 8b       	std	Y+18, r25	; 0x12
    158a:	89 8b       	std	Y+17, r24	; 0x11
    158c:	89 89       	ldd	r24, Y+17	; 0x11
    158e:	9a 89       	ldd	r25, Y+18	; 0x12
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	f1 f7       	brne	.-4      	; 0x1590 <lcd_set_4bit+0x87e>
    1594:	9a 8b       	std	Y+18, r25	; 0x12
    1596:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1598:	8b 89       	ldd	r24, Y+19	; 0x13
    159a:	9c 89       	ldd	r25, Y+20	; 0x14
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	9c 8b       	std	Y+20, r25	; 0x14
    15a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a2:	8b 89       	ldd	r24, Y+19	; 0x13
    15a4:	9c 89       	ldd	r25, Y+20	; 0x14
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	69 f7       	brne	.-38     	; 0x1584 <lcd_set_4bit+0x872>
    15aa:	14 c0       	rjmp	.+40     	; 0x15d4 <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ac:	6d 89       	ldd	r22, Y+21	; 0x15
    15ae:	7e 89       	ldd	r23, Y+22	; 0x16
    15b0:	8f 89       	ldd	r24, Y+23	; 0x17
    15b2:	98 8d       	ldd	r25, Y+24	; 0x18
    15b4:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	9c 8b       	std	Y+20, r25	; 0x14
    15be:	8b 8b       	std	Y+19, r24	; 0x13
    15c0:	8b 89       	ldd	r24, Y+19	; 0x13
    15c2:	9c 89       	ldd	r25, Y+20	; 0x14
    15c4:	98 8b       	std	Y+16, r25	; 0x10
    15c6:	8f 87       	std	Y+15, r24	; 0x0f
    15c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ca:	98 89       	ldd	r25, Y+16	; 0x10
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	f1 f7       	brne	.-4      	; 0x15cc <lcd_set_4bit+0x8ba>
    15d0:	98 8b       	std	Y+16, r25	; 0x10
    15d2:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    15d4:	a8 e2       	ldi	r26, 0x28	; 40
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e8 e2       	ldi	r30, 0x28	; 40
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	8e 7f       	andi	r24, 0xFE	; 254
    15e0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    15e2:	a8 e2       	ldi	r26, 0x28	; 40
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e8 e2       	ldi	r30, 0x28	; 40
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	8d 7f       	andi	r24, 0xFD	; 253
    15ee:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
    15f0:	e8 e2       	ldi	r30, 0x28	; 40
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 e2       	ldi	r24, 0x20	; 32
    15f6:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    15f8:	a8 e2       	ldi	r26, 0x28	; 40
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e8 e2       	ldi	r30, 0x28	; 40
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	84 60       	ori	r24, 0x04	; 4
    1604:	8c 93       	st	X, r24
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a0 ea       	ldi	r26, 0xA0	; 160
    160c:	b0 e4       	ldi	r27, 0x40	; 64
    160e:	8b 87       	std	Y+11, r24	; 0x0b
    1610:	9c 87       	std	Y+12, r25	; 0x0c
    1612:	ad 87       	std	Y+13, r26	; 0x0d
    1614:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1616:	6b 85       	ldd	r22, Y+11	; 0x0b
    1618:	7c 85       	ldd	r23, Y+12	; 0x0c
    161a:	8d 85       	ldd	r24, Y+13	; 0x0d
    161c:	9e 85       	ldd	r25, Y+14	; 0x0e
    161e:	26 e6       	ldi	r18, 0x66	; 102
    1620:	36 e6       	ldi	r19, 0x66	; 102
    1622:	46 e6       	ldi	r20, 0x66	; 102
    1624:	55 e4       	ldi	r21, 0x45	; 69
    1626:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	8f 83       	std	Y+7, r24	; 0x07
    1630:	98 87       	std	Y+8, r25	; 0x08
    1632:	a9 87       	std	Y+9, r26	; 0x09
    1634:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1636:	6f 81       	ldd	r22, Y+7	; 0x07
    1638:	78 85       	ldd	r23, Y+8	; 0x08
    163a:	89 85       	ldd	r24, Y+9	; 0x09
    163c:	9a 85       	ldd	r25, Y+10	; 0x0a
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e8       	ldi	r20, 0x80	; 128
    1644:	5f e3       	ldi	r21, 0x3F	; 63
    1646:	0e 94 bc 14 	call	0x2978	; 0x2978 <__ltsf2>
    164a:	88 23       	and	r24, r24
    164c:	2c f4       	brge	.+10     	; 0x1658 <lcd_set_4bit+0x946>
		__ticks = 1;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	9e 83       	std	Y+6, r25	; 0x06
    1654:	8d 83       	std	Y+5, r24	; 0x05
    1656:	3f c0       	rjmp	.+126    	; 0x16d6 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
    1658:	6f 81       	ldd	r22, Y+7	; 0x07
    165a:	78 85       	ldd	r23, Y+8	; 0x08
    165c:	89 85       	ldd	r24, Y+9	; 0x09
    165e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	3f ef       	ldi	r19, 0xFF	; 255
    1664:	4f e7       	ldi	r20, 0x7F	; 127
    1666:	57 e4       	ldi	r21, 0x47	; 71
    1668:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__gtsf2>
    166c:	18 16       	cp	r1, r24
    166e:	4c f5       	brge	.+82     	; 0x16c2 <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1670:	6b 85       	ldd	r22, Y+11	; 0x0b
    1672:	7c 85       	ldd	r23, Y+12	; 0x0c
    1674:	8d 85       	ldd	r24, Y+13	; 0x0d
    1676:	9e 85       	ldd	r25, Y+14	; 0x0e
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e2       	ldi	r20, 0x20	; 32
    167e:	51 e4       	ldi	r21, 0x41	; 65
    1680:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	bc 01       	movw	r22, r24
    168a:	cd 01       	movw	r24, r26
    168c:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	9e 83       	std	Y+6, r25	; 0x06
    1696:	8d 83       	std	Y+5, r24	; 0x05
    1698:	0f c0       	rjmp	.+30     	; 0x16b8 <lcd_set_4bit+0x9a6>
    169a:	80 e7       	ldi	r24, 0x70	; 112
    169c:	91 e0       	ldi	r25, 0x01	; 1
    169e:	9c 83       	std	Y+4, r25	; 0x04
    16a0:	8b 83       	std	Y+3, r24	; 0x03
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	9c 81       	ldd	r25, Y+4	; 0x04
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	f1 f7       	brne	.-4      	; 0x16a6 <lcd_set_4bit+0x994>
    16aa:	9c 83       	std	Y+4, r25	; 0x04
    16ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ae:	8d 81       	ldd	r24, Y+5	; 0x05
    16b0:	9e 81       	ldd	r25, Y+6	; 0x06
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	9e 83       	std	Y+6, r25	; 0x06
    16b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ba:	9e 81       	ldd	r25, Y+6	; 0x06
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	69 f7       	brne	.-38     	; 0x169a <lcd_set_4bit+0x988>
    16c0:	14 c0       	rjmp	.+40     	; 0x16ea <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c2:	6f 81       	ldd	r22, Y+7	; 0x07
    16c4:	78 85       	ldd	r23, Y+8	; 0x08
    16c6:	89 85       	ldd	r24, Y+9	; 0x09
    16c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ca:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	9e 83       	std	Y+6, r25	; 0x06
    16d4:	8d 83       	std	Y+5, r24	; 0x05
    16d6:	8d 81       	ldd	r24, Y+5	; 0x05
    16d8:	9e 81       	ldd	r25, Y+6	; 0x06
    16da:	9a 83       	std	Y+2, r25	; 0x02
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	9a 81       	ldd	r25, Y+2	; 0x02
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	f1 f7       	brne	.-4      	; 0x16e2 <lcd_set_4bit+0x9d0>
    16e6:	9a 83       	std	Y+2, r25	; 0x02
    16e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    16ea:	a8 e2       	ldi	r26, 0x28	; 40
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e8 e2       	ldi	r30, 0x28	; 40
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	8b 7f       	andi	r24, 0xFB	; 251
    16f6:	8c 93       	st	X, r24


}
    16f8:	c0 59       	subi	r28, 0x90	; 144
    16fa:	df 4f       	sbci	r29, 0xFF	; 255
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	08 95       	ret

00001710 <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	2e 97       	sbiw	r28, 0x0e	; 14
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
	lcd_set_4bit();
    1724:	0e 94 89 06 	call	0xd12	; 0xd12 <lcd_set_4bit>
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	a0 e8       	ldi	r26, 0x80	; 128
    172e:	bf e3       	ldi	r27, 0x3F	; 63
    1730:	8b 87       	std	Y+11, r24	; 0x0b
    1732:	9c 87       	std	Y+12, r25	; 0x0c
    1734:	ad 87       	std	Y+13, r26	; 0x0d
    1736:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1738:	6b 85       	ldd	r22, Y+11	; 0x0b
    173a:	7c 85       	ldd	r23, Y+12	; 0x0c
    173c:	8d 85       	ldd	r24, Y+13	; 0x0d
    173e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1740:	26 e6       	ldi	r18, 0x66	; 102
    1742:	36 e6       	ldi	r19, 0x66	; 102
    1744:	46 e6       	ldi	r20, 0x66	; 102
    1746:	55 e4       	ldi	r21, 0x45	; 69
    1748:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	8f 83       	std	Y+7, r24	; 0x07
    1752:	98 87       	std	Y+8, r25	; 0x08
    1754:	a9 87       	std	Y+9, r26	; 0x09
    1756:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1758:	6f 81       	ldd	r22, Y+7	; 0x07
    175a:	78 85       	ldd	r23, Y+8	; 0x08
    175c:	89 85       	ldd	r24, Y+9	; 0x09
    175e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e8       	ldi	r20, 0x80	; 128
    1766:	5f e3       	ldi	r21, 0x3F	; 63
    1768:	0e 94 bc 14 	call	0x2978	; 0x2978 <__ltsf2>
    176c:	88 23       	and	r24, r24
    176e:	2c f4       	brge	.+10     	; 0x177a <lcd_init+0x6a>
		__ticks = 1;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	9e 83       	std	Y+6, r25	; 0x06
    1776:	8d 83       	std	Y+5, r24	; 0x05
    1778:	3f c0       	rjmp	.+126    	; 0x17f8 <lcd_init+0xe8>
	else if (__tmp > 65535)
    177a:	6f 81       	ldd	r22, Y+7	; 0x07
    177c:	78 85       	ldd	r23, Y+8	; 0x08
    177e:	89 85       	ldd	r24, Y+9	; 0x09
    1780:	9a 85       	ldd	r25, Y+10	; 0x0a
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	3f ef       	ldi	r19, 0xFF	; 255
    1786:	4f e7       	ldi	r20, 0x7F	; 127
    1788:	57 e4       	ldi	r21, 0x47	; 71
    178a:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__gtsf2>
    178e:	18 16       	cp	r1, r24
    1790:	4c f5       	brge	.+82     	; 0x17e4 <lcd_init+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1792:	6b 85       	ldd	r22, Y+11	; 0x0b
    1794:	7c 85       	ldd	r23, Y+12	; 0x0c
    1796:	8d 85       	ldd	r24, Y+13	; 0x0d
    1798:	9e 85       	ldd	r25, Y+14	; 0x0e
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e2       	ldi	r20, 0x20	; 32
    17a0:	51 e4       	ldi	r21, 0x41	; 65
    17a2:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	bc 01       	movw	r22, r24
    17ac:	cd 01       	movw	r24, r26
    17ae:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	9e 83       	std	Y+6, r25	; 0x06
    17b8:	8d 83       	std	Y+5, r24	; 0x05
    17ba:	0f c0       	rjmp	.+30     	; 0x17da <lcd_init+0xca>
    17bc:	80 e7       	ldi	r24, 0x70	; 112
    17be:	91 e0       	ldi	r25, 0x01	; 1
    17c0:	9c 83       	std	Y+4, r25	; 0x04
    17c2:	8b 83       	std	Y+3, r24	; 0x03
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <lcd_init+0xb8>
    17cc:	9c 83       	std	Y+4, r25	; 0x04
    17ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d0:	8d 81       	ldd	r24, Y+5	; 0x05
    17d2:	9e 81       	ldd	r25, Y+6	; 0x06
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	9e 83       	std	Y+6, r25	; 0x06
    17d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17da:	8d 81       	ldd	r24, Y+5	; 0x05
    17dc:	9e 81       	ldd	r25, Y+6	; 0x06
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	69 f7       	brne	.-38     	; 0x17bc <lcd_init+0xac>
    17e2:	14 c0       	rjmp	.+40     	; 0x180c <lcd_init+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e4:	6f 81       	ldd	r22, Y+7	; 0x07
    17e6:	78 85       	ldd	r23, Y+8	; 0x08
    17e8:	89 85       	ldd	r24, Y+9	; 0x09
    17ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ec:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	9e 83       	std	Y+6, r25	; 0x06
    17f6:	8d 83       	std	Y+5, r24	; 0x05
    17f8:	8d 81       	ldd	r24, Y+5	; 0x05
    17fa:	9e 81       	ldd	r25, Y+6	; 0x06
    17fc:	9a 83       	std	Y+2, r25	; 0x02
    17fe:	89 83       	std	Y+1, r24	; 0x01
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	9a 81       	ldd	r25, Y+2	; 0x02
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <lcd_init+0xf4>
    1808:	9a 83       	std	Y+2, r25	; 0x02
    180a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
    180c:	88 e2       	ldi	r24, 0x28	; 40
    180e:	0e 94 1e 0c 	call	0x183c	; 0x183c <lcd_wr_command>
	lcd_wr_command(0x01);
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	0e 94 1e 0c 	call	0x183c	; 0x183c <lcd_wr_command>
	lcd_wr_command(0x06);
    1818:	86 e0       	ldi	r24, 0x06	; 6
    181a:	0e 94 1e 0c 	call	0x183c	; 0x183c <lcd_wr_command>
	lcd_wr_command(0x0E);
    181e:	8e e0       	ldi	r24, 0x0E	; 14
    1820:	0e 94 1e 0c 	call	0x183c	; 0x183c <lcd_wr_command>
	lcd_wr_command(0x80);
    1824:	80 e8       	ldi	r24, 0x80	; 128
    1826:	0e 94 1e 0c 	call	0x183c	; 0x183c <lcd_wr_command>

}
    182a:	2e 96       	adiw	r28, 0x0e	; 14
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	f8 94       	cli
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	cd bf       	out	0x3d, r28	; 61
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	08 95       	ret

0000183c <lcd_wr_command>:


//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	6e 97       	sbiw	r28, 0x1e	; 30
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
    1852:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1854:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
    1856:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1858:	80 7f       	andi	r24, 0xF0	; 240
    185a:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    185c:	a8 e2       	ldi	r26, 0x28	; 40
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e8 e2       	ldi	r30, 0x28	; 40
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	8f 70       	andi	r24, 0x0F	; 15
    1868:	8c 93       	st	X, r24
	lcd_port |= temp;
    186a:	a8 e2       	ldi	r26, 0x28	; 40
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e8 e2       	ldi	r30, 0x28	; 40
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	90 81       	ld	r25, Z
    1874:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1876:	89 2b       	or	r24, r25
    1878:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    187a:	a8 e2       	ldi	r26, 0x28	; 40
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e8 e2       	ldi	r30, 0x28	; 40
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	8e 7f       	andi	r24, 0xFE	; 254
    1886:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1888:	a8 e2       	ldi	r26, 0x28	; 40
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e8 e2       	ldi	r30, 0x28	; 40
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	8d 7f       	andi	r24, 0xFD	; 253
    1894:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1896:	a8 e2       	ldi	r26, 0x28	; 40
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e8 e2       	ldi	r30, 0x28	; 40
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	84 60       	ori	r24, 0x04	; 4
    18a2:	8c 93       	st	X, r24
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	a0 ea       	ldi	r26, 0xA0	; 160
    18aa:	b0 e4       	ldi	r27, 0x40	; 64
    18ac:	89 8f       	std	Y+25, r24	; 0x19
    18ae:	9a 8f       	std	Y+26, r25	; 0x1a
    18b0:	ab 8f       	std	Y+27, r26	; 0x1b
    18b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b4:	69 8d       	ldd	r22, Y+25	; 0x19
    18b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18bc:	26 e6       	ldi	r18, 0x66	; 102
    18be:	36 e6       	ldi	r19, 0x66	; 102
    18c0:	46 e6       	ldi	r20, 0x66	; 102
    18c2:	55 e4       	ldi	r21, 0x45	; 69
    18c4:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	8d 8b       	std	Y+21, r24	; 0x15
    18ce:	9e 8b       	std	Y+22, r25	; 0x16
    18d0:	af 8b       	std	Y+23, r26	; 0x17
    18d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18d4:	6d 89       	ldd	r22, Y+21	; 0x15
    18d6:	7e 89       	ldd	r23, Y+22	; 0x16
    18d8:	8f 89       	ldd	r24, Y+23	; 0x17
    18da:	98 8d       	ldd	r25, Y+24	; 0x18
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	40 e8       	ldi	r20, 0x80	; 128
    18e2:	5f e3       	ldi	r21, 0x3F	; 63
    18e4:	0e 94 bc 14 	call	0x2978	; 0x2978 <__ltsf2>
    18e8:	88 23       	and	r24, r24
    18ea:	2c f4       	brge	.+10     	; 0x18f6 <lcd_wr_command+0xba>
		__ticks = 1;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	9c 8b       	std	Y+20, r25	; 0x14
    18f2:	8b 8b       	std	Y+19, r24	; 0x13
    18f4:	3f c0       	rjmp	.+126    	; 0x1974 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
    18f6:	6d 89       	ldd	r22, Y+21	; 0x15
    18f8:	7e 89       	ldd	r23, Y+22	; 0x16
    18fa:	8f 89       	ldd	r24, Y+23	; 0x17
    18fc:	98 8d       	ldd	r25, Y+24	; 0x18
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	3f ef       	ldi	r19, 0xFF	; 255
    1902:	4f e7       	ldi	r20, 0x7F	; 127
    1904:	57 e4       	ldi	r21, 0x47	; 71
    1906:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__gtsf2>
    190a:	18 16       	cp	r1, r24
    190c:	4c f5       	brge	.+82     	; 0x1960 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190e:	69 8d       	ldd	r22, Y+25	; 0x19
    1910:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1912:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1914:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e2       	ldi	r20, 0x20	; 32
    191c:	51 e4       	ldi	r21, 0x41	; 65
    191e:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	bc 01       	movw	r22, r24
    1928:	cd 01       	movw	r24, r26
    192a:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	9c 8b       	std	Y+20, r25	; 0x14
    1934:	8b 8b       	std	Y+19, r24	; 0x13
    1936:	0f c0       	rjmp	.+30     	; 0x1956 <lcd_wr_command+0x11a>
    1938:	80 e7       	ldi	r24, 0x70	; 112
    193a:	91 e0       	ldi	r25, 0x01	; 1
    193c:	9a 8b       	std	Y+18, r25	; 0x12
    193e:	89 8b       	std	Y+17, r24	; 0x11
    1940:	89 89       	ldd	r24, Y+17	; 0x11
    1942:	9a 89       	ldd	r25, Y+18	; 0x12
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <lcd_wr_command+0x108>
    1948:	9a 8b       	std	Y+18, r25	; 0x12
    194a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194c:	8b 89       	ldd	r24, Y+19	; 0x13
    194e:	9c 89       	ldd	r25, Y+20	; 0x14
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	9c 8b       	std	Y+20, r25	; 0x14
    1954:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1956:	8b 89       	ldd	r24, Y+19	; 0x13
    1958:	9c 89       	ldd	r25, Y+20	; 0x14
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	69 f7       	brne	.-38     	; 0x1938 <lcd_wr_command+0xfc>
    195e:	14 c0       	rjmp	.+40     	; 0x1988 <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1960:	6d 89       	ldd	r22, Y+21	; 0x15
    1962:	7e 89       	ldd	r23, Y+22	; 0x16
    1964:	8f 89       	ldd	r24, Y+23	; 0x17
    1966:	98 8d       	ldd	r25, Y+24	; 0x18
    1968:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	9c 8b       	std	Y+20, r25	; 0x14
    1972:	8b 8b       	std	Y+19, r24	; 0x13
    1974:	8b 89       	ldd	r24, Y+19	; 0x13
    1976:	9c 89       	ldd	r25, Y+20	; 0x14
    1978:	98 8b       	std	Y+16, r25	; 0x10
    197a:	8f 87       	std	Y+15, r24	; 0x0f
    197c:	8f 85       	ldd	r24, Y+15	; 0x0f
    197e:	98 89       	ldd	r25, Y+16	; 0x10
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	f1 f7       	brne	.-4      	; 0x1980 <lcd_wr_command+0x144>
    1984:	98 8b       	std	Y+16, r25	; 0x10
    1986:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1988:	a8 e2       	ldi	r26, 0x28	; 40
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e8 e2       	ldi	r30, 0x28	; 40
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	8b 7f       	andi	r24, 0xFB	; 251
    1994:	8c 93       	st	X, r24

	cmd = cmd & 0x0F;
    1996:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1998:	8f 70       	andi	r24, 0x0F	; 15
    199a:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    199c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    199e:	82 95       	swap	r24
    19a0:	80 7f       	andi	r24, 0xF0	; 240
    19a2:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    19a4:	a8 e2       	ldi	r26, 0x28	; 40
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e8 e2       	ldi	r30, 0x28	; 40
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	8f 70       	andi	r24, 0x0F	; 15
    19b0:	8c 93       	st	X, r24
	lcd_port |= cmd;
    19b2:	a8 e2       	ldi	r26, 0x28	; 40
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e8 e2       	ldi	r30, 0x28	; 40
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	90 81       	ld	r25, Z
    19bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19be:	89 2b       	or	r24, r25
    19c0:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    19c2:	a8 e2       	ldi	r26, 0x28	; 40
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e8 e2       	ldi	r30, 0x28	; 40
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	8e 7f       	andi	r24, 0xFE	; 254
    19ce:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    19d0:	a8 e2       	ldi	r26, 0x28	; 40
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e8 e2       	ldi	r30, 0x28	; 40
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	8d 7f       	andi	r24, 0xFD	; 253
    19dc:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    19de:	a8 e2       	ldi	r26, 0x28	; 40
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e8 e2       	ldi	r30, 0x28	; 40
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	84 60       	ori	r24, 0x04	; 4
    19ea:	8c 93       	st	X, r24
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	a0 ea       	ldi	r26, 0xA0	; 160
    19f2:	b0 e4       	ldi	r27, 0x40	; 64
    19f4:	8b 87       	std	Y+11, r24	; 0x0b
    19f6:	9c 87       	std	Y+12, r25	; 0x0c
    19f8:	ad 87       	std	Y+13, r26	; 0x0d
    19fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a04:	26 e6       	ldi	r18, 0x66	; 102
    1a06:	36 e6       	ldi	r19, 0x66	; 102
    1a08:	46 e6       	ldi	r20, 0x66	; 102
    1a0a:	55 e4       	ldi	r21, 0x45	; 69
    1a0c:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	8f 83       	std	Y+7, r24	; 0x07
    1a16:	98 87       	std	Y+8, r25	; 0x08
    1a18:	a9 87       	std	Y+9, r26	; 0x09
    1a1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1e:	78 85       	ldd	r23, Y+8	; 0x08
    1a20:	89 85       	ldd	r24, Y+9	; 0x09
    1a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e8       	ldi	r20, 0x80	; 128
    1a2a:	5f e3       	ldi	r21, 0x3F	; 63
    1a2c:	0e 94 bc 14 	call	0x2978	; 0x2978 <__ltsf2>
    1a30:	88 23       	and	r24, r24
    1a32:	2c f4       	brge	.+10     	; 0x1a3e <lcd_wr_command+0x202>
		__ticks = 1;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	9e 83       	std	Y+6, r25	; 0x06
    1a3a:	8d 83       	std	Y+5, r24	; 0x05
    1a3c:	3f c0       	rjmp	.+126    	; 0x1abc <lcd_wr_command+0x280>
	else if (__tmp > 65535)
    1a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a40:	78 85       	ldd	r23, Y+8	; 0x08
    1a42:	89 85       	ldd	r24, Y+9	; 0x09
    1a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	3f ef       	ldi	r19, 0xFF	; 255
    1a4a:	4f e7       	ldi	r20, 0x7F	; 127
    1a4c:	57 e4       	ldi	r21, 0x47	; 71
    1a4e:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__gtsf2>
    1a52:	18 16       	cp	r1, r24
    1a54:	4c f5       	brge	.+82     	; 0x1aa8 <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e2       	ldi	r20, 0x20	; 32
    1a64:	51 e4       	ldi	r21, 0x41	; 65
    1a66:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	9e 83       	std	Y+6, r25	; 0x06
    1a7c:	8d 83       	std	Y+5, r24	; 0x05
    1a7e:	0f c0       	rjmp	.+30     	; 0x1a9e <lcd_wr_command+0x262>
    1a80:	80 e7       	ldi	r24, 0x70	; 112
    1a82:	91 e0       	ldi	r25, 0x01	; 1
    1a84:	9c 83       	std	Y+4, r25	; 0x04
    1a86:	8b 83       	std	Y+3, r24	; 0x03
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <lcd_wr_command+0x250>
    1a90:	9c 83       	std	Y+4, r25	; 0x04
    1a92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a94:	8d 81       	ldd	r24, Y+5	; 0x05
    1a96:	9e 81       	ldd	r25, Y+6	; 0x06
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	69 f7       	brne	.-38     	; 0x1a80 <lcd_wr_command+0x244>
    1aa6:	14 c0       	rjmp	.+40     	; 0x1ad0 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aaa:	78 85       	ldd	r23, Y+8	; 0x08
    1aac:	89 85       	ldd	r24, Y+9	; 0x09
    1aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab0:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9e 83       	std	Y+6, r25	; 0x06
    1aba:	8d 83       	std	Y+5, r24	; 0x05
    1abc:	8d 81       	ldd	r24, Y+5	; 0x05
    1abe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <lcd_wr_command+0x28c>
    1acc:	9a 83       	std	Y+2, r25	; 0x02
    1ace:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1ad0:	a8 e2       	ldi	r26, 0x28	; 40
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e8 e2       	ldi	r30, 0x28	; 40
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	8b 7f       	andi	r24, 0xFB	; 251
    1adc:	8c 93       	st	X, r24
}
    1ade:	6e 96       	adiw	r28, 0x1e	; 30
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	6e 97       	sbiw	r28, 0x1e	; 30
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    1b06:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b08:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
    1b0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b0c:	80 7f       	andi	r24, 0xF0	; 240
    1b0e:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    1b10:	a8 e2       	ldi	r26, 0x28	; 40
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e8 e2       	ldi	r30, 0x28	; 40
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	8f 70       	andi	r24, 0x0F	; 15
    1b1c:	8c 93       	st	X, r24
	lcd_port |= temp;
    1b1e:	a8 e2       	ldi	r26, 0x28	; 40
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e8 e2       	ldi	r30, 0x28	; 40
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	98 2f       	mov	r25, r24
    1b2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b2c:	89 2b       	or	r24, r25
    1b2e:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    1b30:	a8 e2       	ldi	r26, 0x28	; 40
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e8 e2       	ldi	r30, 0x28	; 40
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	81 60       	ori	r24, 0x01	; 1
    1b3c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1b3e:	a8 e2       	ldi	r26, 0x28	; 40
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e8 e2       	ldi	r30, 0x28	; 40
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	8d 7f       	andi	r24, 0xFD	; 253
    1b4a:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1b4c:	a8 e2       	ldi	r26, 0x28	; 40
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e8 e2       	ldi	r30, 0x28	; 40
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	84 60       	ori	r24, 0x04	; 4
    1b58:	8c 93       	st	X, r24
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	a0 ea       	ldi	r26, 0xA0	; 160
    1b60:	b0 e4       	ldi	r27, 0x40	; 64
    1b62:	89 8f       	std	Y+25, r24	; 0x19
    1b64:	9a 8f       	std	Y+26, r25	; 0x1a
    1b66:	ab 8f       	std	Y+27, r26	; 0x1b
    1b68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b72:	26 e6       	ldi	r18, 0x66	; 102
    1b74:	36 e6       	ldi	r19, 0x66	; 102
    1b76:	46 e6       	ldi	r20, 0x66	; 102
    1b78:	55 e4       	ldi	r21, 0x45	; 69
    1b7a:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	8d 8b       	std	Y+21, r24	; 0x15
    1b84:	9e 8b       	std	Y+22, r25	; 0x16
    1b86:	af 8b       	std	Y+23, r26	; 0x17
    1b88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b90:	98 8d       	ldd	r25, Y+24	; 0x18
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e8       	ldi	r20, 0x80	; 128
    1b98:	5f e3       	ldi	r21, 0x3F	; 63
    1b9a:	0e 94 bc 14 	call	0x2978	; 0x2978 <__ltsf2>
    1b9e:	88 23       	and	r24, r24
    1ba0:	2c f4       	brge	.+10     	; 0x1bac <lcd_wr_char+0xbc>
		__ticks = 1;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	9c 8b       	std	Y+20, r25	; 0x14
    1ba8:	8b 8b       	std	Y+19, r24	; 0x13
    1baa:	3f c0       	rjmp	.+126    	; 0x1c2a <lcd_wr_char+0x13a>
	else if (__tmp > 65535)
    1bac:	6d 89       	ldd	r22, Y+21	; 0x15
    1bae:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	3f ef       	ldi	r19, 0xFF	; 255
    1bb8:	4f e7       	ldi	r20, 0x7F	; 127
    1bba:	57 e4       	ldi	r21, 0x47	; 71
    1bbc:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__gtsf2>
    1bc0:	18 16       	cp	r1, r24
    1bc2:	4c f5       	brge	.+82     	; 0x1c16 <lcd_wr_char+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc4:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	40 e2       	ldi	r20, 0x20	; 32
    1bd2:	51 e4       	ldi	r21, 0x41	; 65
    1bd4:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	bc 01       	movw	r22, r24
    1bde:	cd 01       	movw	r24, r26
    1be0:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	9c 8b       	std	Y+20, r25	; 0x14
    1bea:	8b 8b       	std	Y+19, r24	; 0x13
    1bec:	0f c0       	rjmp	.+30     	; 0x1c0c <lcd_wr_char+0x11c>
    1bee:	80 e7       	ldi	r24, 0x70	; 112
    1bf0:	91 e0       	ldi	r25, 0x01	; 1
    1bf2:	9a 8b       	std	Y+18, r25	; 0x12
    1bf4:	89 8b       	std	Y+17, r24	; 0x11
    1bf6:	89 89       	ldd	r24, Y+17	; 0x11
    1bf8:	9a 89       	ldd	r25, Y+18	; 0x12
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <lcd_wr_char+0x10a>
    1bfe:	9a 8b       	std	Y+18, r25	; 0x12
    1c00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c02:	8b 89       	ldd	r24, Y+19	; 0x13
    1c04:	9c 89       	ldd	r25, Y+20	; 0x14
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	9c 8b       	std	Y+20, r25	; 0x14
    1c0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	69 f7       	brne	.-38     	; 0x1bee <lcd_wr_char+0xfe>
    1c14:	14 c0       	rjmp	.+40     	; 0x1c3e <lcd_wr_char+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c16:	6d 89       	ldd	r22, Y+21	; 0x15
    1c18:	7e 89       	ldd	r23, Y+22	; 0x16
    1c1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c1e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	9c 8b       	std	Y+20, r25	; 0x14
    1c28:	8b 8b       	std	Y+19, r24	; 0x13
    1c2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2e:	98 8b       	std	Y+16, r25	; 0x10
    1c30:	8f 87       	std	Y+15, r24	; 0x0f
    1c32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c34:	98 89       	ldd	r25, Y+16	; 0x10
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <lcd_wr_char+0x146>
    1c3a:	98 8b       	std	Y+16, r25	; 0x10
    1c3c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1c3e:	a8 e2       	ldi	r26, 0x28	; 40
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e8 e2       	ldi	r30, 0x28	; 40
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	8b 7f       	andi	r24, 0xFB	; 251
    1c4a:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    1c4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c4e:	8f 70       	andi	r24, 0x0F	; 15
    1c50:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1c52:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c54:	99 27       	eor	r25, r25
    1c56:	87 fd       	sbrc	r24, 7
    1c58:	90 95       	com	r25
    1c5a:	82 95       	swap	r24
    1c5c:	92 95       	swap	r25
    1c5e:	90 7f       	andi	r25, 0xF0	; 240
    1c60:	98 27       	eor	r25, r24
    1c62:	80 7f       	andi	r24, 0xF0	; 240
    1c64:	98 27       	eor	r25, r24
    1c66:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1c68:	a8 e2       	ldi	r26, 0x28	; 40
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e8 e2       	ldi	r30, 0x28	; 40
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	8f 70       	andi	r24, 0x0F	; 15
    1c74:	8c 93       	st	X, r24
	lcd_port |= letter;
    1c76:	a8 e2       	ldi	r26, 0x28	; 40
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	e8 e2       	ldi	r30, 0x28	; 40
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	98 2f       	mov	r25, r24
    1c82:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c84:	89 2b       	or	r24, r25
    1c86:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    1c88:	a8 e2       	ldi	r26, 0x28	; 40
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e8 e2       	ldi	r30, 0x28	; 40
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	81 60       	ori	r24, 0x01	; 1
    1c94:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1c96:	a8 e2       	ldi	r26, 0x28	; 40
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e8 e2       	ldi	r30, 0x28	; 40
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	8d 7f       	andi	r24, 0xFD	; 253
    1ca2:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1ca4:	a8 e2       	ldi	r26, 0x28	; 40
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e8 e2       	ldi	r30, 0x28	; 40
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	84 60       	ori	r24, 0x04	; 4
    1cb0:	8c 93       	st	X, r24
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	a0 ea       	ldi	r26, 0xA0	; 160
    1cb8:	b0 e4       	ldi	r27, 0x40	; 64
    1cba:	8b 87       	std	Y+11, r24	; 0x0b
    1cbc:	9c 87       	std	Y+12, r25	; 0x0c
    1cbe:	ad 87       	std	Y+13, r26	; 0x0d
    1cc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cca:	26 e6       	ldi	r18, 0x66	; 102
    1ccc:	36 e6       	ldi	r19, 0x66	; 102
    1cce:	46 e6       	ldi	r20, 0x66	; 102
    1cd0:	55 e4       	ldi	r21, 0x45	; 69
    1cd2:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	8f 83       	std	Y+7, r24	; 0x07
    1cdc:	98 87       	std	Y+8, r25	; 0x08
    1cde:	a9 87       	std	Y+9, r26	; 0x09
    1ce0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce4:	78 85       	ldd	r23, Y+8	; 0x08
    1ce6:	89 85       	ldd	r24, Y+9	; 0x09
    1ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e8       	ldi	r20, 0x80	; 128
    1cf0:	5f e3       	ldi	r21, 0x3F	; 63
    1cf2:	0e 94 bc 14 	call	0x2978	; 0x2978 <__ltsf2>
    1cf6:	88 23       	and	r24, r24
    1cf8:	2c f4       	brge	.+10     	; 0x1d04 <lcd_wr_char+0x214>
		__ticks = 1;
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	9e 83       	std	Y+6, r25	; 0x06
    1d00:	8d 83       	std	Y+5, r24	; 0x05
    1d02:	3f c0       	rjmp	.+126    	; 0x1d82 <lcd_wr_char+0x292>
	else if (__tmp > 65535)
    1d04:	6f 81       	ldd	r22, Y+7	; 0x07
    1d06:	78 85       	ldd	r23, Y+8	; 0x08
    1d08:	89 85       	ldd	r24, Y+9	; 0x09
    1d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	3f ef       	ldi	r19, 0xFF	; 255
    1d10:	4f e7       	ldi	r20, 0x7F	; 127
    1d12:	57 e4       	ldi	r21, 0x47	; 71
    1d14:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__gtsf2>
    1d18:	18 16       	cp	r1, r24
    1d1a:	4c f5       	brge	.+82     	; 0x1d6e <lcd_wr_char+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e2       	ldi	r20, 0x20	; 32
    1d2a:	51 e4       	ldi	r21, 0x41	; 65
    1d2c:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	bc 01       	movw	r22, r24
    1d36:	cd 01       	movw	r24, r26
    1d38:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	9e 83       	std	Y+6, r25	; 0x06
    1d42:	8d 83       	std	Y+5, r24	; 0x05
    1d44:	0f c0       	rjmp	.+30     	; 0x1d64 <lcd_wr_char+0x274>
    1d46:	80 e7       	ldi	r24, 0x70	; 112
    1d48:	91 e0       	ldi	r25, 0x01	; 1
    1d4a:	9c 83       	std	Y+4, r25	; 0x04
    1d4c:	8b 83       	std	Y+3, r24	; 0x03
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	9c 81       	ldd	r25, Y+4	; 0x04
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <lcd_wr_char+0x262>
    1d56:	9c 83       	std	Y+4, r25	; 0x04
    1d58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	9e 83       	std	Y+6, r25	; 0x06
    1d62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d64:	8d 81       	ldd	r24, Y+5	; 0x05
    1d66:	9e 81       	ldd	r25, Y+6	; 0x06
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	69 f7       	brne	.-38     	; 0x1d46 <lcd_wr_char+0x256>
    1d6c:	14 c0       	rjmp	.+40     	; 0x1d96 <lcd_wr_char+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d70:	78 85       	ldd	r23, Y+8	; 0x08
    1d72:	89 85       	ldd	r24, Y+9	; 0x09
    1d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d76:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fixunssfsi>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	9e 83       	std	Y+6, r25	; 0x06
    1d80:	8d 83       	std	Y+5, r24	; 0x05
    1d82:	8d 81       	ldd	r24, Y+5	; 0x05
    1d84:	9e 81       	ldd	r25, Y+6	; 0x06
    1d86:	9a 83       	std	Y+2, r25	; 0x02
    1d88:	89 83       	std	Y+1, r24	; 0x01
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <lcd_wr_char+0x29e>
    1d92:	9a 83       	std	Y+2, r25	; 0x02
    1d94:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1d96:	a8 e2       	ldi	r26, 0x28	; 40
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e8 e2       	ldi	r30, 0x28	; 40
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	8b 7f       	andi	r24, 0xFB	; 251
    1da2:	8c 93       	st	X, r24
}
    1da4:	6e 96       	adiw	r28, 0x1e	; 30
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	cd bf       	out	0x3d, r28	; 61
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1dbe:	80 e8       	ldi	r24, 0x80	; 128
    1dc0:	0e 94 1e 0c 	call	0x183c	; 0x183c <lcd_wr_command>
}
    1dc4:	cf 91       	pop	r28
    1dc6:	df 91       	pop	r29
    1dc8:	08 95       	ret

00001dca <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    1dca:	df 93       	push	r29
    1dcc:	cf 93       	push	r28
    1dce:	0f 92       	push	r0
    1dd0:	0f 92       	push	r0
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
    1dd6:	9a 83       	std	Y+2, r25	; 0x02
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	0a c0       	rjmp	.+20     	; 0x1df0 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1ddc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dde:	fa 81       	ldd	r31, Y+2	; 0x02
    1de0:	80 81       	ld	r24, Z
    1de2:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <lcd_wr_char>
		str++;
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dea:	01 96       	adiw	r24, 0x01	; 1
    1dec:	9a 83       	std	Y+2, r25	; 0x02
    1dee:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    1df0:	e9 81       	ldd	r30, Y+1	; 0x01
    1df2:	fa 81       	ldd	r31, Y+2	; 0x02
    1df4:	80 81       	ld	r24, Z
    1df6:	88 23       	and	r24, r24
    1df8:	89 f7       	brne	.-30     	; 0x1ddc <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <lcd_cursor+0x6>
    1e0a:	0f 92       	push	r0
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	28 2f       	mov	r18, r24
    1e18:	33 27       	eor	r19, r19
    1e1a:	27 fd       	sbrc	r18, 7
    1e1c:	30 95       	com	r19
    1e1e:	3c 83       	std	Y+4, r19	; 0x04
    1e20:	2b 83       	std	Y+3, r18	; 0x03
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	9c 81       	ldd	r25, Y+4	; 0x04
    1e26:	82 30       	cpi	r24, 0x02	; 2
    1e28:	91 05       	cpc	r25, r1
    1e2a:	d9 f0       	breq	.+54     	; 0x1e62 <lcd_cursor+0x5e>
    1e2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e30:	23 30       	cpi	r18, 0x03	; 3
    1e32:	31 05       	cpc	r19, r1
    1e34:	34 f4       	brge	.+12     	; 0x1e42 <lcd_cursor+0x3e>
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3a:	81 30       	cpi	r24, 0x01	; 1
    1e3c:	91 05       	cpc	r25, r1
    1e3e:	61 f0       	breq	.+24     	; 0x1e58 <lcd_cursor+0x54>
    1e40:	1e c0       	rjmp	.+60     	; 0x1e7e <lcd_cursor+0x7a>
    1e42:	2b 81       	ldd	r18, Y+3	; 0x03
    1e44:	3c 81       	ldd	r19, Y+4	; 0x04
    1e46:	23 30       	cpi	r18, 0x03	; 3
    1e48:	31 05       	cpc	r19, r1
    1e4a:	81 f0       	breq	.+32     	; 0x1e6c <lcd_cursor+0x68>
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e50:	84 30       	cpi	r24, 0x04	; 4
    1e52:	91 05       	cpc	r25, r1
    1e54:	81 f0       	breq	.+32     	; 0x1e76 <lcd_cursor+0x72>
    1e56:	13 c0       	rjmp	.+38     	; 0x1e7e <lcd_cursor+0x7a>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	81 58       	subi	r24, 0x81	; 129
    1e5c:	0e 94 1e 0c 	call	0x183c	; 0x183c <lcd_wr_command>
    1e60:	0e c0       	rjmp	.+28     	; 0x1e7e <lcd_cursor+0x7a>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	81 54       	subi	r24, 0x41	; 65
    1e66:	0e 94 1e 0c 	call	0x183c	; 0x183c <lcd_wr_command>
    1e6a:	09 c0       	rjmp	.+18     	; 0x1e7e <lcd_cursor+0x7a>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	8d 56       	subi	r24, 0x6D	; 109
    1e70:	0e 94 1e 0c 	call	0x183c	; 0x183c <lcd_wr_command>
    1e74:	04 c0       	rjmp	.+8      	; 0x1e7e <lcd_cursor+0x7a>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	8d 52       	subi	r24, 0x2D	; 45
    1e7a:	0e 94 1e 0c 	call	0x183c	; 0x183c <lcd_wr_command>
		default: break;
	}
}
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	cf 91       	pop	r28
    1e88:	df 91       	pop	r29
    1e8a:	08 95       	ret

00001e8c <lcd_print>:

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	27 97       	sbiw	r28, 0x07	; 7
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	8a 83       	std	Y+2, r24	; 0x02
    1ea2:	6b 83       	std	Y+3, r22	; 0x03
    1ea4:	5d 83       	std	Y+5, r21	; 0x05
    1ea6:	4c 83       	std	Y+4, r20	; 0x04
    1ea8:	3f 83       	std	Y+7, r19	; 0x07
    1eaa:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    1eac:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    1eae:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb0:	88 23       	and	r24, r24
    1eb2:	19 f0       	breq	.+6      	; 0x1eba <lcd_print+0x2e>
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	88 23       	and	r24, r24
    1eb8:	19 f4       	brne	.+6      	; 0x1ec0 <lcd_print+0x34>
	{
		lcd_home();
    1eba:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <lcd_home>
    1ebe:	04 c0       	rjmp	.+8      	; 0x1ec8 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	6b 81       	ldd	r22, Y+3	; 0x03
    1ec4:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    1ec8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eca:	9f 81       	ldd	r25, Y+7	; 0x07
    1ecc:	85 30       	cpi	r24, 0x05	; 5
    1ece:	91 05       	cpc	r25, r1
    1ed0:	19 f0       	breq	.+6      	; 0x1ed8 <lcd_print+0x4c>
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	81 30       	cpi	r24, 0x01	; 1
    1ed6:	a9 f4       	brne	.+42     	; 0x1f02 <lcd_print+0x76>
	{
		million=value/10000+48;
    1ed8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eda:	9d 81       	ldd	r25, Y+5	; 0x05
    1edc:	20 e1       	ldi	r18, 0x10	; 16
    1ede:	37 e2       	ldi	r19, 0x27	; 39
    1ee0:	b9 01       	movw	r22, r18
    1ee2:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <__udivmodhi4>
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	c0 96       	adiw	r24, 0x30	; 48
    1eea:	90 93 23 03 	sts	0x0323, r25
    1eee:	80 93 22 03 	sts	0x0322, r24
		lcd_wr_char(million);
    1ef2:	80 91 22 03 	lds	r24, 0x0322
    1ef6:	90 91 23 03 	lds	r25, 0x0323
    1efa:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <lcd_wr_char>
		flag=1;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1f02:	8e 81       	ldd	r24, Y+6	; 0x06
    1f04:	9f 81       	ldd	r25, Y+7	; 0x07
    1f06:	84 30       	cpi	r24, 0x04	; 4
    1f08:	91 05       	cpc	r25, r1
    1f0a:	19 f0       	breq	.+6      	; 0x1f12 <lcd_print+0x86>
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	81 30       	cpi	r24, 0x01	; 1
    1f10:	11 f5       	brne	.+68     	; 0x1f56 <lcd_print+0xca>
	{
		temp = value/1000;
    1f12:	8c 81       	ldd	r24, Y+4	; 0x04
    1f14:	9d 81       	ldd	r25, Y+5	; 0x05
    1f16:	28 ee       	ldi	r18, 0xE8	; 232
    1f18:	33 e0       	ldi	r19, 0x03	; 3
    1f1a:	b9 01       	movw	r22, r18
    1f1c:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <__udivmodhi4>
    1f20:	cb 01       	movw	r24, r22
    1f22:	90 93 25 03 	sts	0x0325, r25
    1f26:	80 93 24 03 	sts	0x0324, r24
		thousand = temp%10 + 48;
    1f2a:	80 91 24 03 	lds	r24, 0x0324
    1f2e:	90 91 25 03 	lds	r25, 0x0325
    1f32:	2a e0       	ldi	r18, 0x0A	; 10
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	b9 01       	movw	r22, r18
    1f38:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <__udivmodhi4>
    1f3c:	c0 96       	adiw	r24, 0x30	; 48
    1f3e:	90 93 2d 03 	sts	0x032D, r25
    1f42:	80 93 2c 03 	sts	0x032C, r24
		lcd_wr_char(thousand);
    1f46:	80 91 2c 03 	lds	r24, 0x032C
    1f4a:	90 91 2d 03 	lds	r25, 0x032D
    1f4e:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <lcd_wr_char>
		flag=1;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1f56:	8e 81       	ldd	r24, Y+6	; 0x06
    1f58:	9f 81       	ldd	r25, Y+7	; 0x07
    1f5a:	83 30       	cpi	r24, 0x03	; 3
    1f5c:	91 05       	cpc	r25, r1
    1f5e:	19 f0       	breq	.+6      	; 0x1f66 <lcd_print+0xda>
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	81 30       	cpi	r24, 0x01	; 1
    1f64:	11 f5       	brne	.+68     	; 0x1faa <lcd_print+0x11e>
	{
		temp = value/100;
    1f66:	8c 81       	ldd	r24, Y+4	; 0x04
    1f68:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6a:	24 e6       	ldi	r18, 0x64	; 100
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	b9 01       	movw	r22, r18
    1f70:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <__udivmodhi4>
    1f74:	cb 01       	movw	r24, r22
    1f76:	90 93 25 03 	sts	0x0325, r25
    1f7a:	80 93 24 03 	sts	0x0324, r24
		hundred = temp%10 + 48;
    1f7e:	80 91 24 03 	lds	r24, 0x0324
    1f82:	90 91 25 03 	lds	r25, 0x0325
    1f86:	2a e0       	ldi	r18, 0x0A	; 10
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	b9 01       	movw	r22, r18
    1f8c:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <__udivmodhi4>
    1f90:	c0 96       	adiw	r24, 0x30	; 48
    1f92:	90 93 29 03 	sts	0x0329, r25
    1f96:	80 93 28 03 	sts	0x0328, r24
		lcd_wr_char(hundred);
    1f9a:	80 91 28 03 	lds	r24, 0x0328
    1f9e:	90 91 29 03 	lds	r25, 0x0329
    1fa2:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <lcd_wr_char>
		flag=1;
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    1faa:	8e 81       	ldd	r24, Y+6	; 0x06
    1fac:	9f 81       	ldd	r25, Y+7	; 0x07
    1fae:	82 30       	cpi	r24, 0x02	; 2
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	19 f0       	breq	.+6      	; 0x1fba <lcd_print+0x12e>
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	81 30       	cpi	r24, 0x01	; 1
    1fb8:	11 f5       	brne	.+68     	; 0x1ffe <lcd_print+0x172>
	{
		temp = value/10;
    1fba:	8c 81       	ldd	r24, Y+4	; 0x04
    1fbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1fbe:	2a e0       	ldi	r18, 0x0A	; 10
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	b9 01       	movw	r22, r18
    1fc4:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <__udivmodhi4>
    1fc8:	cb 01       	movw	r24, r22
    1fca:	90 93 25 03 	sts	0x0325, r25
    1fce:	80 93 24 03 	sts	0x0324, r24
		tens = temp%10 + 48;
    1fd2:	80 91 24 03 	lds	r24, 0x0324
    1fd6:	90 91 25 03 	lds	r25, 0x0325
    1fda:	2a e0       	ldi	r18, 0x0A	; 10
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	b9 01       	movw	r22, r18
    1fe0:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <__udivmodhi4>
    1fe4:	c0 96       	adiw	r24, 0x30	; 48
    1fe6:	90 93 27 03 	sts	0x0327, r25
    1fea:	80 93 26 03 	sts	0x0326, r24
		lcd_wr_char(tens);
    1fee:	80 91 26 03 	lds	r24, 0x0326
    1ff2:	90 91 27 03 	lds	r25, 0x0327
    1ff6:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <lcd_wr_char>
		flag=1;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    1ffe:	8e 81       	ldd	r24, Y+6	; 0x06
    2000:	9f 81       	ldd	r25, Y+7	; 0x07
    2002:	81 30       	cpi	r24, 0x01	; 1
    2004:	91 05       	cpc	r25, r1
    2006:	19 f0       	breq	.+6      	; 0x200e <lcd_print+0x182>
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	81 30       	cpi	r24, 0x01	; 1
    200c:	91 f4       	brne	.+36     	; 0x2032 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    200e:	8c 81       	ldd	r24, Y+4	; 0x04
    2010:	9d 81       	ldd	r25, Y+5	; 0x05
    2012:	2a e0       	ldi	r18, 0x0A	; 10
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	b9 01       	movw	r22, r18
    2018:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <__udivmodhi4>
    201c:	c0 96       	adiw	r24, 0x30	; 48
    201e:	90 93 2b 03 	sts	0x032B, r25
    2022:	80 93 2a 03 	sts	0x032A, r24
		lcd_wr_char(unit);
    2026:	80 91 2a 03 	lds	r24, 0x032A
    202a:	90 91 2b 03 	lds	r25, 0x032B
    202e:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <lcd_wr_char>
	}
	if(digits>5)
    2032:	8e 81       	ldd	r24, Y+6	; 0x06
    2034:	9f 81       	ldd	r25, Y+7	; 0x07
    2036:	86 30       	cpi	r24, 0x06	; 6
    2038:	91 05       	cpc	r25, r1
    203a:	1c f0       	brlt	.+6      	; 0x2042 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    203c:	85 e4       	ldi	r24, 0x45	; 69
    203e:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <lcd_wr_char>
	}

}
    2042:	27 96       	adiw	r28, 0x07	; 7
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <adc_pin_config>:
Available functions in the library, (Total : 2)
****************************************************************/
unsigned char ADC_Conversion(unsigned char);

void adc_pin_config()
{
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    DDRF = 0x00;    //All ADC Channels on port F set as inputs
    205c:	e0 e3       	ldi	r30, 0x30	; 48
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	10 82       	st	Z, r1
    DDRK = 0x00;    //All ADC Channels on port K set as inputs.
    2062:	e7 e0       	ldi	r30, 0x07	; 7
    2064:	f1 e0       	ldi	r31, 0x01	; 1
    2066:	10 82       	st	Z, r1
    PORTF = 0x00;   //All ADC pins on port F pulled low.
    2068:	e1 e3       	ldi	r30, 0x31	; 49
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	10 82       	st	Z, r1
    PORTK = 0x00;   //All ADC pins on port K pulled low.
    206e:	e8 e0       	ldi	r30, 0x08	; 8
    2070:	f1 e0       	ldi	r31, 0x01	; 1
    2072:	10 82       	st	Z, r1
}
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <set_ADC>:

void set_ADC()
{
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    adc_pin_config();
    2082:	0e 94 2a 10 	call	0x2054	; 0x2054 <adc_pin_config>

	ADCSRA = 0x00;
    2086:	ea e7       	ldi	r30, 0x7A	; 122
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    208c:	eb e7       	ldi	r30, 0x7B	; 123
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    2092:	ec e7       	ldi	r30, 0x7C	; 124
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 e2       	ldi	r24, 0x20	; 32
    2098:	80 83       	st	Z, r24
	ACSR = 0x80;        //Disable analog comparator.
    209a:	e0 e5       	ldi	r30, 0x50	; 80
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 e8       	ldi	r24, 0x80	; 128
    20a0:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0 ( Prescalar 64)
    20a2:	ea e7       	ldi	r30, 0x7A	; 122
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	86 e8       	ldi	r24, 0x86	; 134
    20a8:	80 83       	st	Z, r24
}
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <ADC_Conversion>:

//Function For ADC Conversion
//Value of ch can be 1-15 for single ended input.
//ADC resolution 8 bit.
unsigned char ADC_Conversion(unsigned char Ch)
{
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	0f 92       	push	r0
    20b6:	0f 92       	push	r0
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;

	if(Ch>7)
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	88 30       	cpi	r24, 0x08	; 8
    20c2:	20 f0       	brcs	.+8      	; 0x20cc <ADC_Conversion+0x1c>
        ADCSRB = 0x08;
    20c4:	eb e7       	ldi	r30, 0x7B	; 123
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	88 e0       	ldi	r24, 0x08	; 8
    20ca:	80 83       	st	Z, r24

	Ch = Ch & 0x07;
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	87 70       	andi	r24, 0x07	; 7
    20d0:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;
    20d2:	ec e7       	ldi	r30, 0x7C	; 124
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	8a 81       	ldd	r24, Y+2	; 0x02
    20d8:	80 62       	ori	r24, 0x20	; 32
    20da:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    20dc:	aa e7       	ldi	r26, 0x7A	; 122
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	ea e7       	ldi	r30, 0x7A	; 122
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	80 64       	ori	r24, 0x40	; 64
    20e8:	8c 93       	st	X, r24

	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    20ea:	ea e7       	ldi	r30, 0x7A	; 122
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	88 2f       	mov	r24, r24
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	80 71       	andi	r24, 0x10	; 16
    20f6:	90 70       	andi	r25, 0x00	; 0
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	b9 f3       	breq	.-18     	; 0x20ea <ADC_Conversion+0x3a>

	a=ADCH;
    20fc:	e9 e7       	ldi	r30, 0x79	; 121
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10;       //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    2104:	aa e7       	ldi	r26, 0x7A	; 122
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	ea e7       	ldi	r30, 0x7A	; 122
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	80 61       	ori	r24, 0x10	; 16
    2110:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    2112:	eb e7       	ldi	r30, 0x7B	; 123
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	10 82       	st	Z, r1
	return a;
    2118:	89 81       	ldd	r24, Y+1	; 0x01
}
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <main>:

//This variable detects the number of black nodes and keeps count of it.
int node = 0;

int main()
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	00 d0       	rcall	.+0      	; 0x212a <main+0x6>
    212a:	00 d0       	rcall	.+0      	; 0x212c <main+0x8>
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    cli();
    2130:	f8 94       	cli
    set_motors();
    2132:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_motors>
    set_ADC();
    2136:	0e 94 3d 10 	call	0x207a	; 0x207a <set_ADC>
    set_lcd();
    213a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <set_lcd>
    sei();
    213e:	78 94       	sei

    PORTH |= (1<<3) | (1<<2);
    2140:	a2 e0       	ldi	r26, 0x02	; 2
    2142:	b1 e0       	ldi	r27, 0x01	; 1
    2144:	e2 e0       	ldi	r30, 0x02	; 2
    2146:	f1 e0       	ldi	r31, 0x01	; 1
    2148:	80 81       	ld	r24, Z
    214a:	8c 60       	ori	r24, 0x0C	; 12
    214c:	8c 93       	st	X, r24

    lcd_cursor(1,4);
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	64 e0       	ldi	r22, 0x04	; 4
    2152:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <lcd_cursor>
    lcd_string("E-Yantra");
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	92 e0       	ldi	r25, 0x02	; 2
    215a:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <lcd_string>
    //Uncomment this to check the bot following the line for a particular distance.
    //line_follow_mm(800);
    int left, right, centre;
    while(1)
    {
        left = ADC_Conversion(3);
    215e:	83 e0       	ldi	r24, 0x03	; 3
    2160:	0e 94 58 10 	call	0x20b0	; 0x20b0 <ADC_Conversion>
    2164:	88 2f       	mov	r24, r24
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	9e 83       	std	Y+6, r25	; 0x06
    216a:	8d 83       	std	Y+5, r24	; 0x05
        centre = ADC_Conversion(2);
    216c:	82 e0       	ldi	r24, 0x02	; 2
    216e:	0e 94 58 10 	call	0x20b0	; 0x20b0 <ADC_Conversion>
    2172:	88 2f       	mov	r24, r24
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9a 83       	std	Y+2, r25	; 0x02
    2178:	89 83       	std	Y+1, r24	; 0x01
        right = ADC_Conversion(1);
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	0e 94 58 10 	call	0x20b0	; 0x20b0 <ADC_Conversion>
    2180:	88 2f       	mov	r24, r24
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	9c 83       	std	Y+4, r25	; 0x04
    2186:	8b 83       	std	Y+3, r24	; 0x03

        lcd_print(1, 1, left, 3);
    2188:	2d 81       	ldd	r18, Y+5	; 0x05
    218a:	3e 81       	ldd	r19, Y+6	; 0x06
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	61 e0       	ldi	r22, 0x01	; 1
    2190:	a9 01       	movw	r20, r18
    2192:	23 e0       	ldi	r18, 0x03	; 3
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <lcd_print>
        lcd_print(1, 6, centre, 3);
    219a:	29 81       	ldd	r18, Y+1	; 0x01
    219c:	3a 81       	ldd	r19, Y+2	; 0x02
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	66 e0       	ldi	r22, 0x06	; 6
    21a2:	a9 01       	movw	r20, r18
    21a4:	23 e0       	ldi	r18, 0x03	; 3
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <lcd_print>
        lcd_print(1, 11, right, 3);
    21ac:	2b 81       	ldd	r18, Y+3	; 0x03
    21ae:	3c 81       	ldd	r19, Y+4	; 0x04
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	6b e0       	ldi	r22, 0x0B	; 11
    21b4:	a9 01       	movw	r20, r18
    21b6:	23 e0       	ldi	r18, 0x03	; 3
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <lcd_print>
    21be:	cf cf       	rjmp	.-98     	; 0x215e <main+0x3a>

000021c0 <__fixunssfsi>:
    21c0:	ef 92       	push	r14
    21c2:	ff 92       	push	r15
    21c4:	0f 93       	push	r16
    21c6:	1f 93       	push	r17
    21c8:	7b 01       	movw	r14, r22
    21ca:	8c 01       	movw	r16, r24
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	40 e0       	ldi	r20, 0x00	; 0
    21d2:	5f e4       	ldi	r21, 0x4F	; 79
    21d4:	0e 94 8c 14 	call	0x2918	; 0x2918 <__gesf2>
    21d8:	88 23       	and	r24, r24
    21da:	8c f0       	brlt	.+34     	; 0x21fe <__fixunssfsi+0x3e>
    21dc:	c8 01       	movw	r24, r16
    21de:	b7 01       	movw	r22, r14
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	5f e4       	ldi	r21, 0x4F	; 79
    21e8:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__subsf3>
    21ec:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__fixsfsi>
    21f0:	9b 01       	movw	r18, r22
    21f2:	ac 01       	movw	r20, r24
    21f4:	20 50       	subi	r18, 0x00	; 0
    21f6:	30 40       	sbci	r19, 0x00	; 0
    21f8:	40 40       	sbci	r20, 0x00	; 0
    21fa:	50 48       	sbci	r21, 0x80	; 128
    21fc:	06 c0       	rjmp	.+12     	; 0x220a <__stack+0xb>
    21fe:	c8 01       	movw	r24, r16
    2200:	b7 01       	movw	r22, r14
    2202:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__fixsfsi>
    2206:	9b 01       	movw	r18, r22
    2208:	ac 01       	movw	r20, r24
    220a:	b9 01       	movw	r22, r18
    220c:	ca 01       	movw	r24, r20
    220e:	1f 91       	pop	r17
    2210:	0f 91       	pop	r16
    2212:	ff 90       	pop	r15
    2214:	ef 90       	pop	r14
    2216:	08 95       	ret

00002218 <_fpadd_parts>:
    2218:	a0 e0       	ldi	r26, 0x00	; 0
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e2 e1       	ldi	r30, 0x12	; 18
    221e:	f1 e1       	ldi	r31, 0x11	; 17
    2220:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <__prologue_saves__>
    2224:	dc 01       	movw	r26, r24
    2226:	2b 01       	movw	r4, r22
    2228:	fa 01       	movw	r30, r20
    222a:	9c 91       	ld	r25, X
    222c:	92 30       	cpi	r25, 0x02	; 2
    222e:	08 f4       	brcc	.+2      	; 0x2232 <_fpadd_parts+0x1a>
    2230:	39 c1       	rjmp	.+626    	; 0x24a4 <_fpadd_parts+0x28c>
    2232:	eb 01       	movw	r28, r22
    2234:	88 81       	ld	r24, Y
    2236:	82 30       	cpi	r24, 0x02	; 2
    2238:	08 f4       	brcc	.+2      	; 0x223c <_fpadd_parts+0x24>
    223a:	33 c1       	rjmp	.+614    	; 0x24a2 <_fpadd_parts+0x28a>
    223c:	94 30       	cpi	r25, 0x04	; 4
    223e:	69 f4       	brne	.+26     	; 0x225a <_fpadd_parts+0x42>
    2240:	84 30       	cpi	r24, 0x04	; 4
    2242:	09 f0       	breq	.+2      	; 0x2246 <_fpadd_parts+0x2e>
    2244:	2f c1       	rjmp	.+606    	; 0x24a4 <_fpadd_parts+0x28c>
    2246:	11 96       	adiw	r26, 0x01	; 1
    2248:	9c 91       	ld	r25, X
    224a:	11 97       	sbiw	r26, 0x01	; 1
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	98 17       	cp	r25, r24
    2250:	09 f4       	brne	.+2      	; 0x2254 <_fpadd_parts+0x3c>
    2252:	28 c1       	rjmp	.+592    	; 0x24a4 <_fpadd_parts+0x28c>
    2254:	ab e0       	ldi	r26, 0x0B	; 11
    2256:	b2 e0       	ldi	r27, 0x02	; 2
    2258:	25 c1       	rjmp	.+586    	; 0x24a4 <_fpadd_parts+0x28c>
    225a:	84 30       	cpi	r24, 0x04	; 4
    225c:	09 f4       	brne	.+2      	; 0x2260 <_fpadd_parts+0x48>
    225e:	21 c1       	rjmp	.+578    	; 0x24a2 <_fpadd_parts+0x28a>
    2260:	82 30       	cpi	r24, 0x02	; 2
    2262:	a9 f4       	brne	.+42     	; 0x228e <_fpadd_parts+0x76>
    2264:	92 30       	cpi	r25, 0x02	; 2
    2266:	09 f0       	breq	.+2      	; 0x226a <_fpadd_parts+0x52>
    2268:	1d c1       	rjmp	.+570    	; 0x24a4 <_fpadd_parts+0x28c>
    226a:	9a 01       	movw	r18, r20
    226c:	ad 01       	movw	r20, r26
    226e:	88 e0       	ldi	r24, 0x08	; 8
    2270:	ea 01       	movw	r28, r20
    2272:	09 90       	ld	r0, Y+
    2274:	ae 01       	movw	r20, r28
    2276:	e9 01       	movw	r28, r18
    2278:	09 92       	st	Y+, r0
    227a:	9e 01       	movw	r18, r28
    227c:	81 50       	subi	r24, 0x01	; 1
    227e:	c1 f7       	brne	.-16     	; 0x2270 <_fpadd_parts+0x58>
    2280:	e2 01       	movw	r28, r4
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	11 96       	adiw	r26, 0x01	; 1
    2286:	9c 91       	ld	r25, X
    2288:	89 23       	and	r24, r25
    228a:	81 83       	std	Z+1, r24	; 0x01
    228c:	08 c1       	rjmp	.+528    	; 0x249e <_fpadd_parts+0x286>
    228e:	92 30       	cpi	r25, 0x02	; 2
    2290:	09 f4       	brne	.+2      	; 0x2294 <_fpadd_parts+0x7c>
    2292:	07 c1       	rjmp	.+526    	; 0x24a2 <_fpadd_parts+0x28a>
    2294:	12 96       	adiw	r26, 0x02	; 2
    2296:	2d 90       	ld	r2, X+
    2298:	3c 90       	ld	r3, X
    229a:	13 97       	sbiw	r26, 0x03	; 3
    229c:	eb 01       	movw	r28, r22
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	9b 81       	ldd	r25, Y+3	; 0x03
    22a2:	14 96       	adiw	r26, 0x04	; 4
    22a4:	ad 90       	ld	r10, X+
    22a6:	bd 90       	ld	r11, X+
    22a8:	cd 90       	ld	r12, X+
    22aa:	dc 90       	ld	r13, X
    22ac:	17 97       	sbiw	r26, 0x07	; 7
    22ae:	ec 80       	ldd	r14, Y+4	; 0x04
    22b0:	fd 80       	ldd	r15, Y+5	; 0x05
    22b2:	0e 81       	ldd	r16, Y+6	; 0x06
    22b4:	1f 81       	ldd	r17, Y+7	; 0x07
    22b6:	91 01       	movw	r18, r2
    22b8:	28 1b       	sub	r18, r24
    22ba:	39 0b       	sbc	r19, r25
    22bc:	b9 01       	movw	r22, r18
    22be:	37 ff       	sbrs	r19, 7
    22c0:	04 c0       	rjmp	.+8      	; 0x22ca <_fpadd_parts+0xb2>
    22c2:	66 27       	eor	r22, r22
    22c4:	77 27       	eor	r23, r23
    22c6:	62 1b       	sub	r22, r18
    22c8:	73 0b       	sbc	r23, r19
    22ca:	60 32       	cpi	r22, 0x20	; 32
    22cc:	71 05       	cpc	r23, r1
    22ce:	0c f0       	brlt	.+2      	; 0x22d2 <_fpadd_parts+0xba>
    22d0:	61 c0       	rjmp	.+194    	; 0x2394 <_fpadd_parts+0x17c>
    22d2:	12 16       	cp	r1, r18
    22d4:	13 06       	cpc	r1, r19
    22d6:	6c f5       	brge	.+90     	; 0x2332 <_fpadd_parts+0x11a>
    22d8:	37 01       	movw	r6, r14
    22da:	48 01       	movw	r8, r16
    22dc:	06 2e       	mov	r0, r22
    22de:	04 c0       	rjmp	.+8      	; 0x22e8 <_fpadd_parts+0xd0>
    22e0:	96 94       	lsr	r9
    22e2:	87 94       	ror	r8
    22e4:	77 94       	ror	r7
    22e6:	67 94       	ror	r6
    22e8:	0a 94       	dec	r0
    22ea:	d2 f7       	brpl	.-12     	; 0x22e0 <_fpadd_parts+0xc8>
    22ec:	21 e0       	ldi	r18, 0x01	; 1
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e0       	ldi	r20, 0x00	; 0
    22f2:	50 e0       	ldi	r21, 0x00	; 0
    22f4:	04 c0       	rjmp	.+8      	; 0x22fe <_fpadd_parts+0xe6>
    22f6:	22 0f       	add	r18, r18
    22f8:	33 1f       	adc	r19, r19
    22fa:	44 1f       	adc	r20, r20
    22fc:	55 1f       	adc	r21, r21
    22fe:	6a 95       	dec	r22
    2300:	d2 f7       	brpl	.-12     	; 0x22f6 <_fpadd_parts+0xde>
    2302:	21 50       	subi	r18, 0x01	; 1
    2304:	30 40       	sbci	r19, 0x00	; 0
    2306:	40 40       	sbci	r20, 0x00	; 0
    2308:	50 40       	sbci	r21, 0x00	; 0
    230a:	2e 21       	and	r18, r14
    230c:	3f 21       	and	r19, r15
    230e:	40 23       	and	r20, r16
    2310:	51 23       	and	r21, r17
    2312:	21 15       	cp	r18, r1
    2314:	31 05       	cpc	r19, r1
    2316:	41 05       	cpc	r20, r1
    2318:	51 05       	cpc	r21, r1
    231a:	21 f0       	breq	.+8      	; 0x2324 <_fpadd_parts+0x10c>
    231c:	21 e0       	ldi	r18, 0x01	; 1
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e0       	ldi	r20, 0x00	; 0
    2322:	50 e0       	ldi	r21, 0x00	; 0
    2324:	79 01       	movw	r14, r18
    2326:	8a 01       	movw	r16, r20
    2328:	e6 28       	or	r14, r6
    232a:	f7 28       	or	r15, r7
    232c:	08 29       	or	r16, r8
    232e:	19 29       	or	r17, r9
    2330:	3c c0       	rjmp	.+120    	; 0x23aa <_fpadd_parts+0x192>
    2332:	23 2b       	or	r18, r19
    2334:	d1 f1       	breq	.+116    	; 0x23aa <_fpadd_parts+0x192>
    2336:	26 0e       	add	r2, r22
    2338:	37 1e       	adc	r3, r23
    233a:	35 01       	movw	r6, r10
    233c:	46 01       	movw	r8, r12
    233e:	06 2e       	mov	r0, r22
    2340:	04 c0       	rjmp	.+8      	; 0x234a <_fpadd_parts+0x132>
    2342:	96 94       	lsr	r9
    2344:	87 94       	ror	r8
    2346:	77 94       	ror	r7
    2348:	67 94       	ror	r6
    234a:	0a 94       	dec	r0
    234c:	d2 f7       	brpl	.-12     	; 0x2342 <_fpadd_parts+0x12a>
    234e:	21 e0       	ldi	r18, 0x01	; 1
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e0       	ldi	r20, 0x00	; 0
    2354:	50 e0       	ldi	r21, 0x00	; 0
    2356:	04 c0       	rjmp	.+8      	; 0x2360 <_fpadd_parts+0x148>
    2358:	22 0f       	add	r18, r18
    235a:	33 1f       	adc	r19, r19
    235c:	44 1f       	adc	r20, r20
    235e:	55 1f       	adc	r21, r21
    2360:	6a 95       	dec	r22
    2362:	d2 f7       	brpl	.-12     	; 0x2358 <_fpadd_parts+0x140>
    2364:	21 50       	subi	r18, 0x01	; 1
    2366:	30 40       	sbci	r19, 0x00	; 0
    2368:	40 40       	sbci	r20, 0x00	; 0
    236a:	50 40       	sbci	r21, 0x00	; 0
    236c:	2a 21       	and	r18, r10
    236e:	3b 21       	and	r19, r11
    2370:	4c 21       	and	r20, r12
    2372:	5d 21       	and	r21, r13
    2374:	21 15       	cp	r18, r1
    2376:	31 05       	cpc	r19, r1
    2378:	41 05       	cpc	r20, r1
    237a:	51 05       	cpc	r21, r1
    237c:	21 f0       	breq	.+8      	; 0x2386 <_fpadd_parts+0x16e>
    237e:	21 e0       	ldi	r18, 0x01	; 1
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e0       	ldi	r20, 0x00	; 0
    2384:	50 e0       	ldi	r21, 0x00	; 0
    2386:	59 01       	movw	r10, r18
    2388:	6a 01       	movw	r12, r20
    238a:	a6 28       	or	r10, r6
    238c:	b7 28       	or	r11, r7
    238e:	c8 28       	or	r12, r8
    2390:	d9 28       	or	r13, r9
    2392:	0b c0       	rjmp	.+22     	; 0x23aa <_fpadd_parts+0x192>
    2394:	82 15       	cp	r24, r2
    2396:	93 05       	cpc	r25, r3
    2398:	2c f0       	brlt	.+10     	; 0x23a4 <_fpadd_parts+0x18c>
    239a:	1c 01       	movw	r2, r24
    239c:	aa 24       	eor	r10, r10
    239e:	bb 24       	eor	r11, r11
    23a0:	65 01       	movw	r12, r10
    23a2:	03 c0       	rjmp	.+6      	; 0x23aa <_fpadd_parts+0x192>
    23a4:	ee 24       	eor	r14, r14
    23a6:	ff 24       	eor	r15, r15
    23a8:	87 01       	movw	r16, r14
    23aa:	11 96       	adiw	r26, 0x01	; 1
    23ac:	9c 91       	ld	r25, X
    23ae:	d2 01       	movw	r26, r4
    23b0:	11 96       	adiw	r26, 0x01	; 1
    23b2:	8c 91       	ld	r24, X
    23b4:	98 17       	cp	r25, r24
    23b6:	09 f4       	brne	.+2      	; 0x23ba <_fpadd_parts+0x1a2>
    23b8:	45 c0       	rjmp	.+138    	; 0x2444 <_fpadd_parts+0x22c>
    23ba:	99 23       	and	r25, r25
    23bc:	39 f0       	breq	.+14     	; 0x23cc <_fpadd_parts+0x1b4>
    23be:	a8 01       	movw	r20, r16
    23c0:	97 01       	movw	r18, r14
    23c2:	2a 19       	sub	r18, r10
    23c4:	3b 09       	sbc	r19, r11
    23c6:	4c 09       	sbc	r20, r12
    23c8:	5d 09       	sbc	r21, r13
    23ca:	06 c0       	rjmp	.+12     	; 0x23d8 <_fpadd_parts+0x1c0>
    23cc:	a6 01       	movw	r20, r12
    23ce:	95 01       	movw	r18, r10
    23d0:	2e 19       	sub	r18, r14
    23d2:	3f 09       	sbc	r19, r15
    23d4:	40 0b       	sbc	r20, r16
    23d6:	51 0b       	sbc	r21, r17
    23d8:	57 fd       	sbrc	r21, 7
    23da:	08 c0       	rjmp	.+16     	; 0x23ec <_fpadd_parts+0x1d4>
    23dc:	11 82       	std	Z+1, r1	; 0x01
    23de:	33 82       	std	Z+3, r3	; 0x03
    23e0:	22 82       	std	Z+2, r2	; 0x02
    23e2:	24 83       	std	Z+4, r18	; 0x04
    23e4:	35 83       	std	Z+5, r19	; 0x05
    23e6:	46 83       	std	Z+6, r20	; 0x06
    23e8:	57 83       	std	Z+7, r21	; 0x07
    23ea:	1d c0       	rjmp	.+58     	; 0x2426 <_fpadd_parts+0x20e>
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	81 83       	std	Z+1, r24	; 0x01
    23f0:	33 82       	std	Z+3, r3	; 0x03
    23f2:	22 82       	std	Z+2, r2	; 0x02
    23f4:	88 27       	eor	r24, r24
    23f6:	99 27       	eor	r25, r25
    23f8:	dc 01       	movw	r26, r24
    23fa:	82 1b       	sub	r24, r18
    23fc:	93 0b       	sbc	r25, r19
    23fe:	a4 0b       	sbc	r26, r20
    2400:	b5 0b       	sbc	r27, r21
    2402:	84 83       	std	Z+4, r24	; 0x04
    2404:	95 83       	std	Z+5, r25	; 0x05
    2406:	a6 83       	std	Z+6, r26	; 0x06
    2408:	b7 83       	std	Z+7, r27	; 0x07
    240a:	0d c0       	rjmp	.+26     	; 0x2426 <_fpadd_parts+0x20e>
    240c:	22 0f       	add	r18, r18
    240e:	33 1f       	adc	r19, r19
    2410:	44 1f       	adc	r20, r20
    2412:	55 1f       	adc	r21, r21
    2414:	24 83       	std	Z+4, r18	; 0x04
    2416:	35 83       	std	Z+5, r19	; 0x05
    2418:	46 83       	std	Z+6, r20	; 0x06
    241a:	57 83       	std	Z+7, r21	; 0x07
    241c:	82 81       	ldd	r24, Z+2	; 0x02
    241e:	93 81       	ldd	r25, Z+3	; 0x03
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	93 83       	std	Z+3, r25	; 0x03
    2424:	82 83       	std	Z+2, r24	; 0x02
    2426:	24 81       	ldd	r18, Z+4	; 0x04
    2428:	35 81       	ldd	r19, Z+5	; 0x05
    242a:	46 81       	ldd	r20, Z+6	; 0x06
    242c:	57 81       	ldd	r21, Z+7	; 0x07
    242e:	da 01       	movw	r26, r20
    2430:	c9 01       	movw	r24, r18
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	a1 09       	sbc	r26, r1
    2436:	b1 09       	sbc	r27, r1
    2438:	8f 5f       	subi	r24, 0xFF	; 255
    243a:	9f 4f       	sbci	r25, 0xFF	; 255
    243c:	af 4f       	sbci	r26, 0xFF	; 255
    243e:	bf 43       	sbci	r27, 0x3F	; 63
    2440:	28 f3       	brcs	.-54     	; 0x240c <_fpadd_parts+0x1f4>
    2442:	0b c0       	rjmp	.+22     	; 0x245a <_fpadd_parts+0x242>
    2444:	91 83       	std	Z+1, r25	; 0x01
    2446:	33 82       	std	Z+3, r3	; 0x03
    2448:	22 82       	std	Z+2, r2	; 0x02
    244a:	ea 0c       	add	r14, r10
    244c:	fb 1c       	adc	r15, r11
    244e:	0c 1d       	adc	r16, r12
    2450:	1d 1d       	adc	r17, r13
    2452:	e4 82       	std	Z+4, r14	; 0x04
    2454:	f5 82       	std	Z+5, r15	; 0x05
    2456:	06 83       	std	Z+6, r16	; 0x06
    2458:	17 83       	std	Z+7, r17	; 0x07
    245a:	83 e0       	ldi	r24, 0x03	; 3
    245c:	80 83       	st	Z, r24
    245e:	24 81       	ldd	r18, Z+4	; 0x04
    2460:	35 81       	ldd	r19, Z+5	; 0x05
    2462:	46 81       	ldd	r20, Z+6	; 0x06
    2464:	57 81       	ldd	r21, Z+7	; 0x07
    2466:	57 ff       	sbrs	r21, 7
    2468:	1a c0       	rjmp	.+52     	; 0x249e <_fpadd_parts+0x286>
    246a:	c9 01       	movw	r24, r18
    246c:	aa 27       	eor	r26, r26
    246e:	97 fd       	sbrc	r25, 7
    2470:	a0 95       	com	r26
    2472:	ba 2f       	mov	r27, r26
    2474:	81 70       	andi	r24, 0x01	; 1
    2476:	90 70       	andi	r25, 0x00	; 0
    2478:	a0 70       	andi	r26, 0x00	; 0
    247a:	b0 70       	andi	r27, 0x00	; 0
    247c:	56 95       	lsr	r21
    247e:	47 95       	ror	r20
    2480:	37 95       	ror	r19
    2482:	27 95       	ror	r18
    2484:	82 2b       	or	r24, r18
    2486:	93 2b       	or	r25, r19
    2488:	a4 2b       	or	r26, r20
    248a:	b5 2b       	or	r27, r21
    248c:	84 83       	std	Z+4, r24	; 0x04
    248e:	95 83       	std	Z+5, r25	; 0x05
    2490:	a6 83       	std	Z+6, r26	; 0x06
    2492:	b7 83       	std	Z+7, r27	; 0x07
    2494:	82 81       	ldd	r24, Z+2	; 0x02
    2496:	93 81       	ldd	r25, Z+3	; 0x03
    2498:	01 96       	adiw	r24, 0x01	; 1
    249a:	93 83       	std	Z+3, r25	; 0x03
    249c:	82 83       	std	Z+2, r24	; 0x02
    249e:	df 01       	movw	r26, r30
    24a0:	01 c0       	rjmp	.+2      	; 0x24a4 <_fpadd_parts+0x28c>
    24a2:	d2 01       	movw	r26, r4
    24a4:	cd 01       	movw	r24, r26
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	e2 e1       	ldi	r30, 0x12	; 18
    24ac:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__epilogue_restores__>

000024b0 <__subsf3>:
    24b0:	a0 e2       	ldi	r26, 0x20	; 32
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	ee e5       	ldi	r30, 0x5E	; 94
    24b6:	f2 e1       	ldi	r31, 0x12	; 18
    24b8:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__+0x18>
    24bc:	69 83       	std	Y+1, r22	; 0x01
    24be:	7a 83       	std	Y+2, r23	; 0x02
    24c0:	8b 83       	std	Y+3, r24	; 0x03
    24c2:	9c 83       	std	Y+4, r25	; 0x04
    24c4:	2d 83       	std	Y+5, r18	; 0x05
    24c6:	3e 83       	std	Y+6, r19	; 0x06
    24c8:	4f 83       	std	Y+7, r20	; 0x07
    24ca:	58 87       	std	Y+8, r21	; 0x08
    24cc:	e9 e0       	ldi	r30, 0x09	; 9
    24ce:	ee 2e       	mov	r14, r30
    24d0:	f1 2c       	mov	r15, r1
    24d2:	ec 0e       	add	r14, r28
    24d4:	fd 1e       	adc	r15, r29
    24d6:	ce 01       	movw	r24, r28
    24d8:	01 96       	adiw	r24, 0x01	; 1
    24da:	b7 01       	movw	r22, r14
    24dc:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__unpack_f>
    24e0:	8e 01       	movw	r16, r28
    24e2:	0f 5e       	subi	r16, 0xEF	; 239
    24e4:	1f 4f       	sbci	r17, 0xFF	; 255
    24e6:	ce 01       	movw	r24, r28
    24e8:	05 96       	adiw	r24, 0x05	; 5
    24ea:	b8 01       	movw	r22, r16
    24ec:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__unpack_f>
    24f0:	8a 89       	ldd	r24, Y+18	; 0x12
    24f2:	91 e0       	ldi	r25, 0x01	; 1
    24f4:	89 27       	eor	r24, r25
    24f6:	8a 8b       	std	Y+18, r24	; 0x12
    24f8:	c7 01       	movw	r24, r14
    24fa:	b8 01       	movw	r22, r16
    24fc:	ae 01       	movw	r20, r28
    24fe:	47 5e       	subi	r20, 0xE7	; 231
    2500:	5f 4f       	sbci	r21, 0xFF	; 255
    2502:	0e 94 0c 11 	call	0x2218	; 0x2218 <_fpadd_parts>
    2506:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__pack_f>
    250a:	a0 96       	adiw	r28, 0x20	; 32
    250c:	e6 e0       	ldi	r30, 0x06	; 6
    250e:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__+0x18>

00002512 <__addsf3>:
    2512:	a0 e2       	ldi	r26, 0x20	; 32
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	ef e8       	ldi	r30, 0x8F	; 143
    2518:	f2 e1       	ldi	r31, 0x12	; 18
    251a:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__+0x18>
    251e:	69 83       	std	Y+1, r22	; 0x01
    2520:	7a 83       	std	Y+2, r23	; 0x02
    2522:	8b 83       	std	Y+3, r24	; 0x03
    2524:	9c 83       	std	Y+4, r25	; 0x04
    2526:	2d 83       	std	Y+5, r18	; 0x05
    2528:	3e 83       	std	Y+6, r19	; 0x06
    252a:	4f 83       	std	Y+7, r20	; 0x07
    252c:	58 87       	std	Y+8, r21	; 0x08
    252e:	f9 e0       	ldi	r31, 0x09	; 9
    2530:	ef 2e       	mov	r14, r31
    2532:	f1 2c       	mov	r15, r1
    2534:	ec 0e       	add	r14, r28
    2536:	fd 1e       	adc	r15, r29
    2538:	ce 01       	movw	r24, r28
    253a:	01 96       	adiw	r24, 0x01	; 1
    253c:	b7 01       	movw	r22, r14
    253e:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__unpack_f>
    2542:	8e 01       	movw	r16, r28
    2544:	0f 5e       	subi	r16, 0xEF	; 239
    2546:	1f 4f       	sbci	r17, 0xFF	; 255
    2548:	ce 01       	movw	r24, r28
    254a:	05 96       	adiw	r24, 0x05	; 5
    254c:	b8 01       	movw	r22, r16
    254e:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__unpack_f>
    2552:	c7 01       	movw	r24, r14
    2554:	b8 01       	movw	r22, r16
    2556:	ae 01       	movw	r20, r28
    2558:	47 5e       	subi	r20, 0xE7	; 231
    255a:	5f 4f       	sbci	r21, 0xFF	; 255
    255c:	0e 94 0c 11 	call	0x2218	; 0x2218 <_fpadd_parts>
    2560:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__pack_f>
    2564:	a0 96       	adiw	r28, 0x20	; 32
    2566:	e6 e0       	ldi	r30, 0x06	; 6
    2568:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__+0x18>

0000256c <__mulsf3>:
    256c:	a0 e2       	ldi	r26, 0x20	; 32
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	ec eb       	ldi	r30, 0xBC	; 188
    2572:	f2 e1       	ldi	r31, 0x12	; 18
    2574:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <__prologue_saves__>
    2578:	69 83       	std	Y+1, r22	; 0x01
    257a:	7a 83       	std	Y+2, r23	; 0x02
    257c:	8b 83       	std	Y+3, r24	; 0x03
    257e:	9c 83       	std	Y+4, r25	; 0x04
    2580:	2d 83       	std	Y+5, r18	; 0x05
    2582:	3e 83       	std	Y+6, r19	; 0x06
    2584:	4f 83       	std	Y+7, r20	; 0x07
    2586:	58 87       	std	Y+8, r21	; 0x08
    2588:	ce 01       	movw	r24, r28
    258a:	01 96       	adiw	r24, 0x01	; 1
    258c:	be 01       	movw	r22, r28
    258e:	67 5f       	subi	r22, 0xF7	; 247
    2590:	7f 4f       	sbci	r23, 0xFF	; 255
    2592:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__unpack_f>
    2596:	ce 01       	movw	r24, r28
    2598:	05 96       	adiw	r24, 0x05	; 5
    259a:	be 01       	movw	r22, r28
    259c:	6f 5e       	subi	r22, 0xEF	; 239
    259e:	7f 4f       	sbci	r23, 0xFF	; 255
    25a0:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__unpack_f>
    25a4:	99 85       	ldd	r25, Y+9	; 0x09
    25a6:	92 30       	cpi	r25, 0x02	; 2
    25a8:	88 f0       	brcs	.+34     	; 0x25cc <__mulsf3+0x60>
    25aa:	89 89       	ldd	r24, Y+17	; 0x11
    25ac:	82 30       	cpi	r24, 0x02	; 2
    25ae:	c8 f0       	brcs	.+50     	; 0x25e2 <__mulsf3+0x76>
    25b0:	94 30       	cpi	r25, 0x04	; 4
    25b2:	19 f4       	brne	.+6      	; 0x25ba <__mulsf3+0x4e>
    25b4:	82 30       	cpi	r24, 0x02	; 2
    25b6:	51 f4       	brne	.+20     	; 0x25cc <__mulsf3+0x60>
    25b8:	04 c0       	rjmp	.+8      	; 0x25c2 <__mulsf3+0x56>
    25ba:	84 30       	cpi	r24, 0x04	; 4
    25bc:	29 f4       	brne	.+10     	; 0x25c8 <__mulsf3+0x5c>
    25be:	92 30       	cpi	r25, 0x02	; 2
    25c0:	81 f4       	brne	.+32     	; 0x25e2 <__mulsf3+0x76>
    25c2:	8b e0       	ldi	r24, 0x0B	; 11
    25c4:	92 e0       	ldi	r25, 0x02	; 2
    25c6:	c6 c0       	rjmp	.+396    	; 0x2754 <__mulsf3+0x1e8>
    25c8:	92 30       	cpi	r25, 0x02	; 2
    25ca:	49 f4       	brne	.+18     	; 0x25de <__mulsf3+0x72>
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d0:	8a 89       	ldd	r24, Y+18	; 0x12
    25d2:	98 13       	cpse	r25, r24
    25d4:	21 e0       	ldi	r18, 0x01	; 1
    25d6:	2a 87       	std	Y+10, r18	; 0x0a
    25d8:	ce 01       	movw	r24, r28
    25da:	09 96       	adiw	r24, 0x09	; 9
    25dc:	bb c0       	rjmp	.+374    	; 0x2754 <__mulsf3+0x1e8>
    25de:	82 30       	cpi	r24, 0x02	; 2
    25e0:	49 f4       	brne	.+18     	; 0x25f4 <__mulsf3+0x88>
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e6:	8a 89       	ldd	r24, Y+18	; 0x12
    25e8:	98 13       	cpse	r25, r24
    25ea:	21 e0       	ldi	r18, 0x01	; 1
    25ec:	2a 8b       	std	Y+18, r18	; 0x12
    25ee:	ce 01       	movw	r24, r28
    25f0:	41 96       	adiw	r24, 0x11	; 17
    25f2:	b0 c0       	rjmp	.+352    	; 0x2754 <__mulsf3+0x1e8>
    25f4:	2d 84       	ldd	r2, Y+13	; 0x0d
    25f6:	3e 84       	ldd	r3, Y+14	; 0x0e
    25f8:	4f 84       	ldd	r4, Y+15	; 0x0f
    25fa:	58 88       	ldd	r5, Y+16	; 0x10
    25fc:	6d 88       	ldd	r6, Y+21	; 0x15
    25fe:	7e 88       	ldd	r7, Y+22	; 0x16
    2600:	8f 88       	ldd	r8, Y+23	; 0x17
    2602:	98 8c       	ldd	r9, Y+24	; 0x18
    2604:	ee 24       	eor	r14, r14
    2606:	ff 24       	eor	r15, r15
    2608:	87 01       	movw	r16, r14
    260a:	aa 24       	eor	r10, r10
    260c:	bb 24       	eor	r11, r11
    260e:	65 01       	movw	r12, r10
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	50 e0       	ldi	r21, 0x00	; 0
    2614:	60 e0       	ldi	r22, 0x00	; 0
    2616:	70 e0       	ldi	r23, 0x00	; 0
    2618:	e0 e0       	ldi	r30, 0x00	; 0
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	c1 01       	movw	r24, r2
    261e:	81 70       	andi	r24, 0x01	; 1
    2620:	90 70       	andi	r25, 0x00	; 0
    2622:	89 2b       	or	r24, r25
    2624:	e9 f0       	breq	.+58     	; 0x2660 <__mulsf3+0xf4>
    2626:	e6 0c       	add	r14, r6
    2628:	f7 1c       	adc	r15, r7
    262a:	08 1d       	adc	r16, r8
    262c:	19 1d       	adc	r17, r9
    262e:	9a 01       	movw	r18, r20
    2630:	ab 01       	movw	r20, r22
    2632:	2a 0d       	add	r18, r10
    2634:	3b 1d       	adc	r19, r11
    2636:	4c 1d       	adc	r20, r12
    2638:	5d 1d       	adc	r21, r13
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	a0 e0       	ldi	r26, 0x00	; 0
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	e6 14       	cp	r14, r6
    2644:	f7 04       	cpc	r15, r7
    2646:	08 05       	cpc	r16, r8
    2648:	19 05       	cpc	r17, r9
    264a:	20 f4       	brcc	.+8      	; 0x2654 <__mulsf3+0xe8>
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	a0 e0       	ldi	r26, 0x00	; 0
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	ba 01       	movw	r22, r20
    2656:	a9 01       	movw	r20, r18
    2658:	48 0f       	add	r20, r24
    265a:	59 1f       	adc	r21, r25
    265c:	6a 1f       	adc	r22, r26
    265e:	7b 1f       	adc	r23, r27
    2660:	aa 0c       	add	r10, r10
    2662:	bb 1c       	adc	r11, r11
    2664:	cc 1c       	adc	r12, r12
    2666:	dd 1c       	adc	r13, r13
    2668:	97 fe       	sbrs	r9, 7
    266a:	08 c0       	rjmp	.+16     	; 0x267c <__mulsf3+0x110>
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	a0 e0       	ldi	r26, 0x00	; 0
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	a8 2a       	or	r10, r24
    2676:	b9 2a       	or	r11, r25
    2678:	ca 2a       	or	r12, r26
    267a:	db 2a       	or	r13, r27
    267c:	31 96       	adiw	r30, 0x01	; 1
    267e:	e0 32       	cpi	r30, 0x20	; 32
    2680:	f1 05       	cpc	r31, r1
    2682:	49 f0       	breq	.+18     	; 0x2696 <__mulsf3+0x12a>
    2684:	66 0c       	add	r6, r6
    2686:	77 1c       	adc	r7, r7
    2688:	88 1c       	adc	r8, r8
    268a:	99 1c       	adc	r9, r9
    268c:	56 94       	lsr	r5
    268e:	47 94       	ror	r4
    2690:	37 94       	ror	r3
    2692:	27 94       	ror	r2
    2694:	c3 cf       	rjmp	.-122    	; 0x261c <__mulsf3+0xb0>
    2696:	fa 85       	ldd	r31, Y+10	; 0x0a
    2698:	ea 89       	ldd	r30, Y+18	; 0x12
    269a:	2b 89       	ldd	r18, Y+19	; 0x13
    269c:	3c 89       	ldd	r19, Y+20	; 0x14
    269e:	8b 85       	ldd	r24, Y+11	; 0x0b
    26a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    26a2:	28 0f       	add	r18, r24
    26a4:	39 1f       	adc	r19, r25
    26a6:	2e 5f       	subi	r18, 0xFE	; 254
    26a8:	3f 4f       	sbci	r19, 0xFF	; 255
    26aa:	17 c0       	rjmp	.+46     	; 0x26da <__mulsf3+0x16e>
    26ac:	ca 01       	movw	r24, r20
    26ae:	81 70       	andi	r24, 0x01	; 1
    26b0:	90 70       	andi	r25, 0x00	; 0
    26b2:	89 2b       	or	r24, r25
    26b4:	61 f0       	breq	.+24     	; 0x26ce <__mulsf3+0x162>
    26b6:	16 95       	lsr	r17
    26b8:	07 95       	ror	r16
    26ba:	f7 94       	ror	r15
    26bc:	e7 94       	ror	r14
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	a0 e0       	ldi	r26, 0x00	; 0
    26c4:	b0 e8       	ldi	r27, 0x80	; 128
    26c6:	e8 2a       	or	r14, r24
    26c8:	f9 2a       	or	r15, r25
    26ca:	0a 2b       	or	r16, r26
    26cc:	1b 2b       	or	r17, r27
    26ce:	76 95       	lsr	r23
    26d0:	67 95       	ror	r22
    26d2:	57 95       	ror	r21
    26d4:	47 95       	ror	r20
    26d6:	2f 5f       	subi	r18, 0xFF	; 255
    26d8:	3f 4f       	sbci	r19, 0xFF	; 255
    26da:	77 fd       	sbrc	r23, 7
    26dc:	e7 cf       	rjmp	.-50     	; 0x26ac <__mulsf3+0x140>
    26de:	0c c0       	rjmp	.+24     	; 0x26f8 <__mulsf3+0x18c>
    26e0:	44 0f       	add	r20, r20
    26e2:	55 1f       	adc	r21, r21
    26e4:	66 1f       	adc	r22, r22
    26e6:	77 1f       	adc	r23, r23
    26e8:	17 fd       	sbrc	r17, 7
    26ea:	41 60       	ori	r20, 0x01	; 1
    26ec:	ee 0c       	add	r14, r14
    26ee:	ff 1c       	adc	r15, r15
    26f0:	00 1f       	adc	r16, r16
    26f2:	11 1f       	adc	r17, r17
    26f4:	21 50       	subi	r18, 0x01	; 1
    26f6:	30 40       	sbci	r19, 0x00	; 0
    26f8:	40 30       	cpi	r20, 0x00	; 0
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	59 07       	cpc	r21, r25
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	69 07       	cpc	r22, r25
    2702:	90 e4       	ldi	r25, 0x40	; 64
    2704:	79 07       	cpc	r23, r25
    2706:	60 f3       	brcs	.-40     	; 0x26e0 <__mulsf3+0x174>
    2708:	2b 8f       	std	Y+27, r18	; 0x1b
    270a:	3c 8f       	std	Y+28, r19	; 0x1c
    270c:	db 01       	movw	r26, r22
    270e:	ca 01       	movw	r24, r20
    2710:	8f 77       	andi	r24, 0x7F	; 127
    2712:	90 70       	andi	r25, 0x00	; 0
    2714:	a0 70       	andi	r26, 0x00	; 0
    2716:	b0 70       	andi	r27, 0x00	; 0
    2718:	80 34       	cpi	r24, 0x40	; 64
    271a:	91 05       	cpc	r25, r1
    271c:	a1 05       	cpc	r26, r1
    271e:	b1 05       	cpc	r27, r1
    2720:	61 f4       	brne	.+24     	; 0x273a <__mulsf3+0x1ce>
    2722:	47 fd       	sbrc	r20, 7
    2724:	0a c0       	rjmp	.+20     	; 0x273a <__mulsf3+0x1ce>
    2726:	e1 14       	cp	r14, r1
    2728:	f1 04       	cpc	r15, r1
    272a:	01 05       	cpc	r16, r1
    272c:	11 05       	cpc	r17, r1
    272e:	29 f0       	breq	.+10     	; 0x273a <__mulsf3+0x1ce>
    2730:	40 5c       	subi	r20, 0xC0	; 192
    2732:	5f 4f       	sbci	r21, 0xFF	; 255
    2734:	6f 4f       	sbci	r22, 0xFF	; 255
    2736:	7f 4f       	sbci	r23, 0xFF	; 255
    2738:	40 78       	andi	r20, 0x80	; 128
    273a:	1a 8e       	std	Y+26, r1	; 0x1a
    273c:	fe 17       	cp	r31, r30
    273e:	11 f0       	breq	.+4      	; 0x2744 <__mulsf3+0x1d8>
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	8a 8f       	std	Y+26, r24	; 0x1a
    2744:	4d 8f       	std	Y+29, r20	; 0x1d
    2746:	5e 8f       	std	Y+30, r21	; 0x1e
    2748:	6f 8f       	std	Y+31, r22	; 0x1f
    274a:	78 a3       	std	Y+32, r23	; 0x20
    274c:	83 e0       	ldi	r24, 0x03	; 3
    274e:	89 8f       	std	Y+25, r24	; 0x19
    2750:	ce 01       	movw	r24, r28
    2752:	49 96       	adiw	r24, 0x19	; 25
    2754:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__pack_f>
    2758:	a0 96       	adiw	r28, 0x20	; 32
    275a:	e2 e1       	ldi	r30, 0x12	; 18
    275c:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__epilogue_restores__>

00002760 <__divsf3>:
    2760:	a8 e1       	ldi	r26, 0x18	; 24
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	e6 eb       	ldi	r30, 0xB6	; 182
    2766:	f3 e1       	ldi	r31, 0x13	; 19
    2768:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__prologue_saves__+0x10>
    276c:	69 83       	std	Y+1, r22	; 0x01
    276e:	7a 83       	std	Y+2, r23	; 0x02
    2770:	8b 83       	std	Y+3, r24	; 0x03
    2772:	9c 83       	std	Y+4, r25	; 0x04
    2774:	2d 83       	std	Y+5, r18	; 0x05
    2776:	3e 83       	std	Y+6, r19	; 0x06
    2778:	4f 83       	std	Y+7, r20	; 0x07
    277a:	58 87       	std	Y+8, r21	; 0x08
    277c:	b9 e0       	ldi	r27, 0x09	; 9
    277e:	eb 2e       	mov	r14, r27
    2780:	f1 2c       	mov	r15, r1
    2782:	ec 0e       	add	r14, r28
    2784:	fd 1e       	adc	r15, r29
    2786:	ce 01       	movw	r24, r28
    2788:	01 96       	adiw	r24, 0x01	; 1
    278a:	b7 01       	movw	r22, r14
    278c:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__unpack_f>
    2790:	8e 01       	movw	r16, r28
    2792:	0f 5e       	subi	r16, 0xEF	; 239
    2794:	1f 4f       	sbci	r17, 0xFF	; 255
    2796:	ce 01       	movw	r24, r28
    2798:	05 96       	adiw	r24, 0x05	; 5
    279a:	b8 01       	movw	r22, r16
    279c:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__unpack_f>
    27a0:	29 85       	ldd	r18, Y+9	; 0x09
    27a2:	22 30       	cpi	r18, 0x02	; 2
    27a4:	08 f4       	brcc	.+2      	; 0x27a8 <__divsf3+0x48>
    27a6:	7e c0       	rjmp	.+252    	; 0x28a4 <__divsf3+0x144>
    27a8:	39 89       	ldd	r19, Y+17	; 0x11
    27aa:	32 30       	cpi	r19, 0x02	; 2
    27ac:	10 f4       	brcc	.+4      	; 0x27b2 <__divsf3+0x52>
    27ae:	b8 01       	movw	r22, r16
    27b0:	7c c0       	rjmp	.+248    	; 0x28aa <__divsf3+0x14a>
    27b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    27b4:	9a 89       	ldd	r25, Y+18	; 0x12
    27b6:	89 27       	eor	r24, r25
    27b8:	8a 87       	std	Y+10, r24	; 0x0a
    27ba:	24 30       	cpi	r18, 0x04	; 4
    27bc:	11 f0       	breq	.+4      	; 0x27c2 <__divsf3+0x62>
    27be:	22 30       	cpi	r18, 0x02	; 2
    27c0:	31 f4       	brne	.+12     	; 0x27ce <__divsf3+0x6e>
    27c2:	23 17       	cp	r18, r19
    27c4:	09 f0       	breq	.+2      	; 0x27c8 <__divsf3+0x68>
    27c6:	6e c0       	rjmp	.+220    	; 0x28a4 <__divsf3+0x144>
    27c8:	6b e0       	ldi	r22, 0x0B	; 11
    27ca:	72 e0       	ldi	r23, 0x02	; 2
    27cc:	6e c0       	rjmp	.+220    	; 0x28aa <__divsf3+0x14a>
    27ce:	34 30       	cpi	r19, 0x04	; 4
    27d0:	39 f4       	brne	.+14     	; 0x27e0 <__divsf3+0x80>
    27d2:	1d 86       	std	Y+13, r1	; 0x0d
    27d4:	1e 86       	std	Y+14, r1	; 0x0e
    27d6:	1f 86       	std	Y+15, r1	; 0x0f
    27d8:	18 8a       	std	Y+16, r1	; 0x10
    27da:	1c 86       	std	Y+12, r1	; 0x0c
    27dc:	1b 86       	std	Y+11, r1	; 0x0b
    27de:	04 c0       	rjmp	.+8      	; 0x27e8 <__divsf3+0x88>
    27e0:	32 30       	cpi	r19, 0x02	; 2
    27e2:	21 f4       	brne	.+8      	; 0x27ec <__divsf3+0x8c>
    27e4:	84 e0       	ldi	r24, 0x04	; 4
    27e6:	89 87       	std	Y+9, r24	; 0x09
    27e8:	b7 01       	movw	r22, r14
    27ea:	5f c0       	rjmp	.+190    	; 0x28aa <__divsf3+0x14a>
    27ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    27ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    27f0:	8b 89       	ldd	r24, Y+19	; 0x13
    27f2:	9c 89       	ldd	r25, Y+20	; 0x14
    27f4:	28 1b       	sub	r18, r24
    27f6:	39 0b       	sbc	r19, r25
    27f8:	3c 87       	std	Y+12, r19	; 0x0c
    27fa:	2b 87       	std	Y+11, r18	; 0x0b
    27fc:	ed 84       	ldd	r14, Y+13	; 0x0d
    27fe:	fe 84       	ldd	r15, Y+14	; 0x0e
    2800:	0f 85       	ldd	r16, Y+15	; 0x0f
    2802:	18 89       	ldd	r17, Y+16	; 0x10
    2804:	ad 88       	ldd	r10, Y+21	; 0x15
    2806:	be 88       	ldd	r11, Y+22	; 0x16
    2808:	cf 88       	ldd	r12, Y+23	; 0x17
    280a:	d8 8c       	ldd	r13, Y+24	; 0x18
    280c:	ea 14       	cp	r14, r10
    280e:	fb 04       	cpc	r15, r11
    2810:	0c 05       	cpc	r16, r12
    2812:	1d 05       	cpc	r17, r13
    2814:	40 f4       	brcc	.+16     	; 0x2826 <__divsf3+0xc6>
    2816:	ee 0c       	add	r14, r14
    2818:	ff 1c       	adc	r15, r15
    281a:	00 1f       	adc	r16, r16
    281c:	11 1f       	adc	r17, r17
    281e:	21 50       	subi	r18, 0x01	; 1
    2820:	30 40       	sbci	r19, 0x00	; 0
    2822:	3c 87       	std	Y+12, r19	; 0x0c
    2824:	2b 87       	std	Y+11, r18	; 0x0b
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e0       	ldi	r20, 0x00	; 0
    282c:	50 e0       	ldi	r21, 0x00	; 0
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	a0 e0       	ldi	r26, 0x00	; 0
    2834:	b0 e4       	ldi	r27, 0x40	; 64
    2836:	60 e0       	ldi	r22, 0x00	; 0
    2838:	70 e0       	ldi	r23, 0x00	; 0
    283a:	ea 14       	cp	r14, r10
    283c:	fb 04       	cpc	r15, r11
    283e:	0c 05       	cpc	r16, r12
    2840:	1d 05       	cpc	r17, r13
    2842:	40 f0       	brcs	.+16     	; 0x2854 <__divsf3+0xf4>
    2844:	28 2b       	or	r18, r24
    2846:	39 2b       	or	r19, r25
    2848:	4a 2b       	or	r20, r26
    284a:	5b 2b       	or	r21, r27
    284c:	ea 18       	sub	r14, r10
    284e:	fb 08       	sbc	r15, r11
    2850:	0c 09       	sbc	r16, r12
    2852:	1d 09       	sbc	r17, r13
    2854:	b6 95       	lsr	r27
    2856:	a7 95       	ror	r26
    2858:	97 95       	ror	r25
    285a:	87 95       	ror	r24
    285c:	ee 0c       	add	r14, r14
    285e:	ff 1c       	adc	r15, r15
    2860:	00 1f       	adc	r16, r16
    2862:	11 1f       	adc	r17, r17
    2864:	6f 5f       	subi	r22, 0xFF	; 255
    2866:	7f 4f       	sbci	r23, 0xFF	; 255
    2868:	6f 31       	cpi	r22, 0x1F	; 31
    286a:	71 05       	cpc	r23, r1
    286c:	31 f7       	brne	.-52     	; 0x283a <__divsf3+0xda>
    286e:	da 01       	movw	r26, r20
    2870:	c9 01       	movw	r24, r18
    2872:	8f 77       	andi	r24, 0x7F	; 127
    2874:	90 70       	andi	r25, 0x00	; 0
    2876:	a0 70       	andi	r26, 0x00	; 0
    2878:	b0 70       	andi	r27, 0x00	; 0
    287a:	80 34       	cpi	r24, 0x40	; 64
    287c:	91 05       	cpc	r25, r1
    287e:	a1 05       	cpc	r26, r1
    2880:	b1 05       	cpc	r27, r1
    2882:	61 f4       	brne	.+24     	; 0x289c <__divsf3+0x13c>
    2884:	27 fd       	sbrc	r18, 7
    2886:	0a c0       	rjmp	.+20     	; 0x289c <__divsf3+0x13c>
    2888:	e1 14       	cp	r14, r1
    288a:	f1 04       	cpc	r15, r1
    288c:	01 05       	cpc	r16, r1
    288e:	11 05       	cpc	r17, r1
    2890:	29 f0       	breq	.+10     	; 0x289c <__divsf3+0x13c>
    2892:	20 5c       	subi	r18, 0xC0	; 192
    2894:	3f 4f       	sbci	r19, 0xFF	; 255
    2896:	4f 4f       	sbci	r20, 0xFF	; 255
    2898:	5f 4f       	sbci	r21, 0xFF	; 255
    289a:	20 78       	andi	r18, 0x80	; 128
    289c:	2d 87       	std	Y+13, r18	; 0x0d
    289e:	3e 87       	std	Y+14, r19	; 0x0e
    28a0:	4f 87       	std	Y+15, r20	; 0x0f
    28a2:	58 8b       	std	Y+16, r21	; 0x10
    28a4:	be 01       	movw	r22, r28
    28a6:	67 5f       	subi	r22, 0xF7	; 247
    28a8:	7f 4f       	sbci	r23, 0xFF	; 255
    28aa:	cb 01       	movw	r24, r22
    28ac:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__pack_f>
    28b0:	68 96       	adiw	r28, 0x18	; 24
    28b2:	ea e0       	ldi	r30, 0x0A	; 10
    28b4:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__epilogue_restores__+0x10>

000028b8 <__gtsf2>:
    28b8:	a8 e1       	ldi	r26, 0x18	; 24
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	e2 e6       	ldi	r30, 0x62	; 98
    28be:	f4 e1       	ldi	r31, 0x14	; 20
    28c0:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__+0x18>
    28c4:	69 83       	std	Y+1, r22	; 0x01
    28c6:	7a 83       	std	Y+2, r23	; 0x02
    28c8:	8b 83       	std	Y+3, r24	; 0x03
    28ca:	9c 83       	std	Y+4, r25	; 0x04
    28cc:	2d 83       	std	Y+5, r18	; 0x05
    28ce:	3e 83       	std	Y+6, r19	; 0x06
    28d0:	4f 83       	std	Y+7, r20	; 0x07
    28d2:	58 87       	std	Y+8, r21	; 0x08
    28d4:	89 e0       	ldi	r24, 0x09	; 9
    28d6:	e8 2e       	mov	r14, r24
    28d8:	f1 2c       	mov	r15, r1
    28da:	ec 0e       	add	r14, r28
    28dc:	fd 1e       	adc	r15, r29
    28de:	ce 01       	movw	r24, r28
    28e0:	01 96       	adiw	r24, 0x01	; 1
    28e2:	b7 01       	movw	r22, r14
    28e4:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__unpack_f>
    28e8:	8e 01       	movw	r16, r28
    28ea:	0f 5e       	subi	r16, 0xEF	; 239
    28ec:	1f 4f       	sbci	r17, 0xFF	; 255
    28ee:	ce 01       	movw	r24, r28
    28f0:	05 96       	adiw	r24, 0x05	; 5
    28f2:	b8 01       	movw	r22, r16
    28f4:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__unpack_f>
    28f8:	89 85       	ldd	r24, Y+9	; 0x09
    28fa:	82 30       	cpi	r24, 0x02	; 2
    28fc:	40 f0       	brcs	.+16     	; 0x290e <__gtsf2+0x56>
    28fe:	89 89       	ldd	r24, Y+17	; 0x11
    2900:	82 30       	cpi	r24, 0x02	; 2
    2902:	28 f0       	brcs	.+10     	; 0x290e <__gtsf2+0x56>
    2904:	c7 01       	movw	r24, r14
    2906:	b8 01       	movw	r22, r16
    2908:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <__fpcmp_parts_f>
    290c:	01 c0       	rjmp	.+2      	; 0x2910 <__gtsf2+0x58>
    290e:	8f ef       	ldi	r24, 0xFF	; 255
    2910:	68 96       	adiw	r28, 0x18	; 24
    2912:	e6 e0       	ldi	r30, 0x06	; 6
    2914:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__+0x18>

00002918 <__gesf2>:
    2918:	a8 e1       	ldi	r26, 0x18	; 24
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	e2 e9       	ldi	r30, 0x92	; 146
    291e:	f4 e1       	ldi	r31, 0x14	; 20
    2920:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__+0x18>
    2924:	69 83       	std	Y+1, r22	; 0x01
    2926:	7a 83       	std	Y+2, r23	; 0x02
    2928:	8b 83       	std	Y+3, r24	; 0x03
    292a:	9c 83       	std	Y+4, r25	; 0x04
    292c:	2d 83       	std	Y+5, r18	; 0x05
    292e:	3e 83       	std	Y+6, r19	; 0x06
    2930:	4f 83       	std	Y+7, r20	; 0x07
    2932:	58 87       	std	Y+8, r21	; 0x08
    2934:	89 e0       	ldi	r24, 0x09	; 9
    2936:	e8 2e       	mov	r14, r24
    2938:	f1 2c       	mov	r15, r1
    293a:	ec 0e       	add	r14, r28
    293c:	fd 1e       	adc	r15, r29
    293e:	ce 01       	movw	r24, r28
    2940:	01 96       	adiw	r24, 0x01	; 1
    2942:	b7 01       	movw	r22, r14
    2944:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__unpack_f>
    2948:	8e 01       	movw	r16, r28
    294a:	0f 5e       	subi	r16, 0xEF	; 239
    294c:	1f 4f       	sbci	r17, 0xFF	; 255
    294e:	ce 01       	movw	r24, r28
    2950:	05 96       	adiw	r24, 0x05	; 5
    2952:	b8 01       	movw	r22, r16
    2954:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__unpack_f>
    2958:	89 85       	ldd	r24, Y+9	; 0x09
    295a:	82 30       	cpi	r24, 0x02	; 2
    295c:	40 f0       	brcs	.+16     	; 0x296e <__gesf2+0x56>
    295e:	89 89       	ldd	r24, Y+17	; 0x11
    2960:	82 30       	cpi	r24, 0x02	; 2
    2962:	28 f0       	brcs	.+10     	; 0x296e <__gesf2+0x56>
    2964:	c7 01       	movw	r24, r14
    2966:	b8 01       	movw	r22, r16
    2968:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <__fpcmp_parts_f>
    296c:	01 c0       	rjmp	.+2      	; 0x2970 <__gesf2+0x58>
    296e:	8f ef       	ldi	r24, 0xFF	; 255
    2970:	68 96       	adiw	r28, 0x18	; 24
    2972:	e6 e0       	ldi	r30, 0x06	; 6
    2974:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__+0x18>

00002978 <__ltsf2>:
    2978:	a8 e1       	ldi	r26, 0x18	; 24
    297a:	b0 e0       	ldi	r27, 0x00	; 0
    297c:	e2 ec       	ldi	r30, 0xC2	; 194
    297e:	f4 e1       	ldi	r31, 0x14	; 20
    2980:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__+0x18>
    2984:	69 83       	std	Y+1, r22	; 0x01
    2986:	7a 83       	std	Y+2, r23	; 0x02
    2988:	8b 83       	std	Y+3, r24	; 0x03
    298a:	9c 83       	std	Y+4, r25	; 0x04
    298c:	2d 83       	std	Y+5, r18	; 0x05
    298e:	3e 83       	std	Y+6, r19	; 0x06
    2990:	4f 83       	std	Y+7, r20	; 0x07
    2992:	58 87       	std	Y+8, r21	; 0x08
    2994:	89 e0       	ldi	r24, 0x09	; 9
    2996:	e8 2e       	mov	r14, r24
    2998:	f1 2c       	mov	r15, r1
    299a:	ec 0e       	add	r14, r28
    299c:	fd 1e       	adc	r15, r29
    299e:	ce 01       	movw	r24, r28
    29a0:	01 96       	adiw	r24, 0x01	; 1
    29a2:	b7 01       	movw	r22, r14
    29a4:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__unpack_f>
    29a8:	8e 01       	movw	r16, r28
    29aa:	0f 5e       	subi	r16, 0xEF	; 239
    29ac:	1f 4f       	sbci	r17, 0xFF	; 255
    29ae:	ce 01       	movw	r24, r28
    29b0:	05 96       	adiw	r24, 0x05	; 5
    29b2:	b8 01       	movw	r22, r16
    29b4:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__unpack_f>
    29b8:	89 85       	ldd	r24, Y+9	; 0x09
    29ba:	82 30       	cpi	r24, 0x02	; 2
    29bc:	40 f0       	brcs	.+16     	; 0x29ce <__ltsf2+0x56>
    29be:	89 89       	ldd	r24, Y+17	; 0x11
    29c0:	82 30       	cpi	r24, 0x02	; 2
    29c2:	28 f0       	brcs	.+10     	; 0x29ce <__ltsf2+0x56>
    29c4:	c7 01       	movw	r24, r14
    29c6:	b8 01       	movw	r22, r16
    29c8:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <__fpcmp_parts_f>
    29cc:	01 c0       	rjmp	.+2      	; 0x29d0 <__ltsf2+0x58>
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	68 96       	adiw	r28, 0x18	; 24
    29d2:	e6 e0       	ldi	r30, 0x06	; 6
    29d4:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__+0x18>

000029d8 <__fixsfsi>:
    29d8:	ac e0       	ldi	r26, 0x0C	; 12
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	e2 ef       	ldi	r30, 0xF2	; 242
    29de:	f4 e1       	ldi	r31, 0x14	; 20
    29e0:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__prologue_saves__+0x20>
    29e4:	69 83       	std	Y+1, r22	; 0x01
    29e6:	7a 83       	std	Y+2, r23	; 0x02
    29e8:	8b 83       	std	Y+3, r24	; 0x03
    29ea:	9c 83       	std	Y+4, r25	; 0x04
    29ec:	ce 01       	movw	r24, r28
    29ee:	01 96       	adiw	r24, 0x01	; 1
    29f0:	be 01       	movw	r22, r28
    29f2:	6b 5f       	subi	r22, 0xFB	; 251
    29f4:	7f 4f       	sbci	r23, 0xFF	; 255
    29f6:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__unpack_f>
    29fa:	8d 81       	ldd	r24, Y+5	; 0x05
    29fc:	82 30       	cpi	r24, 0x02	; 2
    29fe:	61 f1       	breq	.+88     	; 0x2a58 <__fixsfsi+0x80>
    2a00:	82 30       	cpi	r24, 0x02	; 2
    2a02:	50 f1       	brcs	.+84     	; 0x2a58 <__fixsfsi+0x80>
    2a04:	84 30       	cpi	r24, 0x04	; 4
    2a06:	21 f4       	brne	.+8      	; 0x2a10 <__fixsfsi+0x38>
    2a08:	8e 81       	ldd	r24, Y+6	; 0x06
    2a0a:	88 23       	and	r24, r24
    2a0c:	51 f1       	breq	.+84     	; 0x2a62 <__fixsfsi+0x8a>
    2a0e:	2e c0       	rjmp	.+92     	; 0x2a6c <__fixsfsi+0x94>
    2a10:	2f 81       	ldd	r18, Y+7	; 0x07
    2a12:	38 85       	ldd	r19, Y+8	; 0x08
    2a14:	37 fd       	sbrc	r19, 7
    2a16:	20 c0       	rjmp	.+64     	; 0x2a58 <__fixsfsi+0x80>
    2a18:	6e 81       	ldd	r22, Y+6	; 0x06
    2a1a:	2f 31       	cpi	r18, 0x1F	; 31
    2a1c:	31 05       	cpc	r19, r1
    2a1e:	1c f0       	brlt	.+6      	; 0x2a26 <__fixsfsi+0x4e>
    2a20:	66 23       	and	r22, r22
    2a22:	f9 f0       	breq	.+62     	; 0x2a62 <__fixsfsi+0x8a>
    2a24:	23 c0       	rjmp	.+70     	; 0x2a6c <__fixsfsi+0x94>
    2a26:	8e e1       	ldi	r24, 0x1E	; 30
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	82 1b       	sub	r24, r18
    2a2c:	93 0b       	sbc	r25, r19
    2a2e:	29 85       	ldd	r18, Y+9	; 0x09
    2a30:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a32:	4b 85       	ldd	r20, Y+11	; 0x0b
    2a34:	5c 85       	ldd	r21, Y+12	; 0x0c
    2a36:	04 c0       	rjmp	.+8      	; 0x2a40 <__fixsfsi+0x68>
    2a38:	56 95       	lsr	r21
    2a3a:	47 95       	ror	r20
    2a3c:	37 95       	ror	r19
    2a3e:	27 95       	ror	r18
    2a40:	8a 95       	dec	r24
    2a42:	d2 f7       	brpl	.-12     	; 0x2a38 <__fixsfsi+0x60>
    2a44:	66 23       	and	r22, r22
    2a46:	b1 f0       	breq	.+44     	; 0x2a74 <__fixsfsi+0x9c>
    2a48:	50 95       	com	r21
    2a4a:	40 95       	com	r20
    2a4c:	30 95       	com	r19
    2a4e:	21 95       	neg	r18
    2a50:	3f 4f       	sbci	r19, 0xFF	; 255
    2a52:	4f 4f       	sbci	r20, 0xFF	; 255
    2a54:	5f 4f       	sbci	r21, 0xFF	; 255
    2a56:	0e c0       	rjmp	.+28     	; 0x2a74 <__fixsfsi+0x9c>
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e0       	ldi	r20, 0x00	; 0
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
    2a60:	09 c0       	rjmp	.+18     	; 0x2a74 <__fixsfsi+0x9c>
    2a62:	2f ef       	ldi	r18, 0xFF	; 255
    2a64:	3f ef       	ldi	r19, 0xFF	; 255
    2a66:	4f ef       	ldi	r20, 0xFF	; 255
    2a68:	5f e7       	ldi	r21, 0x7F	; 127
    2a6a:	04 c0       	rjmp	.+8      	; 0x2a74 <__fixsfsi+0x9c>
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e0       	ldi	r20, 0x00	; 0
    2a72:	50 e8       	ldi	r21, 0x80	; 128
    2a74:	b9 01       	movw	r22, r18
    2a76:	ca 01       	movw	r24, r20
    2a78:	2c 96       	adiw	r28, 0x0c	; 12
    2a7a:	e2 e0       	ldi	r30, 0x02	; 2
    2a7c:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <__epilogue_restores__+0x20>

00002a80 <__floatunsisf>:
    2a80:	a8 e0       	ldi	r26, 0x08	; 8
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	e6 e4       	ldi	r30, 0x46	; 70
    2a86:	f5 e1       	ldi	r31, 0x15	; 21
    2a88:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__prologue_saves__+0x10>
    2a8c:	7b 01       	movw	r14, r22
    2a8e:	8c 01       	movw	r16, r24
    2a90:	61 15       	cp	r22, r1
    2a92:	71 05       	cpc	r23, r1
    2a94:	81 05       	cpc	r24, r1
    2a96:	91 05       	cpc	r25, r1
    2a98:	19 f4       	brne	.+6      	; 0x2aa0 <__floatunsisf+0x20>
    2a9a:	82 e0       	ldi	r24, 0x02	; 2
    2a9c:	89 83       	std	Y+1, r24	; 0x01
    2a9e:	60 c0       	rjmp	.+192    	; 0x2b60 <__floatunsisf+0xe0>
    2aa0:	83 e0       	ldi	r24, 0x03	; 3
    2aa2:	89 83       	std	Y+1, r24	; 0x01
    2aa4:	8e e1       	ldi	r24, 0x1E	; 30
    2aa6:	c8 2e       	mov	r12, r24
    2aa8:	d1 2c       	mov	r13, r1
    2aaa:	dc 82       	std	Y+4, r13	; 0x04
    2aac:	cb 82       	std	Y+3, r12	; 0x03
    2aae:	ed 82       	std	Y+5, r14	; 0x05
    2ab0:	fe 82       	std	Y+6, r15	; 0x06
    2ab2:	0f 83       	std	Y+7, r16	; 0x07
    2ab4:	18 87       	std	Y+8, r17	; 0x08
    2ab6:	c8 01       	movw	r24, r16
    2ab8:	b7 01       	movw	r22, r14
    2aba:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__clzsi2>
    2abe:	fc 01       	movw	r30, r24
    2ac0:	31 97       	sbiw	r30, 0x01	; 1
    2ac2:	f7 ff       	sbrs	r31, 7
    2ac4:	3b c0       	rjmp	.+118    	; 0x2b3c <__floatunsisf+0xbc>
    2ac6:	22 27       	eor	r18, r18
    2ac8:	33 27       	eor	r19, r19
    2aca:	2e 1b       	sub	r18, r30
    2acc:	3f 0b       	sbc	r19, r31
    2ace:	57 01       	movw	r10, r14
    2ad0:	68 01       	movw	r12, r16
    2ad2:	02 2e       	mov	r0, r18
    2ad4:	04 c0       	rjmp	.+8      	; 0x2ade <__floatunsisf+0x5e>
    2ad6:	d6 94       	lsr	r13
    2ad8:	c7 94       	ror	r12
    2ada:	b7 94       	ror	r11
    2adc:	a7 94       	ror	r10
    2ade:	0a 94       	dec	r0
    2ae0:	d2 f7       	brpl	.-12     	; 0x2ad6 <__floatunsisf+0x56>
    2ae2:	40 e0       	ldi	r20, 0x00	; 0
    2ae4:	50 e0       	ldi	r21, 0x00	; 0
    2ae6:	60 e0       	ldi	r22, 0x00	; 0
    2ae8:	70 e0       	ldi	r23, 0x00	; 0
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	a0 e0       	ldi	r26, 0x00	; 0
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	04 c0       	rjmp	.+8      	; 0x2afc <__floatunsisf+0x7c>
    2af4:	88 0f       	add	r24, r24
    2af6:	99 1f       	adc	r25, r25
    2af8:	aa 1f       	adc	r26, r26
    2afa:	bb 1f       	adc	r27, r27
    2afc:	2a 95       	dec	r18
    2afe:	d2 f7       	brpl	.-12     	; 0x2af4 <__floatunsisf+0x74>
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	a1 09       	sbc	r26, r1
    2b04:	b1 09       	sbc	r27, r1
    2b06:	8e 21       	and	r24, r14
    2b08:	9f 21       	and	r25, r15
    2b0a:	a0 23       	and	r26, r16
    2b0c:	b1 23       	and	r27, r17
    2b0e:	00 97       	sbiw	r24, 0x00	; 0
    2b10:	a1 05       	cpc	r26, r1
    2b12:	b1 05       	cpc	r27, r1
    2b14:	21 f0       	breq	.+8      	; 0x2b1e <__floatunsisf+0x9e>
    2b16:	41 e0       	ldi	r20, 0x01	; 1
    2b18:	50 e0       	ldi	r21, 0x00	; 0
    2b1a:	60 e0       	ldi	r22, 0x00	; 0
    2b1c:	70 e0       	ldi	r23, 0x00	; 0
    2b1e:	4a 29       	or	r20, r10
    2b20:	5b 29       	or	r21, r11
    2b22:	6c 29       	or	r22, r12
    2b24:	7d 29       	or	r23, r13
    2b26:	4d 83       	std	Y+5, r20	; 0x05
    2b28:	5e 83       	std	Y+6, r21	; 0x06
    2b2a:	6f 83       	std	Y+7, r22	; 0x07
    2b2c:	78 87       	std	Y+8, r23	; 0x08
    2b2e:	8e e1       	ldi	r24, 0x1E	; 30
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	8e 1b       	sub	r24, r30
    2b34:	9f 0b       	sbc	r25, r31
    2b36:	9c 83       	std	Y+4, r25	; 0x04
    2b38:	8b 83       	std	Y+3, r24	; 0x03
    2b3a:	12 c0       	rjmp	.+36     	; 0x2b60 <__floatunsisf+0xe0>
    2b3c:	30 97       	sbiw	r30, 0x00	; 0
    2b3e:	81 f0       	breq	.+32     	; 0x2b60 <__floatunsisf+0xe0>
    2b40:	0e 2e       	mov	r0, r30
    2b42:	04 c0       	rjmp	.+8      	; 0x2b4c <__floatunsisf+0xcc>
    2b44:	ee 0c       	add	r14, r14
    2b46:	ff 1c       	adc	r15, r15
    2b48:	00 1f       	adc	r16, r16
    2b4a:	11 1f       	adc	r17, r17
    2b4c:	0a 94       	dec	r0
    2b4e:	d2 f7       	brpl	.-12     	; 0x2b44 <__floatunsisf+0xc4>
    2b50:	ed 82       	std	Y+5, r14	; 0x05
    2b52:	fe 82       	std	Y+6, r15	; 0x06
    2b54:	0f 83       	std	Y+7, r16	; 0x07
    2b56:	18 87       	std	Y+8, r17	; 0x08
    2b58:	ce 1a       	sub	r12, r30
    2b5a:	df 0a       	sbc	r13, r31
    2b5c:	dc 82       	std	Y+4, r13	; 0x04
    2b5e:	cb 82       	std	Y+3, r12	; 0x03
    2b60:	1a 82       	std	Y+2, r1	; 0x02
    2b62:	ce 01       	movw	r24, r28
    2b64:	01 96       	adiw	r24, 0x01	; 1
    2b66:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__pack_f>
    2b6a:	28 96       	adiw	r28, 0x08	; 8
    2b6c:	ea e0       	ldi	r30, 0x0A	; 10
    2b6e:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__epilogue_restores__+0x10>

00002b72 <__clzsi2>:
    2b72:	ef 92       	push	r14
    2b74:	ff 92       	push	r15
    2b76:	0f 93       	push	r16
    2b78:	1f 93       	push	r17
    2b7a:	7b 01       	movw	r14, r22
    2b7c:	8c 01       	movw	r16, r24
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	e8 16       	cp	r14, r24
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	f8 06       	cpc	r15, r24
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	08 07       	cpc	r16, r24
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	18 07       	cpc	r17, r24
    2b8e:	88 f4       	brcc	.+34     	; 0x2bb2 <__clzsi2+0x40>
    2b90:	8f ef       	ldi	r24, 0xFF	; 255
    2b92:	e8 16       	cp	r14, r24
    2b94:	f1 04       	cpc	r15, r1
    2b96:	01 05       	cpc	r16, r1
    2b98:	11 05       	cpc	r17, r1
    2b9a:	31 f0       	breq	.+12     	; 0x2ba8 <__clzsi2+0x36>
    2b9c:	28 f0       	brcs	.+10     	; 0x2ba8 <__clzsi2+0x36>
    2b9e:	88 e0       	ldi	r24, 0x08	; 8
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	a0 e0       	ldi	r26, 0x00	; 0
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	17 c0       	rjmp	.+46     	; 0x2bd6 <__clzsi2+0x64>
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	a0 e0       	ldi	r26, 0x00	; 0
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	12 c0       	rjmp	.+36     	; 0x2bd6 <__clzsi2+0x64>
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	e8 16       	cp	r14, r24
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	f8 06       	cpc	r15, r24
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	08 07       	cpc	r16, r24
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	18 07       	cpc	r17, r24
    2bc2:	28 f0       	brcs	.+10     	; 0x2bce <__clzsi2+0x5c>
    2bc4:	88 e1       	ldi	r24, 0x18	; 24
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	a0 e0       	ldi	r26, 0x00	; 0
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	04 c0       	rjmp	.+8      	; 0x2bd6 <__clzsi2+0x64>
    2bce:	80 e1       	ldi	r24, 0x10	; 16
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	a0 e0       	ldi	r26, 0x00	; 0
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	20 e2       	ldi	r18, 0x20	; 32
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	40 e0       	ldi	r20, 0x00	; 0
    2bdc:	50 e0       	ldi	r21, 0x00	; 0
    2bde:	28 1b       	sub	r18, r24
    2be0:	39 0b       	sbc	r19, r25
    2be2:	4a 0b       	sbc	r20, r26
    2be4:	5b 0b       	sbc	r21, r27
    2be6:	04 c0       	rjmp	.+8      	; 0x2bf0 <__clzsi2+0x7e>
    2be8:	16 95       	lsr	r17
    2bea:	07 95       	ror	r16
    2bec:	f7 94       	ror	r15
    2bee:	e7 94       	ror	r14
    2bf0:	8a 95       	dec	r24
    2bf2:	d2 f7       	brpl	.-12     	; 0x2be8 <__clzsi2+0x76>
    2bf4:	f7 01       	movw	r30, r14
    2bf6:	ed 5e       	subi	r30, 0xED	; 237
    2bf8:	fd 4f       	sbci	r31, 0xFD	; 253
    2bfa:	80 81       	ld	r24, Z
    2bfc:	28 1b       	sub	r18, r24
    2bfe:	31 09       	sbc	r19, r1
    2c00:	41 09       	sbc	r20, r1
    2c02:	51 09       	sbc	r21, r1
    2c04:	c9 01       	movw	r24, r18
    2c06:	1f 91       	pop	r17
    2c08:	0f 91       	pop	r16
    2c0a:	ff 90       	pop	r15
    2c0c:	ef 90       	pop	r14
    2c0e:	08 95       	ret

00002c10 <__pack_f>:
    2c10:	df 92       	push	r13
    2c12:	ef 92       	push	r14
    2c14:	ff 92       	push	r15
    2c16:	0f 93       	push	r16
    2c18:	1f 93       	push	r17
    2c1a:	fc 01       	movw	r30, r24
    2c1c:	e4 80       	ldd	r14, Z+4	; 0x04
    2c1e:	f5 80       	ldd	r15, Z+5	; 0x05
    2c20:	06 81       	ldd	r16, Z+6	; 0x06
    2c22:	17 81       	ldd	r17, Z+7	; 0x07
    2c24:	d1 80       	ldd	r13, Z+1	; 0x01
    2c26:	80 81       	ld	r24, Z
    2c28:	82 30       	cpi	r24, 0x02	; 2
    2c2a:	48 f4       	brcc	.+18     	; 0x2c3e <__pack_f+0x2e>
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	a0 e1       	ldi	r26, 0x10	; 16
    2c32:	b0 e0       	ldi	r27, 0x00	; 0
    2c34:	e8 2a       	or	r14, r24
    2c36:	f9 2a       	or	r15, r25
    2c38:	0a 2b       	or	r16, r26
    2c3a:	1b 2b       	or	r17, r27
    2c3c:	a5 c0       	rjmp	.+330    	; 0x2d88 <__pack_f+0x178>
    2c3e:	84 30       	cpi	r24, 0x04	; 4
    2c40:	09 f4       	brne	.+2      	; 0x2c44 <__pack_f+0x34>
    2c42:	9f c0       	rjmp	.+318    	; 0x2d82 <__pack_f+0x172>
    2c44:	82 30       	cpi	r24, 0x02	; 2
    2c46:	21 f4       	brne	.+8      	; 0x2c50 <__pack_f+0x40>
    2c48:	ee 24       	eor	r14, r14
    2c4a:	ff 24       	eor	r15, r15
    2c4c:	87 01       	movw	r16, r14
    2c4e:	05 c0       	rjmp	.+10     	; 0x2c5a <__pack_f+0x4a>
    2c50:	e1 14       	cp	r14, r1
    2c52:	f1 04       	cpc	r15, r1
    2c54:	01 05       	cpc	r16, r1
    2c56:	11 05       	cpc	r17, r1
    2c58:	19 f4       	brne	.+6      	; 0x2c60 <__pack_f+0x50>
    2c5a:	e0 e0       	ldi	r30, 0x00	; 0
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	96 c0       	rjmp	.+300    	; 0x2d8c <__pack_f+0x17c>
    2c60:	62 81       	ldd	r22, Z+2	; 0x02
    2c62:	73 81       	ldd	r23, Z+3	; 0x03
    2c64:	9f ef       	ldi	r25, 0xFF	; 255
    2c66:	62 38       	cpi	r22, 0x82	; 130
    2c68:	79 07       	cpc	r23, r25
    2c6a:	0c f0       	brlt	.+2      	; 0x2c6e <__pack_f+0x5e>
    2c6c:	5b c0       	rjmp	.+182    	; 0x2d24 <__pack_f+0x114>
    2c6e:	22 e8       	ldi	r18, 0x82	; 130
    2c70:	3f ef       	ldi	r19, 0xFF	; 255
    2c72:	26 1b       	sub	r18, r22
    2c74:	37 0b       	sbc	r19, r23
    2c76:	2a 31       	cpi	r18, 0x1A	; 26
    2c78:	31 05       	cpc	r19, r1
    2c7a:	2c f0       	brlt	.+10     	; 0x2c86 <__pack_f+0x76>
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e0       	ldi	r20, 0x00	; 0
    2c82:	50 e0       	ldi	r21, 0x00	; 0
    2c84:	2a c0       	rjmp	.+84     	; 0x2cda <__pack_f+0xca>
    2c86:	b8 01       	movw	r22, r16
    2c88:	a7 01       	movw	r20, r14
    2c8a:	02 2e       	mov	r0, r18
    2c8c:	04 c0       	rjmp	.+8      	; 0x2c96 <__pack_f+0x86>
    2c8e:	76 95       	lsr	r23
    2c90:	67 95       	ror	r22
    2c92:	57 95       	ror	r21
    2c94:	47 95       	ror	r20
    2c96:	0a 94       	dec	r0
    2c98:	d2 f7       	brpl	.-12     	; 0x2c8e <__pack_f+0x7e>
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	a0 e0       	ldi	r26, 0x00	; 0
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	04 c0       	rjmp	.+8      	; 0x2cac <__pack_f+0x9c>
    2ca4:	88 0f       	add	r24, r24
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	aa 1f       	adc	r26, r26
    2caa:	bb 1f       	adc	r27, r27
    2cac:	2a 95       	dec	r18
    2cae:	d2 f7       	brpl	.-12     	; 0x2ca4 <__pack_f+0x94>
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	a1 09       	sbc	r26, r1
    2cb4:	b1 09       	sbc	r27, r1
    2cb6:	8e 21       	and	r24, r14
    2cb8:	9f 21       	and	r25, r15
    2cba:	a0 23       	and	r26, r16
    2cbc:	b1 23       	and	r27, r17
    2cbe:	00 97       	sbiw	r24, 0x00	; 0
    2cc0:	a1 05       	cpc	r26, r1
    2cc2:	b1 05       	cpc	r27, r1
    2cc4:	21 f0       	breq	.+8      	; 0x2cce <__pack_f+0xbe>
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	a0 e0       	ldi	r26, 0x00	; 0
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	9a 01       	movw	r18, r20
    2cd0:	ab 01       	movw	r20, r22
    2cd2:	28 2b       	or	r18, r24
    2cd4:	39 2b       	or	r19, r25
    2cd6:	4a 2b       	or	r20, r26
    2cd8:	5b 2b       	or	r21, r27
    2cda:	da 01       	movw	r26, r20
    2cdc:	c9 01       	movw	r24, r18
    2cde:	8f 77       	andi	r24, 0x7F	; 127
    2ce0:	90 70       	andi	r25, 0x00	; 0
    2ce2:	a0 70       	andi	r26, 0x00	; 0
    2ce4:	b0 70       	andi	r27, 0x00	; 0
    2ce6:	80 34       	cpi	r24, 0x40	; 64
    2ce8:	91 05       	cpc	r25, r1
    2cea:	a1 05       	cpc	r26, r1
    2cec:	b1 05       	cpc	r27, r1
    2cee:	39 f4       	brne	.+14     	; 0x2cfe <__pack_f+0xee>
    2cf0:	27 ff       	sbrs	r18, 7
    2cf2:	09 c0       	rjmp	.+18     	; 0x2d06 <__pack_f+0xf6>
    2cf4:	20 5c       	subi	r18, 0xC0	; 192
    2cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf8:	4f 4f       	sbci	r20, 0xFF	; 255
    2cfa:	5f 4f       	sbci	r21, 0xFF	; 255
    2cfc:	04 c0       	rjmp	.+8      	; 0x2d06 <__pack_f+0xf6>
    2cfe:	21 5c       	subi	r18, 0xC1	; 193
    2d00:	3f 4f       	sbci	r19, 0xFF	; 255
    2d02:	4f 4f       	sbci	r20, 0xFF	; 255
    2d04:	5f 4f       	sbci	r21, 0xFF	; 255
    2d06:	e0 e0       	ldi	r30, 0x00	; 0
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	20 30       	cpi	r18, 0x00	; 0
    2d0c:	a0 e0       	ldi	r26, 0x00	; 0
    2d0e:	3a 07       	cpc	r19, r26
    2d10:	a0 e0       	ldi	r26, 0x00	; 0
    2d12:	4a 07       	cpc	r20, r26
    2d14:	a0 e4       	ldi	r26, 0x40	; 64
    2d16:	5a 07       	cpc	r21, r26
    2d18:	10 f0       	brcs	.+4      	; 0x2d1e <__pack_f+0x10e>
    2d1a:	e1 e0       	ldi	r30, 0x01	; 1
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	79 01       	movw	r14, r18
    2d20:	8a 01       	movw	r16, r20
    2d22:	27 c0       	rjmp	.+78     	; 0x2d72 <__pack_f+0x162>
    2d24:	60 38       	cpi	r22, 0x80	; 128
    2d26:	71 05       	cpc	r23, r1
    2d28:	64 f5       	brge	.+88     	; 0x2d82 <__pack_f+0x172>
    2d2a:	fb 01       	movw	r30, r22
    2d2c:	e1 58       	subi	r30, 0x81	; 129
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	d8 01       	movw	r26, r16
    2d32:	c7 01       	movw	r24, r14
    2d34:	8f 77       	andi	r24, 0x7F	; 127
    2d36:	90 70       	andi	r25, 0x00	; 0
    2d38:	a0 70       	andi	r26, 0x00	; 0
    2d3a:	b0 70       	andi	r27, 0x00	; 0
    2d3c:	80 34       	cpi	r24, 0x40	; 64
    2d3e:	91 05       	cpc	r25, r1
    2d40:	a1 05       	cpc	r26, r1
    2d42:	b1 05       	cpc	r27, r1
    2d44:	39 f4       	brne	.+14     	; 0x2d54 <__pack_f+0x144>
    2d46:	e7 fe       	sbrs	r14, 7
    2d48:	0d c0       	rjmp	.+26     	; 0x2d64 <__pack_f+0x154>
    2d4a:	80 e4       	ldi	r24, 0x40	; 64
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	a0 e0       	ldi	r26, 0x00	; 0
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	04 c0       	rjmp	.+8      	; 0x2d5c <__pack_f+0x14c>
    2d54:	8f e3       	ldi	r24, 0x3F	; 63
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	a0 e0       	ldi	r26, 0x00	; 0
    2d5a:	b0 e0       	ldi	r27, 0x00	; 0
    2d5c:	e8 0e       	add	r14, r24
    2d5e:	f9 1e       	adc	r15, r25
    2d60:	0a 1f       	adc	r16, r26
    2d62:	1b 1f       	adc	r17, r27
    2d64:	17 ff       	sbrs	r17, 7
    2d66:	05 c0       	rjmp	.+10     	; 0x2d72 <__pack_f+0x162>
    2d68:	16 95       	lsr	r17
    2d6a:	07 95       	ror	r16
    2d6c:	f7 94       	ror	r15
    2d6e:	e7 94       	ror	r14
    2d70:	31 96       	adiw	r30, 0x01	; 1
    2d72:	87 e0       	ldi	r24, 0x07	; 7
    2d74:	16 95       	lsr	r17
    2d76:	07 95       	ror	r16
    2d78:	f7 94       	ror	r15
    2d7a:	e7 94       	ror	r14
    2d7c:	8a 95       	dec	r24
    2d7e:	d1 f7       	brne	.-12     	; 0x2d74 <__pack_f+0x164>
    2d80:	05 c0       	rjmp	.+10     	; 0x2d8c <__pack_f+0x17c>
    2d82:	ee 24       	eor	r14, r14
    2d84:	ff 24       	eor	r15, r15
    2d86:	87 01       	movw	r16, r14
    2d88:	ef ef       	ldi	r30, 0xFF	; 255
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	6e 2f       	mov	r22, r30
    2d8e:	67 95       	ror	r22
    2d90:	66 27       	eor	r22, r22
    2d92:	67 95       	ror	r22
    2d94:	90 2f       	mov	r25, r16
    2d96:	9f 77       	andi	r25, 0x7F	; 127
    2d98:	d7 94       	ror	r13
    2d9a:	dd 24       	eor	r13, r13
    2d9c:	d7 94       	ror	r13
    2d9e:	8e 2f       	mov	r24, r30
    2da0:	86 95       	lsr	r24
    2da2:	49 2f       	mov	r20, r25
    2da4:	46 2b       	or	r20, r22
    2da6:	58 2f       	mov	r21, r24
    2da8:	5d 29       	or	r21, r13
    2daa:	b7 01       	movw	r22, r14
    2dac:	ca 01       	movw	r24, r20
    2dae:	1f 91       	pop	r17
    2db0:	0f 91       	pop	r16
    2db2:	ff 90       	pop	r15
    2db4:	ef 90       	pop	r14
    2db6:	df 90       	pop	r13
    2db8:	08 95       	ret

00002dba <__unpack_f>:
    2dba:	fc 01       	movw	r30, r24
    2dbc:	db 01       	movw	r26, r22
    2dbe:	40 81       	ld	r20, Z
    2dc0:	51 81       	ldd	r21, Z+1	; 0x01
    2dc2:	22 81       	ldd	r18, Z+2	; 0x02
    2dc4:	62 2f       	mov	r22, r18
    2dc6:	6f 77       	andi	r22, 0x7F	; 127
    2dc8:	70 e0       	ldi	r23, 0x00	; 0
    2dca:	22 1f       	adc	r18, r18
    2dcc:	22 27       	eor	r18, r18
    2dce:	22 1f       	adc	r18, r18
    2dd0:	93 81       	ldd	r25, Z+3	; 0x03
    2dd2:	89 2f       	mov	r24, r25
    2dd4:	88 0f       	add	r24, r24
    2dd6:	82 2b       	or	r24, r18
    2dd8:	28 2f       	mov	r18, r24
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	99 1f       	adc	r25, r25
    2dde:	99 27       	eor	r25, r25
    2de0:	99 1f       	adc	r25, r25
    2de2:	11 96       	adiw	r26, 0x01	; 1
    2de4:	9c 93       	st	X, r25
    2de6:	11 97       	sbiw	r26, 0x01	; 1
    2de8:	21 15       	cp	r18, r1
    2dea:	31 05       	cpc	r19, r1
    2dec:	a9 f5       	brne	.+106    	; 0x2e58 <__unpack_f+0x9e>
    2dee:	41 15       	cp	r20, r1
    2df0:	51 05       	cpc	r21, r1
    2df2:	61 05       	cpc	r22, r1
    2df4:	71 05       	cpc	r23, r1
    2df6:	11 f4       	brne	.+4      	; 0x2dfc <__unpack_f+0x42>
    2df8:	82 e0       	ldi	r24, 0x02	; 2
    2dfa:	37 c0       	rjmp	.+110    	; 0x2e6a <__unpack_f+0xb0>
    2dfc:	82 e8       	ldi	r24, 0x82	; 130
    2dfe:	9f ef       	ldi	r25, 0xFF	; 255
    2e00:	13 96       	adiw	r26, 0x03	; 3
    2e02:	9c 93       	st	X, r25
    2e04:	8e 93       	st	-X, r24
    2e06:	12 97       	sbiw	r26, 0x02	; 2
    2e08:	9a 01       	movw	r18, r20
    2e0a:	ab 01       	movw	r20, r22
    2e0c:	67 e0       	ldi	r22, 0x07	; 7
    2e0e:	22 0f       	add	r18, r18
    2e10:	33 1f       	adc	r19, r19
    2e12:	44 1f       	adc	r20, r20
    2e14:	55 1f       	adc	r21, r21
    2e16:	6a 95       	dec	r22
    2e18:	d1 f7       	brne	.-12     	; 0x2e0e <__unpack_f+0x54>
    2e1a:	83 e0       	ldi	r24, 0x03	; 3
    2e1c:	8c 93       	st	X, r24
    2e1e:	0d c0       	rjmp	.+26     	; 0x2e3a <__unpack_f+0x80>
    2e20:	22 0f       	add	r18, r18
    2e22:	33 1f       	adc	r19, r19
    2e24:	44 1f       	adc	r20, r20
    2e26:	55 1f       	adc	r21, r21
    2e28:	12 96       	adiw	r26, 0x02	; 2
    2e2a:	8d 91       	ld	r24, X+
    2e2c:	9c 91       	ld	r25, X
    2e2e:	13 97       	sbiw	r26, 0x03	; 3
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	13 96       	adiw	r26, 0x03	; 3
    2e34:	9c 93       	st	X, r25
    2e36:	8e 93       	st	-X, r24
    2e38:	12 97       	sbiw	r26, 0x02	; 2
    2e3a:	20 30       	cpi	r18, 0x00	; 0
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	38 07       	cpc	r19, r24
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	48 07       	cpc	r20, r24
    2e44:	80 e4       	ldi	r24, 0x40	; 64
    2e46:	58 07       	cpc	r21, r24
    2e48:	58 f3       	brcs	.-42     	; 0x2e20 <__unpack_f+0x66>
    2e4a:	14 96       	adiw	r26, 0x04	; 4
    2e4c:	2d 93       	st	X+, r18
    2e4e:	3d 93       	st	X+, r19
    2e50:	4d 93       	st	X+, r20
    2e52:	5c 93       	st	X, r21
    2e54:	17 97       	sbiw	r26, 0x07	; 7
    2e56:	08 95       	ret
    2e58:	2f 3f       	cpi	r18, 0xFF	; 255
    2e5a:	31 05       	cpc	r19, r1
    2e5c:	79 f4       	brne	.+30     	; 0x2e7c <__unpack_f+0xc2>
    2e5e:	41 15       	cp	r20, r1
    2e60:	51 05       	cpc	r21, r1
    2e62:	61 05       	cpc	r22, r1
    2e64:	71 05       	cpc	r23, r1
    2e66:	19 f4       	brne	.+6      	; 0x2e6e <__unpack_f+0xb4>
    2e68:	84 e0       	ldi	r24, 0x04	; 4
    2e6a:	8c 93       	st	X, r24
    2e6c:	08 95       	ret
    2e6e:	64 ff       	sbrs	r22, 4
    2e70:	03 c0       	rjmp	.+6      	; 0x2e78 <__unpack_f+0xbe>
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	8c 93       	st	X, r24
    2e76:	12 c0       	rjmp	.+36     	; 0x2e9c <__unpack_f+0xe2>
    2e78:	1c 92       	st	X, r1
    2e7a:	10 c0       	rjmp	.+32     	; 0x2e9c <__unpack_f+0xe2>
    2e7c:	2f 57       	subi	r18, 0x7F	; 127
    2e7e:	30 40       	sbci	r19, 0x00	; 0
    2e80:	13 96       	adiw	r26, 0x03	; 3
    2e82:	3c 93       	st	X, r19
    2e84:	2e 93       	st	-X, r18
    2e86:	12 97       	sbiw	r26, 0x02	; 2
    2e88:	83 e0       	ldi	r24, 0x03	; 3
    2e8a:	8c 93       	st	X, r24
    2e8c:	87 e0       	ldi	r24, 0x07	; 7
    2e8e:	44 0f       	add	r20, r20
    2e90:	55 1f       	adc	r21, r21
    2e92:	66 1f       	adc	r22, r22
    2e94:	77 1f       	adc	r23, r23
    2e96:	8a 95       	dec	r24
    2e98:	d1 f7       	brne	.-12     	; 0x2e8e <__unpack_f+0xd4>
    2e9a:	70 64       	ori	r23, 0x40	; 64
    2e9c:	14 96       	adiw	r26, 0x04	; 4
    2e9e:	4d 93       	st	X+, r20
    2ea0:	5d 93       	st	X+, r21
    2ea2:	6d 93       	st	X+, r22
    2ea4:	7c 93       	st	X, r23
    2ea6:	17 97       	sbiw	r26, 0x07	; 7
    2ea8:	08 95       	ret

00002eaa <__fpcmp_parts_f>:
    2eaa:	1f 93       	push	r17
    2eac:	dc 01       	movw	r26, r24
    2eae:	fb 01       	movw	r30, r22
    2eb0:	9c 91       	ld	r25, X
    2eb2:	92 30       	cpi	r25, 0x02	; 2
    2eb4:	08 f4       	brcc	.+2      	; 0x2eb8 <__fpcmp_parts_f+0xe>
    2eb6:	47 c0       	rjmp	.+142    	; 0x2f46 <__fpcmp_parts_f+0x9c>
    2eb8:	80 81       	ld	r24, Z
    2eba:	82 30       	cpi	r24, 0x02	; 2
    2ebc:	08 f4       	brcc	.+2      	; 0x2ec0 <__fpcmp_parts_f+0x16>
    2ebe:	43 c0       	rjmp	.+134    	; 0x2f46 <__fpcmp_parts_f+0x9c>
    2ec0:	94 30       	cpi	r25, 0x04	; 4
    2ec2:	51 f4       	brne	.+20     	; 0x2ed8 <__fpcmp_parts_f+0x2e>
    2ec4:	11 96       	adiw	r26, 0x01	; 1
    2ec6:	1c 91       	ld	r17, X
    2ec8:	84 30       	cpi	r24, 0x04	; 4
    2eca:	99 f5       	brne	.+102    	; 0x2f32 <__fpcmp_parts_f+0x88>
    2ecc:	81 81       	ldd	r24, Z+1	; 0x01
    2ece:	68 2f       	mov	r22, r24
    2ed0:	70 e0       	ldi	r23, 0x00	; 0
    2ed2:	61 1b       	sub	r22, r17
    2ed4:	71 09       	sbc	r23, r1
    2ed6:	3f c0       	rjmp	.+126    	; 0x2f56 <__fpcmp_parts_f+0xac>
    2ed8:	84 30       	cpi	r24, 0x04	; 4
    2eda:	21 f0       	breq	.+8      	; 0x2ee4 <__fpcmp_parts_f+0x3a>
    2edc:	92 30       	cpi	r25, 0x02	; 2
    2ede:	31 f4       	brne	.+12     	; 0x2eec <__fpcmp_parts_f+0x42>
    2ee0:	82 30       	cpi	r24, 0x02	; 2
    2ee2:	b9 f1       	breq	.+110    	; 0x2f52 <__fpcmp_parts_f+0xa8>
    2ee4:	81 81       	ldd	r24, Z+1	; 0x01
    2ee6:	88 23       	and	r24, r24
    2ee8:	89 f1       	breq	.+98     	; 0x2f4c <__fpcmp_parts_f+0xa2>
    2eea:	2d c0       	rjmp	.+90     	; 0x2f46 <__fpcmp_parts_f+0x9c>
    2eec:	11 96       	adiw	r26, 0x01	; 1
    2eee:	1c 91       	ld	r17, X
    2ef0:	11 97       	sbiw	r26, 0x01	; 1
    2ef2:	82 30       	cpi	r24, 0x02	; 2
    2ef4:	f1 f0       	breq	.+60     	; 0x2f32 <__fpcmp_parts_f+0x88>
    2ef6:	81 81       	ldd	r24, Z+1	; 0x01
    2ef8:	18 17       	cp	r17, r24
    2efa:	d9 f4       	brne	.+54     	; 0x2f32 <__fpcmp_parts_f+0x88>
    2efc:	12 96       	adiw	r26, 0x02	; 2
    2efe:	2d 91       	ld	r18, X+
    2f00:	3c 91       	ld	r19, X
    2f02:	13 97       	sbiw	r26, 0x03	; 3
    2f04:	82 81       	ldd	r24, Z+2	; 0x02
    2f06:	93 81       	ldd	r25, Z+3	; 0x03
    2f08:	82 17       	cp	r24, r18
    2f0a:	93 07       	cpc	r25, r19
    2f0c:	94 f0       	brlt	.+36     	; 0x2f32 <__fpcmp_parts_f+0x88>
    2f0e:	28 17       	cp	r18, r24
    2f10:	39 07       	cpc	r19, r25
    2f12:	bc f0       	brlt	.+46     	; 0x2f42 <__fpcmp_parts_f+0x98>
    2f14:	14 96       	adiw	r26, 0x04	; 4
    2f16:	8d 91       	ld	r24, X+
    2f18:	9d 91       	ld	r25, X+
    2f1a:	0d 90       	ld	r0, X+
    2f1c:	bc 91       	ld	r27, X
    2f1e:	a0 2d       	mov	r26, r0
    2f20:	24 81       	ldd	r18, Z+4	; 0x04
    2f22:	35 81       	ldd	r19, Z+5	; 0x05
    2f24:	46 81       	ldd	r20, Z+6	; 0x06
    2f26:	57 81       	ldd	r21, Z+7	; 0x07
    2f28:	28 17       	cp	r18, r24
    2f2a:	39 07       	cpc	r19, r25
    2f2c:	4a 07       	cpc	r20, r26
    2f2e:	5b 07       	cpc	r21, r27
    2f30:	18 f4       	brcc	.+6      	; 0x2f38 <__fpcmp_parts_f+0x8e>
    2f32:	11 23       	and	r17, r17
    2f34:	41 f0       	breq	.+16     	; 0x2f46 <__fpcmp_parts_f+0x9c>
    2f36:	0a c0       	rjmp	.+20     	; 0x2f4c <__fpcmp_parts_f+0xa2>
    2f38:	82 17       	cp	r24, r18
    2f3a:	93 07       	cpc	r25, r19
    2f3c:	a4 07       	cpc	r26, r20
    2f3e:	b5 07       	cpc	r27, r21
    2f40:	40 f4       	brcc	.+16     	; 0x2f52 <__fpcmp_parts_f+0xa8>
    2f42:	11 23       	and	r17, r17
    2f44:	19 f0       	breq	.+6      	; 0x2f4c <__fpcmp_parts_f+0xa2>
    2f46:	61 e0       	ldi	r22, 0x01	; 1
    2f48:	70 e0       	ldi	r23, 0x00	; 0
    2f4a:	05 c0       	rjmp	.+10     	; 0x2f56 <__fpcmp_parts_f+0xac>
    2f4c:	6f ef       	ldi	r22, 0xFF	; 255
    2f4e:	7f ef       	ldi	r23, 0xFF	; 255
    2f50:	02 c0       	rjmp	.+4      	; 0x2f56 <__fpcmp_parts_f+0xac>
    2f52:	60 e0       	ldi	r22, 0x00	; 0
    2f54:	70 e0       	ldi	r23, 0x00	; 0
    2f56:	cb 01       	movw	r24, r22
    2f58:	1f 91       	pop	r17
    2f5a:	08 95       	ret

00002f5c <__udivmodhi4>:
    2f5c:	aa 1b       	sub	r26, r26
    2f5e:	bb 1b       	sub	r27, r27
    2f60:	51 e1       	ldi	r21, 0x11	; 17
    2f62:	07 c0       	rjmp	.+14     	; 0x2f72 <__udivmodhi4_ep>

00002f64 <__udivmodhi4_loop>:
    2f64:	aa 1f       	adc	r26, r26
    2f66:	bb 1f       	adc	r27, r27
    2f68:	a6 17       	cp	r26, r22
    2f6a:	b7 07       	cpc	r27, r23
    2f6c:	10 f0       	brcs	.+4      	; 0x2f72 <__udivmodhi4_ep>
    2f6e:	a6 1b       	sub	r26, r22
    2f70:	b7 0b       	sbc	r27, r23

00002f72 <__udivmodhi4_ep>:
    2f72:	88 1f       	adc	r24, r24
    2f74:	99 1f       	adc	r25, r25
    2f76:	5a 95       	dec	r21
    2f78:	a9 f7       	brne	.-22     	; 0x2f64 <__udivmodhi4_loop>
    2f7a:	80 95       	com	r24
    2f7c:	90 95       	com	r25
    2f7e:	bc 01       	movw	r22, r24
    2f80:	cd 01       	movw	r24, r26
    2f82:	08 95       	ret

00002f84 <__prologue_saves__>:
    2f84:	2f 92       	push	r2
    2f86:	3f 92       	push	r3
    2f88:	4f 92       	push	r4
    2f8a:	5f 92       	push	r5
    2f8c:	6f 92       	push	r6
    2f8e:	7f 92       	push	r7
    2f90:	8f 92       	push	r8
    2f92:	9f 92       	push	r9
    2f94:	af 92       	push	r10
    2f96:	bf 92       	push	r11
    2f98:	cf 92       	push	r12
    2f9a:	df 92       	push	r13
    2f9c:	ef 92       	push	r14
    2f9e:	ff 92       	push	r15
    2fa0:	0f 93       	push	r16
    2fa2:	1f 93       	push	r17
    2fa4:	cf 93       	push	r28
    2fa6:	df 93       	push	r29
    2fa8:	cd b7       	in	r28, 0x3d	; 61
    2faa:	de b7       	in	r29, 0x3e	; 62
    2fac:	ca 1b       	sub	r28, r26
    2fae:	db 0b       	sbc	r29, r27
    2fb0:	0f b6       	in	r0, 0x3f	; 63
    2fb2:	f8 94       	cli
    2fb4:	de bf       	out	0x3e, r29	; 62
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	cd bf       	out	0x3d, r28	; 61
    2fba:	19 94       	eijmp

00002fbc <__epilogue_restores__>:
    2fbc:	2a 88       	ldd	r2, Y+18	; 0x12
    2fbe:	39 88       	ldd	r3, Y+17	; 0x11
    2fc0:	48 88       	ldd	r4, Y+16	; 0x10
    2fc2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fc4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fc6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fc8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fca:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fcc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fce:	b9 84       	ldd	r11, Y+9	; 0x09
    2fd0:	c8 84       	ldd	r12, Y+8	; 0x08
    2fd2:	df 80       	ldd	r13, Y+7	; 0x07
    2fd4:	ee 80       	ldd	r14, Y+6	; 0x06
    2fd6:	fd 80       	ldd	r15, Y+5	; 0x05
    2fd8:	0c 81       	ldd	r16, Y+4	; 0x04
    2fda:	1b 81       	ldd	r17, Y+3	; 0x03
    2fdc:	aa 81       	ldd	r26, Y+2	; 0x02
    2fde:	b9 81       	ldd	r27, Y+1	; 0x01
    2fe0:	ce 0f       	add	r28, r30
    2fe2:	d1 1d       	adc	r29, r1
    2fe4:	0f b6       	in	r0, 0x3f	; 63
    2fe6:	f8 94       	cli
    2fe8:	de bf       	out	0x3e, r29	; 62
    2fea:	0f be       	out	0x3f, r0	; 63
    2fec:	cd bf       	out	0x3d, r28	; 61
    2fee:	ed 01       	movw	r28, r26
    2ff0:	08 95       	ret

00002ff2 <_exit>:
    2ff2:	f8 94       	cli

00002ff4 <__stop_program>:
    2ff4:	ff cf       	rjmp	.-2      	; 0x2ff4 <__stop_program>
