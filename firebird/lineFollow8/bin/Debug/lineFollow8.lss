
bin\Debug\lineFollow8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800200  0000510e  000051c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000510e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  0080030e  0080030e  000052d0  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000052d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  000052d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000004be  00000000  00000000  000052f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000145e  00000000  00000000  000057b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000296  00000000  00000000  00006c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002088  00000000  00000000  00006ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000360  00000000  00000000  00008f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d3  00000000  00000000  00009290  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 af 01 	jmp	0x35e	; 0x35e <__vector_5>
      18:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e0       	ldi	r30, 0x0E	; 14
      fc:	f1 e5       	ldi	r31, 0x51	; 81
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 30       	cpi	r26, 0x0E	; 14
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	ae e0       	ldi	r26, 0x0E	; 14
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a4 33       	cpi	r26, 0x34	; 52
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 af 10 	call	0x215e	; 0x215e <main>
     122:	0c 94 85 28 	jmp	0x510a	; 0x510a <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <timer5_init>:
    void left_position_encoder_interrupt_init (void);
    void right_position_encoder_interrupt_init (void);


void timer5_init()
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
     132:	e1 e2       	ldi	r30, 0x21	; 33
     134:	f1 e0       	ldi	r31, 0x01	; 1
     136:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     138:	e5 e2       	ldi	r30, 0x25	; 37
     13a:	f1 e0       	ldi	r31, 0x01	; 1
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     140:	e4 e2       	ldi	r30, 0x24	; 36
     142:	f1 e0       	ldi	r31, 0x01	; 1
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     148:	e9 e2       	ldi	r30, 0x29	; 41
     14a:	f1 e0       	ldi	r31, 0x01	; 1
     14c:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     14e:	e8 e2       	ldi	r30, 0x28	; 40
     150:	f1 e0       	ldi	r31, 0x01	; 1
     152:	8f ef       	ldi	r24, 0xFF	; 255
     154:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     156:	eb e2       	ldi	r30, 0x2B	; 43
     158:	f1 e0       	ldi	r31, 0x01	; 1
     15a:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     15c:	ea e2       	ldi	r30, 0x2A	; 42
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	8f ef       	ldi	r24, 0xFF	; 255
     162:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     164:	ed e2       	ldi	r30, 0x2D	; 45
     166:	f1 e0       	ldi	r31, 0x01	; 1
     168:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     16a:	ec e2       	ldi	r30, 0x2C	; 44
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	8f ef       	ldi	r24, 0xFF	; 255
     170:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     172:	e0 e2       	ldi	r30, 0x20	; 32
     174:	f1 e0       	ldi	r31, 0x01	; 1
     176:	89 ea       	ldi	r24, 0xA9	; 169
     178:	80 83       	st	Z, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     17a:	e1 e2       	ldi	r30, 0x21	; 33
     17c:	f1 e0       	ldi	r31, 0x01	; 1
     17e:	8b e0       	ldi	r24, 0x0B	; 11
     180:	80 83       	st	Z, r24
}
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <velocity>:

void velocity (unsigned char left_motor, unsigned char right_motor)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	0f 92       	push	r0
     18e:	0f 92       	push	r0
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
     194:	89 83       	std	Y+1, r24	; 0x01
     196:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
     198:	e8 e2       	ldi	r30, 0x28	; 40
     19a:	f1 e0       	ldi	r31, 0x01	; 1
     19c:	89 81       	ldd	r24, Y+1	; 0x01
     19e:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
     1a0:	ea e2       	ldi	r30, 0x2A	; 42
     1a2:	f1 e0       	ldi	r31, 0x01	; 1
     1a4:	8a 81       	ldd	r24, Y+2	; 0x02
     1a6:	80 83       	st	Z, r24
}
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
     1ac:	cf 91       	pop	r28
     1ae:	df 91       	pop	r29
     1b0:	08 95       	ret

000001b2 <motion_pin_config>:

void motion_pin_config (void)
{
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F; //set direction of the PORTA 3 to PORTA 0 pins as output
     1ba:	a1 e2       	ldi	r26, 0x21	; 33
     1bc:	b0 e0       	ldi	r27, 0x00	; 0
     1be:	e1 e2       	ldi	r30, 0x21	; 33
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	8f 60       	ori	r24, 0x0F	; 15
     1c6:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0; // set initial value of the PORTA 3 to PORTA 0 pins to logic 0
     1c8:	a2 e2       	ldi	r26, 0x22	; 34
     1ca:	b0 e0       	ldi	r27, 0x00	; 0
     1cc:	e2 e2       	ldi	r30, 0x22	; 34
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	80 81       	ld	r24, Z
     1d2:	80 7f       	andi	r24, 0xF0	; 240
     1d4:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     1d6:	aa e0       	ldi	r26, 0x0A	; 10
     1d8:	b1 e0       	ldi	r27, 0x01	; 1
     1da:	ea e0       	ldi	r30, 0x0A	; 10
     1dc:	f1 e0       	ldi	r31, 0x01	; 1
     1de:	80 81       	ld	r24, Z
     1e0:	88 61       	ori	r24, 0x18	; 24
     1e2:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM
     1e4:	ab e0       	ldi	r26, 0x0B	; 11
     1e6:	b1 e0       	ldi	r27, 0x01	; 1
     1e8:	eb e0       	ldi	r30, 0x0B	; 11
     1ea:	f1 e0       	ldi	r31, 0x01	; 1
     1ec:	80 81       	ld	r24, Z
     1ee:	88 61       	ori	r24, 0x18	; 24
     1f0:	8c 93       	st	X, r24
}
     1f2:	cf 91       	pop	r28
     1f4:	df 91       	pop	r29
     1f6:	08 95       	ret

000001f8 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
     1f8:	df 93       	push	r29
     1fa:	cf 93       	push	r28
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     200:	ad e2       	ldi	r26, 0x2D	; 45
     202:	b0 e0       	ldi	r27, 0x00	; 0
     204:	ed e2       	ldi	r30, 0x2D	; 45
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	8f 7e       	andi	r24, 0xEF	; 239
     20c:	8c 93       	st	X, r24
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     20e:	ae e2       	ldi	r26, 0x2E	; 46
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	ee e2       	ldi	r30, 0x2E	; 46
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	80 61       	ori	r24, 0x10	; 16
     21a:	8c 93       	st	X, r24
}
     21c:	cf 91       	pop	r28
     21e:	df 91       	pop	r29
     220:	08 95       	ret

00000222 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
     222:	df 93       	push	r29
     224:	cf 93       	push	r28
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     22a:	ad e2       	ldi	r26, 0x2D	; 45
     22c:	b0 e0       	ldi	r27, 0x00	; 0
     22e:	ed e2       	ldi	r30, 0x2D	; 45
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	8f 7d       	andi	r24, 0xDF	; 223
     236:	8c 93       	st	X, r24
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     238:	ae e2       	ldi	r26, 0x2E	; 46
     23a:	b0 e0       	ldi	r27, 0x00	; 0
     23c:	ee e2       	ldi	r30, 0x2E	; 46
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	80 62       	ori	r24, 0x20	; 32
     244:	8c 93       	st	X, r24
}
     246:	cf 91       	pop	r28
     248:	df 91       	pop	r29
     24a:	08 95       	ret

0000024c <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
     24c:	df 93       	push	r29
     24e:	cf 93       	push	r28
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
     254:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     256:	aa e6       	ldi	r26, 0x6A	; 106
     258:	b0 e0       	ldi	r27, 0x00	; 0
     25a:	ea e6       	ldi	r30, 0x6A	; 106
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	82 60       	ori	r24, 0x02	; 2
     262:	8c 93       	st	X, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     264:	ad e3       	ldi	r26, 0x3D	; 61
     266:	b0 e0       	ldi	r27, 0x00	; 0
     268:	ed e3       	ldi	r30, 0x3D	; 61
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	80 61       	ori	r24, 0x10	; 16
     270:	8c 93       	st	X, r24
	sei();   // Enables the global interrupt
     272:	78 94       	sei
}
     274:	cf 91       	pop	r28
     276:	df 91       	pop	r29
     278:	08 95       	ret

0000027a <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
     27a:	df 93       	push	r29
     27c:	cf 93       	push	r28
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
     282:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     284:	aa e6       	ldi	r26, 0x6A	; 106
     286:	b0 e0       	ldi	r27, 0x00	; 0
     288:	ea e6       	ldi	r30, 0x6A	; 106
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	88 60       	ori	r24, 0x08	; 8
     290:	8c 93       	st	X, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     292:	ad e3       	ldi	r26, 0x3D	; 61
     294:	b0 e0       	ldi	r27, 0x00	; 0
     296:	ed e3       	ldi	r30, 0x3D	; 61
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	80 81       	ld	r24, Z
     29c:	80 62       	ori	r24, 0x20	; 32
     29e:	8c 93       	st	X, r24
	sei();   // Enables the global interrupt
     2a0:	78 94       	sei
}
     2a2:	cf 91       	pop	r28
     2a4:	df 91       	pop	r29
     2a6:	08 95       	ret

000002a8 <set_motors>:

void set_motors()
{
     2a8:	df 93       	push	r29
     2aa:	cf 93       	push	r28
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
    motion_pin_config();
     2b0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <motion_pin_config>
    left_encoder_pin_config();
     2b4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <left_encoder_pin_config>
    right_encoder_pin_config();
     2b8:	0e 94 11 01 	call	0x222	; 0x222 <right_encoder_pin_config>
    left_position_encoder_interrupt_init();
     2bc:	0e 94 26 01 	call	0x24c	; 0x24c <left_position_encoder_interrupt_init>
    right_position_encoder_interrupt_init();
     2c0:	0e 94 3d 01 	call	0x27a	; 0x27a <right_position_encoder_interrupt_init>
    timer5_init();
     2c4:	0e 94 95 00 	call	0x12a	; 0x12a <timer5_init>
}
     2c8:	cf 91       	pop	r28
     2ca:	df 91       	pop	r29
     2cc:	08 95       	ret

000002ce <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     2ce:	1f 92       	push	r1
     2d0:	0f 92       	push	r0
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	0f 92       	push	r0
     2d6:	11 24       	eor	r1, r1
     2d8:	8f 93       	push	r24
     2da:	9f 93       	push	r25
     2dc:	af 93       	push	r26
     2de:	bf 93       	push	r27
     2e0:	df 93       	push	r29
     2e2:	cf 93       	push	r28
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
	ShaftCountRight++;  //increment right shaft position count
     2e8:	80 91 12 03 	lds	r24, 0x0312
     2ec:	90 91 13 03 	lds	r25, 0x0313
     2f0:	a0 91 14 03 	lds	r26, 0x0314
     2f4:	b0 91 15 03 	lds	r27, 0x0315
     2f8:	01 96       	adiw	r24, 0x01	; 1
     2fa:	a1 1d       	adc	r26, r1
     2fc:	b1 1d       	adc	r27, r1
     2fe:	80 93 12 03 	sts	0x0312, r24
     302:	90 93 13 03 	sts	0x0313, r25
     306:	a0 93 14 03 	sts	0x0314, r26
     30a:	b0 93 15 03 	sts	0x0315, r27

    if(nodeMissEnable == 1)
     30e:	80 91 00 02 	lds	r24, 0x0200
     312:	90 91 01 02 	lds	r25, 0x0201
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	91 05       	cpc	r25, r1
     31a:	49 f4       	brne	.+18     	; 0x32e <__vector_6+0x60>
        nodeMissTracker++;
     31c:	80 91 16 03 	lds	r24, 0x0316
     320:	90 91 17 03 	lds	r25, 0x0317
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	90 93 17 03 	sts	0x0317, r25
     32a:	80 93 16 03 	sts	0x0316, r24

    if(nodeMissTracker > 60)
     32e:	80 91 16 03 	lds	r24, 0x0316
     332:	90 91 17 03 	lds	r25, 0x0317
     336:	8d 33       	cpi	r24, 0x3D	; 61
     338:	91 05       	cpc	r25, r1
     33a:	34 f0       	brlt	.+12     	; 0x348 <__vector_6+0x7a>
        nodeMissedFlag = 1;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	90 93 19 03 	sts	0x0319, r25
     344:	80 93 18 03 	sts	0x0318, r24
}
     348:	cf 91       	pop	r28
     34a:	df 91       	pop	r29
     34c:	bf 91       	pop	r27
     34e:	af 91       	pop	r26
     350:	9f 91       	pop	r25
     352:	8f 91       	pop	r24
     354:	0f 90       	pop	r0
     356:	0f be       	out	0x3f, r0	; 63
     358:	0f 90       	pop	r0
     35a:	1f 90       	pop	r1
     35c:	18 95       	reti

0000035e <__vector_5>:

//ISR for left position encoder
ISR(INT4_vect)
{
     35e:	1f 92       	push	r1
     360:	0f 92       	push	r0
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	0f 92       	push	r0
     366:	11 24       	eor	r1, r1
     368:	8f 93       	push	r24
     36a:	9f 93       	push	r25
     36c:	af 93       	push	r26
     36e:	bf 93       	push	r27
     370:	df 93       	push	r29
     372:	cf 93       	push	r28
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft++;  //increment left shaft position count
     378:	80 91 0e 03 	lds	r24, 0x030E
     37c:	90 91 0f 03 	lds	r25, 0x030F
     380:	a0 91 10 03 	lds	r26, 0x0310
     384:	b0 91 11 03 	lds	r27, 0x0311
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	a1 1d       	adc	r26, r1
     38c:	b1 1d       	adc	r27, r1
     38e:	80 93 0e 03 	sts	0x030E, r24
     392:	90 93 0f 03 	sts	0x030F, r25
     396:	a0 93 10 03 	sts	0x0310, r26
     39a:	b0 93 11 03 	sts	0x0311, r27
}
     39e:	cf 91       	pop	r28
     3a0:	df 91       	pop	r29
     3a2:	bf 91       	pop	r27
     3a4:	af 91       	pop	r26
     3a6:	9f 91       	pop	r25
     3a8:	8f 91       	pop	r24
     3aa:	0f 90       	pop	r0
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	0f 90       	pop	r0
     3b0:	1f 90       	pop	r1
     3b2:	18 95       	reti

000003b4 <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
     3b4:	df 93       	push	r29
     3b6:	cf 93       	push	r28
     3b8:	0f 92       	push	r0
     3ba:	0f 92       	push	r0
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
     3c2:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
     3c4:	8a 81       	ldd	r24, Y+2	; 0x02
     3c6:	8f 70       	andi	r24, 0x0F	; 15
     3c8:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 			// reading the PORTA's original status
     3ca:	e2 e2       	ldi	r30, 0x22	; 34
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     3d2:	89 81       	ldd	r24, Y+1	; 0x01
     3d4:	80 7f       	andi	r24, 0xF0	; 240
     3d6:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     3d8:	99 81       	ldd	r25, Y+1	; 0x01
     3da:	8a 81       	ldd	r24, Y+2	; 0x02
     3dc:	89 2b       	or	r24, r25
     3de:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 			// setting the command to the port
     3e0:	e2 e2       	ldi	r30, 0x22	; 34
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	80 83       	st	Z, r24
}
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	cf 91       	pop	r28
     3ee:	df 91       	pop	r29
     3f0:	08 95       	ret

000003f2 <forward>:


void forward (void) //both wheels forward
{
     3f2:	df 93       	push	r29
     3f4:	cf 93       	push	r28
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
    motion_set(0x06);
     3fa:	86 e0       	ldi	r24, 0x06	; 6
     3fc:	0e 94 da 01 	call	0x3b4	; 0x3b4 <motion_set>
}
     400:	cf 91       	pop	r28
     402:	df 91       	pop	r29
     404:	08 95       	ret

00000406 <forward_mm>:

void forward_mm(unsigned int distance)
{
     406:	df 93       	push	r29
     408:	cf 93       	push	r28
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	2a 97       	sbiw	r28, 0x0a	; 10
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	9a 87       	std	Y+10, r25	; 0x0a
     41c:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	a0 e0       	ldi	r26, 0x00	; 0
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	8d 83       	std	Y+5, r24	; 0x05
     428:	9e 83       	std	Y+6, r25	; 0x06
     42a:	af 83       	std	Y+7, r26	; 0x07
     42c:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     42e:	19 82       	std	Y+1, r1	; 0x01
     430:	1a 82       	std	Y+2, r1	; 0x02
     432:	1b 82       	std	Y+3, r1	; 0x03
     434:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = distance / 5.338; // division by resolution to get shaft count
     436:	89 85       	ldd	r24, Y+9	; 0x09
     438:	9a 85       	ldd	r25, Y+10	; 0x0a
     43a:	cc 01       	movw	r24, r24
     43c:	a0 e0       	ldi	r26, 0x00	; 0
     43e:	b0 e0       	ldi	r27, 0x00	; 0
     440:	bc 01       	movw	r22, r24
     442:	cd 01       	movw	r24, r26
     444:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <__floatunsisf>
     448:	dc 01       	movw	r26, r24
     44a:	cb 01       	movw	r24, r22
     44c:	bc 01       	movw	r22, r24
     44e:	cd 01       	movw	r24, r26
     450:	25 ee       	ldi	r18, 0xE5	; 229
     452:	30 ed       	ldi	r19, 0xD0	; 208
     454:	4a ea       	ldi	r20, 0xAA	; 170
     456:	50 e4       	ldi	r21, 0x40	; 64
     458:	0e 94 de 23 	call	0x47bc	; 0x47bc <__divsf3>
     45c:	dc 01       	movw	r26, r24
     45e:	cb 01       	movw	r24, r22
     460:	8d 83       	std	Y+5, r24	; 0x05
     462:	9e 83       	std	Y+6, r25	; 0x06
     464:	af 83       	std	Y+7, r26	; 0x07
     466:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     468:	6d 81       	ldd	r22, Y+5	; 0x05
     46a:	7e 81       	ldd	r23, Y+6	; 0x06
     46c:	8f 81       	ldd	r24, Y+7	; 0x07
     46e:	98 85       	ldd	r25, Y+8	; 0x08
     470:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	89 83       	std	Y+1, r24	; 0x01
     47a:	9a 83       	std	Y+2, r25	; 0x02
     47c:	ab 83       	std	Y+3, r26	; 0x03
     47e:	bc 83       	std	Y+4, r27	; 0x04

	ShaftCountRight = 0;
     480:	10 92 12 03 	sts	0x0312, r1
     484:	10 92 13 03 	sts	0x0313, r1
     488:	10 92 14 03 	sts	0x0314, r1
     48c:	10 92 15 03 	sts	0x0315, r1
	ShaftCountLeft = 0;
     490:	10 92 0e 03 	sts	0x030E, r1
     494:	10 92 0f 03 	sts	0x030F, r1
     498:	10 92 10 03 	sts	0x0310, r1
     49c:	10 92 11 03 	sts	0x0311, r1
    forward();
     4a0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>

	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt || ShaftCountLeft > ReqdShaftCountInt)
     4a4:	20 91 12 03 	lds	r18, 0x0312
     4a8:	30 91 13 03 	lds	r19, 0x0313
     4ac:	40 91 14 03 	lds	r20, 0x0314
     4b0:	50 91 15 03 	lds	r21, 0x0315
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	ab 81       	ldd	r26, Y+3	; 0x03
     4ba:	bc 81       	ldd	r27, Y+4	; 0x04
     4bc:	82 17       	cp	r24, r18
     4be:	93 07       	cpc	r25, r19
     4c0:	a4 07       	cpc	r26, r20
     4c2:	b5 07       	cpc	r27, r21
     4c4:	88 f0       	brcs	.+34     	; 0x4e8 <forward_mm+0xe2>
     4c6:	20 91 0e 03 	lds	r18, 0x030E
     4ca:	30 91 0f 03 	lds	r19, 0x030F
     4ce:	40 91 10 03 	lds	r20, 0x0310
     4d2:	50 91 11 03 	lds	r21, 0x0311
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	9a 81       	ldd	r25, Y+2	; 0x02
     4da:	ab 81       	ldd	r26, Y+3	; 0x03
     4dc:	bc 81       	ldd	r27, Y+4	; 0x04
     4de:	82 17       	cp	r24, r18
     4e0:	93 07       	cpc	r25, r19
     4e2:	a4 07       	cpc	r26, r20
     4e4:	b5 07       	cpc	r27, r21
     4e6:	f0 f6       	brcc	.-68     	; 0x4a4 <forward_mm+0x9e>
		{
			break;
		}
	}
	stop(); //Stop robot
     4e8:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
}
     4ec:	2a 96       	adiw	r28, 0x0a	; 10
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	cd bf       	out	0x3d, r28	; 61
     4f8:	cf 91       	pop	r28
     4fa:	df 91       	pop	r29
     4fc:	08 95       	ret

000004fe <back>:

void back (void) //both wheels backward
{
     4fe:	df 93       	push	r29
     500:	cf 93       	push	r28
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
     506:	89 e0       	ldi	r24, 0x09	; 9
     508:	0e 94 da 01 	call	0x3b4	; 0x3b4 <motion_set>
}
     50c:	cf 91       	pop	r28
     50e:	df 91       	pop	r29
     510:	08 95       	ret

00000512 <back_mm>:

void back_mm (unsigned int distance)
{
     512:	df 93       	push	r29
     514:	cf 93       	push	r28
     516:	cd b7       	in	r28, 0x3d	; 61
     518:	de b7       	in	r29, 0x3e	; 62
     51a:	2a 97       	sbiw	r28, 0x0a	; 10
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	f8 94       	cli
     520:	de bf       	out	0x3e, r29	; 62
     522:	0f be       	out	0x3f, r0	; 63
     524:	cd bf       	out	0x3d, r28	; 61
     526:	9a 87       	std	Y+10, r25	; 0x0a
     528:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	a0 e0       	ldi	r26, 0x00	; 0
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	8d 83       	std	Y+5, r24	; 0x05
     534:	9e 83       	std	Y+6, r25	; 0x06
     536:	af 83       	std	Y+7, r26	; 0x07
     538:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     53a:	19 82       	std	Y+1, r1	; 0x01
     53c:	1a 82       	std	Y+2, r1	; 0x02
     53e:	1b 82       	std	Y+3, r1	; 0x03
     540:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = distance / 5.338; // division by resolution to get shaft count
     542:	89 85       	ldd	r24, Y+9	; 0x09
     544:	9a 85       	ldd	r25, Y+10	; 0x0a
     546:	cc 01       	movw	r24, r24
     548:	a0 e0       	ldi	r26, 0x00	; 0
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	bc 01       	movw	r22, r24
     54e:	cd 01       	movw	r24, r26
     550:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <__floatunsisf>
     554:	dc 01       	movw	r26, r24
     556:	cb 01       	movw	r24, r22
     558:	bc 01       	movw	r22, r24
     55a:	cd 01       	movw	r24, r26
     55c:	25 ee       	ldi	r18, 0xE5	; 229
     55e:	30 ed       	ldi	r19, 0xD0	; 208
     560:	4a ea       	ldi	r20, 0xAA	; 170
     562:	50 e4       	ldi	r21, 0x40	; 64
     564:	0e 94 de 23 	call	0x47bc	; 0x47bc <__divsf3>
     568:	dc 01       	movw	r26, r24
     56a:	cb 01       	movw	r24, r22
     56c:	8d 83       	std	Y+5, r24	; 0x05
     56e:	9e 83       	std	Y+6, r25	; 0x06
     570:	af 83       	std	Y+7, r26	; 0x07
     572:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     574:	6d 81       	ldd	r22, Y+5	; 0x05
     576:	7e 81       	ldd	r23, Y+6	; 0x06
     578:	8f 81       	ldd	r24, Y+7	; 0x07
     57a:	98 85       	ldd	r25, Y+8	; 0x08
     57c:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	89 83       	std	Y+1, r24	; 0x01
     586:	9a 83       	std	Y+2, r25	; 0x02
     588:	ab 83       	std	Y+3, r26	; 0x03
     58a:	bc 83       	std	Y+4, r27	; 0x04

    //Counting any one of the shaft counts.
	ShaftCountRight = 0;
     58c:	10 92 12 03 	sts	0x0312, r1
     590:	10 92 13 03 	sts	0x0313, r1
     594:	10 92 14 03 	sts	0x0314, r1
     598:	10 92 15 03 	sts	0x0315, r1
    back();
     59c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <back>

	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
     5a0:	20 91 12 03 	lds	r18, 0x0312
     5a4:	30 91 13 03 	lds	r19, 0x0313
     5a8:	40 91 14 03 	lds	r20, 0x0314
     5ac:	50 91 15 03 	lds	r21, 0x0315
     5b0:	89 81       	ldd	r24, Y+1	; 0x01
     5b2:	9a 81       	ldd	r25, Y+2	; 0x02
     5b4:	ab 81       	ldd	r26, Y+3	; 0x03
     5b6:	bc 81       	ldd	r27, Y+4	; 0x04
     5b8:	82 17       	cp	r24, r18
     5ba:	93 07       	cpc	r25, r19
     5bc:	a4 07       	cpc	r26, r20
     5be:	b5 07       	cpc	r27, r21
     5c0:	78 f7       	brcc	.-34     	; 0x5a0 <back_mm+0x8e>
		{
			break;
		}
	}
	stop(); //Stop robot
     5c2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
}
     5c6:	2a 96       	adiw	r28, 0x0a	; 10
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	cf 91       	pop	r28
     5d4:	df 91       	pop	r29
     5d6:	08 95       	ret

000005d8 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
     5d8:	df 93       	push	r29
     5da:	cf 93       	push	r28
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
     5e0:	85 e0       	ldi	r24, 0x05	; 5
     5e2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <motion_set>
}
     5e6:	cf 91       	pop	r28
     5e8:	df 91       	pop	r29
     5ea:	08 95       	ret

000005ec <left_degrees>:

void left_degrees(unsigned int degrees)
{
     5ec:	df 93       	push	r29
     5ee:	cf 93       	push	r28
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	2c 97       	sbiw	r28, 0x0c	; 12
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	9a 87       	std	Y+10, r25	; 0x0a
     602:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	a0 e0       	ldi	r26, 0x00	; 0
     60a:	b0 e0       	ldi	r27, 0x00	; 0
     60c:	8d 83       	std	Y+5, r24	; 0x05
     60e:	9e 83       	std	Y+6, r25	; 0x06
     610:	af 83       	std	Y+7, r26	; 0x07
     612:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     614:	19 82       	std	Y+1, r1	; 0x01
     616:	1a 82       	std	Y+2, r1	; 0x02
     618:	1b 82       	std	Y+3, r1	; 0x03
     61a:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees/ 4.090; // division by resolution to get shaft count
     61c:	89 85       	ldd	r24, Y+9	; 0x09
     61e:	9a 85       	ldd	r25, Y+10	; 0x0a
     620:	cc 01       	movw	r24, r24
     622:	a0 e0       	ldi	r26, 0x00	; 0
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	bc 01       	movw	r22, r24
     628:	cd 01       	movw	r24, r26
     62a:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <__floatunsisf>
     62e:	dc 01       	movw	r26, r24
     630:	cb 01       	movw	r24, r22
     632:	bc 01       	movw	r22, r24
     634:	cd 01       	movw	r24, r26
     636:	28 e4       	ldi	r18, 0x48	; 72
     638:	31 ee       	ldi	r19, 0xE1	; 225
     63a:	42 e8       	ldi	r20, 0x82	; 130
     63c:	50 e4       	ldi	r21, 0x40	; 64
     63e:	0e 94 de 23 	call	0x47bc	; 0x47bc <__divsf3>
     642:	dc 01       	movw	r26, r24
     644:	cb 01       	movw	r24, r22
     646:	8d 83       	std	Y+5, r24	; 0x05
     648:	9e 83       	std	Y+6, r25	; 0x06
     64a:	af 83       	std	Y+7, r26	; 0x07
     64c:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     64e:	6d 81       	ldd	r22, Y+5	; 0x05
     650:	7e 81       	ldd	r23, Y+6	; 0x06
     652:	8f 81       	ldd	r24, Y+7	; 0x07
     654:	98 85       	ldd	r25, Y+8	; 0x08
     656:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
     65a:	dc 01       	movw	r26, r24
     65c:	cb 01       	movw	r24, r22
     65e:	cc 01       	movw	r24, r24
     660:	a0 e0       	ldi	r26, 0x00	; 0
     662:	b0 e0       	ldi	r27, 0x00	; 0
     664:	89 83       	std	Y+1, r24	; 0x01
     666:	9a 83       	std	Y+2, r25	; 0x02
     668:	ab 83       	std	Y+3, r26	; 0x03
     66a:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     66c:	10 92 12 03 	sts	0x0312, r1
     670:	10 92 13 03 	sts	0x0313, r1
     674:	10 92 14 03 	sts	0x0314, r1
     678:	10 92 15 03 	sts	0x0315, r1
	ShaftCountLeft = 0;
     67c:	10 92 0e 03 	sts	0x030E, r1
     680:	10 92 0f 03 	sts	0x030F, r1
     684:	10 92 10 03 	sts	0x0310, r1
     688:	10 92 11 03 	sts	0x0311, r1

    left();
     68c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <left>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     690:	20 91 12 03 	lds	r18, 0x0312
     694:	30 91 13 03 	lds	r19, 0x0313
     698:	40 91 14 03 	lds	r20, 0x0314
     69c:	50 91 15 03 	lds	r21, 0x0315
     6a0:	1c 86       	std	Y+12, r1	; 0x0c
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	9a 81       	ldd	r25, Y+2	; 0x02
     6a6:	ab 81       	ldd	r26, Y+3	; 0x03
     6a8:	bc 81       	ldd	r27, Y+4	; 0x04
     6aa:	28 17       	cp	r18, r24
     6ac:	39 07       	cpc	r19, r25
     6ae:	4a 07       	cpc	r20, r26
     6b0:	5b 07       	cpc	r21, r27
     6b2:	10 f0       	brcs	.+4      	; 0x6b8 <left_degrees+0xcc>
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	8c 87       	std	Y+12, r24	; 0x0c
     6b8:	20 91 0e 03 	lds	r18, 0x030E
     6bc:	30 91 0f 03 	lds	r19, 0x030F
     6c0:	40 91 10 03 	lds	r20, 0x0310
     6c4:	50 91 11 03 	lds	r21, 0x0311
     6c8:	1b 86       	std	Y+11, r1	; 0x0b
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	9a 81       	ldd	r25, Y+2	; 0x02
     6ce:	ab 81       	ldd	r26, Y+3	; 0x03
     6d0:	bc 81       	ldd	r27, Y+4	; 0x04
     6d2:	28 17       	cp	r18, r24
     6d4:	39 07       	cpc	r19, r25
     6d6:	4a 07       	cpc	r20, r26
     6d8:	5b 07       	cpc	r21, r27
     6da:	10 f0       	brcs	.+4      	; 0x6e0 <left_degrees+0xf4>
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	9b 87       	std	Y+11, r25	; 0x0b
     6e0:	8c 85       	ldd	r24, Y+12	; 0x0c
     6e2:	9b 85       	ldd	r25, Y+11	; 0x0b
     6e4:	89 2b       	or	r24, r25
     6e6:	88 23       	and	r24, r24
     6e8:	99 f2       	breq	.-90     	; 0x690 <left_degrees+0xa4>
		break;
	}
	stop(); //Stop robot
     6ea:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
}
     6ee:	2c 96       	adiw	r28, 0x0c	; 12
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
     6fa:	cf 91       	pop	r28
     6fc:	df 91       	pop	r29
     6fe:	08 95       	ret

00000700 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
     700:	df 93       	push	r29
     702:	cf 93       	push	r28
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
     708:	8a e0       	ldi	r24, 0x0A	; 10
     70a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <motion_set>
}
     70e:	cf 91       	pop	r28
     710:	df 91       	pop	r29
     712:	08 95       	ret

00000714 <right_degrees>:

void right_degrees(unsigned int degrees)
{
     714:	df 93       	push	r29
     716:	cf 93       	push	r28
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	2c 97       	sbiw	r28, 0x0c	; 12
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	de bf       	out	0x3e, r29	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	cd bf       	out	0x3d, r28	; 61
     728:	9a 87       	std	Y+10, r25	; 0x0a
     72a:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	a0 e0       	ldi	r26, 0x00	; 0
     732:	b0 e0       	ldi	r27, 0x00	; 0
     734:	8d 83       	std	Y+5, r24	; 0x05
     736:	9e 83       	std	Y+6, r25	; 0x06
     738:	af 83       	std	Y+7, r26	; 0x07
     73a:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     73c:	19 82       	std	Y+1, r1	; 0x01
     73e:	1a 82       	std	Y+2, r1	; 0x02
     740:	1b 82       	std	Y+3, r1	; 0x03
     742:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees/ 4.090; // division by resolution to get shaft count
     744:	89 85       	ldd	r24, Y+9	; 0x09
     746:	9a 85       	ldd	r25, Y+10	; 0x0a
     748:	cc 01       	movw	r24, r24
     74a:	a0 e0       	ldi	r26, 0x00	; 0
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	bc 01       	movw	r22, r24
     750:	cd 01       	movw	r24, r26
     752:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <__floatunsisf>
     756:	dc 01       	movw	r26, r24
     758:	cb 01       	movw	r24, r22
     75a:	bc 01       	movw	r22, r24
     75c:	cd 01       	movw	r24, r26
     75e:	28 e4       	ldi	r18, 0x48	; 72
     760:	31 ee       	ldi	r19, 0xE1	; 225
     762:	42 e8       	ldi	r20, 0x82	; 130
     764:	50 e4       	ldi	r21, 0x40	; 64
     766:	0e 94 de 23 	call	0x47bc	; 0x47bc <__divsf3>
     76a:	dc 01       	movw	r26, r24
     76c:	cb 01       	movw	r24, r22
     76e:	8d 83       	std	Y+5, r24	; 0x05
     770:	9e 83       	std	Y+6, r25	; 0x06
     772:	af 83       	std	Y+7, r26	; 0x07
     774:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     776:	6d 81       	ldd	r22, Y+5	; 0x05
     778:	7e 81       	ldd	r23, Y+6	; 0x06
     77a:	8f 81       	ldd	r24, Y+7	; 0x07
     77c:	98 85       	ldd	r25, Y+8	; 0x08
     77e:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
     782:	dc 01       	movw	r26, r24
     784:	cb 01       	movw	r24, r22
     786:	cc 01       	movw	r24, r24
     788:	a0 e0       	ldi	r26, 0x00	; 0
     78a:	b0 e0       	ldi	r27, 0x00	; 0
     78c:	89 83       	std	Y+1, r24	; 0x01
     78e:	9a 83       	std	Y+2, r25	; 0x02
     790:	ab 83       	std	Y+3, r26	; 0x03
     792:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     794:	10 92 12 03 	sts	0x0312, r1
     798:	10 92 13 03 	sts	0x0313, r1
     79c:	10 92 14 03 	sts	0x0314, r1
     7a0:	10 92 15 03 	sts	0x0315, r1
	ShaftCountLeft = 0;
     7a4:	10 92 0e 03 	sts	0x030E, r1
     7a8:	10 92 0f 03 	sts	0x030F, r1
     7ac:	10 92 10 03 	sts	0x0310, r1
     7b0:	10 92 11 03 	sts	0x0311, r1

    right();
     7b4:	0e 94 80 03 	call	0x700	; 0x700 <right>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     7b8:	20 91 12 03 	lds	r18, 0x0312
     7bc:	30 91 13 03 	lds	r19, 0x0313
     7c0:	40 91 14 03 	lds	r20, 0x0314
     7c4:	50 91 15 03 	lds	r21, 0x0315
     7c8:	1c 86       	std	Y+12, r1	; 0x0c
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	9a 81       	ldd	r25, Y+2	; 0x02
     7ce:	ab 81       	ldd	r26, Y+3	; 0x03
     7d0:	bc 81       	ldd	r27, Y+4	; 0x04
     7d2:	28 17       	cp	r18, r24
     7d4:	39 07       	cpc	r19, r25
     7d6:	4a 07       	cpc	r20, r26
     7d8:	5b 07       	cpc	r21, r27
     7da:	10 f0       	brcs	.+4      	; 0x7e0 <right_degrees+0xcc>
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	8c 87       	std	Y+12, r24	; 0x0c
     7e0:	20 91 0e 03 	lds	r18, 0x030E
     7e4:	30 91 0f 03 	lds	r19, 0x030F
     7e8:	40 91 10 03 	lds	r20, 0x0310
     7ec:	50 91 11 03 	lds	r21, 0x0311
     7f0:	1b 86       	std	Y+11, r1	; 0x0b
     7f2:	89 81       	ldd	r24, Y+1	; 0x01
     7f4:	9a 81       	ldd	r25, Y+2	; 0x02
     7f6:	ab 81       	ldd	r26, Y+3	; 0x03
     7f8:	bc 81       	ldd	r27, Y+4	; 0x04
     7fa:	28 17       	cp	r18, r24
     7fc:	39 07       	cpc	r19, r25
     7fe:	4a 07       	cpc	r20, r26
     800:	5b 07       	cpc	r21, r27
     802:	10 f0       	brcs	.+4      	; 0x808 <right_degrees+0xf4>
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	9b 87       	std	Y+11, r25	; 0x0b
     808:	8c 85       	ldd	r24, Y+12	; 0x0c
     80a:	9b 85       	ldd	r25, Y+11	; 0x0b
     80c:	89 2b       	or	r24, r25
     80e:	88 23       	and	r24, r24
     810:	99 f2       	breq	.-90     	; 0x7b8 <right_degrees+0xa4>
		break;
	}
	stop(); //Stop robot
     812:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
}
     816:	2c 96       	adiw	r28, 0x0c	; 12
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	cf 91       	pop	r28
     824:	df 91       	pop	r29
     826:	08 95       	ret

00000828 <soft_left>:


void soft_left (void) //Left wheel stationary, Right wheel forward
{
     828:	df 93       	push	r29
     82a:	cf 93       	push	r28
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
     830:	84 e0       	ldi	r24, 0x04	; 4
     832:	0e 94 da 01 	call	0x3b4	; 0x3b4 <motion_set>
}
     836:	cf 91       	pop	r28
     838:	df 91       	pop	r29
     83a:	08 95       	ret

0000083c <soft_left_degrees>:

void soft_left_degrees(unsigned int degrees)
{
     83c:	df 93       	push	r29
     83e:	cf 93       	push	r28
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
     844:	2c 97       	sbiw	r28, 0x0c	; 12
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	de bf       	out	0x3e, r29	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	9a 87       	std	Y+10, r25	; 0x0a
     852:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	8d 83       	std	Y+5, r24	; 0x05
     85e:	9e 83       	std	Y+6, r25	; 0x06
     860:	af 83       	std	Y+7, r26	; 0x07
     862:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     864:	19 82       	std	Y+1, r1	; 0x01
     866:	1a 82       	std	Y+2, r1	; 0x02
     868:	1b 82       	std	Y+3, r1	; 0x03
     86a:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees * 2 / 4.090; // division by resolution to get shaft count
     86c:	89 85       	ldd	r24, Y+9	; 0x09
     86e:	9a 85       	ldd	r25, Y+10	; 0x0a
     870:	cc 01       	movw	r24, r24
     872:	a0 e0       	ldi	r26, 0x00	; 0
     874:	b0 e0       	ldi	r27, 0x00	; 0
     876:	bc 01       	movw	r22, r24
     878:	cd 01       	movw	r24, r26
     87a:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <__floatunsisf>
     87e:	9b 01       	movw	r18, r22
     880:	ac 01       	movw	r20, r24
     882:	ca 01       	movw	r24, r20
     884:	b9 01       	movw	r22, r18
     886:	0e 94 b7 22 	call	0x456e	; 0x456e <__addsf3>
     88a:	dc 01       	movw	r26, r24
     88c:	cb 01       	movw	r24, r22
     88e:	bc 01       	movw	r22, r24
     890:	cd 01       	movw	r24, r26
     892:	28 e4       	ldi	r18, 0x48	; 72
     894:	31 ee       	ldi	r19, 0xE1	; 225
     896:	42 e8       	ldi	r20, 0x82	; 130
     898:	50 e4       	ldi	r21, 0x40	; 64
     89a:	0e 94 de 23 	call	0x47bc	; 0x47bc <__divsf3>
     89e:	dc 01       	movw	r26, r24
     8a0:	cb 01       	movw	r24, r22
     8a2:	8d 83       	std	Y+5, r24	; 0x05
     8a4:	9e 83       	std	Y+6, r25	; 0x06
     8a6:	af 83       	std	Y+7, r26	; 0x07
     8a8:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     8aa:	6d 81       	ldd	r22, Y+5	; 0x05
     8ac:	7e 81       	ldd	r23, Y+6	; 0x06
     8ae:	8f 81       	ldd	r24, Y+7	; 0x07
     8b0:	98 85       	ldd	r25, Y+8	; 0x08
     8b2:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
     8b6:	dc 01       	movw	r26, r24
     8b8:	cb 01       	movw	r24, r22
     8ba:	cc 01       	movw	r24, r24
     8bc:	a0 e0       	ldi	r26, 0x00	; 0
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	89 83       	std	Y+1, r24	; 0x01
     8c2:	9a 83       	std	Y+2, r25	; 0x02
     8c4:	ab 83       	std	Y+3, r26	; 0x03
     8c6:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     8c8:	10 92 12 03 	sts	0x0312, r1
     8cc:	10 92 13 03 	sts	0x0313, r1
     8d0:	10 92 14 03 	sts	0x0314, r1
     8d4:	10 92 15 03 	sts	0x0315, r1
	ShaftCountLeft = 0;
     8d8:	10 92 0e 03 	sts	0x030E, r1
     8dc:	10 92 0f 03 	sts	0x030F, r1
     8e0:	10 92 10 03 	sts	0x0310, r1
     8e4:	10 92 11 03 	sts	0x0311, r1

    soft_left();
     8e8:	0e 94 14 04 	call	0x828	; 0x828 <soft_left>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     8ec:	20 91 12 03 	lds	r18, 0x0312
     8f0:	30 91 13 03 	lds	r19, 0x0313
     8f4:	40 91 14 03 	lds	r20, 0x0314
     8f8:	50 91 15 03 	lds	r21, 0x0315
     8fc:	1c 86       	std	Y+12, r1	; 0x0c
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
     900:	9a 81       	ldd	r25, Y+2	; 0x02
     902:	ab 81       	ldd	r26, Y+3	; 0x03
     904:	bc 81       	ldd	r27, Y+4	; 0x04
     906:	28 17       	cp	r18, r24
     908:	39 07       	cpc	r19, r25
     90a:	4a 07       	cpc	r20, r26
     90c:	5b 07       	cpc	r21, r27
     90e:	10 f0       	brcs	.+4      	; 0x914 <soft_left_degrees+0xd8>
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	8c 87       	std	Y+12, r24	; 0x0c
     914:	20 91 0e 03 	lds	r18, 0x030E
     918:	30 91 0f 03 	lds	r19, 0x030F
     91c:	40 91 10 03 	lds	r20, 0x0310
     920:	50 91 11 03 	lds	r21, 0x0311
     924:	1b 86       	std	Y+11, r1	; 0x0b
     926:	89 81       	ldd	r24, Y+1	; 0x01
     928:	9a 81       	ldd	r25, Y+2	; 0x02
     92a:	ab 81       	ldd	r26, Y+3	; 0x03
     92c:	bc 81       	ldd	r27, Y+4	; 0x04
     92e:	28 17       	cp	r18, r24
     930:	39 07       	cpc	r19, r25
     932:	4a 07       	cpc	r20, r26
     934:	5b 07       	cpc	r21, r27
     936:	10 f0       	brcs	.+4      	; 0x93c <soft_left_degrees+0x100>
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	9b 87       	std	Y+11, r25	; 0x0b
     93c:	8c 85       	ldd	r24, Y+12	; 0x0c
     93e:	9b 85       	ldd	r25, Y+11	; 0x0b
     940:	89 2b       	or	r24, r25
     942:	88 23       	and	r24, r24
     944:	99 f2       	breq	.-90     	; 0x8ec <soft_left_degrees+0xb0>
		break;
	}
	stop(); //Stop robot
     946:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
}
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	cf 91       	pop	r28
     958:	df 91       	pop	r29
     95a:	08 95       	ret

0000095c <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
     95c:	df 93       	push	r29
     95e:	cf 93       	push	r28
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
     964:	82 e0       	ldi	r24, 0x02	; 2
     966:	0e 94 da 01 	call	0x3b4	; 0x3b4 <motion_set>
}
     96a:	cf 91       	pop	r28
     96c:	df 91       	pop	r29
     96e:	08 95       	ret

00000970 <soft_right_degrees>:

void soft_right_degrees(unsigned int degrees)
{
     970:	df 93       	push	r29
     972:	cf 93       	push	r28
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	2c 97       	sbiw	r28, 0x0c	; 12
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
     984:	9a 87       	std	Y+10, r25	; 0x0a
     986:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	a0 e0       	ldi	r26, 0x00	; 0
     98e:	b0 e0       	ldi	r27, 0x00	; 0
     990:	8d 83       	std	Y+5, r24	; 0x05
     992:	9e 83       	std	Y+6, r25	; 0x06
     994:	af 83       	std	Y+7, r26	; 0x07
     996:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     998:	19 82       	std	Y+1, r1	; 0x01
     99a:	1a 82       	std	Y+2, r1	; 0x02
     99c:	1b 82       	std	Y+3, r1	; 0x03
     99e:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees * 2 / 4.090; // division by resolution to get shaft count
     9a0:	89 85       	ldd	r24, Y+9	; 0x09
     9a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     9a4:	cc 01       	movw	r24, r24
     9a6:	a0 e0       	ldi	r26, 0x00	; 0
     9a8:	b0 e0       	ldi	r27, 0x00	; 0
     9aa:	bc 01       	movw	r22, r24
     9ac:	cd 01       	movw	r24, r26
     9ae:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <__floatunsisf>
     9b2:	9b 01       	movw	r18, r22
     9b4:	ac 01       	movw	r20, r24
     9b6:	ca 01       	movw	r24, r20
     9b8:	b9 01       	movw	r22, r18
     9ba:	0e 94 b7 22 	call	0x456e	; 0x456e <__addsf3>
     9be:	dc 01       	movw	r26, r24
     9c0:	cb 01       	movw	r24, r22
     9c2:	bc 01       	movw	r22, r24
     9c4:	cd 01       	movw	r24, r26
     9c6:	28 e4       	ldi	r18, 0x48	; 72
     9c8:	31 ee       	ldi	r19, 0xE1	; 225
     9ca:	42 e8       	ldi	r20, 0x82	; 130
     9cc:	50 e4       	ldi	r21, 0x40	; 64
     9ce:	0e 94 de 23 	call	0x47bc	; 0x47bc <__divsf3>
     9d2:	dc 01       	movw	r26, r24
     9d4:	cb 01       	movw	r24, r22
     9d6:	8d 83       	std	Y+5, r24	; 0x05
     9d8:	9e 83       	std	Y+6, r25	; 0x06
     9da:	af 83       	std	Y+7, r26	; 0x07
     9dc:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     9de:	6d 81       	ldd	r22, Y+5	; 0x05
     9e0:	7e 81       	ldd	r23, Y+6	; 0x06
     9e2:	8f 81       	ldd	r24, Y+7	; 0x07
     9e4:	98 85       	ldd	r25, Y+8	; 0x08
     9e6:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
     9ea:	dc 01       	movw	r26, r24
     9ec:	cb 01       	movw	r24, r22
     9ee:	cc 01       	movw	r24, r24
     9f0:	a0 e0       	ldi	r26, 0x00	; 0
     9f2:	b0 e0       	ldi	r27, 0x00	; 0
     9f4:	89 83       	std	Y+1, r24	; 0x01
     9f6:	9a 83       	std	Y+2, r25	; 0x02
     9f8:	ab 83       	std	Y+3, r26	; 0x03
     9fa:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     9fc:	10 92 12 03 	sts	0x0312, r1
     a00:	10 92 13 03 	sts	0x0313, r1
     a04:	10 92 14 03 	sts	0x0314, r1
     a08:	10 92 15 03 	sts	0x0315, r1
	ShaftCountLeft = 0;
     a0c:	10 92 0e 03 	sts	0x030E, r1
     a10:	10 92 0f 03 	sts	0x030F, r1
     a14:	10 92 10 03 	sts	0x0310, r1
     a18:	10 92 11 03 	sts	0x0311, r1

    soft_right();
     a1c:	0e 94 ae 04 	call	0x95c	; 0x95c <soft_right>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     a20:	20 91 12 03 	lds	r18, 0x0312
     a24:	30 91 13 03 	lds	r19, 0x0313
     a28:	40 91 14 03 	lds	r20, 0x0314
     a2c:	50 91 15 03 	lds	r21, 0x0315
     a30:	1c 86       	std	Y+12, r1	; 0x0c
     a32:	89 81       	ldd	r24, Y+1	; 0x01
     a34:	9a 81       	ldd	r25, Y+2	; 0x02
     a36:	ab 81       	ldd	r26, Y+3	; 0x03
     a38:	bc 81       	ldd	r27, Y+4	; 0x04
     a3a:	28 17       	cp	r18, r24
     a3c:	39 07       	cpc	r19, r25
     a3e:	4a 07       	cpc	r20, r26
     a40:	5b 07       	cpc	r21, r27
     a42:	10 f0       	brcs	.+4      	; 0xa48 <soft_right_degrees+0xd8>
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	8c 87       	std	Y+12, r24	; 0x0c
     a48:	20 91 0e 03 	lds	r18, 0x030E
     a4c:	30 91 0f 03 	lds	r19, 0x030F
     a50:	40 91 10 03 	lds	r20, 0x0310
     a54:	50 91 11 03 	lds	r21, 0x0311
     a58:	1b 86       	std	Y+11, r1	; 0x0b
     a5a:	89 81       	ldd	r24, Y+1	; 0x01
     a5c:	9a 81       	ldd	r25, Y+2	; 0x02
     a5e:	ab 81       	ldd	r26, Y+3	; 0x03
     a60:	bc 81       	ldd	r27, Y+4	; 0x04
     a62:	28 17       	cp	r18, r24
     a64:	39 07       	cpc	r19, r25
     a66:	4a 07       	cpc	r20, r26
     a68:	5b 07       	cpc	r21, r27
     a6a:	10 f0       	brcs	.+4      	; 0xa70 <soft_right_degrees+0x100>
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	9b 87       	std	Y+11, r25	; 0x0b
     a70:	8c 85       	ldd	r24, Y+12	; 0x0c
     a72:	9b 85       	ldd	r25, Y+11	; 0x0b
     a74:	89 2b       	or	r24, r25
     a76:	88 23       	and	r24, r24
     a78:	99 f2       	breq	.-90     	; 0xa20 <soft_right_degrees+0xb0>
		break;
	}
	stop(); //Stop robot
     a7a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
}
     a7e:	2c 96       	adiw	r28, 0x0c	; 12
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	cd bf       	out	0x3d, r28	; 61
     a8a:	cf 91       	pop	r28
     a8c:	df 91       	pop	r29
     a8e:	08 95       	ret

00000a90 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
     a90:	df 93       	push	r29
     a92:	cf 93       	push	r28
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <motion_set>
}
     a9e:	cf 91       	pop	r28
     aa0:	df 91       	pop	r29
     aa2:	08 95       	ret

00000aa4 <soft_left_degrees_2>:

void soft_left_degrees_2(unsigned int degrees)
{
     aa4:	df 93       	push	r29
     aa6:	cf 93       	push	r28
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	2c 97       	sbiw	r28, 0x0c	; 12
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	cd bf       	out	0x3d, r28	; 61
     ab8:	9a 87       	std	Y+10, r25	; 0x0a
     aba:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	8d 83       	std	Y+5, r24	; 0x05
     ac6:	9e 83       	std	Y+6, r25	; 0x06
     ac8:	af 83       	std	Y+7, r26	; 0x07
     aca:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     acc:	19 82       	std	Y+1, r1	; 0x01
     ace:	1a 82       	std	Y+2, r1	; 0x02
     ad0:	1b 82       	std	Y+3, r1	; 0x03
     ad2:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees * 2 / 4.090; // division by resolution to get shaft count
     ad4:	89 85       	ldd	r24, Y+9	; 0x09
     ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ad8:	cc 01       	movw	r24, r24
     ada:	a0 e0       	ldi	r26, 0x00	; 0
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	bc 01       	movw	r22, r24
     ae0:	cd 01       	movw	r24, r26
     ae2:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <__floatunsisf>
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
     aea:	ca 01       	movw	r24, r20
     aec:	b9 01       	movw	r22, r18
     aee:	0e 94 b7 22 	call	0x456e	; 0x456e <__addsf3>
     af2:	dc 01       	movw	r26, r24
     af4:	cb 01       	movw	r24, r22
     af6:	bc 01       	movw	r22, r24
     af8:	cd 01       	movw	r24, r26
     afa:	28 e4       	ldi	r18, 0x48	; 72
     afc:	31 ee       	ldi	r19, 0xE1	; 225
     afe:	42 e8       	ldi	r20, 0x82	; 130
     b00:	50 e4       	ldi	r21, 0x40	; 64
     b02:	0e 94 de 23 	call	0x47bc	; 0x47bc <__divsf3>
     b06:	dc 01       	movw	r26, r24
     b08:	cb 01       	movw	r24, r22
     b0a:	8d 83       	std	Y+5, r24	; 0x05
     b0c:	9e 83       	std	Y+6, r25	; 0x06
     b0e:	af 83       	std	Y+7, r26	; 0x07
     b10:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     b12:	6d 81       	ldd	r22, Y+5	; 0x05
     b14:	7e 81       	ldd	r23, Y+6	; 0x06
     b16:	8f 81       	ldd	r24, Y+7	; 0x07
     b18:	98 85       	ldd	r25, Y+8	; 0x08
     b1a:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
     b1e:	dc 01       	movw	r26, r24
     b20:	cb 01       	movw	r24, r22
     b22:	cc 01       	movw	r24, r24
     b24:	a0 e0       	ldi	r26, 0x00	; 0
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	89 83       	std	Y+1, r24	; 0x01
     b2a:	9a 83       	std	Y+2, r25	; 0x02
     b2c:	ab 83       	std	Y+3, r26	; 0x03
     b2e:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     b30:	10 92 12 03 	sts	0x0312, r1
     b34:	10 92 13 03 	sts	0x0313, r1
     b38:	10 92 14 03 	sts	0x0314, r1
     b3c:	10 92 15 03 	sts	0x0315, r1
	ShaftCountLeft = 0;
     b40:	10 92 0e 03 	sts	0x030E, r1
     b44:	10 92 0f 03 	sts	0x030F, r1
     b48:	10 92 10 03 	sts	0x0310, r1
     b4c:	10 92 11 03 	sts	0x0311, r1

    soft_left_2();
     b50:	0e 94 48 05 	call	0xa90	; 0xa90 <soft_left_2>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     b54:	20 91 12 03 	lds	r18, 0x0312
     b58:	30 91 13 03 	lds	r19, 0x0313
     b5c:	40 91 14 03 	lds	r20, 0x0314
     b60:	50 91 15 03 	lds	r21, 0x0315
     b64:	1c 86       	std	Y+12, r1	; 0x0c
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	9a 81       	ldd	r25, Y+2	; 0x02
     b6a:	ab 81       	ldd	r26, Y+3	; 0x03
     b6c:	bc 81       	ldd	r27, Y+4	; 0x04
     b6e:	28 17       	cp	r18, r24
     b70:	39 07       	cpc	r19, r25
     b72:	4a 07       	cpc	r20, r26
     b74:	5b 07       	cpc	r21, r27
     b76:	10 f0       	brcs	.+4      	; 0xb7c <soft_left_degrees_2+0xd8>
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	8c 87       	std	Y+12, r24	; 0x0c
     b7c:	20 91 0e 03 	lds	r18, 0x030E
     b80:	30 91 0f 03 	lds	r19, 0x030F
     b84:	40 91 10 03 	lds	r20, 0x0310
     b88:	50 91 11 03 	lds	r21, 0x0311
     b8c:	1b 86       	std	Y+11, r1	; 0x0b
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	9a 81       	ldd	r25, Y+2	; 0x02
     b92:	ab 81       	ldd	r26, Y+3	; 0x03
     b94:	bc 81       	ldd	r27, Y+4	; 0x04
     b96:	28 17       	cp	r18, r24
     b98:	39 07       	cpc	r19, r25
     b9a:	4a 07       	cpc	r20, r26
     b9c:	5b 07       	cpc	r21, r27
     b9e:	10 f0       	brcs	.+4      	; 0xba4 <soft_left_degrees_2+0x100>
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	9b 87       	std	Y+11, r25	; 0x0b
     ba4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ba6:	9b 85       	ldd	r25, Y+11	; 0x0b
     ba8:	89 2b       	or	r24, r25
     baa:	88 23       	and	r24, r24
     bac:	99 f2       	breq	.-90     	; 0xb54 <soft_left_degrees_2+0xb0>
		break;
	}
	stop(); //Stop robot
     bae:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
}
     bb2:	2c 96       	adiw	r28, 0x0c	; 12
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
     bcc:	88 e0       	ldi	r24, 0x08	; 8
     bce:	0e 94 da 01 	call	0x3b4	; 0x3b4 <motion_set>
}
     bd2:	cf 91       	pop	r28
     bd4:	df 91       	pop	r29
     bd6:	08 95       	ret

00000bd8 <right_degrees_2>:

void right_degrees_2(unsigned int degrees)
{
     bd8:	df 93       	push	r29
     bda:	cf 93       	push	r28
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	2c 97       	sbiw	r28, 0x0c	; 12
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	de bf       	out	0x3e, r29	; 62
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	cd bf       	out	0x3d, r28	; 61
     bec:	9a 87       	std	Y+10, r25	; 0x0a
     bee:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	8d 83       	std	Y+5, r24	; 0x05
     bfa:	9e 83       	std	Y+6, r25	; 0x06
     bfc:	af 83       	std	Y+7, r26	; 0x07
     bfe:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     c00:	19 82       	std	Y+1, r1	; 0x01
     c02:	1a 82       	std	Y+2, r1	; 0x02
     c04:	1b 82       	std	Y+3, r1	; 0x03
     c06:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees * 2 / 4.090; // division by resolution to get shaft count
     c08:	89 85       	ldd	r24, Y+9	; 0x09
     c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0c:	cc 01       	movw	r24, r24
     c0e:	a0 e0       	ldi	r26, 0x00	; 0
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	bc 01       	movw	r22, r24
     c14:	cd 01       	movw	r24, r26
     c16:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <__floatunsisf>
     c1a:	9b 01       	movw	r18, r22
     c1c:	ac 01       	movw	r20, r24
     c1e:	ca 01       	movw	r24, r20
     c20:	b9 01       	movw	r22, r18
     c22:	0e 94 b7 22 	call	0x456e	; 0x456e <__addsf3>
     c26:	dc 01       	movw	r26, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	bc 01       	movw	r22, r24
     c2c:	cd 01       	movw	r24, r26
     c2e:	28 e4       	ldi	r18, 0x48	; 72
     c30:	31 ee       	ldi	r19, 0xE1	; 225
     c32:	42 e8       	ldi	r20, 0x82	; 130
     c34:	50 e4       	ldi	r21, 0x40	; 64
     c36:	0e 94 de 23 	call	0x47bc	; 0x47bc <__divsf3>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	8d 83       	std	Y+5, r24	; 0x05
     c40:	9e 83       	std	Y+6, r25	; 0x06
     c42:	af 83       	std	Y+7, r26	; 0x07
     c44:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     c46:	6d 81       	ldd	r22, Y+5	; 0x05
     c48:	7e 81       	ldd	r23, Y+6	; 0x06
     c4a:	8f 81       	ldd	r24, Y+7	; 0x07
     c4c:	98 85       	ldd	r25, Y+8	; 0x08
     c4e:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	cc 01       	movw	r24, r24
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	9a 83       	std	Y+2, r25	; 0x02
     c60:	ab 83       	std	Y+3, r26	; 0x03
     c62:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     c64:	10 92 12 03 	sts	0x0312, r1
     c68:	10 92 13 03 	sts	0x0313, r1
     c6c:	10 92 14 03 	sts	0x0314, r1
     c70:	10 92 15 03 	sts	0x0315, r1
	ShaftCountLeft = 0;
     c74:	10 92 0e 03 	sts	0x030E, r1
     c78:	10 92 0f 03 	sts	0x030F, r1
     c7c:	10 92 10 03 	sts	0x0310, r1
     c80:	10 92 11 03 	sts	0x0311, r1

    soft_right_2();
     c84:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <soft_right_2>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     c88:	20 91 12 03 	lds	r18, 0x0312
     c8c:	30 91 13 03 	lds	r19, 0x0313
     c90:	40 91 14 03 	lds	r20, 0x0314
     c94:	50 91 15 03 	lds	r21, 0x0315
     c98:	1c 86       	std	Y+12, r1	; 0x0c
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	9a 81       	ldd	r25, Y+2	; 0x02
     c9e:	ab 81       	ldd	r26, Y+3	; 0x03
     ca0:	bc 81       	ldd	r27, Y+4	; 0x04
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	10 f0       	brcs	.+4      	; 0xcb0 <right_degrees_2+0xd8>
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	8c 87       	std	Y+12, r24	; 0x0c
     cb0:	20 91 0e 03 	lds	r18, 0x030E
     cb4:	30 91 0f 03 	lds	r19, 0x030F
     cb8:	40 91 10 03 	lds	r20, 0x0310
     cbc:	50 91 11 03 	lds	r21, 0x0311
     cc0:	1b 86       	std	Y+11, r1	; 0x0b
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	9a 81       	ldd	r25, Y+2	; 0x02
     cc6:	ab 81       	ldd	r26, Y+3	; 0x03
     cc8:	bc 81       	ldd	r27, Y+4	; 0x04
     cca:	28 17       	cp	r18, r24
     ccc:	39 07       	cpc	r19, r25
     cce:	4a 07       	cpc	r20, r26
     cd0:	5b 07       	cpc	r21, r27
     cd2:	10 f0       	brcs	.+4      	; 0xcd8 <right_degrees_2+0x100>
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	9b 87       	std	Y+11, r25	; 0x0b
     cd8:	8c 85       	ldd	r24, Y+12	; 0x0c
     cda:	9b 85       	ldd	r25, Y+11	; 0x0b
     cdc:	89 2b       	or	r24, r25
     cde:	88 23       	and	r24, r24
     ce0:	99 f2       	breq	.-90     	; 0xc88 <right_degrees_2+0xb0>
		break;
	}
	stop(); //Stop robot
     ce2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
}
     ce6:	2c 96       	adiw	r28, 0x0c	; 12
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	cf 91       	pop	r28
     cf4:	df 91       	pop	r29
     cf6:	08 95       	ret

00000cf8 <stop>:

void stop (void) //hard stop
{
     cf8:	df 93       	push	r29
     cfa:	cf 93       	push	r28
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	0e 94 da 01 	call	0x3b4	; 0x3b4 <motion_set>
}
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <adc_pin_config>:
Available functions in the library, (Total : 2)
****************************************************************/
unsigned char ADC_Conversion(unsigned char);

void adc_pin_config()
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
    DDRF = 0x00;    //All ADC Channels on port F set as inputs
     d14:	e0 e3       	ldi	r30, 0x30	; 48
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	10 82       	st	Z, r1
    DDRK = 0x00;    //All ADC Channels on port K set as inputs.
     d1a:	e7 e0       	ldi	r30, 0x07	; 7
     d1c:	f1 e0       	ldi	r31, 0x01	; 1
     d1e:	10 82       	st	Z, r1
    PORTF = 0x00;   //All ADC pins on port F pulled low.
     d20:	e1 e3       	ldi	r30, 0x31	; 49
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	10 82       	st	Z, r1
    PORTK = 0x00;   //All ADC pins on port K pulled low.
     d26:	e8 e0       	ldi	r30, 0x08	; 8
     d28:	f1 e0       	ldi	r31, 0x01	; 1
     d2a:	10 82       	st	Z, r1
}
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret

00000d32 <set_ADC>:

void set_ADC()
{
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
    adc_pin_config();
     d3a:	0e 94 86 06 	call	0xd0c	; 0xd0c <adc_pin_config>

	ADCSRA = 0x00;
     d3e:	ea e7       	ldi	r30, 0x7A	; 122
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     d44:	eb e7       	ldi	r30, 0x7B	; 123
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     d4a:	ec e7       	ldi	r30, 0x7C	; 124
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 e2       	ldi	r24, 0x20	; 32
     d50:	80 83       	st	Z, r24
	ACSR = 0x80;        //Disable analog comparator.
     d52:	e0 e5       	ldi	r30, 0x50	; 80
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 e8       	ldi	r24, 0x80	; 128
     d58:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0 ( Prescalar 64)
     d5a:	ea e7       	ldi	r30, 0x7A	; 122
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	86 e8       	ldi	r24, 0x86	; 134
     d60:	80 83       	st	Z, r24
}
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <ADC_Conversion>:

//Function For ADC Conversion
//Value of ch can be 1-15 for single ended input.
//ADC resolution 8 bit.
unsigned char ADC_Conversion(unsigned char Ch)
{
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	0f 92       	push	r0
     d6e:	0f 92       	push	r0
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;

	if(Ch>7)
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	88 30       	cpi	r24, 0x08	; 8
     d7a:	20 f0       	brcs	.+8      	; 0xd84 <ADC_Conversion+0x1c>
        ADCSRB = 0x08;
     d7c:	eb e7       	ldi	r30, 0x7B	; 123
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	88 e0       	ldi	r24, 0x08	; 8
     d82:	80 83       	st	Z, r24

	Ch = Ch & 0x07;
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	87 70       	andi	r24, 0x07	; 7
     d88:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;
     d8a:	ec e7       	ldi	r30, 0x7C	; 124
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	80 62       	ori	r24, 0x20	; 32
     d92:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     d94:	aa e7       	ldi	r26, 0x7A	; 122
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	ea e7       	ldi	r30, 0x7A	; 122
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	80 64       	ori	r24, 0x40	; 64
     da0:	8c 93       	st	X, r24

	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     da2:	ea e7       	ldi	r30, 0x7A	; 122
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	88 2f       	mov	r24, r24
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	80 71       	andi	r24, 0x10	; 16
     dae:	90 70       	andi	r25, 0x00	; 0
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	b9 f3       	breq	.-18     	; 0xda2 <ADC_Conversion+0x3a>

	a=ADCH;
     db4:	e9 e7       	ldi	r30, 0x79	; 121
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10;       //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     dbc:	aa e7       	ldi	r26, 0x7A	; 122
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	ea e7       	ldi	r30, 0x7A	; 122
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	80 61       	ori	r24, 0x10	; 16
     dc8:	8c 93       	st	X, r24
	ADCSRB = 0x00;
     dca:	eb e7       	ldi	r30, 0x7B	; 123
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	10 82       	st	Z, r1
	return a;
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
}
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <set_lcd>:
unsigned int hundred;
unsigned int thousand;
unsigned int million;

void set_lcd()
{
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
    lcd_port_config();
     de4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <lcd_port_config>
    lcd_init();
     de8:	0e 94 0d 0c 	call	0x181a	; 0x181a <lcd_init>
}
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	08 95       	ret

00000df2 <lcd_port_config>:

void lcd_port_config (void)
{
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     dfa:	a7 e2       	ldi	r26, 0x27	; 39
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e7 e2       	ldi	r30, 0x27	; 39
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	87 6f       	ori	r24, 0xF7	; 247
     e06:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     e08:	a8 e2       	ldi	r26, 0x28	; 40
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e8 e2       	ldi	r30, 0x28	; 40
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	80 78       	andi	r24, 0x80	; 128
     e14:	8c 93       	st	X, r24
}
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <lcd_set_4bit>:

//Function to Reset LCD
void lcd_set_4bit()
{
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	c0 57       	subi	r28, 0x70	; 112
     e2a:	d0 40       	sbci	r29, 0x00	; 0
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	fe 01       	movw	r30, r28
     e38:	e3 59       	subi	r30, 0x93	; 147
     e3a:	ff 4f       	sbci	r31, 0xFF	; 255
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	a0 e8       	ldi	r26, 0x80	; 128
     e42:	bf e3       	ldi	r27, 0x3F	; 63
     e44:	80 83       	st	Z, r24
     e46:	91 83       	std	Z+1, r25	; 0x01
     e48:	a2 83       	std	Z+2, r26	; 0x02
     e4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e4c:	8e 01       	movw	r16, r28
     e4e:	07 59       	subi	r16, 0x97	; 151
     e50:	1f 4f       	sbci	r17, 0xFF	; 255
     e52:	fe 01       	movw	r30, r28
     e54:	e3 59       	subi	r30, 0x93	; 147
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	60 81       	ld	r22, Z
     e5a:	71 81       	ldd	r23, Z+1	; 0x01
     e5c:	82 81       	ldd	r24, Z+2	; 0x02
     e5e:	93 81       	ldd	r25, Z+3	; 0x03
     e60:	26 e6       	ldi	r18, 0x66	; 102
     e62:	36 e6       	ldi	r19, 0x66	; 102
     e64:	46 e6       	ldi	r20, 0x66	; 102
     e66:	55 e4       	ldi	r21, 0x45	; 69
     e68:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	f8 01       	movw	r30, r16
     e72:	80 83       	st	Z, r24
     e74:	91 83       	std	Z+1, r25	; 0x01
     e76:	a2 83       	std	Z+2, r26	; 0x02
     e78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e7a:	fe 01       	movw	r30, r28
     e7c:	e7 59       	subi	r30, 0x97	; 151
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	60 81       	ld	r22, Z
     e82:	71 81       	ldd	r23, Z+1	; 0x01
     e84:	82 81       	ldd	r24, Z+2	; 0x02
     e86:	93 81       	ldd	r25, Z+3	; 0x03
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e8       	ldi	r20, 0x80	; 128
     e8e:	5f e3       	ldi	r21, 0x3F	; 63
     e90:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
     e94:	88 23       	and	r24, r24
     e96:	44 f4       	brge	.+16     	; 0xea8 <lcd_set_4bit+0x8c>
		__ticks = 1;
     e98:	fe 01       	movw	r30, r28
     e9a:	e9 59       	subi	r30, 0x99	; 153
     e9c:	ff 4f       	sbci	r31, 0xFF	; 255
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	91 83       	std	Z+1, r25	; 0x01
     ea4:	80 83       	st	Z, r24
     ea6:	64 c0       	rjmp	.+200    	; 0xf70 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     ea8:	fe 01       	movw	r30, r28
     eaa:	e7 59       	subi	r30, 0x97	; 151
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	60 81       	ld	r22, Z
     eb0:	71 81       	ldd	r23, Z+1	; 0x01
     eb2:	82 81       	ldd	r24, Z+2	; 0x02
     eb4:	93 81       	ldd	r25, Z+3	; 0x03
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	3f ef       	ldi	r19, 0xFF	; 255
     eba:	4f e7       	ldi	r20, 0x7F	; 127
     ebc:	57 e4       	ldi	r21, 0x47	; 71
     ebe:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
     ec2:	18 16       	cp	r1, r24
     ec4:	0c f0       	brlt	.+2      	; 0xec8 <lcd_set_4bit+0xac>
     ec6:	43 c0       	rjmp	.+134    	; 0xf4e <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec8:	fe 01       	movw	r30, r28
     eca:	e3 59       	subi	r30, 0x93	; 147
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	60 81       	ld	r22, Z
     ed0:	71 81       	ldd	r23, Z+1	; 0x01
     ed2:	82 81       	ldd	r24, Z+2	; 0x02
     ed4:	93 81       	ldd	r25, Z+3	; 0x03
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	40 e2       	ldi	r20, 0x20	; 32
     edc:	51 e4       	ldi	r21, 0x41	; 65
     ede:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	8e 01       	movw	r16, r28
     ee8:	09 59       	subi	r16, 0x99	; 153
     eea:	1f 4f       	sbci	r17, 0xFF	; 255
     eec:	bc 01       	movw	r22, r24
     eee:	cd 01       	movw	r24, r26
     ef0:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	f8 01       	movw	r30, r16
     efa:	91 83       	std	Z+1, r25	; 0x01
     efc:	80 83       	st	Z, r24
     efe:	1f c0       	rjmp	.+62     	; 0xf3e <lcd_set_4bit+0x122>
     f00:	fe 01       	movw	r30, r28
     f02:	eb 59       	subi	r30, 0x9B	; 155
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	80 e7       	ldi	r24, 0x70	; 112
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	91 83       	std	Z+1, r25	; 0x01
     f0c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f0e:	fe 01       	movw	r30, r28
     f10:	eb 59       	subi	r30, 0x9B	; 155
     f12:	ff 4f       	sbci	r31, 0xFF	; 255
     f14:	80 81       	ld	r24, Z
     f16:	91 81       	ldd	r25, Z+1	; 0x01
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	f1 f7       	brne	.-4      	; 0xf18 <lcd_set_4bit+0xfc>
     f1c:	fe 01       	movw	r30, r28
     f1e:	eb 59       	subi	r30, 0x9B	; 155
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	91 83       	std	Z+1, r25	; 0x01
     f24:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f26:	de 01       	movw	r26, r28
     f28:	a9 59       	subi	r26, 0x99	; 153
     f2a:	bf 4f       	sbci	r27, 0xFF	; 255
     f2c:	fe 01       	movw	r30, r28
     f2e:	e9 59       	subi	r30, 0x99	; 153
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	80 81       	ld	r24, Z
     f34:	91 81       	ldd	r25, Z+1	; 0x01
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	11 96       	adiw	r26, 0x01	; 1
     f3a:	9c 93       	st	X, r25
     f3c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3e:	fe 01       	movw	r30, r28
     f40:	e9 59       	subi	r30, 0x99	; 153
     f42:	ff 4f       	sbci	r31, 0xFF	; 255
     f44:	80 81       	ld	r24, Z
     f46:	91 81       	ldd	r25, Z+1	; 0x01
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	d1 f6       	brne	.-76     	; 0xf00 <lcd_set_4bit+0xe4>
     f4c:	27 c0       	rjmp	.+78     	; 0xf9c <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f4e:	8e 01       	movw	r16, r28
     f50:	09 59       	subi	r16, 0x99	; 153
     f52:	1f 4f       	sbci	r17, 0xFF	; 255
     f54:	fe 01       	movw	r30, r28
     f56:	e7 59       	subi	r30, 0x97	; 151
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	60 81       	ld	r22, Z
     f5c:	71 81       	ldd	r23, Z+1	; 0x01
     f5e:	82 81       	ldd	r24, Z+2	; 0x02
     f60:	93 81       	ldd	r25, Z+3	; 0x03
     f62:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	f8 01       	movw	r30, r16
     f6c:	91 83       	std	Z+1, r25	; 0x01
     f6e:	80 83       	st	Z, r24
     f70:	de 01       	movw	r26, r28
     f72:	ad 59       	subi	r26, 0x9D	; 157
     f74:	bf 4f       	sbci	r27, 0xFF	; 255
     f76:	fe 01       	movw	r30, r28
     f78:	e9 59       	subi	r30, 0x99	; 153
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	8d 93       	st	X+, r24
     f82:	9c 93       	st	X, r25
     f84:	fe 01       	movw	r30, r28
     f86:	ed 59       	subi	r30, 0x9D	; 157
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	80 81       	ld	r24, Z
     f8c:	91 81       	ldd	r25, Z+1	; 0x01
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	f1 f7       	brne	.-4      	; 0xf8e <lcd_set_4bit+0x172>
     f92:	fe 01       	movw	r30, r28
     f94:	ed 59       	subi	r30, 0x9D	; 157
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	91 83       	std	Z+1, r25	; 0x01
     f9a:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     f9c:	a8 e2       	ldi	r26, 0x28	; 40
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e8 e2       	ldi	r30, 0x28	; 40
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	8e 7f       	andi	r24, 0xFE	; 254
     fa8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     faa:	a8 e2       	ldi	r26, 0x28	; 40
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e8 e2       	ldi	r30, 0x28	; 40
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	8d 7f       	andi	r24, 0xFD	; 253
     fb6:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     fb8:	e8 e2       	ldi	r30, 0x28	; 40
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 e3       	ldi	r24, 0x30	; 48
     fbe:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     fc0:	a8 e2       	ldi	r26, 0x28	; 40
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e8 e2       	ldi	r30, 0x28	; 40
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	84 60       	ori	r24, 0x04	; 4
     fcc:	8c 93       	st	X, r24
     fce:	fe 01       	movw	r30, r28
     fd0:	e1 5a       	subi	r30, 0xA1	; 161
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	a0 ea       	ldi	r26, 0xA0	; 160
     fda:	b0 e4       	ldi	r27, 0x40	; 64
     fdc:	80 83       	st	Z, r24
     fde:	91 83       	std	Z+1, r25	; 0x01
     fe0:	a2 83       	std	Z+2, r26	; 0x02
     fe2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe4:	8e 01       	movw	r16, r28
     fe6:	05 5a       	subi	r16, 0xA5	; 165
     fe8:	1f 4f       	sbci	r17, 0xFF	; 255
     fea:	fe 01       	movw	r30, r28
     fec:	e1 5a       	subi	r30, 0xA1	; 161
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	60 81       	ld	r22, Z
     ff2:	71 81       	ldd	r23, Z+1	; 0x01
     ff4:	82 81       	ldd	r24, Z+2	; 0x02
     ff6:	93 81       	ldd	r25, Z+3	; 0x03
     ff8:	26 e6       	ldi	r18, 0x66	; 102
     ffa:	36 e6       	ldi	r19, 0x66	; 102
     ffc:	46 e6       	ldi	r20, 0x66	; 102
     ffe:	55 e4       	ldi	r21, 0x45	; 69
    1000:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	f8 01       	movw	r30, r16
    100a:	80 83       	st	Z, r24
    100c:	91 83       	std	Z+1, r25	; 0x01
    100e:	a2 83       	std	Z+2, r26	; 0x02
    1010:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1012:	fe 01       	movw	r30, r28
    1014:	e5 5a       	subi	r30, 0xA5	; 165
    1016:	ff 4f       	sbci	r31, 0xFF	; 255
    1018:	60 81       	ld	r22, Z
    101a:	71 81       	ldd	r23, Z+1	; 0x01
    101c:	82 81       	ldd	r24, Z+2	; 0x02
    101e:	93 81       	ldd	r25, Z+3	; 0x03
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e8       	ldi	r20, 0x80	; 128
    1026:	5f e3       	ldi	r21, 0x3F	; 63
    1028:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    102c:	88 23       	and	r24, r24
    102e:	44 f4       	brge	.+16     	; 0x1040 <lcd_set_4bit+0x224>
		__ticks = 1;
    1030:	fe 01       	movw	r30, r28
    1032:	e7 5a       	subi	r30, 0xA7	; 167
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	91 83       	std	Z+1, r25	; 0x01
    103c:	80 83       	st	Z, r24
    103e:	64 c0       	rjmp	.+200    	; 0x1108 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
    1040:	fe 01       	movw	r30, r28
    1042:	e5 5a       	subi	r30, 0xA5	; 165
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	60 81       	ld	r22, Z
    1048:	71 81       	ldd	r23, Z+1	; 0x01
    104a:	82 81       	ldd	r24, Z+2	; 0x02
    104c:	93 81       	ldd	r25, Z+3	; 0x03
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	3f ef       	ldi	r19, 0xFF	; 255
    1052:	4f e7       	ldi	r20, 0x7F	; 127
    1054:	57 e4       	ldi	r21, 0x47	; 71
    1056:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    105a:	18 16       	cp	r1, r24
    105c:	0c f0       	brlt	.+2      	; 0x1060 <lcd_set_4bit+0x244>
    105e:	43 c0       	rjmp	.+134    	; 0x10e6 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1060:	fe 01       	movw	r30, r28
    1062:	e1 5a       	subi	r30, 0xA1	; 161
    1064:	ff 4f       	sbci	r31, 0xFF	; 255
    1066:	60 81       	ld	r22, Z
    1068:	71 81       	ldd	r23, Z+1	; 0x01
    106a:	82 81       	ldd	r24, Z+2	; 0x02
    106c:	93 81       	ldd	r25, Z+3	; 0x03
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e2       	ldi	r20, 0x20	; 32
    1074:	51 e4       	ldi	r21, 0x41	; 65
    1076:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	8e 01       	movw	r16, r28
    1080:	07 5a       	subi	r16, 0xA7	; 167
    1082:	1f 4f       	sbci	r17, 0xFF	; 255
    1084:	bc 01       	movw	r22, r24
    1086:	cd 01       	movw	r24, r26
    1088:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	f8 01       	movw	r30, r16
    1092:	91 83       	std	Z+1, r25	; 0x01
    1094:	80 83       	st	Z, r24
    1096:	1f c0       	rjmp	.+62     	; 0x10d6 <lcd_set_4bit+0x2ba>
    1098:	fe 01       	movw	r30, r28
    109a:	e9 5a       	subi	r30, 0xA9	; 169
    109c:	ff 4f       	sbci	r31, 0xFF	; 255
    109e:	80 e7       	ldi	r24, 0x70	; 112
    10a0:	91 e0       	ldi	r25, 0x01	; 1
    10a2:	91 83       	std	Z+1, r25	; 0x01
    10a4:	80 83       	st	Z, r24
    10a6:	fe 01       	movw	r30, r28
    10a8:	e9 5a       	subi	r30, 0xA9	; 169
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	80 81       	ld	r24, Z
    10ae:	91 81       	ldd	r25, Z+1	; 0x01
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <lcd_set_4bit+0x294>
    10b4:	fe 01       	movw	r30, r28
    10b6:	e9 5a       	subi	r30, 0xA9	; 169
    10b8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ba:	91 83       	std	Z+1, r25	; 0x01
    10bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10be:	de 01       	movw	r26, r28
    10c0:	a7 5a       	subi	r26, 0xA7	; 167
    10c2:	bf 4f       	sbci	r27, 0xFF	; 255
    10c4:	fe 01       	movw	r30, r28
    10c6:	e7 5a       	subi	r30, 0xA7	; 167
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	80 81       	ld	r24, Z
    10cc:	91 81       	ldd	r25, Z+1	; 0x01
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	11 96       	adiw	r26, 0x01	; 1
    10d2:	9c 93       	st	X, r25
    10d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d6:	fe 01       	movw	r30, r28
    10d8:	e7 5a       	subi	r30, 0xA7	; 167
    10da:	ff 4f       	sbci	r31, 0xFF	; 255
    10dc:	80 81       	ld	r24, Z
    10de:	91 81       	ldd	r25, Z+1	; 0x01
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	d1 f6       	brne	.-76     	; 0x1098 <lcd_set_4bit+0x27c>
    10e4:	27 c0       	rjmp	.+78     	; 0x1134 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e6:	8e 01       	movw	r16, r28
    10e8:	07 5a       	subi	r16, 0xA7	; 167
    10ea:	1f 4f       	sbci	r17, 0xFF	; 255
    10ec:	fe 01       	movw	r30, r28
    10ee:	e5 5a       	subi	r30, 0xA5	; 165
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	60 81       	ld	r22, Z
    10f4:	71 81       	ldd	r23, Z+1	; 0x01
    10f6:	82 81       	ldd	r24, Z+2	; 0x02
    10f8:	93 81       	ldd	r25, Z+3	; 0x03
    10fa:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	f8 01       	movw	r30, r16
    1104:	91 83       	std	Z+1, r25	; 0x01
    1106:	80 83       	st	Z, r24
    1108:	de 01       	movw	r26, r28
    110a:	ab 5a       	subi	r26, 0xAB	; 171
    110c:	bf 4f       	sbci	r27, 0xFF	; 255
    110e:	fe 01       	movw	r30, r28
    1110:	e7 5a       	subi	r30, 0xA7	; 167
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	80 81       	ld	r24, Z
    1116:	91 81       	ldd	r25, Z+1	; 0x01
    1118:	8d 93       	st	X+, r24
    111a:	9c 93       	st	X, r25
    111c:	fe 01       	movw	r30, r28
    111e:	eb 5a       	subi	r30, 0xAB	; 171
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	80 81       	ld	r24, Z
    1124:	91 81       	ldd	r25, Z+1	; 0x01
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	f1 f7       	brne	.-4      	; 0x1126 <lcd_set_4bit+0x30a>
    112a:	fe 01       	movw	r30, r28
    112c:	eb 5a       	subi	r30, 0xAB	; 171
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	91 83       	std	Z+1, r25	; 0x01
    1132:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1134:	a8 e2       	ldi	r26, 0x28	; 40
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e8 e2       	ldi	r30, 0x28	; 40
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	8b 7f       	andi	r24, 0xFB	; 251
    1140:	8c 93       	st	X, r24
    1142:	fe 01       	movw	r30, r28
    1144:	ef 5a       	subi	r30, 0xAF	; 175
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a0 e8       	ldi	r26, 0x80	; 128
    114e:	bf e3       	ldi	r27, 0x3F	; 63
    1150:	80 83       	st	Z, r24
    1152:	91 83       	std	Z+1, r25	; 0x01
    1154:	a2 83       	std	Z+2, r26	; 0x02
    1156:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1158:	8e 01       	movw	r16, r28
    115a:	03 5b       	subi	r16, 0xB3	; 179
    115c:	1f 4f       	sbci	r17, 0xFF	; 255
    115e:	fe 01       	movw	r30, r28
    1160:	ef 5a       	subi	r30, 0xAF	; 175
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	60 81       	ld	r22, Z
    1166:	71 81       	ldd	r23, Z+1	; 0x01
    1168:	82 81       	ldd	r24, Z+2	; 0x02
    116a:	93 81       	ldd	r25, Z+3	; 0x03
    116c:	26 e6       	ldi	r18, 0x66	; 102
    116e:	36 e6       	ldi	r19, 0x66	; 102
    1170:	46 e6       	ldi	r20, 0x66	; 102
    1172:	55 e4       	ldi	r21, 0x45	; 69
    1174:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	f8 01       	movw	r30, r16
    117e:	80 83       	st	Z, r24
    1180:	91 83       	std	Z+1, r25	; 0x01
    1182:	a2 83       	std	Z+2, r26	; 0x02
    1184:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1186:	fe 01       	movw	r30, r28
    1188:	e3 5b       	subi	r30, 0xB3	; 179
    118a:	ff 4f       	sbci	r31, 0xFF	; 255
    118c:	60 81       	ld	r22, Z
    118e:	71 81       	ldd	r23, Z+1	; 0x01
    1190:	82 81       	ldd	r24, Z+2	; 0x02
    1192:	93 81       	ldd	r25, Z+3	; 0x03
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	40 e8       	ldi	r20, 0x80	; 128
    119a:	5f e3       	ldi	r21, 0x3F	; 63
    119c:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    11a0:	88 23       	and	r24, r24
    11a2:	44 f4       	brge	.+16     	; 0x11b4 <lcd_set_4bit+0x398>
		__ticks = 1;
    11a4:	fe 01       	movw	r30, r28
    11a6:	e5 5b       	subi	r30, 0xB5	; 181
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	91 83       	std	Z+1, r25	; 0x01
    11b0:	80 83       	st	Z, r24
    11b2:	64 c0       	rjmp	.+200    	; 0x127c <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
    11b4:	fe 01       	movw	r30, r28
    11b6:	e3 5b       	subi	r30, 0xB3	; 179
    11b8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ba:	60 81       	ld	r22, Z
    11bc:	71 81       	ldd	r23, Z+1	; 0x01
    11be:	82 81       	ldd	r24, Z+2	; 0x02
    11c0:	93 81       	ldd	r25, Z+3	; 0x03
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	3f ef       	ldi	r19, 0xFF	; 255
    11c6:	4f e7       	ldi	r20, 0x7F	; 127
    11c8:	57 e4       	ldi	r21, 0x47	; 71
    11ca:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    11ce:	18 16       	cp	r1, r24
    11d0:	0c f0       	brlt	.+2      	; 0x11d4 <lcd_set_4bit+0x3b8>
    11d2:	43 c0       	rjmp	.+134    	; 0x125a <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d4:	fe 01       	movw	r30, r28
    11d6:	ef 5a       	subi	r30, 0xAF	; 175
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	60 81       	ld	r22, Z
    11dc:	71 81       	ldd	r23, Z+1	; 0x01
    11de:	82 81       	ldd	r24, Z+2	; 0x02
    11e0:	93 81       	ldd	r25, Z+3	; 0x03
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 e2       	ldi	r20, 0x20	; 32
    11e8:	51 e4       	ldi	r21, 0x41	; 65
    11ea:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	8e 01       	movw	r16, r28
    11f4:	05 5b       	subi	r16, 0xB5	; 181
    11f6:	1f 4f       	sbci	r17, 0xFF	; 255
    11f8:	bc 01       	movw	r22, r24
    11fa:	cd 01       	movw	r24, r26
    11fc:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	f8 01       	movw	r30, r16
    1206:	91 83       	std	Z+1, r25	; 0x01
    1208:	80 83       	st	Z, r24
    120a:	1f c0       	rjmp	.+62     	; 0x124a <lcd_set_4bit+0x42e>
    120c:	fe 01       	movw	r30, r28
    120e:	e7 5b       	subi	r30, 0xB7	; 183
    1210:	ff 4f       	sbci	r31, 0xFF	; 255
    1212:	80 e7       	ldi	r24, 0x70	; 112
    1214:	91 e0       	ldi	r25, 0x01	; 1
    1216:	91 83       	std	Z+1, r25	; 0x01
    1218:	80 83       	st	Z, r24
    121a:	fe 01       	movw	r30, r28
    121c:	e7 5b       	subi	r30, 0xB7	; 183
    121e:	ff 4f       	sbci	r31, 0xFF	; 255
    1220:	80 81       	ld	r24, Z
    1222:	91 81       	ldd	r25, Z+1	; 0x01
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <lcd_set_4bit+0x408>
    1228:	fe 01       	movw	r30, r28
    122a:	e7 5b       	subi	r30, 0xB7	; 183
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	91 83       	std	Z+1, r25	; 0x01
    1230:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1232:	de 01       	movw	r26, r28
    1234:	a5 5b       	subi	r26, 0xB5	; 181
    1236:	bf 4f       	sbci	r27, 0xFF	; 255
    1238:	fe 01       	movw	r30, r28
    123a:	e5 5b       	subi	r30, 0xB5	; 181
    123c:	ff 4f       	sbci	r31, 0xFF	; 255
    123e:	80 81       	ld	r24, Z
    1240:	91 81       	ldd	r25, Z+1	; 0x01
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	11 96       	adiw	r26, 0x01	; 1
    1246:	9c 93       	st	X, r25
    1248:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    124a:	fe 01       	movw	r30, r28
    124c:	e5 5b       	subi	r30, 0xB5	; 181
    124e:	ff 4f       	sbci	r31, 0xFF	; 255
    1250:	80 81       	ld	r24, Z
    1252:	91 81       	ldd	r25, Z+1	; 0x01
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	d1 f6       	brne	.-76     	; 0x120c <lcd_set_4bit+0x3f0>
    1258:	27 c0       	rjmp	.+78     	; 0x12a8 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    125a:	8e 01       	movw	r16, r28
    125c:	05 5b       	subi	r16, 0xB5	; 181
    125e:	1f 4f       	sbci	r17, 0xFF	; 255
    1260:	fe 01       	movw	r30, r28
    1262:	e3 5b       	subi	r30, 0xB3	; 179
    1264:	ff 4f       	sbci	r31, 0xFF	; 255
    1266:	60 81       	ld	r22, Z
    1268:	71 81       	ldd	r23, Z+1	; 0x01
    126a:	82 81       	ldd	r24, Z+2	; 0x02
    126c:	93 81       	ldd	r25, Z+3	; 0x03
    126e:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	f8 01       	movw	r30, r16
    1278:	91 83       	std	Z+1, r25	; 0x01
    127a:	80 83       	st	Z, r24
    127c:	de 01       	movw	r26, r28
    127e:	a9 5b       	subi	r26, 0xB9	; 185
    1280:	bf 4f       	sbci	r27, 0xFF	; 255
    1282:	fe 01       	movw	r30, r28
    1284:	e5 5b       	subi	r30, 0xB5	; 181
    1286:	ff 4f       	sbci	r31, 0xFF	; 255
    1288:	80 81       	ld	r24, Z
    128a:	91 81       	ldd	r25, Z+1	; 0x01
    128c:	8d 93       	st	X+, r24
    128e:	9c 93       	st	X, r25
    1290:	fe 01       	movw	r30, r28
    1292:	e9 5b       	subi	r30, 0xB9	; 185
    1294:	ff 4f       	sbci	r31, 0xFF	; 255
    1296:	80 81       	ld	r24, Z
    1298:	91 81       	ldd	r25, Z+1	; 0x01
    129a:	01 97       	sbiw	r24, 0x01	; 1
    129c:	f1 f7       	brne	.-4      	; 0x129a <lcd_set_4bit+0x47e>
    129e:	fe 01       	movw	r30, r28
    12a0:	e9 5b       	subi	r30, 0xB9	; 185
    12a2:	ff 4f       	sbci	r31, 0xFF	; 255
    12a4:	91 83       	std	Z+1, r25	; 0x01
    12a6:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    12a8:	a8 e2       	ldi	r26, 0x28	; 40
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e8 e2       	ldi	r30, 0x28	; 40
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	8e 7f       	andi	r24, 0xFE	; 254
    12b4:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    12b6:	a8 e2       	ldi	r26, 0x28	; 40
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e8 e2       	ldi	r30, 0x28	; 40
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	8d 7f       	andi	r24, 0xFD	; 253
    12c2:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
    12c4:	e8 e2       	ldi	r30, 0x28	; 40
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 e3       	ldi	r24, 0x30	; 48
    12ca:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    12cc:	a8 e2       	ldi	r26, 0x28	; 40
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e8 e2       	ldi	r30, 0x28	; 40
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	84 60       	ori	r24, 0x04	; 4
    12d8:	8c 93       	st	X, r24
    12da:	fe 01       	movw	r30, r28
    12dc:	ed 5b       	subi	r30, 0xBD	; 189
    12de:	ff 4f       	sbci	r31, 0xFF	; 255
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	a0 ea       	ldi	r26, 0xA0	; 160
    12e6:	b0 e4       	ldi	r27, 0x40	; 64
    12e8:	80 83       	st	Z, r24
    12ea:	91 83       	std	Z+1, r25	; 0x01
    12ec:	a2 83       	std	Z+2, r26	; 0x02
    12ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f0:	8e 01       	movw	r16, r28
    12f2:	01 5c       	subi	r16, 0xC1	; 193
    12f4:	1f 4f       	sbci	r17, 0xFF	; 255
    12f6:	fe 01       	movw	r30, r28
    12f8:	ed 5b       	subi	r30, 0xBD	; 189
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	60 81       	ld	r22, Z
    12fe:	71 81       	ldd	r23, Z+1	; 0x01
    1300:	82 81       	ldd	r24, Z+2	; 0x02
    1302:	93 81       	ldd	r25, Z+3	; 0x03
    1304:	26 e6       	ldi	r18, 0x66	; 102
    1306:	36 e6       	ldi	r19, 0x66	; 102
    1308:	46 e6       	ldi	r20, 0x66	; 102
    130a:	55 e4       	ldi	r21, 0x45	; 69
    130c:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	f8 01       	movw	r30, r16
    1316:	80 83       	st	Z, r24
    1318:	91 83       	std	Z+1, r25	; 0x01
    131a:	a2 83       	std	Z+2, r26	; 0x02
    131c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    131e:	fe 01       	movw	r30, r28
    1320:	ff 96       	adiw	r30, 0x3f	; 63
    1322:	60 81       	ld	r22, Z
    1324:	71 81       	ldd	r23, Z+1	; 0x01
    1326:	82 81       	ldd	r24, Z+2	; 0x02
    1328:	93 81       	ldd	r25, Z+3	; 0x03
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	40 e8       	ldi	r20, 0x80	; 128
    1330:	5f e3       	ldi	r21, 0x3F	; 63
    1332:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    1336:	88 23       	and	r24, r24
    1338:	2c f4       	brge	.+10     	; 0x1344 <lcd_set_4bit+0x528>
		__ticks = 1;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	9e af       	std	Y+62, r25	; 0x3e
    1340:	8d af       	std	Y+61, r24	; 0x3d
    1342:	46 c0       	rjmp	.+140    	; 0x13d0 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
    1344:	fe 01       	movw	r30, r28
    1346:	ff 96       	adiw	r30, 0x3f	; 63
    1348:	60 81       	ld	r22, Z
    134a:	71 81       	ldd	r23, Z+1	; 0x01
    134c:	82 81       	ldd	r24, Z+2	; 0x02
    134e:	93 81       	ldd	r25, Z+3	; 0x03
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	3f ef       	ldi	r19, 0xFF	; 255
    1354:	4f e7       	ldi	r20, 0x7F	; 127
    1356:	57 e4       	ldi	r21, 0x47	; 71
    1358:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    135c:	18 16       	cp	r1, r24
    135e:	64 f5       	brge	.+88     	; 0x13b8 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1360:	fe 01       	movw	r30, r28
    1362:	ed 5b       	subi	r30, 0xBD	; 189
    1364:	ff 4f       	sbci	r31, 0xFF	; 255
    1366:	60 81       	ld	r22, Z
    1368:	71 81       	ldd	r23, Z+1	; 0x01
    136a:	82 81       	ldd	r24, Z+2	; 0x02
    136c:	93 81       	ldd	r25, Z+3	; 0x03
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e2       	ldi	r20, 0x20	; 32
    1374:	51 e4       	ldi	r21, 0x41	; 65
    1376:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	bc 01       	movw	r22, r24
    1380:	cd 01       	movw	r24, r26
    1382:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	9e af       	std	Y+62, r25	; 0x3e
    138c:	8d af       	std	Y+61, r24	; 0x3d
    138e:	0f c0       	rjmp	.+30     	; 0x13ae <lcd_set_4bit+0x592>
    1390:	80 e7       	ldi	r24, 0x70	; 112
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	9c af       	std	Y+60, r25	; 0x3c
    1396:	8b af       	std	Y+59, r24	; 0x3b
    1398:	8b ad       	ldd	r24, Y+59	; 0x3b
    139a:	9c ad       	ldd	r25, Y+60	; 0x3c
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	f1 f7       	brne	.-4      	; 0x139c <lcd_set_4bit+0x580>
    13a0:	9c af       	std	Y+60, r25	; 0x3c
    13a2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    13a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	9e af       	std	Y+62, r25	; 0x3e
    13ac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    13b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	69 f7       	brne	.-38     	; 0x1390 <lcd_set_4bit+0x574>
    13b6:	16 c0       	rjmp	.+44     	; 0x13e4 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b8:	fe 01       	movw	r30, r28
    13ba:	ff 96       	adiw	r30, 0x3f	; 63
    13bc:	60 81       	ld	r22, Z
    13be:	71 81       	ldd	r23, Z+1	; 0x01
    13c0:	82 81       	ldd	r24, Z+2	; 0x02
    13c2:	93 81       	ldd	r25, Z+3	; 0x03
    13c4:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	9e af       	std	Y+62, r25	; 0x3e
    13ce:	8d af       	std	Y+61, r24	; 0x3d
    13d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    13d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    13d4:	9a af       	std	Y+58, r25	; 0x3a
    13d6:	89 af       	std	Y+57, r24	; 0x39
    13d8:	89 ad       	ldd	r24, Y+57	; 0x39
    13da:	9a ad       	ldd	r25, Y+58	; 0x3a
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <lcd_set_4bit+0x5c0>
    13e0:	9a af       	std	Y+58, r25	; 0x3a
    13e2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    13e4:	a8 e2       	ldi	r26, 0x28	; 40
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e8 e2       	ldi	r30, 0x28	; 40
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	8b 7f       	andi	r24, 0xFB	; 251
    13f0:	8c 93       	st	X, r24
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	a0 e8       	ldi	r26, 0x80	; 128
    13f8:	bf e3       	ldi	r27, 0x3F	; 63
    13fa:	8d ab       	std	Y+53, r24	; 0x35
    13fc:	9e ab       	std	Y+54, r25	; 0x36
    13fe:	af ab       	std	Y+55, r26	; 0x37
    1400:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1402:	6d a9       	ldd	r22, Y+53	; 0x35
    1404:	7e a9       	ldd	r23, Y+54	; 0x36
    1406:	8f a9       	ldd	r24, Y+55	; 0x37
    1408:	98 ad       	ldd	r25, Y+56	; 0x38
    140a:	26 e6       	ldi	r18, 0x66	; 102
    140c:	36 e6       	ldi	r19, 0x66	; 102
    140e:	46 e6       	ldi	r20, 0x66	; 102
    1410:	55 e4       	ldi	r21, 0x45	; 69
    1412:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	89 ab       	std	Y+49, r24	; 0x31
    141c:	9a ab       	std	Y+50, r25	; 0x32
    141e:	ab ab       	std	Y+51, r26	; 0x33
    1420:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1422:	69 a9       	ldd	r22, Y+49	; 0x31
    1424:	7a a9       	ldd	r23, Y+50	; 0x32
    1426:	8b a9       	ldd	r24, Y+51	; 0x33
    1428:	9c a9       	ldd	r25, Y+52	; 0x34
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e8       	ldi	r20, 0x80	; 128
    1430:	5f e3       	ldi	r21, 0x3F	; 63
    1432:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    1436:	88 23       	and	r24, r24
    1438:	2c f4       	brge	.+10     	; 0x1444 <lcd_set_4bit+0x628>
		__ticks = 1;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	98 ab       	std	Y+48, r25	; 0x30
    1440:	8f a7       	std	Y+47, r24	; 0x2f
    1442:	3f c0       	rjmp	.+126    	; 0x14c2 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
    1444:	69 a9       	ldd	r22, Y+49	; 0x31
    1446:	7a a9       	ldd	r23, Y+50	; 0x32
    1448:	8b a9       	ldd	r24, Y+51	; 0x33
    144a:	9c a9       	ldd	r25, Y+52	; 0x34
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	3f ef       	ldi	r19, 0xFF	; 255
    1450:	4f e7       	ldi	r20, 0x7F	; 127
    1452:	57 e4       	ldi	r21, 0x47	; 71
    1454:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    1458:	18 16       	cp	r1, r24
    145a:	4c f5       	brge	.+82     	; 0x14ae <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145c:	6d a9       	ldd	r22, Y+53	; 0x35
    145e:	7e a9       	ldd	r23, Y+54	; 0x36
    1460:	8f a9       	ldd	r24, Y+55	; 0x37
    1462:	98 ad       	ldd	r25, Y+56	; 0x38
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	40 e2       	ldi	r20, 0x20	; 32
    146a:	51 e4       	ldi	r21, 0x41	; 65
    146c:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	bc 01       	movw	r22, r24
    1476:	cd 01       	movw	r24, r26
    1478:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	98 ab       	std	Y+48, r25	; 0x30
    1482:	8f a7       	std	Y+47, r24	; 0x2f
    1484:	0f c0       	rjmp	.+30     	; 0x14a4 <lcd_set_4bit+0x688>
    1486:	80 e7       	ldi	r24, 0x70	; 112
    1488:	91 e0       	ldi	r25, 0x01	; 1
    148a:	9e a7       	std	Y+46, r25	; 0x2e
    148c:	8d a7       	std	Y+45, r24	; 0x2d
    148e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1490:	9e a5       	ldd	r25, Y+46	; 0x2e
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	f1 f7       	brne	.-4      	; 0x1492 <lcd_set_4bit+0x676>
    1496:	9e a7       	std	Y+46, r25	; 0x2e
    1498:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    149a:	8f a5       	ldd	r24, Y+47	; 0x2f
    149c:	98 a9       	ldd	r25, Y+48	; 0x30
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	98 ab       	std	Y+48, r25	; 0x30
    14a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    14a6:	98 a9       	ldd	r25, Y+48	; 0x30
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	69 f7       	brne	.-38     	; 0x1486 <lcd_set_4bit+0x66a>
    14ac:	14 c0       	rjmp	.+40     	; 0x14d6 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ae:	69 a9       	ldd	r22, Y+49	; 0x31
    14b0:	7a a9       	ldd	r23, Y+50	; 0x32
    14b2:	8b a9       	ldd	r24, Y+51	; 0x33
    14b4:	9c a9       	ldd	r25, Y+52	; 0x34
    14b6:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	98 ab       	std	Y+48, r25	; 0x30
    14c0:	8f a7       	std	Y+47, r24	; 0x2f
    14c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    14c4:	98 a9       	ldd	r25, Y+48	; 0x30
    14c6:	9c a7       	std	Y+44, r25	; 0x2c
    14c8:	8b a7       	std	Y+43, r24	; 0x2b
    14ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    14cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	f1 f7       	brne	.-4      	; 0x14ce <lcd_set_4bit+0x6b2>
    14d2:	9c a7       	std	Y+44, r25	; 0x2c
    14d4:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    14d6:	a8 e2       	ldi	r26, 0x28	; 40
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e8 e2       	ldi	r30, 0x28	; 40
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	8e 7f       	andi	r24, 0xFE	; 254
    14e2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    14e4:	a8 e2       	ldi	r26, 0x28	; 40
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e8 e2       	ldi	r30, 0x28	; 40
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8d 7f       	andi	r24, 0xFD	; 253
    14f0:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
    14f2:	e8 e2       	ldi	r30, 0x28	; 40
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 e3       	ldi	r24, 0x30	; 48
    14f8:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    14fa:	a8 e2       	ldi	r26, 0x28	; 40
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e8 e2       	ldi	r30, 0x28	; 40
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	84 60       	ori	r24, 0x04	; 4
    1506:	8c 93       	st	X, r24
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	a0 ea       	ldi	r26, 0xA0	; 160
    150e:	b0 e4       	ldi	r27, 0x40	; 64
    1510:	8f a3       	std	Y+39, r24	; 0x27
    1512:	98 a7       	std	Y+40, r25	; 0x28
    1514:	a9 a7       	std	Y+41, r26	; 0x29
    1516:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1518:	6f a1       	ldd	r22, Y+39	; 0x27
    151a:	78 a5       	ldd	r23, Y+40	; 0x28
    151c:	89 a5       	ldd	r24, Y+41	; 0x29
    151e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1520:	26 e6       	ldi	r18, 0x66	; 102
    1522:	36 e6       	ldi	r19, 0x66	; 102
    1524:	46 e6       	ldi	r20, 0x66	; 102
    1526:	55 e4       	ldi	r21, 0x45	; 69
    1528:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	8b a3       	std	Y+35, r24	; 0x23
    1532:	9c a3       	std	Y+36, r25	; 0x24
    1534:	ad a3       	std	Y+37, r26	; 0x25
    1536:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1538:	6b a1       	ldd	r22, Y+35	; 0x23
    153a:	7c a1       	ldd	r23, Y+36	; 0x24
    153c:	8d a1       	ldd	r24, Y+37	; 0x25
    153e:	9e a1       	ldd	r25, Y+38	; 0x26
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e8       	ldi	r20, 0x80	; 128
    1546:	5f e3       	ldi	r21, 0x3F	; 63
    1548:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    154c:	88 23       	and	r24, r24
    154e:	2c f4       	brge	.+10     	; 0x155a <lcd_set_4bit+0x73e>
		__ticks = 1;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	9a a3       	std	Y+34, r25	; 0x22
    1556:	89 a3       	std	Y+33, r24	; 0x21
    1558:	3f c0       	rjmp	.+126    	; 0x15d8 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
    155a:	6b a1       	ldd	r22, Y+35	; 0x23
    155c:	7c a1       	ldd	r23, Y+36	; 0x24
    155e:	8d a1       	ldd	r24, Y+37	; 0x25
    1560:	9e a1       	ldd	r25, Y+38	; 0x26
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	3f ef       	ldi	r19, 0xFF	; 255
    1566:	4f e7       	ldi	r20, 0x7F	; 127
    1568:	57 e4       	ldi	r21, 0x47	; 71
    156a:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    156e:	18 16       	cp	r1, r24
    1570:	4c f5       	brge	.+82     	; 0x15c4 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1572:	6f a1       	ldd	r22, Y+39	; 0x27
    1574:	78 a5       	ldd	r23, Y+40	; 0x28
    1576:	89 a5       	ldd	r24, Y+41	; 0x29
    1578:	9a a5       	ldd	r25, Y+42	; 0x2a
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	40 e2       	ldi	r20, 0x20	; 32
    1580:	51 e4       	ldi	r21, 0x41	; 65
    1582:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	bc 01       	movw	r22, r24
    158c:	cd 01       	movw	r24, r26
    158e:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	9a a3       	std	Y+34, r25	; 0x22
    1598:	89 a3       	std	Y+33, r24	; 0x21
    159a:	0f c0       	rjmp	.+30     	; 0x15ba <lcd_set_4bit+0x79e>
    159c:	80 e7       	ldi	r24, 0x70	; 112
    159e:	91 e0       	ldi	r25, 0x01	; 1
    15a0:	98 a3       	std	Y+32, r25	; 0x20
    15a2:	8f 8f       	std	Y+31, r24	; 0x1f
    15a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15a6:	98 a1       	ldd	r25, Y+32	; 0x20
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	f1 f7       	brne	.-4      	; 0x15a8 <lcd_set_4bit+0x78c>
    15ac:	98 a3       	std	Y+32, r25	; 0x20
    15ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b0:	89 a1       	ldd	r24, Y+33	; 0x21
    15b2:	9a a1       	ldd	r25, Y+34	; 0x22
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	9a a3       	std	Y+34, r25	; 0x22
    15b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ba:	89 a1       	ldd	r24, Y+33	; 0x21
    15bc:	9a a1       	ldd	r25, Y+34	; 0x22
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	69 f7       	brne	.-38     	; 0x159c <lcd_set_4bit+0x780>
    15c2:	14 c0       	rjmp	.+40     	; 0x15ec <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c4:	6b a1       	ldd	r22, Y+35	; 0x23
    15c6:	7c a1       	ldd	r23, Y+36	; 0x24
    15c8:	8d a1       	ldd	r24, Y+37	; 0x25
    15ca:	9e a1       	ldd	r25, Y+38	; 0x26
    15cc:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	9a a3       	std	Y+34, r25	; 0x22
    15d6:	89 a3       	std	Y+33, r24	; 0x21
    15d8:	89 a1       	ldd	r24, Y+33	; 0x21
    15da:	9a a1       	ldd	r25, Y+34	; 0x22
    15dc:	9e 8f       	std	Y+30, r25	; 0x1e
    15de:	8d 8f       	std	Y+29, r24	; 0x1d
    15e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <lcd_set_4bit+0x7c8>
    15e8:	9e 8f       	std	Y+30, r25	; 0x1e
    15ea:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    15ec:	a8 e2       	ldi	r26, 0x28	; 40
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e8 e2       	ldi	r30, 0x28	; 40
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	8b 7f       	andi	r24, 0xFB	; 251
    15f8:	8c 93       	st	X, r24
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	a0 e8       	ldi	r26, 0x80	; 128
    1600:	bf e3       	ldi	r27, 0x3F	; 63
    1602:	89 8f       	std	Y+25, r24	; 0x19
    1604:	9a 8f       	std	Y+26, r25	; 0x1a
    1606:	ab 8f       	std	Y+27, r26	; 0x1b
    1608:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    160a:	69 8d       	ldd	r22, Y+25	; 0x19
    160c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    160e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1610:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1612:	26 e6       	ldi	r18, 0x66	; 102
    1614:	36 e6       	ldi	r19, 0x66	; 102
    1616:	46 e6       	ldi	r20, 0x66	; 102
    1618:	55 e4       	ldi	r21, 0x45	; 69
    161a:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	8d 8b       	std	Y+21, r24	; 0x15
    1624:	9e 8b       	std	Y+22, r25	; 0x16
    1626:	af 8b       	std	Y+23, r26	; 0x17
    1628:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    162a:	6d 89       	ldd	r22, Y+21	; 0x15
    162c:	7e 89       	ldd	r23, Y+22	; 0x16
    162e:	8f 89       	ldd	r24, Y+23	; 0x17
    1630:	98 8d       	ldd	r25, Y+24	; 0x18
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e8       	ldi	r20, 0x80	; 128
    1638:	5f e3       	ldi	r21, 0x3F	; 63
    163a:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    163e:	88 23       	and	r24, r24
    1640:	2c f4       	brge	.+10     	; 0x164c <lcd_set_4bit+0x830>
		__ticks = 1;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	9c 8b       	std	Y+20, r25	; 0x14
    1648:	8b 8b       	std	Y+19, r24	; 0x13
    164a:	3f c0       	rjmp	.+126    	; 0x16ca <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
    164c:	6d 89       	ldd	r22, Y+21	; 0x15
    164e:	7e 89       	ldd	r23, Y+22	; 0x16
    1650:	8f 89       	ldd	r24, Y+23	; 0x17
    1652:	98 8d       	ldd	r25, Y+24	; 0x18
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	3f ef       	ldi	r19, 0xFF	; 255
    1658:	4f e7       	ldi	r20, 0x7F	; 127
    165a:	57 e4       	ldi	r21, 0x47	; 71
    165c:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    1660:	18 16       	cp	r1, r24
    1662:	4c f5       	brge	.+82     	; 0x16b6 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1664:	69 8d       	ldd	r22, Y+25	; 0x19
    1666:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1668:	8b 8d       	ldd	r24, Y+27	; 0x1b
    166a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	40 e2       	ldi	r20, 0x20	; 32
    1672:	51 e4       	ldi	r21, 0x41	; 65
    1674:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	bc 01       	movw	r22, r24
    167e:	cd 01       	movw	r24, r26
    1680:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	9c 8b       	std	Y+20, r25	; 0x14
    168a:	8b 8b       	std	Y+19, r24	; 0x13
    168c:	0f c0       	rjmp	.+30     	; 0x16ac <lcd_set_4bit+0x890>
    168e:	80 e7       	ldi	r24, 0x70	; 112
    1690:	91 e0       	ldi	r25, 0x01	; 1
    1692:	9a 8b       	std	Y+18, r25	; 0x12
    1694:	89 8b       	std	Y+17, r24	; 0x11
    1696:	89 89       	ldd	r24, Y+17	; 0x11
    1698:	9a 89       	ldd	r25, Y+18	; 0x12
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	f1 f7       	brne	.-4      	; 0x169a <lcd_set_4bit+0x87e>
    169e:	9a 8b       	std	Y+18, r25	; 0x12
    16a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a2:	8b 89       	ldd	r24, Y+19	; 0x13
    16a4:	9c 89       	ldd	r25, Y+20	; 0x14
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	9c 8b       	std	Y+20, r25	; 0x14
    16aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ac:	8b 89       	ldd	r24, Y+19	; 0x13
    16ae:	9c 89       	ldd	r25, Y+20	; 0x14
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	69 f7       	brne	.-38     	; 0x168e <lcd_set_4bit+0x872>
    16b4:	14 c0       	rjmp	.+40     	; 0x16de <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b6:	6d 89       	ldd	r22, Y+21	; 0x15
    16b8:	7e 89       	ldd	r23, Y+22	; 0x16
    16ba:	8f 89       	ldd	r24, Y+23	; 0x17
    16bc:	98 8d       	ldd	r25, Y+24	; 0x18
    16be:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	9c 8b       	std	Y+20, r25	; 0x14
    16c8:	8b 8b       	std	Y+19, r24	; 0x13
    16ca:	8b 89       	ldd	r24, Y+19	; 0x13
    16cc:	9c 89       	ldd	r25, Y+20	; 0x14
    16ce:	98 8b       	std	Y+16, r25	; 0x10
    16d0:	8f 87       	std	Y+15, r24	; 0x0f
    16d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d4:	98 89       	ldd	r25, Y+16	; 0x10
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <lcd_set_4bit+0x8ba>
    16da:	98 8b       	std	Y+16, r25	; 0x10
    16dc:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    16de:	a8 e2       	ldi	r26, 0x28	; 40
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	e8 e2       	ldi	r30, 0x28	; 40
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	8e 7f       	andi	r24, 0xFE	; 254
    16ea:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    16ec:	a8 e2       	ldi	r26, 0x28	; 40
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e8 e2       	ldi	r30, 0x28	; 40
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	8d 7f       	andi	r24, 0xFD	; 253
    16f8:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
    16fa:	e8 e2       	ldi	r30, 0x28	; 40
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 e2       	ldi	r24, 0x20	; 32
    1700:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    1702:	a8 e2       	ldi	r26, 0x28	; 40
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e8 e2       	ldi	r30, 0x28	; 40
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	84 60       	ori	r24, 0x04	; 4
    170e:	8c 93       	st	X, r24
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	a0 ea       	ldi	r26, 0xA0	; 160
    1716:	b0 e4       	ldi	r27, 0x40	; 64
    1718:	8b 87       	std	Y+11, r24	; 0x0b
    171a:	9c 87       	std	Y+12, r25	; 0x0c
    171c:	ad 87       	std	Y+13, r26	; 0x0d
    171e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1720:	6b 85       	ldd	r22, Y+11	; 0x0b
    1722:	7c 85       	ldd	r23, Y+12	; 0x0c
    1724:	8d 85       	ldd	r24, Y+13	; 0x0d
    1726:	9e 85       	ldd	r25, Y+14	; 0x0e
    1728:	26 e6       	ldi	r18, 0x66	; 102
    172a:	36 e6       	ldi	r19, 0x66	; 102
    172c:	46 e6       	ldi	r20, 0x66	; 102
    172e:	55 e4       	ldi	r21, 0x45	; 69
    1730:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	8f 83       	std	Y+7, r24	; 0x07
    173a:	98 87       	std	Y+8, r25	; 0x08
    173c:	a9 87       	std	Y+9, r26	; 0x09
    173e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1740:	6f 81       	ldd	r22, Y+7	; 0x07
    1742:	78 85       	ldd	r23, Y+8	; 0x08
    1744:	89 85       	ldd	r24, Y+9	; 0x09
    1746:	9a 85       	ldd	r25, Y+10	; 0x0a
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e8       	ldi	r20, 0x80	; 128
    174e:	5f e3       	ldi	r21, 0x3F	; 63
    1750:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    1754:	88 23       	and	r24, r24
    1756:	2c f4       	brge	.+10     	; 0x1762 <lcd_set_4bit+0x946>
		__ticks = 1;
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	9e 83       	std	Y+6, r25	; 0x06
    175e:	8d 83       	std	Y+5, r24	; 0x05
    1760:	3f c0       	rjmp	.+126    	; 0x17e0 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
    1762:	6f 81       	ldd	r22, Y+7	; 0x07
    1764:	78 85       	ldd	r23, Y+8	; 0x08
    1766:	89 85       	ldd	r24, Y+9	; 0x09
    1768:	9a 85       	ldd	r25, Y+10	; 0x0a
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	3f ef       	ldi	r19, 0xFF	; 255
    176e:	4f e7       	ldi	r20, 0x7F	; 127
    1770:	57 e4       	ldi	r21, 0x47	; 71
    1772:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    1776:	18 16       	cp	r1, r24
    1778:	4c f5       	brge	.+82     	; 0x17cc <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177a:	6b 85       	ldd	r22, Y+11	; 0x0b
    177c:	7c 85       	ldd	r23, Y+12	; 0x0c
    177e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1780:	9e 85       	ldd	r25, Y+14	; 0x0e
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	40 e2       	ldi	r20, 0x20	; 32
    1788:	51 e4       	ldi	r21, 0x41	; 65
    178a:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	bc 01       	movw	r22, r24
    1794:	cd 01       	movw	r24, r26
    1796:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	9e 83       	std	Y+6, r25	; 0x06
    17a0:	8d 83       	std	Y+5, r24	; 0x05
    17a2:	0f c0       	rjmp	.+30     	; 0x17c2 <lcd_set_4bit+0x9a6>
    17a4:	80 e7       	ldi	r24, 0x70	; 112
    17a6:	91 e0       	ldi	r25, 0x01	; 1
    17a8:	9c 83       	std	Y+4, r25	; 0x04
    17aa:	8b 83       	std	Y+3, r24	; 0x03
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	9c 81       	ldd	r25, Y+4	; 0x04
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <lcd_set_4bit+0x994>
    17b4:	9c 83       	std	Y+4, r25	; 0x04
    17b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ba:	9e 81       	ldd	r25, Y+6	; 0x06
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	9e 83       	std	Y+6, r25	; 0x06
    17c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c2:	8d 81       	ldd	r24, Y+5	; 0x05
    17c4:	9e 81       	ldd	r25, Y+6	; 0x06
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	69 f7       	brne	.-38     	; 0x17a4 <lcd_set_4bit+0x988>
    17ca:	14 c0       	rjmp	.+40     	; 0x17f4 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17cc:	6f 81       	ldd	r22, Y+7	; 0x07
    17ce:	78 85       	ldd	r23, Y+8	; 0x08
    17d0:	89 85       	ldd	r24, Y+9	; 0x09
    17d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d4:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	9e 83       	std	Y+6, r25	; 0x06
    17de:	8d 83       	std	Y+5, r24	; 0x05
    17e0:	8d 81       	ldd	r24, Y+5	; 0x05
    17e2:	9e 81       	ldd	r25, Y+6	; 0x06
    17e4:	9a 83       	std	Y+2, r25	; 0x02
    17e6:	89 83       	std	Y+1, r24	; 0x01
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	9a 81       	ldd	r25, Y+2	; 0x02
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	f1 f7       	brne	.-4      	; 0x17ec <lcd_set_4bit+0x9d0>
    17f0:	9a 83       	std	Y+2, r25	; 0x02
    17f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    17f4:	a8 e2       	ldi	r26, 0x28	; 40
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e8 e2       	ldi	r30, 0x28	; 40
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	8b 7f       	andi	r24, 0xFB	; 251
    1800:	8c 93       	st	X, r24


}
    1802:	c0 59       	subi	r28, 0x90	; 144
    1804:	df 4f       	sbci	r29, 0xFF	; 255
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	08 95       	ret

0000181a <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	2e 97       	sbiw	r28, 0x0e	; 14
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
	lcd_set_4bit();
    182e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <lcd_set_4bit>
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a0 e8       	ldi	r26, 0x80	; 128
    1838:	bf e3       	ldi	r27, 0x3F	; 63
    183a:	8b 87       	std	Y+11, r24	; 0x0b
    183c:	9c 87       	std	Y+12, r25	; 0x0c
    183e:	ad 87       	std	Y+13, r26	; 0x0d
    1840:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1842:	6b 85       	ldd	r22, Y+11	; 0x0b
    1844:	7c 85       	ldd	r23, Y+12	; 0x0c
    1846:	8d 85       	ldd	r24, Y+13	; 0x0d
    1848:	9e 85       	ldd	r25, Y+14	; 0x0e
    184a:	26 e6       	ldi	r18, 0x66	; 102
    184c:	36 e6       	ldi	r19, 0x66	; 102
    184e:	46 e6       	ldi	r20, 0x66	; 102
    1850:	55 e4       	ldi	r21, 0x45	; 69
    1852:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	8f 83       	std	Y+7, r24	; 0x07
    185c:	98 87       	std	Y+8, r25	; 0x08
    185e:	a9 87       	std	Y+9, r26	; 0x09
    1860:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1862:	6f 81       	ldd	r22, Y+7	; 0x07
    1864:	78 85       	ldd	r23, Y+8	; 0x08
    1866:	89 85       	ldd	r24, Y+9	; 0x09
    1868:	9a 85       	ldd	r25, Y+10	; 0x0a
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e8       	ldi	r20, 0x80	; 128
    1870:	5f e3       	ldi	r21, 0x3F	; 63
    1872:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    1876:	88 23       	and	r24, r24
    1878:	2c f4       	brge	.+10     	; 0x1884 <lcd_init+0x6a>
		__ticks = 1;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	9e 83       	std	Y+6, r25	; 0x06
    1880:	8d 83       	std	Y+5, r24	; 0x05
    1882:	3f c0       	rjmp	.+126    	; 0x1902 <lcd_init+0xe8>
	else if (__tmp > 65535)
    1884:	6f 81       	ldd	r22, Y+7	; 0x07
    1886:	78 85       	ldd	r23, Y+8	; 0x08
    1888:	89 85       	ldd	r24, Y+9	; 0x09
    188a:	9a 85       	ldd	r25, Y+10	; 0x0a
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	3f ef       	ldi	r19, 0xFF	; 255
    1890:	4f e7       	ldi	r20, 0x7F	; 127
    1892:	57 e4       	ldi	r21, 0x47	; 71
    1894:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    1898:	18 16       	cp	r1, r24
    189a:	4c f5       	brge	.+82     	; 0x18ee <lcd_init+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189c:	6b 85       	ldd	r22, Y+11	; 0x0b
    189e:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e2       	ldi	r20, 0x20	; 32
    18aa:	51 e4       	ldi	r21, 0x41	; 65
    18ac:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	bc 01       	movw	r22, r24
    18b6:	cd 01       	movw	r24, r26
    18b8:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	9e 83       	std	Y+6, r25	; 0x06
    18c2:	8d 83       	std	Y+5, r24	; 0x05
    18c4:	0f c0       	rjmp	.+30     	; 0x18e4 <lcd_init+0xca>
    18c6:	80 e7       	ldi	r24, 0x70	; 112
    18c8:	91 e0       	ldi	r25, 0x01	; 1
    18ca:	9c 83       	std	Y+4, r25	; 0x04
    18cc:	8b 83       	std	Y+3, r24	; 0x03
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <lcd_init+0xb8>
    18d6:	9c 83       	std	Y+4, r25	; 0x04
    18d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	9e 81       	ldd	r25, Y+6	; 0x06
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e4:	8d 81       	ldd	r24, Y+5	; 0x05
    18e6:	9e 81       	ldd	r25, Y+6	; 0x06
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	69 f7       	brne	.-38     	; 0x18c6 <lcd_init+0xac>
    18ec:	14 c0       	rjmp	.+40     	; 0x1916 <lcd_init+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ee:	6f 81       	ldd	r22, Y+7	; 0x07
    18f0:	78 85       	ldd	r23, Y+8	; 0x08
    18f2:	89 85       	ldd	r24, Y+9	; 0x09
    18f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f6:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9e 83       	std	Y+6, r25	; 0x06
    1900:	8d 83       	std	Y+5, r24	; 0x05
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	9a 83       	std	Y+2, r25	; 0x02
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	f1 f7       	brne	.-4      	; 0x190e <lcd_init+0xf4>
    1912:	9a 83       	std	Y+2, r25	; 0x02
    1914:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
    1916:	88 e2       	ldi	r24, 0x28	; 40
    1918:	0e 94 a3 0c 	call	0x1946	; 0x1946 <lcd_wr_command>
	lcd_wr_command(0x01);
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	0e 94 a3 0c 	call	0x1946	; 0x1946 <lcd_wr_command>
	lcd_wr_command(0x06);
    1922:	86 e0       	ldi	r24, 0x06	; 6
    1924:	0e 94 a3 0c 	call	0x1946	; 0x1946 <lcd_wr_command>
	lcd_wr_command(0x0E);
    1928:	8e e0       	ldi	r24, 0x0E	; 14
    192a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <lcd_wr_command>
	lcd_wr_command(0x80);
    192e:	80 e8       	ldi	r24, 0x80	; 128
    1930:	0e 94 a3 0c 	call	0x1946	; 0x1946 <lcd_wr_command>

}
    1934:	2e 96       	adiw	r28, 0x0e	; 14
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <lcd_wr_command>:


//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	6e 97       	sbiw	r28, 0x1e	; 30
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
    195c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    195e:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
    1960:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1962:	80 7f       	andi	r24, 0xF0	; 240
    1964:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    1966:	a8 e2       	ldi	r26, 0x28	; 40
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e8 e2       	ldi	r30, 0x28	; 40
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	8f 70       	andi	r24, 0x0F	; 15
    1972:	8c 93       	st	X, r24
	lcd_port |= temp;
    1974:	a8 e2       	ldi	r26, 0x28	; 40
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e8 e2       	ldi	r30, 0x28	; 40
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	90 81       	ld	r25, Z
    197e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1980:	89 2b       	or	r24, r25
    1982:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    1984:	a8 e2       	ldi	r26, 0x28	; 40
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e8 e2       	ldi	r30, 0x28	; 40
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	8e 7f       	andi	r24, 0xFE	; 254
    1990:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1992:	a8 e2       	ldi	r26, 0x28	; 40
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e8 e2       	ldi	r30, 0x28	; 40
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	8d 7f       	andi	r24, 0xFD	; 253
    199e:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    19a0:	a8 e2       	ldi	r26, 0x28	; 40
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e8 e2       	ldi	r30, 0x28	; 40
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	84 60       	ori	r24, 0x04	; 4
    19ac:	8c 93       	st	X, r24
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	a0 ea       	ldi	r26, 0xA0	; 160
    19b4:	b0 e4       	ldi	r27, 0x40	; 64
    19b6:	89 8f       	std	Y+25, r24	; 0x19
    19b8:	9a 8f       	std	Y+26, r25	; 0x1a
    19ba:	ab 8f       	std	Y+27, r26	; 0x1b
    19bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19be:	69 8d       	ldd	r22, Y+25	; 0x19
    19c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19c6:	26 e6       	ldi	r18, 0x66	; 102
    19c8:	36 e6       	ldi	r19, 0x66	; 102
    19ca:	46 e6       	ldi	r20, 0x66	; 102
    19cc:	55 e4       	ldi	r21, 0x45	; 69
    19ce:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	8d 8b       	std	Y+21, r24	; 0x15
    19d8:	9e 8b       	std	Y+22, r25	; 0x16
    19da:	af 8b       	std	Y+23, r26	; 0x17
    19dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19de:	6d 89       	ldd	r22, Y+21	; 0x15
    19e0:	7e 89       	ldd	r23, Y+22	; 0x16
    19e2:	8f 89       	ldd	r24, Y+23	; 0x17
    19e4:	98 8d       	ldd	r25, Y+24	; 0x18
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e8       	ldi	r20, 0x80	; 128
    19ec:	5f e3       	ldi	r21, 0x3F	; 63
    19ee:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    19f2:	88 23       	and	r24, r24
    19f4:	2c f4       	brge	.+10     	; 0x1a00 <lcd_wr_command+0xba>
		__ticks = 1;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	9c 8b       	std	Y+20, r25	; 0x14
    19fc:	8b 8b       	std	Y+19, r24	; 0x13
    19fe:	3f c0       	rjmp	.+126    	; 0x1a7e <lcd_wr_command+0x138>
	else if (__tmp > 65535)
    1a00:	6d 89       	ldd	r22, Y+21	; 0x15
    1a02:	7e 89       	ldd	r23, Y+22	; 0x16
    1a04:	8f 89       	ldd	r24, Y+23	; 0x17
    1a06:	98 8d       	ldd	r25, Y+24	; 0x18
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	3f ef       	ldi	r19, 0xFF	; 255
    1a0c:	4f e7       	ldi	r20, 0x7F	; 127
    1a0e:	57 e4       	ldi	r21, 0x47	; 71
    1a10:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    1a14:	18 16       	cp	r1, r24
    1a16:	4c f5       	brge	.+82     	; 0x1a6a <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a18:	69 8d       	ldd	r22, Y+25	; 0x19
    1a1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e2       	ldi	r20, 0x20	; 32
    1a26:	51 e4       	ldi	r21, 0x41	; 65
    1a28:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	bc 01       	movw	r22, r24
    1a32:	cd 01       	movw	r24, r26
    1a34:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	9c 8b       	std	Y+20, r25	; 0x14
    1a3e:	8b 8b       	std	Y+19, r24	; 0x13
    1a40:	0f c0       	rjmp	.+30     	; 0x1a60 <lcd_wr_command+0x11a>
    1a42:	80 e7       	ldi	r24, 0x70	; 112
    1a44:	91 e0       	ldi	r25, 0x01	; 1
    1a46:	9a 8b       	std	Y+18, r25	; 0x12
    1a48:	89 8b       	std	Y+17, r24	; 0x11
    1a4a:	89 89       	ldd	r24, Y+17	; 0x11
    1a4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	f1 f7       	brne	.-4      	; 0x1a4e <lcd_wr_command+0x108>
    1a52:	9a 8b       	std	Y+18, r25	; 0x12
    1a54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a56:	8b 89       	ldd	r24, Y+19	; 0x13
    1a58:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	9c 8b       	std	Y+20, r25	; 0x14
    1a5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a60:	8b 89       	ldd	r24, Y+19	; 0x13
    1a62:	9c 89       	ldd	r25, Y+20	; 0x14
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	69 f7       	brne	.-38     	; 0x1a42 <lcd_wr_command+0xfc>
    1a68:	14 c0       	rjmp	.+40     	; 0x1a92 <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a70:	98 8d       	ldd	r25, Y+24	; 0x18
    1a72:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	9c 8b       	std	Y+20, r25	; 0x14
    1a7c:	8b 8b       	std	Y+19, r24	; 0x13
    1a7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a80:	9c 89       	ldd	r25, Y+20	; 0x14
    1a82:	98 8b       	std	Y+16, r25	; 0x10
    1a84:	8f 87       	std	Y+15, r24	; 0x0f
    1a86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a88:	98 89       	ldd	r25, Y+16	; 0x10
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <lcd_wr_command+0x144>
    1a8e:	98 8b       	std	Y+16, r25	; 0x10
    1a90:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1a92:	a8 e2       	ldi	r26, 0x28	; 40
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e8 e2       	ldi	r30, 0x28	; 40
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	8b 7f       	andi	r24, 0xFB	; 251
    1a9e:	8c 93       	st	X, r24

	cmd = cmd & 0x0F;
    1aa0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1aa2:	8f 70       	andi	r24, 0x0F	; 15
    1aa4:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    1aa6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1aa8:	82 95       	swap	r24
    1aaa:	80 7f       	andi	r24, 0xF0	; 240
    1aac:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1aae:	a8 e2       	ldi	r26, 0x28	; 40
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e8 e2       	ldi	r30, 0x28	; 40
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	8f 70       	andi	r24, 0x0F	; 15
    1aba:	8c 93       	st	X, r24
	lcd_port |= cmd;
    1abc:	a8 e2       	ldi	r26, 0x28	; 40
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e8 e2       	ldi	r30, 0x28	; 40
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	90 81       	ld	r25, Z
    1ac6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ac8:	89 2b       	or	r24, r25
    1aca:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    1acc:	a8 e2       	ldi	r26, 0x28	; 40
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e8 e2       	ldi	r30, 0x28	; 40
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	8e 7f       	andi	r24, 0xFE	; 254
    1ad8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1ada:	a8 e2       	ldi	r26, 0x28	; 40
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e8 e2       	ldi	r30, 0x28	; 40
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	8d 7f       	andi	r24, 0xFD	; 253
    1ae6:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1ae8:	a8 e2       	ldi	r26, 0x28	; 40
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e8 e2       	ldi	r30, 0x28	; 40
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	84 60       	ori	r24, 0x04	; 4
    1af4:	8c 93       	st	X, r24
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	a0 ea       	ldi	r26, 0xA0	; 160
    1afc:	b0 e4       	ldi	r27, 0x40	; 64
    1afe:	8b 87       	std	Y+11, r24	; 0x0b
    1b00:	9c 87       	std	Y+12, r25	; 0x0c
    1b02:	ad 87       	std	Y+13, r26	; 0x0d
    1b04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b0e:	26 e6       	ldi	r18, 0x66	; 102
    1b10:	36 e6       	ldi	r19, 0x66	; 102
    1b12:	46 e6       	ldi	r20, 0x66	; 102
    1b14:	55 e4       	ldi	r21, 0x45	; 69
    1b16:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	8f 83       	std	Y+7, r24	; 0x07
    1b20:	98 87       	std	Y+8, r25	; 0x08
    1b22:	a9 87       	std	Y+9, r26	; 0x09
    1b24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b26:	6f 81       	ldd	r22, Y+7	; 0x07
    1b28:	78 85       	ldd	r23, Y+8	; 0x08
    1b2a:	89 85       	ldd	r24, Y+9	; 0x09
    1b2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e8       	ldi	r20, 0x80	; 128
    1b34:	5f e3       	ldi	r21, 0x3F	; 63
    1b36:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    1b3a:	88 23       	and	r24, r24
    1b3c:	2c f4       	brge	.+10     	; 0x1b48 <lcd_wr_command+0x202>
		__ticks = 1;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	9e 83       	std	Y+6, r25	; 0x06
    1b44:	8d 83       	std	Y+5, r24	; 0x05
    1b46:	3f c0       	rjmp	.+126    	; 0x1bc6 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
    1b48:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4a:	78 85       	ldd	r23, Y+8	; 0x08
    1b4c:	89 85       	ldd	r24, Y+9	; 0x09
    1b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	3f ef       	ldi	r19, 0xFF	; 255
    1b54:	4f e7       	ldi	r20, 0x7F	; 127
    1b56:	57 e4       	ldi	r21, 0x47	; 71
    1b58:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    1b5c:	18 16       	cp	r1, r24
    1b5e:	4c f5       	brge	.+82     	; 0x1bb2 <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e2       	ldi	r20, 0x20	; 32
    1b6e:	51 e4       	ldi	r21, 0x41	; 65
    1b70:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	bc 01       	movw	r22, r24
    1b7a:	cd 01       	movw	r24, r26
    1b7c:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	9e 83       	std	Y+6, r25	; 0x06
    1b86:	8d 83       	std	Y+5, r24	; 0x05
    1b88:	0f c0       	rjmp	.+30     	; 0x1ba8 <lcd_wr_command+0x262>
    1b8a:	80 e7       	ldi	r24, 0x70	; 112
    1b8c:	91 e0       	ldi	r25, 0x01	; 1
    1b8e:	9c 83       	std	Y+4, r25	; 0x04
    1b90:	8b 83       	std	Y+3, r24	; 0x03
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	9c 81       	ldd	r25, Y+4	; 0x04
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <lcd_wr_command+0x250>
    1b9a:	9c 83       	std	Y+4, r25	; 0x04
    1b9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	9e 83       	std	Y+6, r25	; 0x06
    1ba6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    1baa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bac:	00 97       	sbiw	r24, 0x00	; 0
    1bae:	69 f7       	brne	.-38     	; 0x1b8a <lcd_wr_command+0x244>
    1bb0:	14 c0       	rjmp	.+40     	; 0x1bda <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb4:	78 85       	ldd	r23, Y+8	; 0x08
    1bb6:	89 85       	ldd	r24, Y+9	; 0x09
    1bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bba:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	9e 83       	std	Y+6, r25	; 0x06
    1bc4:	8d 83       	std	Y+5, r24	; 0x05
    1bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bca:	9a 83       	std	Y+2, r25	; 0x02
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <lcd_wr_command+0x28c>
    1bd6:	9a 83       	std	Y+2, r25	; 0x02
    1bd8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1bda:	a8 e2       	ldi	r26, 0x28	; 40
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e8 e2       	ldi	r30, 0x28	; 40
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	8b 7f       	andi	r24, 0xFB	; 251
    1be6:	8c 93       	st	X, r24
}
    1be8:	6e 96       	adiw	r28, 0x1e	; 30
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	de bf       	out	0x3e, r29	; 62
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	cd bf       	out	0x3d, r28	; 61
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	6e 97       	sbiw	r28, 0x1e	; 30
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    1c10:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c12:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
    1c14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c16:	80 7f       	andi	r24, 0xF0	; 240
    1c18:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    1c1a:	a8 e2       	ldi	r26, 0x28	; 40
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e8 e2       	ldi	r30, 0x28	; 40
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8f 70       	andi	r24, 0x0F	; 15
    1c26:	8c 93       	st	X, r24
	lcd_port |= temp;
    1c28:	a8 e2       	ldi	r26, 0x28	; 40
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e8 e2       	ldi	r30, 0x28	; 40
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	98 2f       	mov	r25, r24
    1c34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c36:	89 2b       	or	r24, r25
    1c38:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    1c3a:	a8 e2       	ldi	r26, 0x28	; 40
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e8 e2       	ldi	r30, 0x28	; 40
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	81 60       	ori	r24, 0x01	; 1
    1c46:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1c48:	a8 e2       	ldi	r26, 0x28	; 40
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e8 e2       	ldi	r30, 0x28	; 40
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	8d 7f       	andi	r24, 0xFD	; 253
    1c54:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1c56:	a8 e2       	ldi	r26, 0x28	; 40
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e8 e2       	ldi	r30, 0x28	; 40
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	84 60       	ori	r24, 0x04	; 4
    1c62:	8c 93       	st	X, r24
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	a0 ea       	ldi	r26, 0xA0	; 160
    1c6a:	b0 e4       	ldi	r27, 0x40	; 64
    1c6c:	89 8f       	std	Y+25, r24	; 0x19
    1c6e:	9a 8f       	std	Y+26, r25	; 0x1a
    1c70:	ab 8f       	std	Y+27, r26	; 0x1b
    1c72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c74:	69 8d       	ldd	r22, Y+25	; 0x19
    1c76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c7c:	26 e6       	ldi	r18, 0x66	; 102
    1c7e:	36 e6       	ldi	r19, 0x66	; 102
    1c80:	46 e6       	ldi	r20, 0x66	; 102
    1c82:	55 e4       	ldi	r21, 0x45	; 69
    1c84:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	8d 8b       	std	Y+21, r24	; 0x15
    1c8e:	9e 8b       	std	Y+22, r25	; 0x16
    1c90:	af 8b       	std	Y+23, r26	; 0x17
    1c92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c94:	6d 89       	ldd	r22, Y+21	; 0x15
    1c96:	7e 89       	ldd	r23, Y+22	; 0x16
    1c98:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e8       	ldi	r20, 0x80	; 128
    1ca2:	5f e3       	ldi	r21, 0x3F	; 63
    1ca4:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    1ca8:	88 23       	and	r24, r24
    1caa:	2c f4       	brge	.+10     	; 0x1cb6 <lcd_wr_char+0xbc>
		__ticks = 1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	9c 8b       	std	Y+20, r25	; 0x14
    1cb2:	8b 8b       	std	Y+19, r24	; 0x13
    1cb4:	3f c0       	rjmp	.+126    	; 0x1d34 <lcd_wr_char+0x13a>
	else if (__tmp > 65535)
    1cb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cba:	8f 89       	ldd	r24, Y+23	; 0x17
    1cbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	3f ef       	ldi	r19, 0xFF	; 255
    1cc2:	4f e7       	ldi	r20, 0x7F	; 127
    1cc4:	57 e4       	ldi	r21, 0x47	; 71
    1cc6:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    1cca:	18 16       	cp	r1, r24
    1ccc:	4c f5       	brge	.+82     	; 0x1d20 <lcd_wr_char+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cce:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e2       	ldi	r20, 0x20	; 32
    1cdc:	51 e4       	ldi	r21, 0x41	; 65
    1cde:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9c 8b       	std	Y+20, r25	; 0x14
    1cf4:	8b 8b       	std	Y+19, r24	; 0x13
    1cf6:	0f c0       	rjmp	.+30     	; 0x1d16 <lcd_wr_char+0x11c>
    1cf8:	80 e7       	ldi	r24, 0x70	; 112
    1cfa:	91 e0       	ldi	r25, 0x01	; 1
    1cfc:	9a 8b       	std	Y+18, r25	; 0x12
    1cfe:	89 8b       	std	Y+17, r24	; 0x11
    1d00:	89 89       	ldd	r24, Y+17	; 0x11
    1d02:	9a 89       	ldd	r25, Y+18	; 0x12
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <lcd_wr_char+0x10a>
    1d08:	9a 8b       	std	Y+18, r25	; 0x12
    1d0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	9c 8b       	std	Y+20, r25	; 0x14
    1d14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d16:	8b 89       	ldd	r24, Y+19	; 0x13
    1d18:	9c 89       	ldd	r25, Y+20	; 0x14
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	69 f7       	brne	.-38     	; 0x1cf8 <lcd_wr_char+0xfe>
    1d1e:	14 c0       	rjmp	.+40     	; 0x1d48 <lcd_wr_char+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d20:	6d 89       	ldd	r22, Y+21	; 0x15
    1d22:	7e 89       	ldd	r23, Y+22	; 0x16
    1d24:	8f 89       	ldd	r24, Y+23	; 0x17
    1d26:	98 8d       	ldd	r25, Y+24	; 0x18
    1d28:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9c 8b       	std	Y+20, r25	; 0x14
    1d32:	8b 8b       	std	Y+19, r24	; 0x13
    1d34:	8b 89       	ldd	r24, Y+19	; 0x13
    1d36:	9c 89       	ldd	r25, Y+20	; 0x14
    1d38:	98 8b       	std	Y+16, r25	; 0x10
    1d3a:	8f 87       	std	Y+15, r24	; 0x0f
    1d3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d3e:	98 89       	ldd	r25, Y+16	; 0x10
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <lcd_wr_char+0x146>
    1d44:	98 8b       	std	Y+16, r25	; 0x10
    1d46:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1d48:	a8 e2       	ldi	r26, 0x28	; 40
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	e8 e2       	ldi	r30, 0x28	; 40
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	8b 7f       	andi	r24, 0xFB	; 251
    1d54:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    1d56:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d58:	8f 70       	andi	r24, 0x0F	; 15
    1d5a:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1d5c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d5e:	99 27       	eor	r25, r25
    1d60:	87 fd       	sbrc	r24, 7
    1d62:	90 95       	com	r25
    1d64:	82 95       	swap	r24
    1d66:	92 95       	swap	r25
    1d68:	90 7f       	andi	r25, 0xF0	; 240
    1d6a:	98 27       	eor	r25, r24
    1d6c:	80 7f       	andi	r24, 0xF0	; 240
    1d6e:	98 27       	eor	r25, r24
    1d70:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1d72:	a8 e2       	ldi	r26, 0x28	; 40
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e8 e2       	ldi	r30, 0x28	; 40
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	8f 70       	andi	r24, 0x0F	; 15
    1d7e:	8c 93       	st	X, r24
	lcd_port |= letter;
    1d80:	a8 e2       	ldi	r26, 0x28	; 40
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e8 e2       	ldi	r30, 0x28	; 40
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	98 2f       	mov	r25, r24
    1d8c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d8e:	89 2b       	or	r24, r25
    1d90:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    1d92:	a8 e2       	ldi	r26, 0x28	; 40
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e8 e2       	ldi	r30, 0x28	; 40
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	81 60       	ori	r24, 0x01	; 1
    1d9e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1da0:	a8 e2       	ldi	r26, 0x28	; 40
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e8 e2       	ldi	r30, 0x28	; 40
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	8d 7f       	andi	r24, 0xFD	; 253
    1dac:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1dae:	a8 e2       	ldi	r26, 0x28	; 40
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	e8 e2       	ldi	r30, 0x28	; 40
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	84 60       	ori	r24, 0x04	; 4
    1dba:	8c 93       	st	X, r24
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	a0 ea       	ldi	r26, 0xA0	; 160
    1dc2:	b0 e4       	ldi	r27, 0x40	; 64
    1dc4:	8b 87       	std	Y+11, r24	; 0x0b
    1dc6:	9c 87       	std	Y+12, r25	; 0x0c
    1dc8:	ad 87       	std	Y+13, r26	; 0x0d
    1dca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd4:	26 e6       	ldi	r18, 0x66	; 102
    1dd6:	36 e6       	ldi	r19, 0x66	; 102
    1dd8:	46 e6       	ldi	r20, 0x66	; 102
    1dda:	55 e4       	ldi	r21, 0x45	; 69
    1ddc:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	8f 83       	std	Y+7, r24	; 0x07
    1de6:	98 87       	std	Y+8, r25	; 0x08
    1de8:	a9 87       	std	Y+9, r26	; 0x09
    1dea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dec:	6f 81       	ldd	r22, Y+7	; 0x07
    1dee:	78 85       	ldd	r23, Y+8	; 0x08
    1df0:	89 85       	ldd	r24, Y+9	; 0x09
    1df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e8       	ldi	r20, 0x80	; 128
    1dfa:	5f e3       	ldi	r21, 0x3F	; 63
    1dfc:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    1e00:	88 23       	and	r24, r24
    1e02:	2c f4       	brge	.+10     	; 0x1e0e <lcd_wr_char+0x214>
		__ticks = 1;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	9e 83       	std	Y+6, r25	; 0x06
    1e0a:	8d 83       	std	Y+5, r24	; 0x05
    1e0c:	3f c0       	rjmp	.+126    	; 0x1e8c <lcd_wr_char+0x292>
	else if (__tmp > 65535)
    1e0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e10:	78 85       	ldd	r23, Y+8	; 0x08
    1e12:	89 85       	ldd	r24, Y+9	; 0x09
    1e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	3f ef       	ldi	r19, 0xFF	; 255
    1e1a:	4f e7       	ldi	r20, 0x7F	; 127
    1e1c:	57 e4       	ldi	r21, 0x47	; 71
    1e1e:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    1e22:	18 16       	cp	r1, r24
    1e24:	4c f5       	brge	.+82     	; 0x1e78 <lcd_wr_char+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e2       	ldi	r20, 0x20	; 32
    1e34:	51 e4       	ldi	r21, 0x41	; 65
    1e36:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	bc 01       	movw	r22, r24
    1e40:	cd 01       	movw	r24, r26
    1e42:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	9e 83       	std	Y+6, r25	; 0x06
    1e4c:	8d 83       	std	Y+5, r24	; 0x05
    1e4e:	0f c0       	rjmp	.+30     	; 0x1e6e <lcd_wr_char+0x274>
    1e50:	80 e7       	ldi	r24, 0x70	; 112
    1e52:	91 e0       	ldi	r25, 0x01	; 1
    1e54:	9c 83       	std	Y+4, r25	; 0x04
    1e56:	8b 83       	std	Y+3, r24	; 0x03
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <lcd_wr_char+0x262>
    1e60:	9c 83       	std	Y+4, r25	; 0x04
    1e62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e64:	8d 81       	ldd	r24, Y+5	; 0x05
    1e66:	9e 81       	ldd	r25, Y+6	; 0x06
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	9e 83       	std	Y+6, r25	; 0x06
    1e6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e70:	9e 81       	ldd	r25, Y+6	; 0x06
    1e72:	00 97       	sbiw	r24, 0x00	; 0
    1e74:	69 f7       	brne	.-38     	; 0x1e50 <lcd_wr_char+0x256>
    1e76:	14 c0       	rjmp	.+40     	; 0x1ea0 <lcd_wr_char+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e78:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7a:	78 85       	ldd	r23, Y+8	; 0x08
    1e7c:	89 85       	ldd	r24, Y+9	; 0x09
    1e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e80:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	9e 83       	std	Y+6, r25	; 0x06
    1e8a:	8d 83       	std	Y+5, r24	; 0x05
    1e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e90:	9a 83       	std	Y+2, r25	; 0x02
    1e92:	89 83       	std	Y+1, r24	; 0x01
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	9a 81       	ldd	r25, Y+2	; 0x02
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <lcd_wr_char+0x29e>
    1e9c:	9a 83       	std	Y+2, r25	; 0x02
    1e9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1ea0:	a8 e2       	ldi	r26, 0x28	; 40
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e8 e2       	ldi	r30, 0x28	; 40
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	8b 7f       	andi	r24, 0xFB	; 251
    1eac:	8c 93       	st	X, r24
}
    1eae:	6e 96       	adiw	r28, 0x1e	; 30
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1ec8:	80 e8       	ldi	r24, 0x80	; 128
    1eca:	0e 94 a3 0c 	call	0x1946	; 0x1946 <lcd_wr_command>
}
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	0f 92       	push	r0
    1eda:	0f 92       	push	r0
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	9a 83       	std	Y+2, r25	; 0x02
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	0a c0       	rjmp	.+20     	; 0x1efa <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eea:	80 81       	ld	r24, Z
    1eec:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <lcd_wr_char>
		str++;
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef4:	01 96       	adiw	r24, 0x01	; 1
    1ef6:	9a 83       	std	Y+2, r25	; 0x02
    1ef8:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    1efa:	e9 81       	ldd	r30, Y+1	; 0x01
    1efc:	fa 81       	ldd	r31, Y+2	; 0x02
    1efe:	80 81       	ld	r24, Z
    1f00:	88 23       	and	r24, r24
    1f02:	89 f7       	brne	.-30     	; 0x1ee6 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <lcd_cursor+0x6>
    1f14:	0f 92       	push	r0
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	89 83       	std	Y+1, r24	; 0x01
    1f1c:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	28 2f       	mov	r18, r24
    1f22:	33 27       	eor	r19, r19
    1f24:	27 fd       	sbrc	r18, 7
    1f26:	30 95       	com	r19
    1f28:	3c 83       	std	Y+4, r19	; 0x04
    1f2a:	2b 83       	std	Y+3, r18	; 0x03
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	82 30       	cpi	r24, 0x02	; 2
    1f32:	91 05       	cpc	r25, r1
    1f34:	d9 f0       	breq	.+54     	; 0x1f6c <lcd_cursor+0x5e>
    1f36:	2b 81       	ldd	r18, Y+3	; 0x03
    1f38:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3a:	23 30       	cpi	r18, 0x03	; 3
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	34 f4       	brge	.+12     	; 0x1f4c <lcd_cursor+0x3e>
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	9c 81       	ldd	r25, Y+4	; 0x04
    1f44:	81 30       	cpi	r24, 0x01	; 1
    1f46:	91 05       	cpc	r25, r1
    1f48:	61 f0       	breq	.+24     	; 0x1f62 <lcd_cursor+0x54>
    1f4a:	1e c0       	rjmp	.+60     	; 0x1f88 <lcd_cursor+0x7a>
    1f4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f50:	23 30       	cpi	r18, 0x03	; 3
    1f52:	31 05       	cpc	r19, r1
    1f54:	81 f0       	breq	.+32     	; 0x1f76 <lcd_cursor+0x68>
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5a:	84 30       	cpi	r24, 0x04	; 4
    1f5c:	91 05       	cpc	r25, r1
    1f5e:	81 f0       	breq	.+32     	; 0x1f80 <lcd_cursor+0x72>
    1f60:	13 c0       	rjmp	.+38     	; 0x1f88 <lcd_cursor+0x7a>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	81 58       	subi	r24, 0x81	; 129
    1f66:	0e 94 a3 0c 	call	0x1946	; 0x1946 <lcd_wr_command>
    1f6a:	0e c0       	rjmp	.+28     	; 0x1f88 <lcd_cursor+0x7a>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	81 54       	subi	r24, 0x41	; 65
    1f70:	0e 94 a3 0c 	call	0x1946	; 0x1946 <lcd_wr_command>
    1f74:	09 c0       	rjmp	.+18     	; 0x1f88 <lcd_cursor+0x7a>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	8d 56       	subi	r24, 0x6D	; 109
    1f7a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <lcd_wr_command>
    1f7e:	04 c0       	rjmp	.+8      	; 0x1f88 <lcd_cursor+0x7a>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	8d 52       	subi	r24, 0x2D	; 45
    1f84:	0e 94 a3 0c 	call	0x1946	; 0x1946 <lcd_wr_command>
		default: break;
	}
}
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <lcd_print>:

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	27 97       	sbiw	r28, 0x07	; 7
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	de bf       	out	0x3e, r29	; 62
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	cd bf       	out	0x3d, r28	; 61
    1faa:	8a 83       	std	Y+2, r24	; 0x02
    1fac:	6b 83       	std	Y+3, r22	; 0x03
    1fae:	5d 83       	std	Y+5, r21	; 0x05
    1fb0:	4c 83       	std	Y+4, r20	; 0x04
    1fb2:	3f 83       	std	Y+7, r19	; 0x07
    1fb4:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    1fb6:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	88 23       	and	r24, r24
    1fbc:	19 f0       	breq	.+6      	; 0x1fc4 <lcd_print+0x2e>
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	88 23       	and	r24, r24
    1fc2:	19 f4       	brne	.+6      	; 0x1fca <lcd_print+0x34>
	{
		lcd_home();
    1fc4:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <lcd_home>
    1fc8:	04 c0       	rjmp	.+8      	; 0x1fd2 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	6b 81       	ldd	r22, Y+3	; 0x03
    1fce:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <lcd_cursor>
	}
	if(digits==5 || flag==1)
    1fd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd4:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd6:	85 30       	cpi	r24, 0x05	; 5
    1fd8:	91 05       	cpc	r25, r1
    1fda:	19 f0       	breq	.+6      	; 0x1fe2 <lcd_print+0x4c>
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	81 30       	cpi	r24, 0x01	; 1
    1fe0:	a9 f4       	brne	.+42     	; 0x200c <lcd_print+0x76>
	{
		million=value/10000+48;
    1fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe6:	20 e1       	ldi	r18, 0x10	; 16
    1fe8:	37 e2       	ldi	r19, 0x27	; 39
    1fea:	b9 01       	movw	r22, r18
    1fec:	0e 94 3a 28 	call	0x5074	; 0x5074 <__udivmodhi4>
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	c0 96       	adiw	r24, 0x30	; 48
    1ff4:	90 93 21 03 	sts	0x0321, r25
    1ff8:	80 93 20 03 	sts	0x0320, r24
		lcd_wr_char(million);
    1ffc:	80 91 20 03 	lds	r24, 0x0320
    2000:	90 91 21 03 	lds	r25, 0x0321
    2004:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <lcd_wr_char>
		flag=1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    200c:	8e 81       	ldd	r24, Y+6	; 0x06
    200e:	9f 81       	ldd	r25, Y+7	; 0x07
    2010:	84 30       	cpi	r24, 0x04	; 4
    2012:	91 05       	cpc	r25, r1
    2014:	19 f0       	breq	.+6      	; 0x201c <lcd_print+0x86>
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	81 30       	cpi	r24, 0x01	; 1
    201a:	11 f5       	brne	.+68     	; 0x2060 <lcd_print+0xca>
	{
		temp = value/1000;
    201c:	8c 81       	ldd	r24, Y+4	; 0x04
    201e:	9d 81       	ldd	r25, Y+5	; 0x05
    2020:	28 ee       	ldi	r18, 0xE8	; 232
    2022:	33 e0       	ldi	r19, 0x03	; 3
    2024:	b9 01       	movw	r22, r18
    2026:	0e 94 3a 28 	call	0x5074	; 0x5074 <__udivmodhi4>
    202a:	cb 01       	movw	r24, r22
    202c:	90 93 23 03 	sts	0x0323, r25
    2030:	80 93 22 03 	sts	0x0322, r24
		thousand = temp%10 + 48;
    2034:	80 91 22 03 	lds	r24, 0x0322
    2038:	90 91 23 03 	lds	r25, 0x0323
    203c:	2a e0       	ldi	r18, 0x0A	; 10
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	b9 01       	movw	r22, r18
    2042:	0e 94 3a 28 	call	0x5074	; 0x5074 <__udivmodhi4>
    2046:	c0 96       	adiw	r24, 0x30	; 48
    2048:	90 93 33 03 	sts	0x0333, r25
    204c:	80 93 32 03 	sts	0x0332, r24
		lcd_wr_char(thousand);
    2050:	80 91 32 03 	lds	r24, 0x0332
    2054:	90 91 33 03 	lds	r25, 0x0333
    2058:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <lcd_wr_char>
		flag=1;
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    2060:	8e 81       	ldd	r24, Y+6	; 0x06
    2062:	9f 81       	ldd	r25, Y+7	; 0x07
    2064:	83 30       	cpi	r24, 0x03	; 3
    2066:	91 05       	cpc	r25, r1
    2068:	19 f0       	breq	.+6      	; 0x2070 <lcd_print+0xda>
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	81 30       	cpi	r24, 0x01	; 1
    206e:	11 f5       	brne	.+68     	; 0x20b4 <lcd_print+0x11e>
	{
		temp = value/100;
    2070:	8c 81       	ldd	r24, Y+4	; 0x04
    2072:	9d 81       	ldd	r25, Y+5	; 0x05
    2074:	24 e6       	ldi	r18, 0x64	; 100
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	b9 01       	movw	r22, r18
    207a:	0e 94 3a 28 	call	0x5074	; 0x5074 <__udivmodhi4>
    207e:	cb 01       	movw	r24, r22
    2080:	90 93 23 03 	sts	0x0323, r25
    2084:	80 93 22 03 	sts	0x0322, r24
		hundred = temp%10 + 48;
    2088:	80 91 22 03 	lds	r24, 0x0322
    208c:	90 91 23 03 	lds	r25, 0x0323
    2090:	2a e0       	ldi	r18, 0x0A	; 10
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	b9 01       	movw	r22, r18
    2096:	0e 94 3a 28 	call	0x5074	; 0x5074 <__udivmodhi4>
    209a:	c0 96       	adiw	r24, 0x30	; 48
    209c:	90 93 2d 03 	sts	0x032D, r25
    20a0:	80 93 2c 03 	sts	0x032C, r24
		lcd_wr_char(hundred);
    20a4:	80 91 2c 03 	lds	r24, 0x032C
    20a8:	90 91 2d 03 	lds	r25, 0x032D
    20ac:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <lcd_wr_char>
		flag=1;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    20b4:	8e 81       	ldd	r24, Y+6	; 0x06
    20b6:	9f 81       	ldd	r25, Y+7	; 0x07
    20b8:	82 30       	cpi	r24, 0x02	; 2
    20ba:	91 05       	cpc	r25, r1
    20bc:	19 f0       	breq	.+6      	; 0x20c4 <lcd_print+0x12e>
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	11 f5       	brne	.+68     	; 0x2108 <lcd_print+0x172>
	{
		temp = value/10;
    20c4:	8c 81       	ldd	r24, Y+4	; 0x04
    20c6:	9d 81       	ldd	r25, Y+5	; 0x05
    20c8:	2a e0       	ldi	r18, 0x0A	; 10
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	b9 01       	movw	r22, r18
    20ce:	0e 94 3a 28 	call	0x5074	; 0x5074 <__udivmodhi4>
    20d2:	cb 01       	movw	r24, r22
    20d4:	90 93 23 03 	sts	0x0323, r25
    20d8:	80 93 22 03 	sts	0x0322, r24
		tens = temp%10 + 48;
    20dc:	80 91 22 03 	lds	r24, 0x0322
    20e0:	90 91 23 03 	lds	r25, 0x0323
    20e4:	2a e0       	ldi	r18, 0x0A	; 10
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	b9 01       	movw	r22, r18
    20ea:	0e 94 3a 28 	call	0x5074	; 0x5074 <__udivmodhi4>
    20ee:	c0 96       	adiw	r24, 0x30	; 48
    20f0:	90 93 27 03 	sts	0x0327, r25
    20f4:	80 93 26 03 	sts	0x0326, r24
		lcd_wr_char(tens);
    20f8:	80 91 26 03 	lds	r24, 0x0326
    20fc:	90 91 27 03 	lds	r25, 0x0327
    2100:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <lcd_wr_char>
		flag=1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    2108:	8e 81       	ldd	r24, Y+6	; 0x06
    210a:	9f 81       	ldd	r25, Y+7	; 0x07
    210c:	81 30       	cpi	r24, 0x01	; 1
    210e:	91 05       	cpc	r25, r1
    2110:	19 f0       	breq	.+6      	; 0x2118 <lcd_print+0x182>
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	81 30       	cpi	r24, 0x01	; 1
    2116:	91 f4       	brne	.+36     	; 0x213c <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    2118:	8c 81       	ldd	r24, Y+4	; 0x04
    211a:	9d 81       	ldd	r25, Y+5	; 0x05
    211c:	2a e0       	ldi	r18, 0x0A	; 10
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	b9 01       	movw	r22, r18
    2122:	0e 94 3a 28 	call	0x5074	; 0x5074 <__udivmodhi4>
    2126:	c0 96       	adiw	r24, 0x30	; 48
    2128:	90 93 31 03 	sts	0x0331, r25
    212c:	80 93 30 03 	sts	0x0330, r24
		lcd_wr_char(unit);
    2130:	80 91 30 03 	lds	r24, 0x0330
    2134:	90 91 31 03 	lds	r25, 0x0331
    2138:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <lcd_wr_char>
	}
	if(digits>5)
    213c:	8e 81       	ldd	r24, Y+6	; 0x06
    213e:	9f 81       	ldd	r25, Y+7	; 0x07
    2140:	86 30       	cpi	r24, 0x06	; 6
    2142:	91 05       	cpc	r25, r1
    2144:	1c f0       	brlt	.+6      	; 0x214c <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    2146:	85 e4       	ldi	r24, 0x45	; 69
    2148:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <lcd_wr_char>
	}

}
    214c:	27 96       	adiw	r28, 0x07	; 7
    214e:	0f b6       	in	r0, 0x3f	; 63
    2150:	f8 94       	cli
    2152:	de bf       	out	0x3e, r29	; 62
    2154:	0f be       	out	0x3f, r0	; 63
    2156:	cd bf       	out	0x3d, r28	; 61
    2158:	cf 91       	pop	r28
    215a:	df 91       	pop	r29
    215c:	08 95       	ret

0000215e <main>:
int row = 6;                        //This variable is used to keep track of the row on which the bot is currently moving in.
int totalNodes = 0;                 //This variable is mainly used to skip the unwanted row(row 7)


int main(void)
{
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	6c 97       	sbiw	r28, 0x1c	; 28
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    cli();
    2172:	f8 94       	cli
    set_lcd();
    2174:	0e 94 ee 06 	call	0xddc	; 0xddc <set_lcd>
    set_motors();
    2178:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_motors>
    set_ADC();
    217c:	0e 94 99 06 	call	0xd32	; 0xd32 <set_ADC>
    sei();
    2180:	78 94       	sei

    PORTH |= (1<<2);                //Turn off the proximity sensors.
    2182:	a2 e0       	ldi	r26, 0x02	; 2
    2184:	b1 e0       	ldi	r27, 0x01	; 1
    2186:	e2 e0       	ldi	r30, 0x02	; 2
    2188:	f1 e0       	ldi	r31, 0x01	; 1
    218a:	80 81       	ld	r24, Z
    218c:	84 60       	ori	r24, 0x04	; 4
    218e:	8c 93       	st	X, r24
    DDRC |= (1 << 3);               //Set the buzzer pin as output.
    2190:	a7 e2       	ldi	r26, 0x27	; 39
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	e7 e2       	ldi	r30, 0x27	; 39
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	88 60       	ori	r24, 0x08	; 8
    219c:	8c 93       	st	X, r24
    int error = 0, lastError = 0;
    219e:	1a 8a       	std	Y+18, r1	; 0x12
    21a0:	19 8a       	std	Y+17, r1	; 0x11
    21a2:	18 8a       	std	Y+16, r1	; 0x10
    21a4:	1f 86       	std	Y+15, r1	; 0x0f

    forward();
    21a6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    velocity(0,0);
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>

    while(1)
    {
        error = getError();
    21b2:	0e 94 c3 1c 	call	0x3986	; 0x3986 <getError>
    21b6:	9a 8b       	std	Y+18, r25	; 0x12
    21b8:	89 8b       	std	Y+17, r24	; 0x11

        if(error > -100 && error < 100)
    21ba:	89 89       	ldd	r24, Y+17	; 0x11
    21bc:	9a 89       	ldd	r25, Y+18	; 0x12
    21be:	2f ef       	ldi	r18, 0xFF	; 255
    21c0:	8d 39       	cpi	r24, 0x9D	; 157
    21c2:	92 07       	cpc	r25, r18
    21c4:	0c f4       	brge	.+2      	; 0x21c8 <main+0x6a>
    21c6:	3e c0       	rjmp	.+124    	; 0x2244 <__stack+0x45>
    21c8:	89 89       	ldd	r24, Y+17	; 0x11
    21ca:	9a 89       	ldd	r25, Y+18	; 0x12
    21cc:	84 36       	cpi	r24, 0x64	; 100
    21ce:	91 05       	cpc	r25, r1
    21d0:	cc f5       	brge	.+114    	; 0x2244 <__stack+0x45>
        {
            leftSpeed = forwardLeftSpeed - error*kp;
    21d2:	20 91 02 02 	lds	r18, 0x0202
    21d6:	30 91 03 02 	lds	r19, 0x0203
    21da:	89 89       	ldd	r24, Y+17	; 0x11
    21dc:	9a 89       	ldd	r25, Y+18	; 0x12
    21de:	a9 01       	movw	r20, r18
    21e0:	48 9f       	mul	r20, r24
    21e2:	90 01       	movw	r18, r0
    21e4:	49 9f       	mul	r20, r25
    21e6:	30 0d       	add	r19, r0
    21e8:	58 9f       	mul	r21, r24
    21ea:	30 0d       	add	r19, r0
    21ec:	11 24       	eor	r1, r1
    21ee:	84 eb       	ldi	r24, 0xB4	; 180
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	82 1b       	sub	r24, r18
    21f4:	93 0b       	sbc	r25, r19
    21f6:	90 93 1f 03 	sts	0x031F, r25
    21fa:	80 93 1e 03 	sts	0x031E, r24
            rightSpeed = forwardRightSpeed + error*kp;
    21fe:	20 91 02 02 	lds	r18, 0x0202
    2202:	30 91 03 02 	lds	r19, 0x0203
    2206:	89 89       	ldd	r24, Y+17	; 0x11
    2208:	9a 89       	ldd	r25, Y+18	; 0x12
    220a:	ac 01       	movw	r20, r24
    220c:	24 9f       	mul	r18, r20
    220e:	c0 01       	movw	r24, r0
    2210:	25 9f       	mul	r18, r21
    2212:	90 0d       	add	r25, r0
    2214:	34 9f       	mul	r19, r20
    2216:	90 0d       	add	r25, r0
    2218:	11 24       	eor	r1, r1
    221a:	87 56       	subi	r24, 0x67	; 103
    221c:	9f 4f       	sbci	r25, 0xFF	; 255
    221e:	90 93 2b 03 	sts	0x032B, r25
    2222:	80 93 2a 03 	sts	0x032A, r24

            velocity(leftSpeed, rightSpeed);
    2226:	80 91 1e 03 	lds	r24, 0x031E
    222a:	90 91 1f 03 	lds	r25, 0x031F
    222e:	28 2f       	mov	r18, r24
    2230:	80 91 2a 03 	lds	r24, 0x032A
    2234:	90 91 2b 03 	lds	r25, 0x032B
    2238:	98 2f       	mov	r25, r24
    223a:	82 2f       	mov	r24, r18
    223c:	69 2f       	mov	r22, r25
    223e:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    2242:	19 c2       	rjmp	.+1074   	; 0x2676 <__stack+0x477>
        }

        else if (error == 100)
    2244:	89 89       	ldd	r24, Y+17	; 0x11
    2246:	9a 89       	ldd	r25, Y+18	; 0x12
    2248:	84 36       	cpi	r24, 0x64	; 100
    224a:	91 05       	cpc	r25, r1
    224c:	09 f0       	breq	.+2      	; 0x2250 <__stack+0x51>
    224e:	11 c2       	rjmp	.+1058   	; 0x2672 <__stack+0x473>
        {
            if(lastError != error)
    2250:	2f 85       	ldd	r18, Y+15	; 0x0f
    2252:	38 89       	ldd	r19, Y+16	; 0x10
    2254:	89 89       	ldd	r24, Y+17	; 0x11
    2256:	9a 89       	ldd	r25, Y+18	; 0x12
    2258:	28 17       	cp	r18, r24
    225a:	39 07       	cpc	r19, r25
    225c:	09 f4       	brne	.+2      	; 0x2260 <__stack+0x61>
    225e:	0b c2       	rjmp	.+1046   	; 0x2676 <__stack+0x477>
            {
                totalNodes++;
    2260:	80 91 1c 03 	lds	r24, 0x031C
    2264:	90 91 1d 03 	lds	r25, 0x031D
    2268:	01 96       	adiw	r24, 0x01	; 1
    226a:	90 93 1d 03 	sts	0x031D, r25
    226e:	80 93 1c 03 	sts	0x031C, r24
                nodeMissTracker = 0;
    2272:	10 92 17 03 	sts	0x0317, r1
    2276:	10 92 16 03 	sts	0x0316, r1

                if(totalNodes > 2)
    227a:	80 91 1c 03 	lds	r24, 0x031C
    227e:	90 91 1d 03 	lds	r25, 0x031D
    2282:	83 30       	cpi	r24, 0x03	; 3
    2284:	91 05       	cpc	r25, r1
    2286:	0c f4       	brge	.+2      	; 0x228a <__stack+0x8b>
    2288:	56 c1       	rjmp	.+684    	; 0x2536 <__stack+0x337>
                {
                    switch(state)
    228a:	80 91 1a 03 	lds	r24, 0x031A
    228e:	90 91 1b 03 	lds	r25, 0x031B
    2292:	9c 8f       	std	Y+28, r25	; 0x1c
    2294:	8b 8f       	std	Y+27, r24	; 0x1b
    2296:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2298:	5c 8d       	ldd	r21, Y+28	; 0x1c
    229a:	44 30       	cpi	r20, 0x04	; 4
    229c:	51 05       	cpc	r21, r1
    229e:	09 f4       	brne	.+2      	; 0x22a2 <__stack+0xa3>
    22a0:	e0 c0       	rjmp	.+448    	; 0x2462 <__stack+0x263>
    22a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22a6:	85 30       	cpi	r24, 0x05	; 5
    22a8:	91 05       	cpc	r25, r1
    22aa:	f4 f4       	brge	.+60     	; 0x22e8 <__stack+0xe9>
    22ac:	4b 8d       	ldd	r20, Y+27	; 0x1b
    22ae:	5c 8d       	ldd	r21, Y+28	; 0x1c
    22b0:	41 30       	cpi	r20, 0x01	; 1
    22b2:	51 05       	cpc	r21, r1
    22b4:	09 f4       	brne	.+2      	; 0x22b8 <__stack+0xb9>
    22b6:	ab c0       	rjmp	.+342    	; 0x240e <__stack+0x20f>
    22b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22bc:	82 30       	cpi	r24, 0x02	; 2
    22be:	91 05       	cpc	r25, r1
    22c0:	34 f4       	brge	.+12     	; 0x22ce <__stack+0xcf>
    22c2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    22c4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    22c6:	41 15       	cp	r20, r1
    22c8:	51 05       	cpc	r21, r1
    22ca:	39 f1       	breq	.+78     	; 0x231a <__stack+0x11b>
    22cc:	ae c1       	rjmp	.+860    	; 0x262a <__stack+0x42b>
    22ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d2:	82 30       	cpi	r24, 0x02	; 2
    22d4:	91 05       	cpc	r25, r1
    22d6:	09 f4       	brne	.+2      	; 0x22da <__stack+0xdb>
    22d8:	a8 c0       	rjmp	.+336    	; 0x242a <__stack+0x22b>
    22da:	4b 8d       	ldd	r20, Y+27	; 0x1b
    22dc:	5c 8d       	ldd	r21, Y+28	; 0x1c
    22de:	43 30       	cpi	r20, 0x03	; 3
    22e0:	51 05       	cpc	r21, r1
    22e2:	09 f4       	brne	.+2      	; 0x22e6 <__stack+0xe7>
    22e4:	b0 c0       	rjmp	.+352    	; 0x2446 <__stack+0x247>
    22e6:	a1 c1       	rjmp	.+834    	; 0x262a <__stack+0x42b>
    22e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ec:	86 30       	cpi	r24, 0x06	; 6
    22ee:	91 05       	cpc	r25, r1
    22f0:	09 f4       	brne	.+2      	; 0x22f4 <__stack+0xf5>
    22f2:	f7 c0       	rjmp	.+494    	; 0x24e2 <__stack+0x2e3>
    22f4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    22f6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    22f8:	46 30       	cpi	r20, 0x06	; 6
    22fa:	51 05       	cpc	r21, r1
    22fc:	0c f4       	brge	.+2      	; 0x2300 <__stack+0x101>
    22fe:	e3 c0       	rjmp	.+454    	; 0x24c6 <__stack+0x2c7>
    2300:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2302:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2304:	87 30       	cpi	r24, 0x07	; 7
    2306:	91 05       	cpc	r25, r1
    2308:	09 f4       	brne	.+2      	; 0x230c <__stack+0x10d>
    230a:	f9 c0       	rjmp	.+498    	; 0x24fe <__stack+0x2ff>
    230c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    230e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2310:	48 30       	cpi	r20, 0x08	; 8
    2312:	51 05       	cpc	r21, r1
    2314:	09 f4       	brne	.+2      	; 0x2318 <__stack+0x119>
    2316:	01 c1       	rjmp	.+514    	; 0x251a <__stack+0x31b>
    2318:	88 c1       	rjmp	.+784    	; 0x262a <__stack+0x42b>
                    {
                        case 0 :arenaLeft();
    231a:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <arenaLeft>
                                state++;
    231e:	80 91 1a 03 	lds	r24, 0x031A
    2322:	90 91 1b 03 	lds	r25, 0x031B
    2326:	01 96       	adiw	r24, 0x01	; 1
    2328:	90 93 1b 03 	sts	0x031B, r25
    232c:	80 93 1a 03 	sts	0x031A, r24
                                switch(checkForCube())
    2330:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <checkForCube>
    2334:	9a 8f       	std	Y+26, r25	; 0x1a
    2336:	89 8f       	std	Y+25, r24	; 0x19
    2338:	89 8d       	ldd	r24, Y+25	; 0x19
    233a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    233c:	81 30       	cpi	r24, 0x01	; 1
    233e:	91 05       	cpc	r25, r1
    2340:	31 f0       	breq	.+12     	; 0x234e <__stack+0x14f>
    2342:	49 8d       	ldd	r20, Y+25	; 0x19
    2344:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2346:	42 30       	cpi	r20, 0x02	; 2
    2348:	51 05       	cpc	r21, r1
    234a:	81 f1       	breq	.+96     	; 0x23ac <__stack+0x1ad>
    234c:	5d c0       	rjmp	.+186    	; 0x2408 <__stack+0x209>
                                {
                                    case 1 :buzzerBeep();
    234e:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <buzzerBeep>
                                            arenaUturn(); state = 5;
    2352:	0e 94 a9 19 	call	0x3352	; 0x3352 <arenaUturn>
    2356:	85 e0       	ldi	r24, 0x05	; 5
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	90 93 1b 03 	sts	0x031B, r25
    235e:	80 93 1a 03 	sts	0x031A, r24
                                            switch(checkForCube())
    2362:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <checkForCube>
    2366:	98 8f       	std	Y+24, r25	; 0x18
    2368:	8f 8b       	std	Y+23, r24	; 0x17
    236a:	8f 89       	ldd	r24, Y+23	; 0x17
    236c:	98 8d       	ldd	r25, Y+24	; 0x18
    236e:	81 30       	cpi	r24, 0x01	; 1
    2370:	91 05       	cpc	r25, r1
    2372:	31 f0       	breq	.+12     	; 0x2380 <__stack+0x181>
    2374:	4f 89       	ldd	r20, Y+23	; 0x17
    2376:	58 8d       	ldd	r21, Y+24	; 0x18
    2378:	42 30       	cpi	r20, 0x02	; 2
    237a:	51 05       	cpc	r21, r1
    237c:	61 f0       	breq	.+24     	; 0x2396 <__stack+0x197>
    237e:	44 c0       	rjmp	.+136    	; 0x2408 <__stack+0x209>
                                            {
                                                case 1 : buzzerBeep(); arenaLeft_2(); state = 9; break;
    2380:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <buzzerBeep>
    2384:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <arenaLeft_2>
    2388:	89 e0       	ldi	r24, 0x09	; 9
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	90 93 1b 03 	sts	0x031B, r25
    2390:	80 93 1a 03 	sts	0x031A, r24
    2394:	39 c0       	rjmp	.+114    	; 0x2408 <__stack+0x209>
                                                case 2 : buzzerBeep(); arenaLeft_2(); state = 9; break;
    2396:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <buzzerBeep>
    239a:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <arenaLeft_2>
    239e:	89 e0       	ldi	r24, 0x09	; 9
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	90 93 1b 03 	sts	0x031B, r25
    23a6:	80 93 1a 03 	sts	0x031A, r24
    23aa:	2e c0       	rjmp	.+92     	; 0x2408 <__stack+0x209>
                                                case 0 : break;
                                            }
                                            break;

                                    case 2 :buzzerBeep();
    23ac:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <buzzerBeep>
                                            arenaUturn(); state = 5;
    23b0:	0e 94 a9 19 	call	0x3352	; 0x3352 <arenaUturn>
    23b4:	85 e0       	ldi	r24, 0x05	; 5
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	90 93 1b 03 	sts	0x031B, r25
    23bc:	80 93 1a 03 	sts	0x031A, r24
                                            switch(checkForCube())
    23c0:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <checkForCube>
    23c4:	9e 8b       	std	Y+22, r25	; 0x16
    23c6:	8d 8b       	std	Y+21, r24	; 0x15
    23c8:	8d 89       	ldd	r24, Y+21	; 0x15
    23ca:	9e 89       	ldd	r25, Y+22	; 0x16
    23cc:	81 30       	cpi	r24, 0x01	; 1
    23ce:	91 05       	cpc	r25, r1
    23d0:	31 f0       	breq	.+12     	; 0x23de <__stack+0x1df>
    23d2:	4d 89       	ldd	r20, Y+21	; 0x15
    23d4:	5e 89       	ldd	r21, Y+22	; 0x16
    23d6:	42 30       	cpi	r20, 0x02	; 2
    23d8:	51 05       	cpc	r21, r1
    23da:	61 f0       	breq	.+24     	; 0x23f4 <__stack+0x1f5>
    23dc:	15 c0       	rjmp	.+42     	; 0x2408 <__stack+0x209>
                                            {
                                                case 1 : buzzerBeep(); arenaLeft_2(); state = 9; break;
    23de:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <buzzerBeep>
    23e2:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <arenaLeft_2>
    23e6:	89 e0       	ldi	r24, 0x09	; 9
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	90 93 1b 03 	sts	0x031B, r25
    23ee:	80 93 1a 03 	sts	0x031A, r24
    23f2:	0a c0       	rjmp	.+20     	; 0x2408 <__stack+0x209>
                                                case 2 : buzzerBeep(); arenaLeft_2(); state = 9; break;
    23f4:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <buzzerBeep>
    23f8:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <arenaLeft_2>
    23fc:	89 e0       	ldi	r24, 0x09	; 9
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	90 93 1b 03 	sts	0x031B, r25
    2404:	80 93 1a 03 	sts	0x031A, r24
                                            }
                                            break;

                                    case 0 :break;
                                }
                                forward();
    2408:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    240c:	0e c1       	rjmp	.+540    	; 0x262a <__stack+0x42b>
                                break;

                        case 1 : arenaStraight(); forward(); state++; break;
    240e:	0e 94 44 1b 	call	0x3688	; 0x3688 <arenaStraight>
    2412:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    2416:	80 91 1a 03 	lds	r24, 0x031A
    241a:	90 91 1b 03 	lds	r25, 0x031B
    241e:	01 96       	adiw	r24, 0x01	; 1
    2420:	90 93 1b 03 	sts	0x031B, r25
    2424:	80 93 1a 03 	sts	0x031A, r24
    2428:	00 c1       	rjmp	.+512    	; 0x262a <__stack+0x42b>

                        case 2 : arenaUturn();forward(); state++; break;
    242a:	0e 94 a9 19 	call	0x3352	; 0x3352 <arenaUturn>
    242e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    2432:	80 91 1a 03 	lds	r24, 0x031A
    2436:	90 91 1b 03 	lds	r25, 0x031B
    243a:	01 96       	adiw	r24, 0x01	; 1
    243c:	90 93 1b 03 	sts	0x031B, r25
    2440:	80 93 1a 03 	sts	0x031A, r24
    2444:	f2 c0       	rjmp	.+484    	; 0x262a <__stack+0x42b>

                        case 3 : arenaStraight(); forward(); state++; break;
    2446:	0e 94 44 1b 	call	0x3688	; 0x3688 <arenaStraight>
    244a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    244e:	80 91 1a 03 	lds	r24, 0x031A
    2452:	90 91 1b 03 	lds	r25, 0x031B
    2456:	01 96       	adiw	r24, 0x01	; 1
    2458:	90 93 1b 03 	sts	0x031B, r25
    245c:	80 93 1a 03 	sts	0x031A, r24
    2460:	e4 c0       	rjmp	.+456    	; 0x262a <__stack+0x42b>

                        case 4 : arenaStraight();
    2462:	0e 94 44 1b 	call	0x3688	; 0x3688 <arenaStraight>
                                state++;
    2466:	80 91 1a 03 	lds	r24, 0x031A
    246a:	90 91 1b 03 	lds	r25, 0x031B
    246e:	01 96       	adiw	r24, 0x01	; 1
    2470:	90 93 1b 03 	sts	0x031B, r25
    2474:	80 93 1a 03 	sts	0x031A, r24
                                switch(checkForCube())
    2478:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <checkForCube>
    247c:	9c 8b       	std	Y+20, r25	; 0x14
    247e:	8b 8b       	std	Y+19, r24	; 0x13
    2480:	8b 89       	ldd	r24, Y+19	; 0x13
    2482:	9c 89       	ldd	r25, Y+20	; 0x14
    2484:	81 30       	cpi	r24, 0x01	; 1
    2486:	91 05       	cpc	r25, r1
    2488:	31 f0       	breq	.+12     	; 0x2496 <__stack+0x297>
    248a:	4b 89       	ldd	r20, Y+19	; 0x13
    248c:	5c 89       	ldd	r21, Y+20	; 0x14
    248e:	42 30       	cpi	r20, 0x02	; 2
    2490:	51 05       	cpc	r21, r1
    2492:	61 f0       	breq	.+24     	; 0x24ac <__stack+0x2ad>
    2494:	15 c0       	rjmp	.+42     	; 0x24c0 <__stack+0x2c1>
                                {
                                 case 1 : buzzerBeep(); arenaLeft(); state = 9; break;
    2496:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <buzzerBeep>
    249a:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <arenaLeft>
    249e:	89 e0       	ldi	r24, 0x09	; 9
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	90 93 1b 03 	sts	0x031B, r25
    24a6:	80 93 1a 03 	sts	0x031A, r24
    24aa:	0a c0       	rjmp	.+20     	; 0x24c0 <__stack+0x2c1>
                                 case 2 : buzzerBeep(); arenaLeft(); state = 9; break;
    24ac:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <buzzerBeep>
    24b0:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <arenaLeft>
    24b4:	89 e0       	ldi	r24, 0x09	; 9
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	90 93 1b 03 	sts	0x031B, r25
    24bc:	80 93 1a 03 	sts	0x031A, r24
                                 case 0 : break;
                                }
                                forward();
    24c0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    24c4:	b2 c0       	rjmp	.+356    	; 0x262a <__stack+0x42b>
                                break;

                        case 5 : arenaStraight(); forward();state++; break;
    24c6:	0e 94 44 1b 	call	0x3688	; 0x3688 <arenaStraight>
    24ca:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    24ce:	80 91 1a 03 	lds	r24, 0x031A
    24d2:	90 91 1b 03 	lds	r25, 0x031B
    24d6:	01 96       	adiw	r24, 0x01	; 1
    24d8:	90 93 1b 03 	sts	0x031B, r25
    24dc:	80 93 1a 03 	sts	0x031A, r24
    24e0:	a4 c0       	rjmp	.+328    	; 0x262a <__stack+0x42b>

                        case 6 : arenaUturn(); forward(); state++; break;
    24e2:	0e 94 a9 19 	call	0x3352	; 0x3352 <arenaUturn>
    24e6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    24ea:	80 91 1a 03 	lds	r24, 0x031A
    24ee:	90 91 1b 03 	lds	r25, 0x031B
    24f2:	01 96       	adiw	r24, 0x01	; 1
    24f4:	90 93 1b 03 	sts	0x031B, r25
    24f8:	80 93 1a 03 	sts	0x031A, r24
    24fc:	96 c0       	rjmp	.+300    	; 0x262a <__stack+0x42b>

                        case 7 : arenaStraight(); forward();state++; break;
    24fe:	0e 94 44 1b 	call	0x3688	; 0x3688 <arenaStraight>
    2502:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    2506:	80 91 1a 03 	lds	r24, 0x031A
    250a:	90 91 1b 03 	lds	r25, 0x031B
    250e:	01 96       	adiw	r24, 0x01	; 1
    2510:	90 93 1b 03 	sts	0x031B, r25
    2514:	80 93 1a 03 	sts	0x031A, r24
    2518:	88 c0       	rjmp	.+272    	; 0x262a <__stack+0x42b>

                        case 8 : arenaRight(); forward();  state++;
    251a:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <arenaRight>
    251e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    2522:	80 91 1a 03 	lds	r24, 0x031A
    2526:	90 91 1b 03 	lds	r25, 0x031B
    252a:	01 96       	adiw	r24, 0x01	; 1
    252c:	90 93 1b 03 	sts	0x031B, r25
    2530:	80 93 1a 03 	sts	0x031A, r24
    2534:	7a c0       	rjmp	.+244    	; 0x262a <__stack+0x42b>
                }

                //This else block is executed only in the beginning. To skip the unwanted row (row 7)
                else
                {
                    stop();
    2536:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	aa e7       	ldi	r26, 0x7A	; 122
    2540:	b4 e4       	ldi	r27, 0x44	; 68
    2542:	8b 87       	std	Y+11, r24	; 0x0b
    2544:	9c 87       	std	Y+12, r25	; 0x0c
    2546:	ad 87       	std	Y+13, r26	; 0x0d
    2548:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254a:	6b 85       	ldd	r22, Y+11	; 0x0b
    254c:	7c 85       	ldd	r23, Y+12	; 0x0c
    254e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2550:	9e 85       	ldd	r25, Y+14	; 0x0e
    2552:	26 e6       	ldi	r18, 0x66	; 102
    2554:	36 e6       	ldi	r19, 0x66	; 102
    2556:	46 e6       	ldi	r20, 0x66	; 102
    2558:	55 e4       	ldi	r21, 0x45	; 69
    255a:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	8f 83       	std	Y+7, r24	; 0x07
    2564:	98 87       	std	Y+8, r25	; 0x08
    2566:	a9 87       	std	Y+9, r26	; 0x09
    2568:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    256a:	6f 81       	ldd	r22, Y+7	; 0x07
    256c:	78 85       	ldd	r23, Y+8	; 0x08
    256e:	89 85       	ldd	r24, Y+9	; 0x09
    2570:	9a 85       	ldd	r25, Y+10	; 0x0a
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e8       	ldi	r20, 0x80	; 128
    2578:	5f e3       	ldi	r21, 0x3F	; 63
    257a:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    257e:	88 23       	and	r24, r24
    2580:	2c f4       	brge	.+10     	; 0x258c <__stack+0x38d>
		__ticks = 1;
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	9e 83       	std	Y+6, r25	; 0x06
    2588:	8d 83       	std	Y+5, r24	; 0x05
    258a:	3f c0       	rjmp	.+126    	; 0x260a <__stack+0x40b>
	else if (__tmp > 65535)
    258c:	6f 81       	ldd	r22, Y+7	; 0x07
    258e:	78 85       	ldd	r23, Y+8	; 0x08
    2590:	89 85       	ldd	r24, Y+9	; 0x09
    2592:	9a 85       	ldd	r25, Y+10	; 0x0a
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	3f ef       	ldi	r19, 0xFF	; 255
    2598:	4f e7       	ldi	r20, 0x7F	; 127
    259a:	57 e4       	ldi	r21, 0x47	; 71
    259c:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    25a0:	18 16       	cp	r1, r24
    25a2:	4c f5       	brge	.+82     	; 0x25f6 <__stack+0x3f7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e2       	ldi	r20, 0x20	; 32
    25b2:	51 e4       	ldi	r21, 0x41	; 65
    25b4:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	bc 01       	movw	r22, r24
    25be:	cd 01       	movw	r24, r26
    25c0:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	9e 83       	std	Y+6, r25	; 0x06
    25ca:	8d 83       	std	Y+5, r24	; 0x05
    25cc:	0f c0       	rjmp	.+30     	; 0x25ec <__stack+0x3ed>
    25ce:	80 e7       	ldi	r24, 0x70	; 112
    25d0:	91 e0       	ldi	r25, 0x01	; 1
    25d2:	9c 83       	std	Y+4, r25	; 0x04
    25d4:	8b 83       	std	Y+3, r24	; 0x03
    25d6:	8b 81       	ldd	r24, Y+3	; 0x03
    25d8:	9c 81       	ldd	r25, Y+4	; 0x04
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	f1 f7       	brne	.-4      	; 0x25da <__stack+0x3db>
    25de:	9c 83       	std	Y+4, r25	; 0x04
    25e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e2:	8d 81       	ldd	r24, Y+5	; 0x05
    25e4:	9e 81       	ldd	r25, Y+6	; 0x06
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	9e 83       	std	Y+6, r25	; 0x06
    25ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ec:	8d 81       	ldd	r24, Y+5	; 0x05
    25ee:	9e 81       	ldd	r25, Y+6	; 0x06
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	69 f7       	brne	.-38     	; 0x25ce <__stack+0x3cf>
    25f4:	14 c0       	rjmp	.+40     	; 0x261e <__stack+0x41f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f6:	6f 81       	ldd	r22, Y+7	; 0x07
    25f8:	78 85       	ldd	r23, Y+8	; 0x08
    25fa:	89 85       	ldd	r24, Y+9	; 0x09
    25fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fe:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	9e 83       	std	Y+6, r25	; 0x06
    2608:	8d 83       	std	Y+5, r24	; 0x05
    260a:	8d 81       	ldd	r24, Y+5	; 0x05
    260c:	9e 81       	ldd	r25, Y+6	; 0x06
    260e:	9a 83       	std	Y+2, r25	; 0x02
    2610:	89 83       	std	Y+1, r24	; 0x01
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	9a 81       	ldd	r25, Y+2	; 0x02
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	f1 f7       	brne	.-4      	; 0x2616 <__stack+0x417>
    261a:	9a 83       	std	Y+2, r25	; 0x02
    261c:	89 83       	std	Y+1, r24	; 0x01
                    _delay_ms(1000);
                    velocity(forwardLeftSpeed, forwardRightSpeed);
    261e:	84 eb       	ldi	r24, 0xB4	; 180
    2620:	69 e9       	ldi	r22, 0x99	; 153
    2622:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
                    forward();
    2626:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
                }

                if(state == 9)
    262a:	80 91 1a 03 	lds	r24, 0x031A
    262e:	90 91 1b 03 	lds	r25, 0x031B
    2632:	89 30       	cpi	r24, 0x09	; 9
    2634:	91 05       	cpc	r25, r1
    2636:	f9 f4       	brne	.+62     	; 0x2676 <__stack+0x477>
                {
                    state = 0;
    2638:	10 92 1b 03 	sts	0x031B, r1
    263c:	10 92 1a 03 	sts	0x031A, r1

                    row--;
    2640:	80 91 04 02 	lds	r24, 0x0204
    2644:	90 91 05 02 	lds	r25, 0x0205
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	90 93 05 02 	sts	0x0205, r25
    264e:	80 93 04 02 	sts	0x0204, r24
                    velocity(forwardLeftSpeed, forwardRightSpeed);
    2652:	84 eb       	ldi	r24, 0xB4	; 180
    2654:	69 e9       	ldi	r22, 0x99	; 153
    2656:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
                    forward();
    265a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>

                    if(row == 1)
    265e:	80 91 04 02 	lds	r24, 0x0204
    2662:	90 91 05 02 	lds	r25, 0x0205
    2666:	81 30       	cpi	r24, 0x01	; 1
    2668:	91 05       	cpc	r25, r1
    266a:	29 f4       	brne	.+10     	; 0x2676 <__stack+0x477>
                    {
                        stop();
    266c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
    2670:	ff cf       	rjmp	.-2      	; 0x2670 <__stack+0x471>
                }
            }
        }

        else
            findLine();
    2672:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <findLine>

        lastError = error;
    2676:	89 89       	ldd	r24, Y+17	; 0x11
    2678:	9a 89       	ldd	r25, Y+18	; 0x12
    267a:	98 8b       	std	Y+16, r25	; 0x10
    267c:	8f 87       	std	Y+15, r24	; 0x0f

        //This flag is set in the Interrupt service routine associated by the right optical encoder when the bot has skipped a node.
        if(nodeMissedFlag == 1)
    267e:	80 91 18 03 	lds	r24, 0x0318
    2682:	90 91 19 03 	lds	r25, 0x0319
    2686:	81 30       	cpi	r24, 0x01	; 1
    2688:	91 05       	cpc	r25, r1
    268a:	09 f0       	breq	.+2      	; 0x268e <__stack+0x48f>
    268c:	92 cd       	rjmp	.-1244   	; 0x21b2 <main+0x54>
        {
            stop();
    268e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
    2692:	ff cf       	rjmp	.-2      	; 0x2692 <__stack+0x493>

00002694 <line_follow_mm>:

    return 0;
}

void line_follow_mm(int distance)
{
    2694:	df 93       	push	r29
    2696:	cf 93       	push	r28
    2698:	00 d0       	rcall	.+0      	; 0x269a <line_follow_mm+0x6>
    269a:	00 d0       	rcall	.+0      	; 0x269c <line_follow_mm+0x8>
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	9e 83       	std	Y+6, r25	; 0x06
    26a2:	8d 83       	std	Y+5, r24	; 0x05
    int reqCount = distance/5.338;
    26a4:	8d 81       	ldd	r24, Y+5	; 0x05
    26a6:	9e 81       	ldd	r25, Y+6	; 0x06
    26a8:	aa 27       	eor	r26, r26
    26aa:	97 fd       	sbrc	r25, 7
    26ac:	a0 95       	com	r26
    26ae:	ba 2f       	mov	r27, r26
    26b0:	bc 01       	movw	r22, r24
    26b2:	cd 01       	movw	r24, r26
    26b4:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <__floatsisf>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	bc 01       	movw	r22, r24
    26be:	cd 01       	movw	r24, r26
    26c0:	25 ee       	ldi	r18, 0xE5	; 229
    26c2:	30 ed       	ldi	r19, 0xD0	; 208
    26c4:	4a ea       	ldi	r20, 0xAA	; 170
    26c6:	50 e4       	ldi	r21, 0x40	; 64
    26c8:	0e 94 de 23 	call	0x47bc	; 0x47bc <__divsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	0e 94 78 25 	call	0x4af0	; 0x4af0 <__fixsfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	9c 83       	std	Y+4, r25	; 0x04
    26de:	8b 83       	std	Y+3, r24	; 0x03
    int error = 0;
    26e0:	1a 82       	std	Y+2, r1	; 0x02
    26e2:	19 82       	std	Y+1, r1	; 0x01

    ShaftCountLeft = 0;
    26e4:	10 92 0e 03 	sts	0x030E, r1
    26e8:	10 92 0f 03 	sts	0x030F, r1
    26ec:	10 92 10 03 	sts	0x0310, r1
    26f0:	10 92 11 03 	sts	0x0311, r1
    forward();
    26f4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    26f8:	51 c0       	rjmp	.+162    	; 0x279c <line_follow_mm+0x108>

    while(ShaftCountLeft < reqCount)
    {
        error = getError();
    26fa:	0e 94 c3 1c 	call	0x3986	; 0x3986 <getError>
    26fe:	9a 83       	std	Y+2, r25	; 0x02
    2700:	89 83       	std	Y+1, r24	; 0x01


        if(error > -100 && error < 100)
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	9a 81       	ldd	r25, Y+2	; 0x02
    2706:	2f ef       	ldi	r18, 0xFF	; 255
    2708:	8d 39       	cpi	r24, 0x9D	; 157
    270a:	92 07       	cpc	r25, r18
    270c:	0c f4       	brge	.+2      	; 0x2710 <line_follow_mm+0x7c>
    270e:	3e c0       	rjmp	.+124    	; 0x278c <line_follow_mm+0xf8>
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	9a 81       	ldd	r25, Y+2	; 0x02
    2714:	84 36       	cpi	r24, 0x64	; 100
    2716:	91 05       	cpc	r25, r1
    2718:	cc f5       	brge	.+114    	; 0x278c <line_follow_mm+0xf8>
        {
            leftSpeed = forwardLeftSpeed - error*kp;
    271a:	20 91 02 02 	lds	r18, 0x0202
    271e:	30 91 03 02 	lds	r19, 0x0203
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	9a 81       	ldd	r25, Y+2	; 0x02
    2726:	a9 01       	movw	r20, r18
    2728:	48 9f       	mul	r20, r24
    272a:	90 01       	movw	r18, r0
    272c:	49 9f       	mul	r20, r25
    272e:	30 0d       	add	r19, r0
    2730:	58 9f       	mul	r21, r24
    2732:	30 0d       	add	r19, r0
    2734:	11 24       	eor	r1, r1
    2736:	84 eb       	ldi	r24, 0xB4	; 180
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	82 1b       	sub	r24, r18
    273c:	93 0b       	sbc	r25, r19
    273e:	90 93 1f 03 	sts	0x031F, r25
    2742:	80 93 1e 03 	sts	0x031E, r24
            rightSpeed = forwardRightSpeed + error*kp;
    2746:	20 91 02 02 	lds	r18, 0x0202
    274a:	30 91 03 02 	lds	r19, 0x0203
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	9a 81       	ldd	r25, Y+2	; 0x02
    2752:	ac 01       	movw	r20, r24
    2754:	24 9f       	mul	r18, r20
    2756:	c0 01       	movw	r24, r0
    2758:	25 9f       	mul	r18, r21
    275a:	90 0d       	add	r25, r0
    275c:	34 9f       	mul	r19, r20
    275e:	90 0d       	add	r25, r0
    2760:	11 24       	eor	r1, r1
    2762:	87 56       	subi	r24, 0x67	; 103
    2764:	9f 4f       	sbci	r25, 0xFF	; 255
    2766:	90 93 2b 03 	sts	0x032B, r25
    276a:	80 93 2a 03 	sts	0x032A, r24

            velocity(leftSpeed, rightSpeed);
    276e:	80 91 1e 03 	lds	r24, 0x031E
    2772:	90 91 1f 03 	lds	r25, 0x031F
    2776:	28 2f       	mov	r18, r24
    2778:	80 91 2a 03 	lds	r24, 0x032A
    277c:	90 91 2b 03 	lds	r25, 0x032B
    2780:	98 2f       	mov	r25, r24
    2782:	82 2f       	mov	r24, r18
    2784:	69 2f       	mov	r22, r25
    2786:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    278a:	08 c0       	rjmp	.+16     	; 0x279c <line_follow_mm+0x108>
        }

        else if(error == -100)
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	9a 81       	ldd	r25, Y+2	; 0x02
    2790:	5f ef       	ldi	r21, 0xFF	; 255
    2792:	8c 39       	cpi	r24, 0x9C	; 156
    2794:	95 07       	cpc	r25, r21
    2796:	11 f4       	brne	.+4      	; 0x279c <line_follow_mm+0x108>
            findLine();
    2798:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <findLine>
    int error = 0;

    ShaftCountLeft = 0;
    forward();

    while(ShaftCountLeft < reqCount)
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	9c 81       	ldd	r25, Y+4	; 0x04
    27a0:	9c 01       	movw	r18, r24
    27a2:	44 27       	eor	r20, r20
    27a4:	37 fd       	sbrc	r19, 7
    27a6:	40 95       	com	r20
    27a8:	54 2f       	mov	r21, r20
    27aa:	80 91 0e 03 	lds	r24, 0x030E
    27ae:	90 91 0f 03 	lds	r25, 0x030F
    27b2:	a0 91 10 03 	lds	r26, 0x0310
    27b6:	b0 91 11 03 	lds	r27, 0x0311
    27ba:	82 17       	cp	r24, r18
    27bc:	93 07       	cpc	r25, r19
    27be:	a4 07       	cpc	r26, r20
    27c0:	b5 07       	cpc	r27, r21
    27c2:	08 f4       	brcc	.+2      	; 0x27c6 <line_follow_mm+0x132>
    27c4:	9a cf       	rjmp	.-204    	; 0x26fa <line_follow_mm+0x66>
        }

        else if(error == -100)
            findLine();
    }
}
    27c6:	26 96       	adiw	r28, 0x06	; 6
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	f8 94       	cli
    27cc:	de bf       	out	0x3e, r29	; 62
    27ce:	0f be       	out	0x3f, r0	; 63
    27d0:	cd bf       	out	0x3d, r28	; 61
    27d2:	cf 91       	pop	r28
    27d4:	df 91       	pop	r29
    27d6:	08 95       	ret

000027d8 <arenaLeft>:

void arenaLeft(void)
{
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	e8 97       	sbiw	r28, 0x38	; 56
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    nodeMissEnable = 0;
    27ec:	10 92 01 02 	sts	0x0201, r1
    27f0:	10 92 00 02 	sts	0x0200, r1

    stop();
    27f4:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	aa e7       	ldi	r26, 0x7A	; 122
    27fe:	b4 e4       	ldi	r27, 0x44	; 68
    2800:	8d ab       	std	Y+53, r24	; 0x35
    2802:	9e ab       	std	Y+54, r25	; 0x36
    2804:	af ab       	std	Y+55, r26	; 0x37
    2806:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2808:	6d a9       	ldd	r22, Y+53	; 0x35
    280a:	7e a9       	ldd	r23, Y+54	; 0x36
    280c:	8f a9       	ldd	r24, Y+55	; 0x37
    280e:	98 ad       	ldd	r25, Y+56	; 0x38
    2810:	26 e6       	ldi	r18, 0x66	; 102
    2812:	36 e6       	ldi	r19, 0x66	; 102
    2814:	46 e6       	ldi	r20, 0x66	; 102
    2816:	55 e4       	ldi	r21, 0x45	; 69
    2818:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	89 ab       	std	Y+49, r24	; 0x31
    2822:	9a ab       	std	Y+50, r25	; 0x32
    2824:	ab ab       	std	Y+51, r26	; 0x33
    2826:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2828:	69 a9       	ldd	r22, Y+49	; 0x31
    282a:	7a a9       	ldd	r23, Y+50	; 0x32
    282c:	8b a9       	ldd	r24, Y+51	; 0x33
    282e:	9c a9       	ldd	r25, Y+52	; 0x34
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e8       	ldi	r20, 0x80	; 128
    2836:	5f e3       	ldi	r21, 0x3F	; 63
    2838:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    283c:	88 23       	and	r24, r24
    283e:	2c f4       	brge	.+10     	; 0x284a <arenaLeft+0x72>
		__ticks = 1;
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	98 ab       	std	Y+48, r25	; 0x30
    2846:	8f a7       	std	Y+47, r24	; 0x2f
    2848:	3f c0       	rjmp	.+126    	; 0x28c8 <arenaLeft+0xf0>
	else if (__tmp > 65535)
    284a:	69 a9       	ldd	r22, Y+49	; 0x31
    284c:	7a a9       	ldd	r23, Y+50	; 0x32
    284e:	8b a9       	ldd	r24, Y+51	; 0x33
    2850:	9c a9       	ldd	r25, Y+52	; 0x34
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	3f ef       	ldi	r19, 0xFF	; 255
    2856:	4f e7       	ldi	r20, 0x7F	; 127
    2858:	57 e4       	ldi	r21, 0x47	; 71
    285a:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    285e:	18 16       	cp	r1, r24
    2860:	4c f5       	brge	.+82     	; 0x28b4 <arenaLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2862:	6d a9       	ldd	r22, Y+53	; 0x35
    2864:	7e a9       	ldd	r23, Y+54	; 0x36
    2866:	8f a9       	ldd	r24, Y+55	; 0x37
    2868:	98 ad       	ldd	r25, Y+56	; 0x38
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e2       	ldi	r20, 0x20	; 32
    2870:	51 e4       	ldi	r21, 0x41	; 65
    2872:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	98 ab       	std	Y+48, r25	; 0x30
    2888:	8f a7       	std	Y+47, r24	; 0x2f
    288a:	0f c0       	rjmp	.+30     	; 0x28aa <arenaLeft+0xd2>
    288c:	80 e7       	ldi	r24, 0x70	; 112
    288e:	91 e0       	ldi	r25, 0x01	; 1
    2890:	9e a7       	std	Y+46, r25	; 0x2e
    2892:	8d a7       	std	Y+45, r24	; 0x2d
    2894:	8d a5       	ldd	r24, Y+45	; 0x2d
    2896:	9e a5       	ldd	r25, Y+46	; 0x2e
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <arenaLeft+0xc0>
    289c:	9e a7       	std	Y+46, r25	; 0x2e
    289e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    28a2:	98 a9       	ldd	r25, Y+48	; 0x30
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	98 ab       	std	Y+48, r25	; 0x30
    28a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ac:	98 a9       	ldd	r25, Y+48	; 0x30
    28ae:	00 97       	sbiw	r24, 0x00	; 0
    28b0:	69 f7       	brne	.-38     	; 0x288c <arenaLeft+0xb4>
    28b2:	14 c0       	rjmp	.+40     	; 0x28dc <arenaLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b4:	69 a9       	ldd	r22, Y+49	; 0x31
    28b6:	7a a9       	ldd	r23, Y+50	; 0x32
    28b8:	8b a9       	ldd	r24, Y+51	; 0x33
    28ba:	9c a9       	ldd	r25, Y+52	; 0x34
    28bc:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	98 ab       	std	Y+48, r25	; 0x30
    28c6:	8f a7       	std	Y+47, r24	; 0x2f
    28c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ca:	98 a9       	ldd	r25, Y+48	; 0x30
    28cc:	9c a7       	std	Y+44, r25	; 0x2c
    28ce:	8b a7       	std	Y+43, r24	; 0x2b
    28d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    28d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <arenaLeft+0xfc>
    28d8:	9c a7       	std	Y+44, r25	; 0x2c
    28da:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1000);
    velocity(forwardLeftSpeed, forwardRightSpeed);
    28dc:	84 eb       	ldi	r24, 0xB4	; 180
    28de:	69 e9       	ldi	r22, 0x99	; 153
    28e0:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>

    line_follow_mm(60);
    28e4:	8c e3       	ldi	r24, 0x3C	; 60
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	0e 94 4a 13 	call	0x2694	; 0x2694 <line_follow_mm>
    stop();
    28ec:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	aa e7       	ldi	r26, 0x7A	; 122
    28f6:	b4 e4       	ldi	r27, 0x44	; 68
    28f8:	8f a3       	std	Y+39, r24	; 0x27
    28fa:	98 a7       	std	Y+40, r25	; 0x28
    28fc:	a9 a7       	std	Y+41, r26	; 0x29
    28fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2900:	6f a1       	ldd	r22, Y+39	; 0x27
    2902:	78 a5       	ldd	r23, Y+40	; 0x28
    2904:	89 a5       	ldd	r24, Y+41	; 0x29
    2906:	9a a5       	ldd	r25, Y+42	; 0x2a
    2908:	26 e6       	ldi	r18, 0x66	; 102
    290a:	36 e6       	ldi	r19, 0x66	; 102
    290c:	46 e6       	ldi	r20, 0x66	; 102
    290e:	55 e4       	ldi	r21, 0x45	; 69
    2910:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	8b a3       	std	Y+35, r24	; 0x23
    291a:	9c a3       	std	Y+36, r25	; 0x24
    291c:	ad a3       	std	Y+37, r26	; 0x25
    291e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2920:	6b a1       	ldd	r22, Y+35	; 0x23
    2922:	7c a1       	ldd	r23, Y+36	; 0x24
    2924:	8d a1       	ldd	r24, Y+37	; 0x25
    2926:	9e a1       	ldd	r25, Y+38	; 0x26
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	40 e8       	ldi	r20, 0x80	; 128
    292e:	5f e3       	ldi	r21, 0x3F	; 63
    2930:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    2934:	88 23       	and	r24, r24
    2936:	2c f4       	brge	.+10     	; 0x2942 <arenaLeft+0x16a>
		__ticks = 1;
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	9a a3       	std	Y+34, r25	; 0x22
    293e:	89 a3       	std	Y+33, r24	; 0x21
    2940:	3f c0       	rjmp	.+126    	; 0x29c0 <arenaLeft+0x1e8>
	else if (__tmp > 65535)
    2942:	6b a1       	ldd	r22, Y+35	; 0x23
    2944:	7c a1       	ldd	r23, Y+36	; 0x24
    2946:	8d a1       	ldd	r24, Y+37	; 0x25
    2948:	9e a1       	ldd	r25, Y+38	; 0x26
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	3f ef       	ldi	r19, 0xFF	; 255
    294e:	4f e7       	ldi	r20, 0x7F	; 127
    2950:	57 e4       	ldi	r21, 0x47	; 71
    2952:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    2956:	18 16       	cp	r1, r24
    2958:	4c f5       	brge	.+82     	; 0x29ac <arenaLeft+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295a:	6f a1       	ldd	r22, Y+39	; 0x27
    295c:	78 a5       	ldd	r23, Y+40	; 0x28
    295e:	89 a5       	ldd	r24, Y+41	; 0x29
    2960:	9a a5       	ldd	r25, Y+42	; 0x2a
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e2       	ldi	r20, 0x20	; 32
    2968:	51 e4       	ldi	r21, 0x41	; 65
    296a:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	bc 01       	movw	r22, r24
    2974:	cd 01       	movw	r24, r26
    2976:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	9a a3       	std	Y+34, r25	; 0x22
    2980:	89 a3       	std	Y+33, r24	; 0x21
    2982:	0f c0       	rjmp	.+30     	; 0x29a2 <arenaLeft+0x1ca>
    2984:	80 e7       	ldi	r24, 0x70	; 112
    2986:	91 e0       	ldi	r25, 0x01	; 1
    2988:	98 a3       	std	Y+32, r25	; 0x20
    298a:	8f 8f       	std	Y+31, r24	; 0x1f
    298c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    298e:	98 a1       	ldd	r25, Y+32	; 0x20
    2990:	01 97       	sbiw	r24, 0x01	; 1
    2992:	f1 f7       	brne	.-4      	; 0x2990 <arenaLeft+0x1b8>
    2994:	98 a3       	std	Y+32, r25	; 0x20
    2996:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2998:	89 a1       	ldd	r24, Y+33	; 0x21
    299a:	9a a1       	ldd	r25, Y+34	; 0x22
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	9a a3       	std	Y+34, r25	; 0x22
    29a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a2:	89 a1       	ldd	r24, Y+33	; 0x21
    29a4:	9a a1       	ldd	r25, Y+34	; 0x22
    29a6:	00 97       	sbiw	r24, 0x00	; 0
    29a8:	69 f7       	brne	.-38     	; 0x2984 <arenaLeft+0x1ac>
    29aa:	14 c0       	rjmp	.+40     	; 0x29d4 <arenaLeft+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ac:	6b a1       	ldd	r22, Y+35	; 0x23
    29ae:	7c a1       	ldd	r23, Y+36	; 0x24
    29b0:	8d a1       	ldd	r24, Y+37	; 0x25
    29b2:	9e a1       	ldd	r25, Y+38	; 0x26
    29b4:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	9a a3       	std	Y+34, r25	; 0x22
    29be:	89 a3       	std	Y+33, r24	; 0x21
    29c0:	89 a1       	ldd	r24, Y+33	; 0x21
    29c2:	9a a1       	ldd	r25, Y+34	; 0x22
    29c4:	9e 8f       	std	Y+30, r25	; 0x1e
    29c6:	8d 8f       	std	Y+29, r24	; 0x1d
    29c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	f1 f7       	brne	.-4      	; 0x29cc <arenaLeft+0x1f4>
    29d0:	9e 8f       	std	Y+30, r25	; 0x1e
    29d2:	8d 8f       	std	Y+29, r24	; 0x1d

/*
                soft_left();
                _delay_ms(1000);
*/
    velocity(forwardLeftSpeed, forwardRightSpeed);
    29d4:	84 eb       	ldi	r24, 0xB4	; 180
    29d6:	69 e9       	ldi	r22, 0x99	; 153
    29d8:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    left();
    29dc:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <left>
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	aa e7       	ldi	r26, 0x7A	; 122
    29e6:	b4 e4       	ldi	r27, 0x44	; 68
    29e8:	89 8f       	std	Y+25, r24	; 0x19
    29ea:	9a 8f       	std	Y+26, r25	; 0x1a
    29ec:	ab 8f       	std	Y+27, r26	; 0x1b
    29ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f0:	69 8d       	ldd	r22, Y+25	; 0x19
    29f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29f8:	26 e6       	ldi	r18, 0x66	; 102
    29fa:	36 e6       	ldi	r19, 0x66	; 102
    29fc:	46 e6       	ldi	r20, 0x66	; 102
    29fe:	55 e4       	ldi	r21, 0x45	; 69
    2a00:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	8d 8b       	std	Y+21, r24	; 0x15
    2a0a:	9e 8b       	std	Y+22, r25	; 0x16
    2a0c:	af 8b       	std	Y+23, r26	; 0x17
    2a0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a10:	6d 89       	ldd	r22, Y+21	; 0x15
    2a12:	7e 89       	ldd	r23, Y+22	; 0x16
    2a14:	8f 89       	ldd	r24, Y+23	; 0x17
    2a16:	98 8d       	ldd	r25, Y+24	; 0x18
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e8       	ldi	r20, 0x80	; 128
    2a1e:	5f e3       	ldi	r21, 0x3F	; 63
    2a20:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    2a24:	88 23       	and	r24, r24
    2a26:	2c f4       	brge	.+10     	; 0x2a32 <arenaLeft+0x25a>
		__ticks = 1;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	9c 8b       	std	Y+20, r25	; 0x14
    2a2e:	8b 8b       	std	Y+19, r24	; 0x13
    2a30:	3f c0       	rjmp	.+126    	; 0x2ab0 <arenaLeft+0x2d8>
	else if (__tmp > 65535)
    2a32:	6d 89       	ldd	r22, Y+21	; 0x15
    2a34:	7e 89       	ldd	r23, Y+22	; 0x16
    2a36:	8f 89       	ldd	r24, Y+23	; 0x17
    2a38:	98 8d       	ldd	r25, Y+24	; 0x18
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	3f ef       	ldi	r19, 0xFF	; 255
    2a3e:	4f e7       	ldi	r20, 0x7F	; 127
    2a40:	57 e4       	ldi	r21, 0x47	; 71
    2a42:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    2a46:	18 16       	cp	r1, r24
    2a48:	4c f5       	brge	.+82     	; 0x2a9c <arenaLeft+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e2       	ldi	r20, 0x20	; 32
    2a58:	51 e4       	ldi	r21, 0x41	; 65
    2a5a:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	bc 01       	movw	r22, r24
    2a64:	cd 01       	movw	r24, r26
    2a66:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	9c 8b       	std	Y+20, r25	; 0x14
    2a70:	8b 8b       	std	Y+19, r24	; 0x13
    2a72:	0f c0       	rjmp	.+30     	; 0x2a92 <arenaLeft+0x2ba>
    2a74:	80 e7       	ldi	r24, 0x70	; 112
    2a76:	91 e0       	ldi	r25, 0x01	; 1
    2a78:	9a 8b       	std	Y+18, r25	; 0x12
    2a7a:	89 8b       	std	Y+17, r24	; 0x11
    2a7c:	89 89       	ldd	r24, Y+17	; 0x11
    2a7e:	9a 89       	ldd	r25, Y+18	; 0x12
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <arenaLeft+0x2a8>
    2a84:	9a 8b       	std	Y+18, r25	; 0x12
    2a86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a88:	8b 89       	ldd	r24, Y+19	; 0x13
    2a8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	9c 8b       	std	Y+20, r25	; 0x14
    2a90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a92:	8b 89       	ldd	r24, Y+19	; 0x13
    2a94:	9c 89       	ldd	r25, Y+20	; 0x14
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	69 f7       	brne	.-38     	; 0x2a74 <arenaLeft+0x29c>
    2a9a:	14 c0       	rjmp	.+40     	; 0x2ac4 <arenaLeft+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa0:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa2:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa4:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	9c 8b       	std	Y+20, r25	; 0x14
    2aae:	8b 8b       	std	Y+19, r24	; 0x13
    2ab0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab4:	98 8b       	std	Y+16, r25	; 0x10
    2ab6:	8f 87       	std	Y+15, r24	; 0x0f
    2ab8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aba:	98 89       	ldd	r25, Y+16	; 0x10
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <arenaLeft+0x2e4>
    2ac0:	98 8b       	std	Y+16, r25	; 0x10
    2ac2:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1000);

    centre = ADC_Conversion(2);
    2ac4:	82 e0       	ldi	r24, 0x02	; 2
    2ac6:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    2aca:	88 2f       	mov	r24, r24
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	90 93 29 03 	sts	0x0329, r25
    2ad2:	80 93 28 03 	sts	0x0328, r24
    2ad6:	09 c0       	rjmp	.+18     	; 0x2aea <arenaLeft+0x312>

    while(centre < 15)
    {
        centre = ADC_Conversion(2);
    2ad8:	82 e0       	ldi	r24, 0x02	; 2
    2ada:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    2ade:	88 2f       	mov	r24, r24
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	90 93 29 03 	sts	0x0329, r25
    2ae6:	80 93 28 03 	sts	0x0328, r24
    left();
    _delay_ms(1000);

    centre = ADC_Conversion(2);

    while(centre < 15)
    2aea:	80 91 28 03 	lds	r24, 0x0328
    2aee:	90 91 29 03 	lds	r25, 0x0329
    2af2:	8f 30       	cpi	r24, 0x0F	; 15
    2af4:	91 05       	cpc	r25, r1
    2af6:	84 f3       	brlt	.-32     	; 0x2ad8 <arenaLeft+0x300>
    {
        centre = ADC_Conversion(2);
    }

    stop();
    2af8:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	aa e7       	ldi	r26, 0x7A	; 122
    2b02:	b4 e4       	ldi	r27, 0x44	; 68
    2b04:	8b 87       	std	Y+11, r24	; 0x0b
    2b06:	9c 87       	std	Y+12, r25	; 0x0c
    2b08:	ad 87       	std	Y+13, r26	; 0x0d
    2b0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b14:	26 e6       	ldi	r18, 0x66	; 102
    2b16:	36 e6       	ldi	r19, 0x66	; 102
    2b18:	46 e6       	ldi	r20, 0x66	; 102
    2b1a:	55 e4       	ldi	r21, 0x45	; 69
    2b1c:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	8f 83       	std	Y+7, r24	; 0x07
    2b26:	98 87       	std	Y+8, r25	; 0x08
    2b28:	a9 87       	std	Y+9, r26	; 0x09
    2b2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2e:	78 85       	ldd	r23, Y+8	; 0x08
    2b30:	89 85       	ldd	r24, Y+9	; 0x09
    2b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e8       	ldi	r20, 0x80	; 128
    2b3a:	5f e3       	ldi	r21, 0x3F	; 63
    2b3c:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    2b40:	88 23       	and	r24, r24
    2b42:	2c f4       	brge	.+10     	; 0x2b4e <arenaLeft+0x376>
		__ticks = 1;
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	9e 83       	std	Y+6, r25	; 0x06
    2b4a:	8d 83       	std	Y+5, r24	; 0x05
    2b4c:	3f c0       	rjmp	.+126    	; 0x2bcc <arenaLeft+0x3f4>
	else if (__tmp > 65535)
    2b4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b50:	78 85       	ldd	r23, Y+8	; 0x08
    2b52:	89 85       	ldd	r24, Y+9	; 0x09
    2b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	3f ef       	ldi	r19, 0xFF	; 255
    2b5a:	4f e7       	ldi	r20, 0x7F	; 127
    2b5c:	57 e4       	ldi	r21, 0x47	; 71
    2b5e:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    2b62:	18 16       	cp	r1, r24
    2b64:	4c f5       	brge	.+82     	; 0x2bb8 <arenaLeft+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e2       	ldi	r20, 0x20	; 32
    2b74:	51 e4       	ldi	r21, 0x41	; 65
    2b76:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	bc 01       	movw	r22, r24
    2b80:	cd 01       	movw	r24, r26
    2b82:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	9e 83       	std	Y+6, r25	; 0x06
    2b8c:	8d 83       	std	Y+5, r24	; 0x05
    2b8e:	0f c0       	rjmp	.+30     	; 0x2bae <arenaLeft+0x3d6>
    2b90:	80 e7       	ldi	r24, 0x70	; 112
    2b92:	91 e0       	ldi	r25, 0x01	; 1
    2b94:	9c 83       	std	Y+4, r25	; 0x04
    2b96:	8b 83       	std	Y+3, r24	; 0x03
    2b98:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	f1 f7       	brne	.-4      	; 0x2b9c <arenaLeft+0x3c4>
    2ba0:	9c 83       	std	Y+4, r25	; 0x04
    2ba2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	9e 83       	std	Y+6, r25	; 0x06
    2bac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bae:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb2:	00 97       	sbiw	r24, 0x00	; 0
    2bb4:	69 f7       	brne	.-38     	; 0x2b90 <arenaLeft+0x3b8>
    2bb6:	14 c0       	rjmp	.+40     	; 0x2be0 <arenaLeft+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bba:	78 85       	ldd	r23, Y+8	; 0x08
    2bbc:	89 85       	ldd	r24, Y+9	; 0x09
    2bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc0:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	9e 83       	std	Y+6, r25	; 0x06
    2bca:	8d 83       	std	Y+5, r24	; 0x05
    2bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bce:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd0:	9a 83       	std	Y+2, r25	; 0x02
    2bd2:	89 83       	std	Y+1, r24	; 0x01
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	f1 f7       	brne	.-4      	; 0x2bd8 <arenaLeft+0x400>
    2bdc:	9a 83       	std	Y+2, r25	; 0x02
    2bde:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);

    nodeMissEnable = 1;
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	90 93 01 02 	sts	0x0201, r25
    2be8:	80 93 00 02 	sts	0x0200, r24
}
    2bec:	e8 96       	adiw	r28, 0x38	; 56
    2bee:	0f b6       	in	r0, 0x3f	; 63
    2bf0:	f8 94       	cli
    2bf2:	de bf       	out	0x3e, r29	; 62
    2bf4:	0f be       	out	0x3f, r0	; 63
    2bf6:	cd bf       	out	0x3d, r28	; 61
    2bf8:	cf 91       	pop	r28
    2bfa:	df 91       	pop	r29
    2bfc:	08 95       	ret

00002bfe <arenaLeft_2>:

void arenaLeft_2()
{
    2bfe:	df 93       	push	r29
    2c00:	cf 93       	push	r28
    2c02:	cd b7       	in	r28, 0x3d	; 61
    2c04:	de b7       	in	r29, 0x3e	; 62
    2c06:	aa 97       	sbiw	r28, 0x2a	; 42
    2c08:	0f b6       	in	r0, 0x3f	; 63
    2c0a:	f8 94       	cli
    2c0c:	de bf       	out	0x3e, r29	; 62
    2c0e:	0f be       	out	0x3f, r0	; 63
    2c10:	cd bf       	out	0x3d, r28	; 61
    nodeMissEnable = 0;
    2c12:	10 92 01 02 	sts	0x0201, r1
    2c16:	10 92 00 02 	sts	0x0200, r1

    stop();
    2c1a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	aa e7       	ldi	r26, 0x7A	; 122
    2c24:	b4 e4       	ldi	r27, 0x44	; 68
    2c26:	8f a3       	std	Y+39, r24	; 0x27
    2c28:	98 a7       	std	Y+40, r25	; 0x28
    2c2a:	a9 a7       	std	Y+41, r26	; 0x29
    2c2c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2e:	6f a1       	ldd	r22, Y+39	; 0x27
    2c30:	78 a5       	ldd	r23, Y+40	; 0x28
    2c32:	89 a5       	ldd	r24, Y+41	; 0x29
    2c34:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c36:	26 e6       	ldi	r18, 0x66	; 102
    2c38:	36 e6       	ldi	r19, 0x66	; 102
    2c3a:	46 e6       	ldi	r20, 0x66	; 102
    2c3c:	55 e4       	ldi	r21, 0x45	; 69
    2c3e:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	8b a3       	std	Y+35, r24	; 0x23
    2c48:	9c a3       	std	Y+36, r25	; 0x24
    2c4a:	ad a3       	std	Y+37, r26	; 0x25
    2c4c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c4e:	6b a1       	ldd	r22, Y+35	; 0x23
    2c50:	7c a1       	ldd	r23, Y+36	; 0x24
    2c52:	8d a1       	ldd	r24, Y+37	; 0x25
    2c54:	9e a1       	ldd	r25, Y+38	; 0x26
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e8       	ldi	r20, 0x80	; 128
    2c5c:	5f e3       	ldi	r21, 0x3F	; 63
    2c5e:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    2c62:	88 23       	and	r24, r24
    2c64:	2c f4       	brge	.+10     	; 0x2c70 <arenaLeft_2+0x72>
		__ticks = 1;
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	9a a3       	std	Y+34, r25	; 0x22
    2c6c:	89 a3       	std	Y+33, r24	; 0x21
    2c6e:	3f c0       	rjmp	.+126    	; 0x2cee <arenaLeft_2+0xf0>
	else if (__tmp > 65535)
    2c70:	6b a1       	ldd	r22, Y+35	; 0x23
    2c72:	7c a1       	ldd	r23, Y+36	; 0x24
    2c74:	8d a1       	ldd	r24, Y+37	; 0x25
    2c76:	9e a1       	ldd	r25, Y+38	; 0x26
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	3f ef       	ldi	r19, 0xFF	; 255
    2c7c:	4f e7       	ldi	r20, 0x7F	; 127
    2c7e:	57 e4       	ldi	r21, 0x47	; 71
    2c80:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    2c84:	18 16       	cp	r1, r24
    2c86:	4c f5       	brge	.+82     	; 0x2cda <arenaLeft_2+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c88:	6f a1       	ldd	r22, Y+39	; 0x27
    2c8a:	78 a5       	ldd	r23, Y+40	; 0x28
    2c8c:	89 a5       	ldd	r24, Y+41	; 0x29
    2c8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	40 e2       	ldi	r20, 0x20	; 32
    2c96:	51 e4       	ldi	r21, 0x41	; 65
    2c98:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	bc 01       	movw	r22, r24
    2ca2:	cd 01       	movw	r24, r26
    2ca4:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	9a a3       	std	Y+34, r25	; 0x22
    2cae:	89 a3       	std	Y+33, r24	; 0x21
    2cb0:	0f c0       	rjmp	.+30     	; 0x2cd0 <arenaLeft_2+0xd2>
    2cb2:	80 e7       	ldi	r24, 0x70	; 112
    2cb4:	91 e0       	ldi	r25, 0x01	; 1
    2cb6:	98 a3       	std	Y+32, r25	; 0x20
    2cb8:	8f 8f       	std	Y+31, r24	; 0x1f
    2cba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cbc:	98 a1       	ldd	r25, Y+32	; 0x20
    2cbe:	01 97       	sbiw	r24, 0x01	; 1
    2cc0:	f1 f7       	brne	.-4      	; 0x2cbe <arenaLeft_2+0xc0>
    2cc2:	98 a3       	std	Y+32, r25	; 0x20
    2cc4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc6:	89 a1       	ldd	r24, Y+33	; 0x21
    2cc8:	9a a1       	ldd	r25, Y+34	; 0x22
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	9a a3       	std	Y+34, r25	; 0x22
    2cce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd0:	89 a1       	ldd	r24, Y+33	; 0x21
    2cd2:	9a a1       	ldd	r25, Y+34	; 0x22
    2cd4:	00 97       	sbiw	r24, 0x00	; 0
    2cd6:	69 f7       	brne	.-38     	; 0x2cb2 <arenaLeft_2+0xb4>
    2cd8:	14 c0       	rjmp	.+40     	; 0x2d02 <arenaLeft_2+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cda:	6b a1       	ldd	r22, Y+35	; 0x23
    2cdc:	7c a1       	ldd	r23, Y+36	; 0x24
    2cde:	8d a1       	ldd	r24, Y+37	; 0x25
    2ce0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ce2:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	9a a3       	std	Y+34, r25	; 0x22
    2cec:	89 a3       	std	Y+33, r24	; 0x21
    2cee:	89 a1       	ldd	r24, Y+33	; 0x21
    2cf0:	9a a1       	ldd	r25, Y+34	; 0x22
    2cf2:	9e 8f       	std	Y+30, r25	; 0x1e
    2cf4:	8d 8f       	std	Y+29, r24	; 0x1d
    2cf6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cf8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	f1 f7       	brne	.-4      	; 0x2cfa <arenaLeft_2+0xfc>
    2cfe:	9e 8f       	std	Y+30, r25	; 0x1e
    2d00:	8d 8f       	std	Y+29, r24	; 0x1d

/*
                soft_left();
                _delay_ms(1000);
*/
    velocity(forwardLeftSpeed, forwardRightSpeed);
    2d02:	84 eb       	ldi	r24, 0xB4	; 180
    2d04:	69 e9       	ldi	r22, 0x99	; 153
    2d06:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    left();
    2d0a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <left>
    2d0e:	80 e0       	ldi	r24, 0x00	; 0
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	aa e7       	ldi	r26, 0x7A	; 122
    2d14:	b4 e4       	ldi	r27, 0x44	; 68
    2d16:	89 8f       	std	Y+25, r24	; 0x19
    2d18:	9a 8f       	std	Y+26, r25	; 0x1a
    2d1a:	ab 8f       	std	Y+27, r26	; 0x1b
    2d1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1e:	69 8d       	ldd	r22, Y+25	; 0x19
    2d20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d26:	26 e6       	ldi	r18, 0x66	; 102
    2d28:	36 e6       	ldi	r19, 0x66	; 102
    2d2a:	46 e6       	ldi	r20, 0x66	; 102
    2d2c:	55 e4       	ldi	r21, 0x45	; 69
    2d2e:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	8d 8b       	std	Y+21, r24	; 0x15
    2d38:	9e 8b       	std	Y+22, r25	; 0x16
    2d3a:	af 8b       	std	Y+23, r26	; 0x17
    2d3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d40:	7e 89       	ldd	r23, Y+22	; 0x16
    2d42:	8f 89       	ldd	r24, Y+23	; 0x17
    2d44:	98 8d       	ldd	r25, Y+24	; 0x18
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e8       	ldi	r20, 0x80	; 128
    2d4c:	5f e3       	ldi	r21, 0x3F	; 63
    2d4e:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    2d52:	88 23       	and	r24, r24
    2d54:	2c f4       	brge	.+10     	; 0x2d60 <arenaLeft_2+0x162>
		__ticks = 1;
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	9c 8b       	std	Y+20, r25	; 0x14
    2d5c:	8b 8b       	std	Y+19, r24	; 0x13
    2d5e:	3f c0       	rjmp	.+126    	; 0x2dde <arenaLeft_2+0x1e0>
	else if (__tmp > 65535)
    2d60:	6d 89       	ldd	r22, Y+21	; 0x15
    2d62:	7e 89       	ldd	r23, Y+22	; 0x16
    2d64:	8f 89       	ldd	r24, Y+23	; 0x17
    2d66:	98 8d       	ldd	r25, Y+24	; 0x18
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	3f ef       	ldi	r19, 0xFF	; 255
    2d6c:	4f e7       	ldi	r20, 0x7F	; 127
    2d6e:	57 e4       	ldi	r21, 0x47	; 71
    2d70:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    2d74:	18 16       	cp	r1, r24
    2d76:	4c f5       	brge	.+82     	; 0x2dca <arenaLeft_2+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d78:	69 8d       	ldd	r22, Y+25	; 0x19
    2d7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	40 e2       	ldi	r20, 0x20	; 32
    2d86:	51 e4       	ldi	r21, 0x41	; 65
    2d88:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	bc 01       	movw	r22, r24
    2d92:	cd 01       	movw	r24, r26
    2d94:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	9c 8b       	std	Y+20, r25	; 0x14
    2d9e:	8b 8b       	std	Y+19, r24	; 0x13
    2da0:	0f c0       	rjmp	.+30     	; 0x2dc0 <arenaLeft_2+0x1c2>
    2da2:	80 e7       	ldi	r24, 0x70	; 112
    2da4:	91 e0       	ldi	r25, 0x01	; 1
    2da6:	9a 8b       	std	Y+18, r25	; 0x12
    2da8:	89 8b       	std	Y+17, r24	; 0x11
    2daa:	89 89       	ldd	r24, Y+17	; 0x11
    2dac:	9a 89       	ldd	r25, Y+18	; 0x12
    2dae:	01 97       	sbiw	r24, 0x01	; 1
    2db0:	f1 f7       	brne	.-4      	; 0x2dae <arenaLeft_2+0x1b0>
    2db2:	9a 8b       	std	Y+18, r25	; 0x12
    2db4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db6:	8b 89       	ldd	r24, Y+19	; 0x13
    2db8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	9c 8b       	std	Y+20, r25	; 0x14
    2dbe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc0:	8b 89       	ldd	r24, Y+19	; 0x13
    2dc2:	9c 89       	ldd	r25, Y+20	; 0x14
    2dc4:	00 97       	sbiw	r24, 0x00	; 0
    2dc6:	69 f7       	brne	.-38     	; 0x2da2 <arenaLeft_2+0x1a4>
    2dc8:	14 c0       	rjmp	.+40     	; 0x2df2 <arenaLeft_2+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dca:	6d 89       	ldd	r22, Y+21	; 0x15
    2dcc:	7e 89       	ldd	r23, Y+22	; 0x16
    2dce:	8f 89       	ldd	r24, Y+23	; 0x17
    2dd0:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd2:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	9c 8b       	std	Y+20, r25	; 0x14
    2ddc:	8b 8b       	std	Y+19, r24	; 0x13
    2dde:	8b 89       	ldd	r24, Y+19	; 0x13
    2de0:	9c 89       	ldd	r25, Y+20	; 0x14
    2de2:	98 8b       	std	Y+16, r25	; 0x10
    2de4:	8f 87       	std	Y+15, r24	; 0x0f
    2de6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2de8:	98 89       	ldd	r25, Y+16	; 0x10
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	f1 f7       	brne	.-4      	; 0x2dea <arenaLeft_2+0x1ec>
    2dee:	98 8b       	std	Y+16, r25	; 0x10
    2df0:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1000);

    centre = ADC_Conversion(2);
    2df2:	82 e0       	ldi	r24, 0x02	; 2
    2df4:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    2df8:	88 2f       	mov	r24, r24
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	90 93 29 03 	sts	0x0329, r25
    2e00:	80 93 28 03 	sts	0x0328, r24
    2e04:	09 c0       	rjmp	.+18     	; 0x2e18 <arenaLeft_2+0x21a>

    while(centre < 15)
    {
        centre = ADC_Conversion(2);
    2e06:	82 e0       	ldi	r24, 0x02	; 2
    2e08:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    2e0c:	88 2f       	mov	r24, r24
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	90 93 29 03 	sts	0x0329, r25
    2e14:	80 93 28 03 	sts	0x0328, r24
    left();
    _delay_ms(1000);

    centre = ADC_Conversion(2);

    while(centre < 15)
    2e18:	80 91 28 03 	lds	r24, 0x0328
    2e1c:	90 91 29 03 	lds	r25, 0x0329
    2e20:	8f 30       	cpi	r24, 0x0F	; 15
    2e22:	91 05       	cpc	r25, r1
    2e24:	84 f3       	brlt	.-32     	; 0x2e06 <arenaLeft_2+0x208>
    {
        centre = ADC_Conversion(2);
    }

    stop();
    2e26:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
    2e2a:	80 e0       	ldi	r24, 0x00	; 0
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	aa e7       	ldi	r26, 0x7A	; 122
    2e30:	b4 e4       	ldi	r27, 0x44	; 68
    2e32:	8b 87       	std	Y+11, r24	; 0x0b
    2e34:	9c 87       	std	Y+12, r25	; 0x0c
    2e36:	ad 87       	std	Y+13, r26	; 0x0d
    2e38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e42:	26 e6       	ldi	r18, 0x66	; 102
    2e44:	36 e6       	ldi	r19, 0x66	; 102
    2e46:	46 e6       	ldi	r20, 0x66	; 102
    2e48:	55 e4       	ldi	r21, 0x45	; 69
    2e4a:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	8f 83       	std	Y+7, r24	; 0x07
    2e54:	98 87       	std	Y+8, r25	; 0x08
    2e56:	a9 87       	std	Y+9, r26	; 0x09
    2e58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e5c:	78 85       	ldd	r23, Y+8	; 0x08
    2e5e:	89 85       	ldd	r24, Y+9	; 0x09
    2e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	40 e8       	ldi	r20, 0x80	; 128
    2e68:	5f e3       	ldi	r21, 0x3F	; 63
    2e6a:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    2e6e:	88 23       	and	r24, r24
    2e70:	2c f4       	brge	.+10     	; 0x2e7c <arenaLeft_2+0x27e>
		__ticks = 1;
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	9e 83       	std	Y+6, r25	; 0x06
    2e78:	8d 83       	std	Y+5, r24	; 0x05
    2e7a:	3f c0       	rjmp	.+126    	; 0x2efa <arenaLeft_2+0x2fc>
	else if (__tmp > 65535)
    2e7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e7e:	78 85       	ldd	r23, Y+8	; 0x08
    2e80:	89 85       	ldd	r24, Y+9	; 0x09
    2e82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	3f ef       	ldi	r19, 0xFF	; 255
    2e88:	4f e7       	ldi	r20, 0x7F	; 127
    2e8a:	57 e4       	ldi	r21, 0x47	; 71
    2e8c:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    2e90:	18 16       	cp	r1, r24
    2e92:	4c f5       	brge	.+82     	; 0x2ee6 <arenaLeft_2+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	40 e2       	ldi	r20, 0x20	; 32
    2ea2:	51 e4       	ldi	r21, 0x41	; 65
    2ea4:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	bc 01       	movw	r22, r24
    2eae:	cd 01       	movw	r24, r26
    2eb0:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	9e 83       	std	Y+6, r25	; 0x06
    2eba:	8d 83       	std	Y+5, r24	; 0x05
    2ebc:	0f c0       	rjmp	.+30     	; 0x2edc <arenaLeft_2+0x2de>
    2ebe:	80 e7       	ldi	r24, 0x70	; 112
    2ec0:	91 e0       	ldi	r25, 0x01	; 1
    2ec2:	9c 83       	std	Y+4, r25	; 0x04
    2ec4:	8b 83       	std	Y+3, r24	; 0x03
    2ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	f1 f7       	brne	.-4      	; 0x2eca <arenaLeft_2+0x2cc>
    2ece:	9c 83       	std	Y+4, r25	; 0x04
    2ed0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	9e 83       	std	Y+6, r25	; 0x06
    2eda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2edc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ede:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee0:	00 97       	sbiw	r24, 0x00	; 0
    2ee2:	69 f7       	brne	.-38     	; 0x2ebe <arenaLeft_2+0x2c0>
    2ee4:	14 c0       	rjmp	.+40     	; 0x2f0e <arenaLeft_2+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee8:	78 85       	ldd	r23, Y+8	; 0x08
    2eea:	89 85       	ldd	r24, Y+9	; 0x09
    2eec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eee:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	9e 83       	std	Y+6, r25	; 0x06
    2ef8:	8d 83       	std	Y+5, r24	; 0x05
    2efa:	8d 81       	ldd	r24, Y+5	; 0x05
    2efc:	9e 81       	ldd	r25, Y+6	; 0x06
    2efe:	9a 83       	std	Y+2, r25	; 0x02
    2f00:	89 83       	std	Y+1, r24	; 0x01
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	9a 81       	ldd	r25, Y+2	; 0x02
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	f1 f7       	brne	.-4      	; 0x2f06 <arenaLeft_2+0x308>
    2f0a:	9a 83       	std	Y+2, r25	; 0x02
    2f0c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);

    nodeMissEnable = 1;
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	90 93 01 02 	sts	0x0201, r25
    2f16:	80 93 00 02 	sts	0x0200, r24
}
    2f1a:	aa 96       	adiw	r28, 0x2a	; 42
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	f8 94       	cli
    2f20:	de bf       	out	0x3e, r29	; 62
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	cd bf       	out	0x3d, r28	; 61
    2f26:	cf 91       	pop	r28
    2f28:	df 91       	pop	r29
    2f2a:	08 95       	ret

00002f2c <arenaRight>:

void arenaRight(void)
{
    2f2c:	df 93       	push	r29
    2f2e:	cf 93       	push	r28
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
    2f34:	e8 97       	sbiw	r28, 0x38	; 56
    2f36:	0f b6       	in	r0, 0x3f	; 63
    2f38:	f8 94       	cli
    2f3a:	de bf       	out	0x3e, r29	; 62
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	cd bf       	out	0x3d, r28	; 61
    nodeMissEnable = 0;
    2f40:	10 92 01 02 	sts	0x0201, r1
    2f44:	10 92 00 02 	sts	0x0200, r1

    stop();
    2f48:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	aa e7       	ldi	r26, 0x7A	; 122
    2f52:	b4 e4       	ldi	r27, 0x44	; 68
    2f54:	8d ab       	std	Y+53, r24	; 0x35
    2f56:	9e ab       	std	Y+54, r25	; 0x36
    2f58:	af ab       	std	Y+55, r26	; 0x37
    2f5a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f5c:	6d a9       	ldd	r22, Y+53	; 0x35
    2f5e:	7e a9       	ldd	r23, Y+54	; 0x36
    2f60:	8f a9       	ldd	r24, Y+55	; 0x37
    2f62:	98 ad       	ldd	r25, Y+56	; 0x38
    2f64:	26 e6       	ldi	r18, 0x66	; 102
    2f66:	36 e6       	ldi	r19, 0x66	; 102
    2f68:	46 e6       	ldi	r20, 0x66	; 102
    2f6a:	55 e4       	ldi	r21, 0x45	; 69
    2f6c:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	89 ab       	std	Y+49, r24	; 0x31
    2f76:	9a ab       	std	Y+50, r25	; 0x32
    2f78:	ab ab       	std	Y+51, r26	; 0x33
    2f7a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f7c:	69 a9       	ldd	r22, Y+49	; 0x31
    2f7e:	7a a9       	ldd	r23, Y+50	; 0x32
    2f80:	8b a9       	ldd	r24, Y+51	; 0x33
    2f82:	9c a9       	ldd	r25, Y+52	; 0x34
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	40 e8       	ldi	r20, 0x80	; 128
    2f8a:	5f e3       	ldi	r21, 0x3F	; 63
    2f8c:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    2f90:	88 23       	and	r24, r24
    2f92:	2c f4       	brge	.+10     	; 0x2f9e <arenaRight+0x72>
		__ticks = 1;
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	98 ab       	std	Y+48, r25	; 0x30
    2f9a:	8f a7       	std	Y+47, r24	; 0x2f
    2f9c:	3f c0       	rjmp	.+126    	; 0x301c <arenaRight+0xf0>
	else if (__tmp > 65535)
    2f9e:	69 a9       	ldd	r22, Y+49	; 0x31
    2fa0:	7a a9       	ldd	r23, Y+50	; 0x32
    2fa2:	8b a9       	ldd	r24, Y+51	; 0x33
    2fa4:	9c a9       	ldd	r25, Y+52	; 0x34
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	3f ef       	ldi	r19, 0xFF	; 255
    2faa:	4f e7       	ldi	r20, 0x7F	; 127
    2fac:	57 e4       	ldi	r21, 0x47	; 71
    2fae:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    2fb2:	18 16       	cp	r1, r24
    2fb4:	4c f5       	brge	.+82     	; 0x3008 <arenaRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb6:	6d a9       	ldd	r22, Y+53	; 0x35
    2fb8:	7e a9       	ldd	r23, Y+54	; 0x36
    2fba:	8f a9       	ldd	r24, Y+55	; 0x37
    2fbc:	98 ad       	ldd	r25, Y+56	; 0x38
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	40 e2       	ldi	r20, 0x20	; 32
    2fc4:	51 e4       	ldi	r21, 0x41	; 65
    2fc6:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	bc 01       	movw	r22, r24
    2fd0:	cd 01       	movw	r24, r26
    2fd2:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	98 ab       	std	Y+48, r25	; 0x30
    2fdc:	8f a7       	std	Y+47, r24	; 0x2f
    2fde:	0f c0       	rjmp	.+30     	; 0x2ffe <arenaRight+0xd2>
    2fe0:	80 e7       	ldi	r24, 0x70	; 112
    2fe2:	91 e0       	ldi	r25, 0x01	; 1
    2fe4:	9e a7       	std	Y+46, r25	; 0x2e
    2fe6:	8d a7       	std	Y+45, r24	; 0x2d
    2fe8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fea:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	f1 f7       	brne	.-4      	; 0x2fec <arenaRight+0xc0>
    2ff0:	9e a7       	std	Y+46, r25	; 0x2e
    2ff2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ff6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	98 ab       	std	Y+48, r25	; 0x30
    2ffc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3000:	98 a9       	ldd	r25, Y+48	; 0x30
    3002:	00 97       	sbiw	r24, 0x00	; 0
    3004:	69 f7       	brne	.-38     	; 0x2fe0 <arenaRight+0xb4>
    3006:	14 c0       	rjmp	.+40     	; 0x3030 <arenaRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3008:	69 a9       	ldd	r22, Y+49	; 0x31
    300a:	7a a9       	ldd	r23, Y+50	; 0x32
    300c:	8b a9       	ldd	r24, Y+51	; 0x33
    300e:	9c a9       	ldd	r25, Y+52	; 0x34
    3010:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    3014:	dc 01       	movw	r26, r24
    3016:	cb 01       	movw	r24, r22
    3018:	98 ab       	std	Y+48, r25	; 0x30
    301a:	8f a7       	std	Y+47, r24	; 0x2f
    301c:	8f a5       	ldd	r24, Y+47	; 0x2f
    301e:	98 a9       	ldd	r25, Y+48	; 0x30
    3020:	9c a7       	std	Y+44, r25	; 0x2c
    3022:	8b a7       	std	Y+43, r24	; 0x2b
    3024:	8b a5       	ldd	r24, Y+43	; 0x2b
    3026:	9c a5       	ldd	r25, Y+44	; 0x2c
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	f1 f7       	brne	.-4      	; 0x3028 <arenaRight+0xfc>
    302c:	9c a7       	std	Y+44, r25	; 0x2c
    302e:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1000);
    velocity(forwardLeftSpeed, forwardRightSpeed);
    3030:	84 eb       	ldi	r24, 0xB4	; 180
    3032:	69 e9       	ldi	r22, 0x99	; 153
    3034:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>

    line_follow_mm(60);
    3038:	8c e3       	ldi	r24, 0x3C	; 60
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	0e 94 4a 13 	call	0x2694	; 0x2694 <line_follow_mm>
    stop();
    3040:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	aa e7       	ldi	r26, 0x7A	; 122
    304a:	b4 e4       	ldi	r27, 0x44	; 68
    304c:	8f a3       	std	Y+39, r24	; 0x27
    304e:	98 a7       	std	Y+40, r25	; 0x28
    3050:	a9 a7       	std	Y+41, r26	; 0x29
    3052:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3054:	6f a1       	ldd	r22, Y+39	; 0x27
    3056:	78 a5       	ldd	r23, Y+40	; 0x28
    3058:	89 a5       	ldd	r24, Y+41	; 0x29
    305a:	9a a5       	ldd	r25, Y+42	; 0x2a
    305c:	26 e6       	ldi	r18, 0x66	; 102
    305e:	36 e6       	ldi	r19, 0x66	; 102
    3060:	46 e6       	ldi	r20, 0x66	; 102
    3062:	55 e4       	ldi	r21, 0x45	; 69
    3064:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	8b a3       	std	Y+35, r24	; 0x23
    306e:	9c a3       	std	Y+36, r25	; 0x24
    3070:	ad a3       	std	Y+37, r26	; 0x25
    3072:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3074:	6b a1       	ldd	r22, Y+35	; 0x23
    3076:	7c a1       	ldd	r23, Y+36	; 0x24
    3078:	8d a1       	ldd	r24, Y+37	; 0x25
    307a:	9e a1       	ldd	r25, Y+38	; 0x26
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	40 e8       	ldi	r20, 0x80	; 128
    3082:	5f e3       	ldi	r21, 0x3F	; 63
    3084:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    3088:	88 23       	and	r24, r24
    308a:	2c f4       	brge	.+10     	; 0x3096 <arenaRight+0x16a>
		__ticks = 1;
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	9a a3       	std	Y+34, r25	; 0x22
    3092:	89 a3       	std	Y+33, r24	; 0x21
    3094:	3f c0       	rjmp	.+126    	; 0x3114 <arenaRight+0x1e8>
	else if (__tmp > 65535)
    3096:	6b a1       	ldd	r22, Y+35	; 0x23
    3098:	7c a1       	ldd	r23, Y+36	; 0x24
    309a:	8d a1       	ldd	r24, Y+37	; 0x25
    309c:	9e a1       	ldd	r25, Y+38	; 0x26
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	3f ef       	ldi	r19, 0xFF	; 255
    30a2:	4f e7       	ldi	r20, 0x7F	; 127
    30a4:	57 e4       	ldi	r21, 0x47	; 71
    30a6:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    30aa:	18 16       	cp	r1, r24
    30ac:	4c f5       	brge	.+82     	; 0x3100 <arenaRight+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ae:	6f a1       	ldd	r22, Y+39	; 0x27
    30b0:	78 a5       	ldd	r23, Y+40	; 0x28
    30b2:	89 a5       	ldd	r24, Y+41	; 0x29
    30b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	40 e2       	ldi	r20, 0x20	; 32
    30bc:	51 e4       	ldi	r21, 0x41	; 65
    30be:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	bc 01       	movw	r22, r24
    30c8:	cd 01       	movw	r24, r26
    30ca:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	9a a3       	std	Y+34, r25	; 0x22
    30d4:	89 a3       	std	Y+33, r24	; 0x21
    30d6:	0f c0       	rjmp	.+30     	; 0x30f6 <arenaRight+0x1ca>
    30d8:	80 e7       	ldi	r24, 0x70	; 112
    30da:	91 e0       	ldi	r25, 0x01	; 1
    30dc:	98 a3       	std	Y+32, r25	; 0x20
    30de:	8f 8f       	std	Y+31, r24	; 0x1f
    30e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30e2:	98 a1       	ldd	r25, Y+32	; 0x20
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	f1 f7       	brne	.-4      	; 0x30e4 <arenaRight+0x1b8>
    30e8:	98 a3       	std	Y+32, r25	; 0x20
    30ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ec:	89 a1       	ldd	r24, Y+33	; 0x21
    30ee:	9a a1       	ldd	r25, Y+34	; 0x22
    30f0:	01 97       	sbiw	r24, 0x01	; 1
    30f2:	9a a3       	std	Y+34, r25	; 0x22
    30f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f6:	89 a1       	ldd	r24, Y+33	; 0x21
    30f8:	9a a1       	ldd	r25, Y+34	; 0x22
    30fa:	00 97       	sbiw	r24, 0x00	; 0
    30fc:	69 f7       	brne	.-38     	; 0x30d8 <arenaRight+0x1ac>
    30fe:	14 c0       	rjmp	.+40     	; 0x3128 <arenaRight+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3100:	6b a1       	ldd	r22, Y+35	; 0x23
    3102:	7c a1       	ldd	r23, Y+36	; 0x24
    3104:	8d a1       	ldd	r24, Y+37	; 0x25
    3106:	9e a1       	ldd	r25, Y+38	; 0x26
    3108:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	9a a3       	std	Y+34, r25	; 0x22
    3112:	89 a3       	std	Y+33, r24	; 0x21
    3114:	89 a1       	ldd	r24, Y+33	; 0x21
    3116:	9a a1       	ldd	r25, Y+34	; 0x22
    3118:	9e 8f       	std	Y+30, r25	; 0x1e
    311a:	8d 8f       	std	Y+29, r24	; 0x1d
    311c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    311e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	f1 f7       	brne	.-4      	; 0x3120 <arenaRight+0x1f4>
    3124:	9e 8f       	std	Y+30, r25	; 0x1e
    3126:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1000);
/*
                soft_right();
                _delay_ms(1000);
*/
    velocity(forwardLeftSpeed, forwardRightSpeed);
    3128:	84 eb       	ldi	r24, 0xB4	; 180
    312a:	69 e9       	ldi	r22, 0x99	; 153
    312c:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    right();
    3130:	0e 94 80 03 	call	0x700	; 0x700 <right>
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	aa e7       	ldi	r26, 0x7A	; 122
    313a:	b4 e4       	ldi	r27, 0x44	; 68
    313c:	89 8f       	std	Y+25, r24	; 0x19
    313e:	9a 8f       	std	Y+26, r25	; 0x1a
    3140:	ab 8f       	std	Y+27, r26	; 0x1b
    3142:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3144:	69 8d       	ldd	r22, Y+25	; 0x19
    3146:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3148:	8b 8d       	ldd	r24, Y+27	; 0x1b
    314a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    314c:	26 e6       	ldi	r18, 0x66	; 102
    314e:	36 e6       	ldi	r19, 0x66	; 102
    3150:	46 e6       	ldi	r20, 0x66	; 102
    3152:	55 e4       	ldi	r21, 0x45	; 69
    3154:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	8d 8b       	std	Y+21, r24	; 0x15
    315e:	9e 8b       	std	Y+22, r25	; 0x16
    3160:	af 8b       	std	Y+23, r26	; 0x17
    3162:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3164:	6d 89       	ldd	r22, Y+21	; 0x15
    3166:	7e 89       	ldd	r23, Y+22	; 0x16
    3168:	8f 89       	ldd	r24, Y+23	; 0x17
    316a:	98 8d       	ldd	r25, Y+24	; 0x18
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	40 e8       	ldi	r20, 0x80	; 128
    3172:	5f e3       	ldi	r21, 0x3F	; 63
    3174:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    3178:	88 23       	and	r24, r24
    317a:	2c f4       	brge	.+10     	; 0x3186 <arenaRight+0x25a>
		__ticks = 1;
    317c:	81 e0       	ldi	r24, 0x01	; 1
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	9c 8b       	std	Y+20, r25	; 0x14
    3182:	8b 8b       	std	Y+19, r24	; 0x13
    3184:	3f c0       	rjmp	.+126    	; 0x3204 <arenaRight+0x2d8>
	else if (__tmp > 65535)
    3186:	6d 89       	ldd	r22, Y+21	; 0x15
    3188:	7e 89       	ldd	r23, Y+22	; 0x16
    318a:	8f 89       	ldd	r24, Y+23	; 0x17
    318c:	98 8d       	ldd	r25, Y+24	; 0x18
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	3f ef       	ldi	r19, 0xFF	; 255
    3192:	4f e7       	ldi	r20, 0x7F	; 127
    3194:	57 e4       	ldi	r21, 0x47	; 71
    3196:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    319a:	18 16       	cp	r1, r24
    319c:	4c f5       	brge	.+82     	; 0x31f0 <arenaRight+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    319e:	69 8d       	ldd	r22, Y+25	; 0x19
    31a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	40 e2       	ldi	r20, 0x20	; 32
    31ac:	51 e4       	ldi	r21, 0x41	; 65
    31ae:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	bc 01       	movw	r22, r24
    31b8:	cd 01       	movw	r24, r26
    31ba:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	9c 8b       	std	Y+20, r25	; 0x14
    31c4:	8b 8b       	std	Y+19, r24	; 0x13
    31c6:	0f c0       	rjmp	.+30     	; 0x31e6 <arenaRight+0x2ba>
    31c8:	80 e7       	ldi	r24, 0x70	; 112
    31ca:	91 e0       	ldi	r25, 0x01	; 1
    31cc:	9a 8b       	std	Y+18, r25	; 0x12
    31ce:	89 8b       	std	Y+17, r24	; 0x11
    31d0:	89 89       	ldd	r24, Y+17	; 0x11
    31d2:	9a 89       	ldd	r25, Y+18	; 0x12
    31d4:	01 97       	sbiw	r24, 0x01	; 1
    31d6:	f1 f7       	brne	.-4      	; 0x31d4 <arenaRight+0x2a8>
    31d8:	9a 8b       	std	Y+18, r25	; 0x12
    31da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31dc:	8b 89       	ldd	r24, Y+19	; 0x13
    31de:	9c 89       	ldd	r25, Y+20	; 0x14
    31e0:	01 97       	sbiw	r24, 0x01	; 1
    31e2:	9c 8b       	std	Y+20, r25	; 0x14
    31e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e6:	8b 89       	ldd	r24, Y+19	; 0x13
    31e8:	9c 89       	ldd	r25, Y+20	; 0x14
    31ea:	00 97       	sbiw	r24, 0x00	; 0
    31ec:	69 f7       	brne	.-38     	; 0x31c8 <arenaRight+0x29c>
    31ee:	14 c0       	rjmp	.+40     	; 0x3218 <arenaRight+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f0:	6d 89       	ldd	r22, Y+21	; 0x15
    31f2:	7e 89       	ldd	r23, Y+22	; 0x16
    31f4:	8f 89       	ldd	r24, Y+23	; 0x17
    31f6:	98 8d       	ldd	r25, Y+24	; 0x18
    31f8:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    31fc:	dc 01       	movw	r26, r24
    31fe:	cb 01       	movw	r24, r22
    3200:	9c 8b       	std	Y+20, r25	; 0x14
    3202:	8b 8b       	std	Y+19, r24	; 0x13
    3204:	8b 89       	ldd	r24, Y+19	; 0x13
    3206:	9c 89       	ldd	r25, Y+20	; 0x14
    3208:	98 8b       	std	Y+16, r25	; 0x10
    320a:	8f 87       	std	Y+15, r24	; 0x0f
    320c:	8f 85       	ldd	r24, Y+15	; 0x0f
    320e:	98 89       	ldd	r25, Y+16	; 0x10
    3210:	01 97       	sbiw	r24, 0x01	; 1
    3212:	f1 f7       	brne	.-4      	; 0x3210 <arenaRight+0x2e4>
    3214:	98 8b       	std	Y+16, r25	; 0x10
    3216:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1000);

    centre = ADC_Conversion(2);
    3218:	82 e0       	ldi	r24, 0x02	; 2
    321a:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    321e:	88 2f       	mov	r24, r24
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	90 93 29 03 	sts	0x0329, r25
    3226:	80 93 28 03 	sts	0x0328, r24
    322a:	09 c0       	rjmp	.+18     	; 0x323e <arenaRight+0x312>

    while(centre < 15)
    {
        centre = ADC_Conversion(2);
    322c:	82 e0       	ldi	r24, 0x02	; 2
    322e:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    3232:	88 2f       	mov	r24, r24
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	90 93 29 03 	sts	0x0329, r25
    323a:	80 93 28 03 	sts	0x0328, r24
    right();
    _delay_ms(1000);

    centre = ADC_Conversion(2);

    while(centre < 15)
    323e:	80 91 28 03 	lds	r24, 0x0328
    3242:	90 91 29 03 	lds	r25, 0x0329
    3246:	8f 30       	cpi	r24, 0x0F	; 15
    3248:	91 05       	cpc	r25, r1
    324a:	84 f3       	brlt	.-32     	; 0x322c <arenaRight+0x300>
    {
        centre = ADC_Conversion(2);
    }

    stop();
    324c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	aa e7       	ldi	r26, 0x7A	; 122
    3256:	b4 e4       	ldi	r27, 0x44	; 68
    3258:	8b 87       	std	Y+11, r24	; 0x0b
    325a:	9c 87       	std	Y+12, r25	; 0x0c
    325c:	ad 87       	std	Y+13, r26	; 0x0d
    325e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3260:	6b 85       	ldd	r22, Y+11	; 0x0b
    3262:	7c 85       	ldd	r23, Y+12	; 0x0c
    3264:	8d 85       	ldd	r24, Y+13	; 0x0d
    3266:	9e 85       	ldd	r25, Y+14	; 0x0e
    3268:	26 e6       	ldi	r18, 0x66	; 102
    326a:	36 e6       	ldi	r19, 0x66	; 102
    326c:	46 e6       	ldi	r20, 0x66	; 102
    326e:	55 e4       	ldi	r21, 0x45	; 69
    3270:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	8f 83       	std	Y+7, r24	; 0x07
    327a:	98 87       	std	Y+8, r25	; 0x08
    327c:	a9 87       	std	Y+9, r26	; 0x09
    327e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3280:	6f 81       	ldd	r22, Y+7	; 0x07
    3282:	78 85       	ldd	r23, Y+8	; 0x08
    3284:	89 85       	ldd	r24, Y+9	; 0x09
    3286:	9a 85       	ldd	r25, Y+10	; 0x0a
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	40 e8       	ldi	r20, 0x80	; 128
    328e:	5f e3       	ldi	r21, 0x3F	; 63
    3290:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    3294:	88 23       	and	r24, r24
    3296:	2c f4       	brge	.+10     	; 0x32a2 <arenaRight+0x376>
		__ticks = 1;
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	9e 83       	std	Y+6, r25	; 0x06
    329e:	8d 83       	std	Y+5, r24	; 0x05
    32a0:	3f c0       	rjmp	.+126    	; 0x3320 <arenaRight+0x3f4>
	else if (__tmp > 65535)
    32a2:	6f 81       	ldd	r22, Y+7	; 0x07
    32a4:	78 85       	ldd	r23, Y+8	; 0x08
    32a6:	89 85       	ldd	r24, Y+9	; 0x09
    32a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	3f ef       	ldi	r19, 0xFF	; 255
    32ae:	4f e7       	ldi	r20, 0x7F	; 127
    32b0:	57 e4       	ldi	r21, 0x47	; 71
    32b2:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    32b6:	18 16       	cp	r1, r24
    32b8:	4c f5       	brge	.+82     	; 0x330c <arenaRight+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    32bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    32be:	8d 85       	ldd	r24, Y+13	; 0x0d
    32c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	40 e2       	ldi	r20, 0x20	; 32
    32c8:	51 e4       	ldi	r21, 0x41	; 65
    32ca:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	bc 01       	movw	r22, r24
    32d4:	cd 01       	movw	r24, r26
    32d6:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	9e 83       	std	Y+6, r25	; 0x06
    32e0:	8d 83       	std	Y+5, r24	; 0x05
    32e2:	0f c0       	rjmp	.+30     	; 0x3302 <arenaRight+0x3d6>
    32e4:	80 e7       	ldi	r24, 0x70	; 112
    32e6:	91 e0       	ldi	r25, 0x01	; 1
    32e8:	9c 83       	std	Y+4, r25	; 0x04
    32ea:	8b 83       	std	Y+3, r24	; 0x03
    32ec:	8b 81       	ldd	r24, Y+3	; 0x03
    32ee:	9c 81       	ldd	r25, Y+4	; 0x04
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	f1 f7       	brne	.-4      	; 0x32f0 <arenaRight+0x3c4>
    32f4:	9c 83       	std	Y+4, r25	; 0x04
    32f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f8:	8d 81       	ldd	r24, Y+5	; 0x05
    32fa:	9e 81       	ldd	r25, Y+6	; 0x06
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	9e 83       	std	Y+6, r25	; 0x06
    3300:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3302:	8d 81       	ldd	r24, Y+5	; 0x05
    3304:	9e 81       	ldd	r25, Y+6	; 0x06
    3306:	00 97       	sbiw	r24, 0x00	; 0
    3308:	69 f7       	brne	.-38     	; 0x32e4 <arenaRight+0x3b8>
    330a:	14 c0       	rjmp	.+40     	; 0x3334 <arenaRight+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    330c:	6f 81       	ldd	r22, Y+7	; 0x07
    330e:	78 85       	ldd	r23, Y+8	; 0x08
    3310:	89 85       	ldd	r24, Y+9	; 0x09
    3312:	9a 85       	ldd	r25, Y+10	; 0x0a
    3314:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	9e 83       	std	Y+6, r25	; 0x06
    331e:	8d 83       	std	Y+5, r24	; 0x05
    3320:	8d 81       	ldd	r24, Y+5	; 0x05
    3322:	9e 81       	ldd	r25, Y+6	; 0x06
    3324:	9a 83       	std	Y+2, r25	; 0x02
    3326:	89 83       	std	Y+1, r24	; 0x01
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	9a 81       	ldd	r25, Y+2	; 0x02
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	f1 f7       	brne	.-4      	; 0x332c <arenaRight+0x400>
    3330:	9a 83       	std	Y+2, r25	; 0x02
    3332:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);

    nodeMissEnable = 1;
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	90 93 01 02 	sts	0x0201, r25
    333c:	80 93 00 02 	sts	0x0200, r24
}
    3340:	e8 96       	adiw	r28, 0x38	; 56
    3342:	0f b6       	in	r0, 0x3f	; 63
    3344:	f8 94       	cli
    3346:	de bf       	out	0x3e, r29	; 62
    3348:	0f be       	out	0x3f, r0	; 63
    334a:	cd bf       	out	0x3d, r28	; 61
    334c:	cf 91       	pop	r28
    334e:	df 91       	pop	r29
    3350:	08 95       	ret

00003352 <arenaUturn>:

void arenaUturn(void)
{
    3352:	df 93       	push	r29
    3354:	cf 93       	push	r28
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62
    335a:	aa 97       	sbiw	r28, 0x2a	; 42
    335c:	0f b6       	in	r0, 0x3f	; 63
    335e:	f8 94       	cli
    3360:	de bf       	out	0x3e, r29	; 62
    3362:	0f be       	out	0x3f, r0	; 63
    3364:	cd bf       	out	0x3d, r28	; 61
    nodeMissEnable = 0;
    3366:	10 92 01 02 	sts	0x0201, r1
    336a:	10 92 00 02 	sts	0x0200, r1

    stop();
    336e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	aa e7       	ldi	r26, 0x7A	; 122
    3378:	b4 e4       	ldi	r27, 0x44	; 68
    337a:	8f a3       	std	Y+39, r24	; 0x27
    337c:	98 a7       	std	Y+40, r25	; 0x28
    337e:	a9 a7       	std	Y+41, r26	; 0x29
    3380:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3382:	6f a1       	ldd	r22, Y+39	; 0x27
    3384:	78 a5       	ldd	r23, Y+40	; 0x28
    3386:	89 a5       	ldd	r24, Y+41	; 0x29
    3388:	9a a5       	ldd	r25, Y+42	; 0x2a
    338a:	26 e6       	ldi	r18, 0x66	; 102
    338c:	36 e6       	ldi	r19, 0x66	; 102
    338e:	46 e6       	ldi	r20, 0x66	; 102
    3390:	55 e4       	ldi	r21, 0x45	; 69
    3392:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	8b a3       	std	Y+35, r24	; 0x23
    339c:	9c a3       	std	Y+36, r25	; 0x24
    339e:	ad a3       	std	Y+37, r26	; 0x25
    33a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33a2:	6b a1       	ldd	r22, Y+35	; 0x23
    33a4:	7c a1       	ldd	r23, Y+36	; 0x24
    33a6:	8d a1       	ldd	r24, Y+37	; 0x25
    33a8:	9e a1       	ldd	r25, Y+38	; 0x26
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	40 e8       	ldi	r20, 0x80	; 128
    33b0:	5f e3       	ldi	r21, 0x3F	; 63
    33b2:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    33b6:	88 23       	and	r24, r24
    33b8:	2c f4       	brge	.+10     	; 0x33c4 <arenaUturn+0x72>
		__ticks = 1;
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	9a a3       	std	Y+34, r25	; 0x22
    33c0:	89 a3       	std	Y+33, r24	; 0x21
    33c2:	3f c0       	rjmp	.+126    	; 0x3442 <arenaUturn+0xf0>
	else if (__tmp > 65535)
    33c4:	6b a1       	ldd	r22, Y+35	; 0x23
    33c6:	7c a1       	ldd	r23, Y+36	; 0x24
    33c8:	8d a1       	ldd	r24, Y+37	; 0x25
    33ca:	9e a1       	ldd	r25, Y+38	; 0x26
    33cc:	20 e0       	ldi	r18, 0x00	; 0
    33ce:	3f ef       	ldi	r19, 0xFF	; 255
    33d0:	4f e7       	ldi	r20, 0x7F	; 127
    33d2:	57 e4       	ldi	r21, 0x47	; 71
    33d4:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    33d8:	18 16       	cp	r1, r24
    33da:	4c f5       	brge	.+82     	; 0x342e <arenaUturn+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33dc:	6f a1       	ldd	r22, Y+39	; 0x27
    33de:	78 a5       	ldd	r23, Y+40	; 0x28
    33e0:	89 a5       	ldd	r24, Y+41	; 0x29
    33e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	40 e2       	ldi	r20, 0x20	; 32
    33ea:	51 e4       	ldi	r21, 0x41	; 65
    33ec:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	bc 01       	movw	r22, r24
    33f6:	cd 01       	movw	r24, r26
    33f8:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	9a a3       	std	Y+34, r25	; 0x22
    3402:	89 a3       	std	Y+33, r24	; 0x21
    3404:	0f c0       	rjmp	.+30     	; 0x3424 <arenaUturn+0xd2>
    3406:	80 e7       	ldi	r24, 0x70	; 112
    3408:	91 e0       	ldi	r25, 0x01	; 1
    340a:	98 a3       	std	Y+32, r25	; 0x20
    340c:	8f 8f       	std	Y+31, r24	; 0x1f
    340e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3410:	98 a1       	ldd	r25, Y+32	; 0x20
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	f1 f7       	brne	.-4      	; 0x3412 <arenaUturn+0xc0>
    3416:	98 a3       	std	Y+32, r25	; 0x20
    3418:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    341a:	89 a1       	ldd	r24, Y+33	; 0x21
    341c:	9a a1       	ldd	r25, Y+34	; 0x22
    341e:	01 97       	sbiw	r24, 0x01	; 1
    3420:	9a a3       	std	Y+34, r25	; 0x22
    3422:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3424:	89 a1       	ldd	r24, Y+33	; 0x21
    3426:	9a a1       	ldd	r25, Y+34	; 0x22
    3428:	00 97       	sbiw	r24, 0x00	; 0
    342a:	69 f7       	brne	.-38     	; 0x3406 <arenaUturn+0xb4>
    342c:	14 c0       	rjmp	.+40     	; 0x3456 <arenaUturn+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    342e:	6b a1       	ldd	r22, Y+35	; 0x23
    3430:	7c a1       	ldd	r23, Y+36	; 0x24
    3432:	8d a1       	ldd	r24, Y+37	; 0x25
    3434:	9e a1       	ldd	r25, Y+38	; 0x26
    3436:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	9a a3       	std	Y+34, r25	; 0x22
    3440:	89 a3       	std	Y+33, r24	; 0x21
    3442:	89 a1       	ldd	r24, Y+33	; 0x21
    3444:	9a a1       	ldd	r25, Y+34	; 0x22
    3446:	9e 8f       	std	Y+30, r25	; 0x1e
    3448:	8d 8f       	std	Y+29, r24	; 0x1d
    344a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    344c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    344e:	01 97       	sbiw	r24, 0x01	; 1
    3450:	f1 f7       	brne	.-4      	; 0x344e <arenaUturn+0xfc>
    3452:	9e 8f       	std	Y+30, r25	; 0x1e
    3454:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1000);
    velocity(forwardLeftSpeed, forwardRightSpeed);
    3456:	84 eb       	ldi	r24, 0xB4	; 180
    3458:	69 e9       	ldi	r22, 0x99	; 153
    345a:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
                _delay_ms(1000);

                soft_right();
                _delay_ms(1000);
*/
    velocity(forwardLeftSpeed, forwardRightSpeed);
    345e:	84 eb       	ldi	r24, 0xB4	; 180
    3460:	69 e9       	ldi	r22, 0x99	; 153
    3462:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    left();
    3466:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <left>
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	90 e4       	ldi	r25, 0x40	; 64
    346e:	ac e1       	ldi	r26, 0x1C	; 28
    3470:	b5 e4       	ldi	r27, 0x45	; 69
    3472:	89 8f       	std	Y+25, r24	; 0x19
    3474:	9a 8f       	std	Y+26, r25	; 0x1a
    3476:	ab 8f       	std	Y+27, r26	; 0x1b
    3478:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    347a:	69 8d       	ldd	r22, Y+25	; 0x19
    347c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    347e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3480:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3482:	26 e6       	ldi	r18, 0x66	; 102
    3484:	36 e6       	ldi	r19, 0x66	; 102
    3486:	46 e6       	ldi	r20, 0x66	; 102
    3488:	55 e4       	ldi	r21, 0x45	; 69
    348a:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    348e:	dc 01       	movw	r26, r24
    3490:	cb 01       	movw	r24, r22
    3492:	8d 8b       	std	Y+21, r24	; 0x15
    3494:	9e 8b       	std	Y+22, r25	; 0x16
    3496:	af 8b       	std	Y+23, r26	; 0x17
    3498:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    349a:	6d 89       	ldd	r22, Y+21	; 0x15
    349c:	7e 89       	ldd	r23, Y+22	; 0x16
    349e:	8f 89       	ldd	r24, Y+23	; 0x17
    34a0:	98 8d       	ldd	r25, Y+24	; 0x18
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	40 e8       	ldi	r20, 0x80	; 128
    34a8:	5f e3       	ldi	r21, 0x3F	; 63
    34aa:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    34ae:	88 23       	and	r24, r24
    34b0:	2c f4       	brge	.+10     	; 0x34bc <arenaUturn+0x16a>
		__ticks = 1;
    34b2:	81 e0       	ldi	r24, 0x01	; 1
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	9c 8b       	std	Y+20, r25	; 0x14
    34b8:	8b 8b       	std	Y+19, r24	; 0x13
    34ba:	3f c0       	rjmp	.+126    	; 0x353a <arenaUturn+0x1e8>
	else if (__tmp > 65535)
    34bc:	6d 89       	ldd	r22, Y+21	; 0x15
    34be:	7e 89       	ldd	r23, Y+22	; 0x16
    34c0:	8f 89       	ldd	r24, Y+23	; 0x17
    34c2:	98 8d       	ldd	r25, Y+24	; 0x18
    34c4:	20 e0       	ldi	r18, 0x00	; 0
    34c6:	3f ef       	ldi	r19, 0xFF	; 255
    34c8:	4f e7       	ldi	r20, 0x7F	; 127
    34ca:	57 e4       	ldi	r21, 0x47	; 71
    34cc:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    34d0:	18 16       	cp	r1, r24
    34d2:	4c f5       	brge	.+82     	; 0x3526 <arenaUturn+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d4:	69 8d       	ldd	r22, Y+25	; 0x19
    34d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34dc:	20 e0       	ldi	r18, 0x00	; 0
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	40 e2       	ldi	r20, 0x20	; 32
    34e2:	51 e4       	ldi	r21, 0x41	; 65
    34e4:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    34e8:	dc 01       	movw	r26, r24
    34ea:	cb 01       	movw	r24, r22
    34ec:	bc 01       	movw	r22, r24
    34ee:	cd 01       	movw	r24, r26
    34f0:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    34f4:	dc 01       	movw	r26, r24
    34f6:	cb 01       	movw	r24, r22
    34f8:	9c 8b       	std	Y+20, r25	; 0x14
    34fa:	8b 8b       	std	Y+19, r24	; 0x13
    34fc:	0f c0       	rjmp	.+30     	; 0x351c <arenaUturn+0x1ca>
    34fe:	80 e7       	ldi	r24, 0x70	; 112
    3500:	91 e0       	ldi	r25, 0x01	; 1
    3502:	9a 8b       	std	Y+18, r25	; 0x12
    3504:	89 8b       	std	Y+17, r24	; 0x11
    3506:	89 89       	ldd	r24, Y+17	; 0x11
    3508:	9a 89       	ldd	r25, Y+18	; 0x12
    350a:	01 97       	sbiw	r24, 0x01	; 1
    350c:	f1 f7       	brne	.-4      	; 0x350a <arenaUturn+0x1b8>
    350e:	9a 8b       	std	Y+18, r25	; 0x12
    3510:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3512:	8b 89       	ldd	r24, Y+19	; 0x13
    3514:	9c 89       	ldd	r25, Y+20	; 0x14
    3516:	01 97       	sbiw	r24, 0x01	; 1
    3518:	9c 8b       	std	Y+20, r25	; 0x14
    351a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    351c:	8b 89       	ldd	r24, Y+19	; 0x13
    351e:	9c 89       	ldd	r25, Y+20	; 0x14
    3520:	00 97       	sbiw	r24, 0x00	; 0
    3522:	69 f7       	brne	.-38     	; 0x34fe <arenaUturn+0x1ac>
    3524:	14 c0       	rjmp	.+40     	; 0x354e <arenaUturn+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3526:	6d 89       	ldd	r22, Y+21	; 0x15
    3528:	7e 89       	ldd	r23, Y+22	; 0x16
    352a:	8f 89       	ldd	r24, Y+23	; 0x17
    352c:	98 8d       	ldd	r25, Y+24	; 0x18
    352e:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    3532:	dc 01       	movw	r26, r24
    3534:	cb 01       	movw	r24, r22
    3536:	9c 8b       	std	Y+20, r25	; 0x14
    3538:	8b 8b       	std	Y+19, r24	; 0x13
    353a:	8b 89       	ldd	r24, Y+19	; 0x13
    353c:	9c 89       	ldd	r25, Y+20	; 0x14
    353e:	98 8b       	std	Y+16, r25	; 0x10
    3540:	8f 87       	std	Y+15, r24	; 0x0f
    3542:	8f 85       	ldd	r24, Y+15	; 0x0f
    3544:	98 89       	ldd	r25, Y+16	; 0x10
    3546:	01 97       	sbiw	r24, 0x01	; 1
    3548:	f1 f7       	brne	.-4      	; 0x3546 <arenaUturn+0x1f4>
    354a:	98 8b       	std	Y+16, r25	; 0x10
    354c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2500);

    centre = ADC_Conversion(2);
    354e:	82 e0       	ldi	r24, 0x02	; 2
    3550:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    3554:	88 2f       	mov	r24, r24
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	90 93 29 03 	sts	0x0329, r25
    355c:	80 93 28 03 	sts	0x0328, r24
    3560:	09 c0       	rjmp	.+18     	; 0x3574 <arenaUturn+0x222>

    while(centre < 15)
    {
        centre = ADC_Conversion(2);
    3562:	82 e0       	ldi	r24, 0x02	; 2
    3564:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    3568:	88 2f       	mov	r24, r24
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	90 93 29 03 	sts	0x0329, r25
    3570:	80 93 28 03 	sts	0x0328, r24
    left();
    _delay_ms(2500);

    centre = ADC_Conversion(2);

    while(centre < 15)
    3574:	80 91 28 03 	lds	r24, 0x0328
    3578:	90 91 29 03 	lds	r25, 0x0329
    357c:	8f 30       	cpi	r24, 0x0F	; 15
    357e:	91 05       	cpc	r25, r1
    3580:	84 f3       	brlt	.-32     	; 0x3562 <arenaUturn+0x210>
    {
        centre = ADC_Conversion(2);
    }

    stop();
    3582:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
    3586:	80 e0       	ldi	r24, 0x00	; 0
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	aa e7       	ldi	r26, 0x7A	; 122
    358c:	b4 e4       	ldi	r27, 0x44	; 68
    358e:	8b 87       	std	Y+11, r24	; 0x0b
    3590:	9c 87       	std	Y+12, r25	; 0x0c
    3592:	ad 87       	std	Y+13, r26	; 0x0d
    3594:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3596:	6b 85       	ldd	r22, Y+11	; 0x0b
    3598:	7c 85       	ldd	r23, Y+12	; 0x0c
    359a:	8d 85       	ldd	r24, Y+13	; 0x0d
    359c:	9e 85       	ldd	r25, Y+14	; 0x0e
    359e:	26 e6       	ldi	r18, 0x66	; 102
    35a0:	36 e6       	ldi	r19, 0x66	; 102
    35a2:	46 e6       	ldi	r20, 0x66	; 102
    35a4:	55 e4       	ldi	r21, 0x45	; 69
    35a6:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	8f 83       	std	Y+7, r24	; 0x07
    35b0:	98 87       	std	Y+8, r25	; 0x08
    35b2:	a9 87       	std	Y+9, r26	; 0x09
    35b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35b6:	6f 81       	ldd	r22, Y+7	; 0x07
    35b8:	78 85       	ldd	r23, Y+8	; 0x08
    35ba:	89 85       	ldd	r24, Y+9	; 0x09
    35bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35be:	20 e0       	ldi	r18, 0x00	; 0
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	40 e8       	ldi	r20, 0x80	; 128
    35c4:	5f e3       	ldi	r21, 0x3F	; 63
    35c6:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    35ca:	88 23       	and	r24, r24
    35cc:	2c f4       	brge	.+10     	; 0x35d8 <arenaUturn+0x286>
		__ticks = 1;
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	9e 83       	std	Y+6, r25	; 0x06
    35d4:	8d 83       	std	Y+5, r24	; 0x05
    35d6:	3f c0       	rjmp	.+126    	; 0x3656 <arenaUturn+0x304>
	else if (__tmp > 65535)
    35d8:	6f 81       	ldd	r22, Y+7	; 0x07
    35da:	78 85       	ldd	r23, Y+8	; 0x08
    35dc:	89 85       	ldd	r24, Y+9	; 0x09
    35de:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	3f ef       	ldi	r19, 0xFF	; 255
    35e4:	4f e7       	ldi	r20, 0x7F	; 127
    35e6:	57 e4       	ldi	r21, 0x47	; 71
    35e8:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    35ec:	18 16       	cp	r1, r24
    35ee:	4c f5       	brge	.+82     	; 0x3642 <arenaUturn+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    35f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	40 e2       	ldi	r20, 0x20	; 32
    35fe:	51 e4       	ldi	r21, 0x41	; 65
    3600:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    3604:	dc 01       	movw	r26, r24
    3606:	cb 01       	movw	r24, r22
    3608:	bc 01       	movw	r22, r24
    360a:	cd 01       	movw	r24, r26
    360c:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    3610:	dc 01       	movw	r26, r24
    3612:	cb 01       	movw	r24, r22
    3614:	9e 83       	std	Y+6, r25	; 0x06
    3616:	8d 83       	std	Y+5, r24	; 0x05
    3618:	0f c0       	rjmp	.+30     	; 0x3638 <arenaUturn+0x2e6>
    361a:	80 e7       	ldi	r24, 0x70	; 112
    361c:	91 e0       	ldi	r25, 0x01	; 1
    361e:	9c 83       	std	Y+4, r25	; 0x04
    3620:	8b 83       	std	Y+3, r24	; 0x03
    3622:	8b 81       	ldd	r24, Y+3	; 0x03
    3624:	9c 81       	ldd	r25, Y+4	; 0x04
    3626:	01 97       	sbiw	r24, 0x01	; 1
    3628:	f1 f7       	brne	.-4      	; 0x3626 <arenaUturn+0x2d4>
    362a:	9c 83       	std	Y+4, r25	; 0x04
    362c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    362e:	8d 81       	ldd	r24, Y+5	; 0x05
    3630:	9e 81       	ldd	r25, Y+6	; 0x06
    3632:	01 97       	sbiw	r24, 0x01	; 1
    3634:	9e 83       	std	Y+6, r25	; 0x06
    3636:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3638:	8d 81       	ldd	r24, Y+5	; 0x05
    363a:	9e 81       	ldd	r25, Y+6	; 0x06
    363c:	00 97       	sbiw	r24, 0x00	; 0
    363e:	69 f7       	brne	.-38     	; 0x361a <arenaUturn+0x2c8>
    3640:	14 c0       	rjmp	.+40     	; 0x366a <arenaUturn+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3642:	6f 81       	ldd	r22, Y+7	; 0x07
    3644:	78 85       	ldd	r23, Y+8	; 0x08
    3646:	89 85       	ldd	r24, Y+9	; 0x09
    3648:	9a 85       	ldd	r25, Y+10	; 0x0a
    364a:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	9e 83       	std	Y+6, r25	; 0x06
    3654:	8d 83       	std	Y+5, r24	; 0x05
    3656:	8d 81       	ldd	r24, Y+5	; 0x05
    3658:	9e 81       	ldd	r25, Y+6	; 0x06
    365a:	9a 83       	std	Y+2, r25	; 0x02
    365c:	89 83       	std	Y+1, r24	; 0x01
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	9a 81       	ldd	r25, Y+2	; 0x02
    3662:	01 97       	sbiw	r24, 0x01	; 1
    3664:	f1 f7       	brne	.-4      	; 0x3662 <arenaUturn+0x310>
    3666:	9a 83       	std	Y+2, r25	; 0x02
    3668:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);

    nodeMissEnable = 1;
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	90 93 01 02 	sts	0x0201, r25
    3672:	80 93 00 02 	sts	0x0200, r24
}
    3676:	aa 96       	adiw	r28, 0x2a	; 42
    3678:	0f b6       	in	r0, 0x3f	; 63
    367a:	f8 94       	cli
    367c:	de bf       	out	0x3e, r29	; 62
    367e:	0f be       	out	0x3f, r0	; 63
    3680:	cd bf       	out	0x3d, r28	; 61
    3682:	cf 91       	pop	r28
    3684:	df 91       	pop	r29
    3686:	08 95       	ret

00003688 <arenaStraight>:

void arenaStraight(void)
{
    3688:	df 93       	push	r29
    368a:	cf 93       	push	r28
    368c:	cd b7       	in	r28, 0x3d	; 61
    368e:	de b7       	in	r29, 0x3e	; 62
    3690:	2e 97       	sbiw	r28, 0x0e	; 14
    3692:	0f b6       	in	r0, 0x3f	; 63
    3694:	f8 94       	cli
    3696:	de bf       	out	0x3e, r29	; 62
    3698:	0f be       	out	0x3f, r0	; 63
    369a:	cd bf       	out	0x3d, r28	; 61
    stop();
    369c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
    36a0:	80 e0       	ldi	r24, 0x00	; 0
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	aa e7       	ldi	r26, 0x7A	; 122
    36a6:	b4 e4       	ldi	r27, 0x44	; 68
    36a8:	8b 87       	std	Y+11, r24	; 0x0b
    36aa:	9c 87       	std	Y+12, r25	; 0x0c
    36ac:	ad 87       	std	Y+13, r26	; 0x0d
    36ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36b8:	26 e6       	ldi	r18, 0x66	; 102
    36ba:	36 e6       	ldi	r19, 0x66	; 102
    36bc:	46 e6       	ldi	r20, 0x66	; 102
    36be:	55 e4       	ldi	r21, 0x45	; 69
    36c0:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    36c4:	dc 01       	movw	r26, r24
    36c6:	cb 01       	movw	r24, r22
    36c8:	8f 83       	std	Y+7, r24	; 0x07
    36ca:	98 87       	std	Y+8, r25	; 0x08
    36cc:	a9 87       	std	Y+9, r26	; 0x09
    36ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36d0:	6f 81       	ldd	r22, Y+7	; 0x07
    36d2:	78 85       	ldd	r23, Y+8	; 0x08
    36d4:	89 85       	ldd	r24, Y+9	; 0x09
    36d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	40 e8       	ldi	r20, 0x80	; 128
    36de:	5f e3       	ldi	r21, 0x3F	; 63
    36e0:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    36e4:	88 23       	and	r24, r24
    36e6:	2c f4       	brge	.+10     	; 0x36f2 <arenaStraight+0x6a>
		__ticks = 1;
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	9e 83       	std	Y+6, r25	; 0x06
    36ee:	8d 83       	std	Y+5, r24	; 0x05
    36f0:	3f c0       	rjmp	.+126    	; 0x3770 <arenaStraight+0xe8>
	else if (__tmp > 65535)
    36f2:	6f 81       	ldd	r22, Y+7	; 0x07
    36f4:	78 85       	ldd	r23, Y+8	; 0x08
    36f6:	89 85       	ldd	r24, Y+9	; 0x09
    36f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	3f ef       	ldi	r19, 0xFF	; 255
    36fe:	4f e7       	ldi	r20, 0x7F	; 127
    3700:	57 e4       	ldi	r21, 0x47	; 71
    3702:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    3706:	18 16       	cp	r1, r24
    3708:	4c f5       	brge	.+82     	; 0x375c <arenaStraight+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    370a:	6b 85       	ldd	r22, Y+11	; 0x0b
    370c:	7c 85       	ldd	r23, Y+12	; 0x0c
    370e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3710:	9e 85       	ldd	r25, Y+14	; 0x0e
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	40 e2       	ldi	r20, 0x20	; 32
    3718:	51 e4       	ldi	r21, 0x41	; 65
    371a:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	bc 01       	movw	r22, r24
    3724:	cd 01       	movw	r24, r26
    3726:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    372a:	dc 01       	movw	r26, r24
    372c:	cb 01       	movw	r24, r22
    372e:	9e 83       	std	Y+6, r25	; 0x06
    3730:	8d 83       	std	Y+5, r24	; 0x05
    3732:	0f c0       	rjmp	.+30     	; 0x3752 <arenaStraight+0xca>
    3734:	80 e7       	ldi	r24, 0x70	; 112
    3736:	91 e0       	ldi	r25, 0x01	; 1
    3738:	9c 83       	std	Y+4, r25	; 0x04
    373a:	8b 83       	std	Y+3, r24	; 0x03
    373c:	8b 81       	ldd	r24, Y+3	; 0x03
    373e:	9c 81       	ldd	r25, Y+4	; 0x04
    3740:	01 97       	sbiw	r24, 0x01	; 1
    3742:	f1 f7       	brne	.-4      	; 0x3740 <arenaStraight+0xb8>
    3744:	9c 83       	std	Y+4, r25	; 0x04
    3746:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3748:	8d 81       	ldd	r24, Y+5	; 0x05
    374a:	9e 81       	ldd	r25, Y+6	; 0x06
    374c:	01 97       	sbiw	r24, 0x01	; 1
    374e:	9e 83       	std	Y+6, r25	; 0x06
    3750:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3752:	8d 81       	ldd	r24, Y+5	; 0x05
    3754:	9e 81       	ldd	r25, Y+6	; 0x06
    3756:	00 97       	sbiw	r24, 0x00	; 0
    3758:	69 f7       	brne	.-38     	; 0x3734 <arenaStraight+0xac>
    375a:	14 c0       	rjmp	.+40     	; 0x3784 <arenaStraight+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    375c:	6f 81       	ldd	r22, Y+7	; 0x07
    375e:	78 85       	ldd	r23, Y+8	; 0x08
    3760:	89 85       	ldd	r24, Y+9	; 0x09
    3762:	9a 85       	ldd	r25, Y+10	; 0x0a
    3764:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	9e 83       	std	Y+6, r25	; 0x06
    376e:	8d 83       	std	Y+5, r24	; 0x05
    3770:	8d 81       	ldd	r24, Y+5	; 0x05
    3772:	9e 81       	ldd	r25, Y+6	; 0x06
    3774:	9a 83       	std	Y+2, r25	; 0x02
    3776:	89 83       	std	Y+1, r24	; 0x01
    3778:	89 81       	ldd	r24, Y+1	; 0x01
    377a:	9a 81       	ldd	r25, Y+2	; 0x02
    377c:	01 97       	sbiw	r24, 0x01	; 1
    377e:	f1 f7       	brne	.-4      	; 0x377c <arenaStraight+0xf4>
    3780:	9a 83       	std	Y+2, r25	; 0x02
    3782:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);

    velocity(forwardLeftSpeed, forwardRightSpeed);
    3784:	84 eb       	ldi	r24, 0xB4	; 180
    3786:	69 e9       	ldi	r22, 0x99	; 153
    3788:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
}
    378c:	2e 96       	adiw	r28, 0x0e	; 14
    378e:	0f b6       	in	r0, 0x3f	; 63
    3790:	f8 94       	cli
    3792:	de bf       	out	0x3e, r29	; 62
    3794:	0f be       	out	0x3f, r0	; 63
    3796:	cd bf       	out	0x3d, r28	; 61
    3798:	cf 91       	pop	r28
    379a:	df 91       	pop	r29
    379c:	08 95       	ret

0000379e <getError2>:

int getError2(void)
{
    379e:	df 93       	push	r29
    37a0:	cf 93       	push	r28
    37a2:	0f 92       	push	r0
    37a4:	0f 92       	push	r0
    37a6:	cd b7       	in	r28, 0x3d	; 61
    37a8:	de b7       	in	r29, 0x3e	; 62
    int error;
    centre = ADC_Conversion(2);
    37aa:	82 e0       	ldi	r24, 0x02	; 2
    37ac:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    37b0:	88 2f       	mov	r24, r24
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	90 93 29 03 	sts	0x0329, r25
    37b8:	80 93 28 03 	sts	0x0328, r24
    sensorLeft = ADC_Conversion(3);
    37bc:	83 e0       	ldi	r24, 0x03	; 3
    37be:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    37c2:	88 2f       	mov	r24, r24
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	90 93 25 03 	sts	0x0325, r25
    37ca:	80 93 24 03 	sts	0x0324, r24
    sensorRight = ADC_Conversion(1);
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    37d4:	88 2f       	mov	r24, r24
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	90 93 2f 03 	sts	0x032F, r25
    37dc:	80 93 2e 03 	sts	0x032E, r24

    lcd_print(2, 1, sensorLeft, 3);
    37e0:	80 91 24 03 	lds	r24, 0x0324
    37e4:	90 91 25 03 	lds	r25, 0x0325
    37e8:	9c 01       	movw	r18, r24
    37ea:	82 e0       	ldi	r24, 0x02	; 2
    37ec:	61 e0       	ldi	r22, 0x01	; 1
    37ee:	a9 01       	movw	r20, r18
    37f0:	23 e0       	ldi	r18, 0x03	; 3
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <lcd_print>
    lcd_print(2, 5, centre, 3);
    37f8:	80 91 28 03 	lds	r24, 0x0328
    37fc:	90 91 29 03 	lds	r25, 0x0329
    3800:	9c 01       	movw	r18, r24
    3802:	82 e0       	ldi	r24, 0x02	; 2
    3804:	65 e0       	ldi	r22, 0x05	; 5
    3806:	a9 01       	movw	r20, r18
    3808:	23 e0       	ldi	r18, 0x03	; 3
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <lcd_print>
    lcd_print(2, 9, sensorRight, 3);
    3810:	80 91 2e 03 	lds	r24, 0x032E
    3814:	90 91 2f 03 	lds	r25, 0x032F
    3818:	9c 01       	movw	r18, r24
    381a:	82 e0       	ldi	r24, 0x02	; 2
    381c:	69 e0       	ldi	r22, 0x09	; 9
    381e:	a9 01       	movw	r20, r18
    3820:	23 e0       	ldi	r18, 0x03	; 3
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <lcd_print>

    if(sensorLeft > 40 && sensorRight > 40)
    3828:	80 91 24 03 	lds	r24, 0x0324
    382c:	90 91 25 03 	lds	r25, 0x0325
    3830:	89 32       	cpi	r24, 0x29	; 41
    3832:	91 05       	cpc	r25, r1
    3834:	64 f0       	brlt	.+24     	; 0x384e <getError2+0xb0>
    3836:	80 91 2e 03 	lds	r24, 0x032E
    383a:	90 91 2f 03 	lds	r25, 0x032F
    383e:	89 32       	cpi	r24, 0x29	; 41
    3840:	91 05       	cpc	r25, r1
    3842:	2c f0       	brlt	.+10     	; 0x384e <getError2+0xb0>
        error = 100;
    3844:	84 e6       	ldi	r24, 0x64	; 100
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	9a 83       	std	Y+2, r25	; 0x02
    384a:	89 83       	std	Y+1, r24	; 0x01
    384c:	92 c0       	rjmp	.+292    	; 0x3972 <getError2+0x1d4>

    else if(centre > 90)
    384e:	80 91 28 03 	lds	r24, 0x0328
    3852:	90 91 29 03 	lds	r25, 0x0329
    3856:	8b 35       	cpi	r24, 0x5B	; 91
    3858:	91 05       	cpc	r25, r1
    385a:	1c f0       	brlt	.+6      	; 0x3862 <getError2+0xc4>
        error = 0;
    385c:	1a 82       	std	Y+2, r1	; 0x02
    385e:	19 82       	std	Y+1, r1	; 0x01
    3860:	88 c0       	rjmp	.+272    	; 0x3972 <getError2+0x1d4>

    else if(sensorLeft > 45)
    3862:	80 91 24 03 	lds	r24, 0x0324
    3866:	90 91 25 03 	lds	r25, 0x0325
    386a:	8e 32       	cpi	r24, 0x2E	; 46
    386c:	91 05       	cpc	r25, r1
    386e:	2c f0       	brlt	.+10     	; 0x387a <getError2+0xdc>
        error = 7;
    3870:	87 e0       	ldi	r24, 0x07	; 7
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	9a 83       	std	Y+2, r25	; 0x02
    3876:	89 83       	std	Y+1, r24	; 0x01
    3878:	7c c0       	rjmp	.+248    	; 0x3972 <getError2+0x1d4>

    else if(sensorLeft > 25)
    387a:	80 91 24 03 	lds	r24, 0x0324
    387e:	90 91 25 03 	lds	r25, 0x0325
    3882:	8a 31       	cpi	r24, 0x1A	; 26
    3884:	91 05       	cpc	r25, r1
    3886:	2c f0       	brlt	.+10     	; 0x3892 <getError2+0xf4>
        error = 6;
    3888:	86 e0       	ldi	r24, 0x06	; 6
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	9a 83       	std	Y+2, r25	; 0x02
    388e:	89 83       	std	Y+1, r24	; 0x01
    3890:	70 c0       	rjmp	.+224    	; 0x3972 <getError2+0x1d4>

    else if(sensorLeft > 17)
    3892:	80 91 24 03 	lds	r24, 0x0324
    3896:	90 91 25 03 	lds	r25, 0x0325
    389a:	82 31       	cpi	r24, 0x12	; 18
    389c:	91 05       	cpc	r25, r1
    389e:	2c f0       	brlt	.+10     	; 0x38aa <getError2+0x10c>
        error = 5;
    38a0:	85 e0       	ldi	r24, 0x05	; 5
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	9a 83       	std	Y+2, r25	; 0x02
    38a6:	89 83       	std	Y+1, r24	; 0x01
    38a8:	64 c0       	rjmp	.+200    	; 0x3972 <getError2+0x1d4>

    else if(sensorLeft > 9)
    38aa:	80 91 24 03 	lds	r24, 0x0324
    38ae:	90 91 25 03 	lds	r25, 0x0325
    38b2:	8a 30       	cpi	r24, 0x0A	; 10
    38b4:	91 05       	cpc	r25, r1
    38b6:	2c f0       	brlt	.+10     	; 0x38c2 <getError2+0x124>
        error = 4;
    38b8:	84 e0       	ldi	r24, 0x04	; 4
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	9a 83       	std	Y+2, r25	; 0x02
    38be:	89 83       	std	Y+1, r24	; 0x01
    38c0:	58 c0       	rjmp	.+176    	; 0x3972 <getError2+0x1d4>

    else if(sensorRight > 110)
    38c2:	80 91 2e 03 	lds	r24, 0x032E
    38c6:	90 91 2f 03 	lds	r25, 0x032F
    38ca:	8f 36       	cpi	r24, 0x6F	; 111
    38cc:	91 05       	cpc	r25, r1
    38ce:	2c f0       	brlt	.+10     	; 0x38da <getError2+0x13c>
        error = -7;
    38d0:	89 ef       	ldi	r24, 0xF9	; 249
    38d2:	9f ef       	ldi	r25, 0xFF	; 255
    38d4:	9a 83       	std	Y+2, r25	; 0x02
    38d6:	89 83       	std	Y+1, r24	; 0x01
    38d8:	4c c0       	rjmp	.+152    	; 0x3972 <getError2+0x1d4>

    else if(sensorRight > 85)
    38da:	80 91 2e 03 	lds	r24, 0x032E
    38de:	90 91 2f 03 	lds	r25, 0x032F
    38e2:	86 35       	cpi	r24, 0x56	; 86
    38e4:	91 05       	cpc	r25, r1
    38e6:	2c f0       	brlt	.+10     	; 0x38f2 <getError2+0x154>
        error = -6;
    38e8:	8a ef       	ldi	r24, 0xFA	; 250
    38ea:	9f ef       	ldi	r25, 0xFF	; 255
    38ec:	9a 83       	std	Y+2, r25	; 0x02
    38ee:	89 83       	std	Y+1, r24	; 0x01
    38f0:	40 c0       	rjmp	.+128    	; 0x3972 <getError2+0x1d4>

    else if(sensorRight > 55)
    38f2:	80 91 2e 03 	lds	r24, 0x032E
    38f6:	90 91 2f 03 	lds	r25, 0x032F
    38fa:	88 33       	cpi	r24, 0x38	; 56
    38fc:	91 05       	cpc	r25, r1
    38fe:	2c f0       	brlt	.+10     	; 0x390a <getError2+0x16c>
        error = -5;
    3900:	8b ef       	ldi	r24, 0xFB	; 251
    3902:	9f ef       	ldi	r25, 0xFF	; 255
    3904:	9a 83       	std	Y+2, r25	; 0x02
    3906:	89 83       	std	Y+1, r24	; 0x01
    3908:	34 c0       	rjmp	.+104    	; 0x3972 <getError2+0x1d4>

    else if(sensorRight > 35)
    390a:	80 91 2e 03 	lds	r24, 0x032E
    390e:	90 91 2f 03 	lds	r25, 0x032F
    3912:	84 32       	cpi	r24, 0x24	; 36
    3914:	91 05       	cpc	r25, r1
    3916:	2c f0       	brlt	.+10     	; 0x3922 <getError2+0x184>
        error = -4;
    3918:	8c ef       	ldi	r24, 0xFC	; 252
    391a:	9f ef       	ldi	r25, 0xFF	; 255
    391c:	9a 83       	std	Y+2, r25	; 0x02
    391e:	89 83       	std	Y+1, r24	; 0x01
    3920:	28 c0       	rjmp	.+80     	; 0x3972 <getError2+0x1d4>

    else if(sensorRight > 25)
    3922:	80 91 2e 03 	lds	r24, 0x032E
    3926:	90 91 2f 03 	lds	r25, 0x032F
    392a:	8a 31       	cpi	r24, 0x1A	; 26
    392c:	91 05       	cpc	r25, r1
    392e:	2c f0       	brlt	.+10     	; 0x393a <getError2+0x19c>
        error = -3;
    3930:	8d ef       	ldi	r24, 0xFD	; 253
    3932:	9f ef       	ldi	r25, 0xFF	; 255
    3934:	9a 83       	std	Y+2, r25	; 0x02
    3936:	89 83       	std	Y+1, r24	; 0x01
    3938:	1c c0       	rjmp	.+56     	; 0x3972 <getError2+0x1d4>

    else if(sensorRight > 18)
    393a:	80 91 2e 03 	lds	r24, 0x032E
    393e:	90 91 2f 03 	lds	r25, 0x032F
    3942:	83 31       	cpi	r24, 0x13	; 19
    3944:	91 05       	cpc	r25, r1
    3946:	2c f0       	brlt	.+10     	; 0x3952 <getError2+0x1b4>
        error = -2;
    3948:	8e ef       	ldi	r24, 0xFE	; 254
    394a:	9f ef       	ldi	r25, 0xFF	; 255
    394c:	9a 83       	std	Y+2, r25	; 0x02
    394e:	89 83       	std	Y+1, r24	; 0x01
    3950:	10 c0       	rjmp	.+32     	; 0x3972 <getError2+0x1d4>

    else if(sensorRight > 15)
    3952:	80 91 2e 03 	lds	r24, 0x032E
    3956:	90 91 2f 03 	lds	r25, 0x032F
    395a:	80 31       	cpi	r24, 0x10	; 16
    395c:	91 05       	cpc	r25, r1
    395e:	2c f0       	brlt	.+10     	; 0x396a <getError2+0x1cc>
        error = -1;
    3960:	8f ef       	ldi	r24, 0xFF	; 255
    3962:	9f ef       	ldi	r25, 0xFF	; 255
    3964:	9a 83       	std	Y+2, r25	; 0x02
    3966:	89 83       	std	Y+1, r24	; 0x01
    3968:	04 c0       	rjmp	.+8      	; 0x3972 <getError2+0x1d4>

    else
        error = -100;
    396a:	8c e9       	ldi	r24, 0x9C	; 156
    396c:	9f ef       	ldi	r25, 0xFF	; 255
    396e:	9a 83       	std	Y+2, r25	; 0x02
    3970:	89 83       	std	Y+1, r24	; 0x01

        return -error;
    3972:	89 81       	ldd	r24, Y+1	; 0x01
    3974:	9a 81       	ldd	r25, Y+2	; 0x02
    3976:	90 95       	com	r25
    3978:	81 95       	neg	r24
    397a:	9f 4f       	sbci	r25, 0xFF	; 255
}
    397c:	0f 90       	pop	r0
    397e:	0f 90       	pop	r0
    3980:	cf 91       	pop	r28
    3982:	df 91       	pop	r29
    3984:	08 95       	ret

00003986 <getError>:

int getError(void)
{
    3986:	df 93       	push	r29
    3988:	cf 93       	push	r28
    398a:	0f 92       	push	r0
    398c:	0f 92       	push	r0
    398e:	cd b7       	in	r28, 0x3d	; 61
    3990:	de b7       	in	r29, 0x3e	; 62
    int error;
    centre = ADC_Conversion(2);
    3992:	82 e0       	ldi	r24, 0x02	; 2
    3994:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    3998:	88 2f       	mov	r24, r24
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	90 93 29 03 	sts	0x0329, r25
    39a0:	80 93 28 03 	sts	0x0328, r24
    sensorLeft = ADC_Conversion(3);
    39a4:	83 e0       	ldi	r24, 0x03	; 3
    39a6:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    39aa:	88 2f       	mov	r24, r24
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	90 93 25 03 	sts	0x0325, r25
    39b2:	80 93 24 03 	sts	0x0324, r24
    sensorRight = ADC_Conversion(1);
    39b6:	81 e0       	ldi	r24, 0x01	; 1
    39b8:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    39bc:	88 2f       	mov	r24, r24
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	90 93 2f 03 	sts	0x032F, r25
    39c4:	80 93 2e 03 	sts	0x032E, r24

    lcd_print(2, 1, sensorLeft, 3);
    39c8:	80 91 24 03 	lds	r24, 0x0324
    39cc:	90 91 25 03 	lds	r25, 0x0325
    39d0:	9c 01       	movw	r18, r24
    39d2:	82 e0       	ldi	r24, 0x02	; 2
    39d4:	61 e0       	ldi	r22, 0x01	; 1
    39d6:	a9 01       	movw	r20, r18
    39d8:	23 e0       	ldi	r18, 0x03	; 3
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <lcd_print>
    lcd_print(2, 5, centre, 3);
    39e0:	80 91 28 03 	lds	r24, 0x0328
    39e4:	90 91 29 03 	lds	r25, 0x0329
    39e8:	9c 01       	movw	r18, r24
    39ea:	82 e0       	ldi	r24, 0x02	; 2
    39ec:	65 e0       	ldi	r22, 0x05	; 5
    39ee:	a9 01       	movw	r20, r18
    39f0:	23 e0       	ldi	r18, 0x03	; 3
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <lcd_print>
    lcd_print(2, 9, sensorRight, 3);
    39f8:	80 91 2e 03 	lds	r24, 0x032E
    39fc:	90 91 2f 03 	lds	r25, 0x032F
    3a00:	9c 01       	movw	r18, r24
    3a02:	82 e0       	ldi	r24, 0x02	; 2
    3a04:	69 e0       	ldi	r22, 0x09	; 9
    3a06:	a9 01       	movw	r20, r18
    3a08:	23 e0       	ldi	r18, 0x03	; 3
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <lcd_print>

    if(sensorLeft > 15 && sensorRight > 15)
    3a10:	80 91 24 03 	lds	r24, 0x0324
    3a14:	90 91 25 03 	lds	r25, 0x0325
    3a18:	80 31       	cpi	r24, 0x10	; 16
    3a1a:	91 05       	cpc	r25, r1
    3a1c:	64 f0       	brlt	.+24     	; 0x3a36 <getError+0xb0>
    3a1e:	80 91 2e 03 	lds	r24, 0x032E
    3a22:	90 91 2f 03 	lds	r25, 0x032F
    3a26:	80 31       	cpi	r24, 0x10	; 16
    3a28:	91 05       	cpc	r25, r1
    3a2a:	2c f0       	brlt	.+10     	; 0x3a36 <getError+0xb0>
        error = 100;
    3a2c:	84 e6       	ldi	r24, 0x64	; 100
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	9a 83       	std	Y+2, r25	; 0x02
    3a32:	89 83       	std	Y+1, r24	; 0x01
    3a34:	62 c0       	rjmp	.+196    	; 0x3afa <getError+0x174>

    else if(centre > 30)
    3a36:	80 91 28 03 	lds	r24, 0x0328
    3a3a:	90 91 29 03 	lds	r25, 0x0329
    3a3e:	8f 31       	cpi	r24, 0x1F	; 31
    3a40:	91 05       	cpc	r25, r1
    3a42:	1c f0       	brlt	.+6      	; 0x3a4a <getError+0xc4>
        error = 0;
    3a44:	1a 82       	std	Y+2, r1	; 0x02
    3a46:	19 82       	std	Y+1, r1	; 0x01
    3a48:	58 c0       	rjmp	.+176    	; 0x3afa <getError+0x174>

    else if(sensorLeft > 75)
    3a4a:	80 91 24 03 	lds	r24, 0x0324
    3a4e:	90 91 25 03 	lds	r25, 0x0325
    3a52:	8c 34       	cpi	r24, 0x4C	; 76
    3a54:	91 05       	cpc	r25, r1
    3a56:	2c f0       	brlt	.+10     	; 0x3a62 <getError+0xdc>
        error = 4;
    3a58:	84 e0       	ldi	r24, 0x04	; 4
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	9a 83       	std	Y+2, r25	; 0x02
    3a5e:	89 83       	std	Y+1, r24	; 0x01
    3a60:	4c c0       	rjmp	.+152    	; 0x3afa <getError+0x174>

    else if(sensorLeft > 50)
    3a62:	80 91 24 03 	lds	r24, 0x0324
    3a66:	90 91 25 03 	lds	r25, 0x0325
    3a6a:	83 33       	cpi	r24, 0x33	; 51
    3a6c:	91 05       	cpc	r25, r1
    3a6e:	2c f0       	brlt	.+10     	; 0x3a7a <getError+0xf4>
        error = 3;
    3a70:	83 e0       	ldi	r24, 0x03	; 3
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	9a 83       	std	Y+2, r25	; 0x02
    3a76:	89 83       	std	Y+1, r24	; 0x01
    3a78:	40 c0       	rjmp	.+128    	; 0x3afa <getError+0x174>

    else if(sensorLeft > 11)
    3a7a:	80 91 24 03 	lds	r24, 0x0324
    3a7e:	90 91 25 03 	lds	r25, 0x0325
    3a82:	8c 30       	cpi	r24, 0x0C	; 12
    3a84:	91 05       	cpc	r25, r1
    3a86:	2c f0       	brlt	.+10     	; 0x3a92 <getError+0x10c>
        error = 2;
    3a88:	82 e0       	ldi	r24, 0x02	; 2
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	9a 83       	std	Y+2, r25	; 0x02
    3a8e:	89 83       	std	Y+1, r24	; 0x01
    3a90:	34 c0       	rjmp	.+104    	; 0x3afa <getError+0x174>

    else if(sensorLeft > 9)
    3a92:	80 91 24 03 	lds	r24, 0x0324
    3a96:	90 91 25 03 	lds	r25, 0x0325
    3a9a:	8a 30       	cpi	r24, 0x0A	; 10
    3a9c:	91 05       	cpc	r25, r1
    3a9e:	2c f0       	brlt	.+10     	; 0x3aaa <getError+0x124>
        error = 1;
    3aa0:	81 e0       	ldi	r24, 0x01	; 1
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	9a 83       	std	Y+2, r25	; 0x02
    3aa6:	89 83       	std	Y+1, r24	; 0x01
    3aa8:	28 c0       	rjmp	.+80     	; 0x3afa <getError+0x174>

    else if(sensorRight > 80)
    3aaa:	80 91 2e 03 	lds	r24, 0x032E
    3aae:	90 91 2f 03 	lds	r25, 0x032F
    3ab2:	81 35       	cpi	r24, 0x51	; 81
    3ab4:	91 05       	cpc	r25, r1
    3ab6:	2c f0       	brlt	.+10     	; 0x3ac2 <getError+0x13c>
        error = -4;
    3ab8:	8c ef       	ldi	r24, 0xFC	; 252
    3aba:	9f ef       	ldi	r25, 0xFF	; 255
    3abc:	9a 83       	std	Y+2, r25	; 0x02
    3abe:	89 83       	std	Y+1, r24	; 0x01
    3ac0:	1c c0       	rjmp	.+56     	; 0x3afa <getError+0x174>

    else if(sensorRight > 35)
    3ac2:	80 91 2e 03 	lds	r24, 0x032E
    3ac6:	90 91 2f 03 	lds	r25, 0x032F
    3aca:	84 32       	cpi	r24, 0x24	; 36
    3acc:	91 05       	cpc	r25, r1
    3ace:	2c f0       	brlt	.+10     	; 0x3ada <getError+0x154>
        error = -3;
    3ad0:	8d ef       	ldi	r24, 0xFD	; 253
    3ad2:	9f ef       	ldi	r25, 0xFF	; 255
    3ad4:	9a 83       	std	Y+2, r25	; 0x02
    3ad6:	89 83       	std	Y+1, r24	; 0x01
    3ad8:	10 c0       	rjmp	.+32     	; 0x3afa <getError+0x174>

    else if(sensorRight > 10)
    3ada:	80 91 2e 03 	lds	r24, 0x032E
    3ade:	90 91 2f 03 	lds	r25, 0x032F
    3ae2:	8b 30       	cpi	r24, 0x0B	; 11
    3ae4:	91 05       	cpc	r25, r1
    3ae6:	2c f0       	brlt	.+10     	; 0x3af2 <getError+0x16c>
        error = -2;
    3ae8:	8e ef       	ldi	r24, 0xFE	; 254
    3aea:	9f ef       	ldi	r25, 0xFF	; 255
    3aec:	9a 83       	std	Y+2, r25	; 0x02
    3aee:	89 83       	std	Y+1, r24	; 0x01
    3af0:	04 c0       	rjmp	.+8      	; 0x3afa <getError+0x174>

    else
        error = -100;
    3af2:	8c e9       	ldi	r24, 0x9C	; 156
    3af4:	9f ef       	ldi	r25, 0xFF	; 255
    3af6:	9a 83       	std	Y+2, r25	; 0x02
    3af8:	89 83       	std	Y+1, r24	; 0x01

    return error;
    3afa:	89 81       	ldd	r24, Y+1	; 0x01
    3afc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3afe:	0f 90       	pop	r0
    3b00:	0f 90       	pop	r0
    3b02:	cf 91       	pop	r28
    3b04:	df 91       	pop	r29
    3b06:	08 95       	ret

00003b08 <checkForCube>:

int checkForCube(void)
{
    3b08:	df 93       	push	r29
    3b0a:	cf 93       	push	r28
    3b0c:	cd b7       	in	r28, 0x3d	; 61
    3b0e:	de b7       	in	r29, 0x3e	; 62
    3b10:	e0 97       	sbiw	r28, 0x30	; 48
    3b12:	0f b6       	in	r0, 0x3f	; 63
    3b14:	f8 94       	cli
    3b16:	de bf       	out	0x3e, r29	; 62
    3b18:	0f be       	out	0x3f, r0	; 63
    3b1a:	cd bf       	out	0x3d, r28	; 61
    nodeMissEnable = 0;
    3b1c:	10 92 01 02 	sts	0x0201, r1
    3b20:	10 92 00 02 	sts	0x0200, r1

    int value = ADC_Conversion(11);
    3b24:	8b e0       	ldi	r24, 0x0B	; 11
    3b26:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    3b2a:	88 2f       	mov	r24, r24
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	9e a7       	std	Y+46, r25	; 0x2e
    3b30:	8d a7       	std	Y+45, r24	; 0x2d
    int max = 0;
    3b32:	1c a6       	std	Y+44, r1	; 0x2c
    3b34:	1b a6       	std	Y+43, r1	; 0x2b

    if(value > 130)
    3b36:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b38:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b3a:	83 38       	cpi	r24, 0x83	; 131
    3b3c:	91 05       	cpc	r25, r1
    3b3e:	5c f0       	brlt	.+22     	; 0x3b56 <checkForCube+0x4e>
    {
        nodeMissEnable = 1;
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	90 93 01 02 	sts	0x0201, r25
    3b48:	80 93 00 02 	sts	0x0200, r24
        return 1;
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	98 ab       	std	Y+48, r25	; 0x30
    3b52:	8f a7       	std	Y+47, r24	; 0x2f
    3b54:	22 c2       	rjmp	.+1092   	; 0x3f9a <checkForCube+0x492>
    }

    if(value > 45)
    3b56:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b58:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b5a:	8e 32       	cpi	r24, 0x2E	; 46
    3b5c:	91 05       	cpc	r25, r1
    3b5e:	5c f0       	brlt	.+22     	; 0x3b76 <checkForCube+0x6e>
    {
        nodeMissEnable = 1;
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	90 93 01 02 	sts	0x0201, r25
    3b68:	80 93 00 02 	sts	0x0200, r24
        return 2;
    3b6c:	82 e0       	ldi	r24, 0x02	; 2
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	98 ab       	std	Y+48, r25	; 0x30
    3b72:	8f a7       	std	Y+47, r24	; 0x2f
    3b74:	12 c2       	rjmp	.+1060   	; 0x3f9a <checkForCube+0x492>
    }

    else
    {
        velocity(180, 150);
    3b76:	84 eb       	ldi	r24, 0xB4	; 180
    3b78:	66 e9       	ldi	r22, 0x96	; 150
    3b7a:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>

        sensorLeft = ADC_Conversion(3);
    3b7e:	83 e0       	ldi	r24, 0x03	; 3
    3b80:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    3b84:	88 2f       	mov	r24, r24
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	90 93 25 03 	sts	0x0325, r25
    3b8c:	80 93 24 03 	sts	0x0324, r24
        right();
    3b90:	0e 94 80 03 	call	0x700	; 0x700 <right>
    3b94:	1b c0       	rjmp	.+54     	; 0x3bcc <checkForCube+0xc4>
        while(sensorLeft < 20)
        {
            value = ADC_Conversion(11);
    3b96:	8b e0       	ldi	r24, 0x0B	; 11
    3b98:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    3b9c:	88 2f       	mov	r24, r24
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	9e a7       	std	Y+46, r25	; 0x2e
    3ba2:	8d a7       	std	Y+45, r24	; 0x2d
            if(value > max)
    3ba4:	2d a5       	ldd	r18, Y+45	; 0x2d
    3ba6:	3e a5       	ldd	r19, Y+46	; 0x2e
    3ba8:	8b a5       	ldd	r24, Y+43	; 0x2b
    3baa:	9c a5       	ldd	r25, Y+44	; 0x2c
    3bac:	82 17       	cp	r24, r18
    3bae:	93 07       	cpc	r25, r19
    3bb0:	24 f4       	brge	.+8      	; 0x3bba <checkForCube+0xb2>
                max = value;
    3bb2:	8d a5       	ldd	r24, Y+45	; 0x2d
    3bb4:	9e a5       	ldd	r25, Y+46	; 0x2e
    3bb6:	9c a7       	std	Y+44, r25	; 0x2c
    3bb8:	8b a7       	std	Y+43, r24	; 0x2b
            sensorLeft = ADC_Conversion(3);
    3bba:	83 e0       	ldi	r24, 0x03	; 3
    3bbc:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    3bc0:	88 2f       	mov	r24, r24
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	90 93 25 03 	sts	0x0325, r25
    3bc8:	80 93 24 03 	sts	0x0324, r24
    {
        velocity(180, 150);

        sensorLeft = ADC_Conversion(3);
        right();
        while(sensorLeft < 20)
    3bcc:	80 91 24 03 	lds	r24, 0x0324
    3bd0:	90 91 25 03 	lds	r25, 0x0325
    3bd4:	84 31       	cpi	r24, 0x14	; 20
    3bd6:	91 05       	cpc	r25, r1
    3bd8:	f4 f2       	brlt	.-68     	; 0x3b96 <checkForCube+0x8e>
            if(value > max)
                max = value;
            sensorLeft = ADC_Conversion(3);
        }

        stop();
    3bda:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	a8 ec       	ldi	r26, 0xC8	; 200
    3be4:	b2 e4       	ldi	r27, 0x42	; 66
    3be6:	8f a3       	std	Y+39, r24	; 0x27
    3be8:	98 a7       	std	Y+40, r25	; 0x28
    3bea:	a9 a7       	std	Y+41, r26	; 0x29
    3bec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bee:	6f a1       	ldd	r22, Y+39	; 0x27
    3bf0:	78 a5       	ldd	r23, Y+40	; 0x28
    3bf2:	89 a5       	ldd	r24, Y+41	; 0x29
    3bf4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bf6:	26 e6       	ldi	r18, 0x66	; 102
    3bf8:	36 e6       	ldi	r19, 0x66	; 102
    3bfa:	46 e6       	ldi	r20, 0x66	; 102
    3bfc:	55 e4       	ldi	r21, 0x45	; 69
    3bfe:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    3c02:	dc 01       	movw	r26, r24
    3c04:	cb 01       	movw	r24, r22
    3c06:	8b a3       	std	Y+35, r24	; 0x23
    3c08:	9c a3       	std	Y+36, r25	; 0x24
    3c0a:	ad a3       	std	Y+37, r26	; 0x25
    3c0c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3c0e:	6b a1       	ldd	r22, Y+35	; 0x23
    3c10:	7c a1       	ldd	r23, Y+36	; 0x24
    3c12:	8d a1       	ldd	r24, Y+37	; 0x25
    3c14:	9e a1       	ldd	r25, Y+38	; 0x26
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	40 e8       	ldi	r20, 0x80	; 128
    3c1c:	5f e3       	ldi	r21, 0x3F	; 63
    3c1e:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    3c22:	88 23       	and	r24, r24
    3c24:	2c f4       	brge	.+10     	; 0x3c30 <checkForCube+0x128>
		__ticks = 1;
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	9a a3       	std	Y+34, r25	; 0x22
    3c2c:	89 a3       	std	Y+33, r24	; 0x21
    3c2e:	3f c0       	rjmp	.+126    	; 0x3cae <checkForCube+0x1a6>
	else if (__tmp > 65535)
    3c30:	6b a1       	ldd	r22, Y+35	; 0x23
    3c32:	7c a1       	ldd	r23, Y+36	; 0x24
    3c34:	8d a1       	ldd	r24, Y+37	; 0x25
    3c36:	9e a1       	ldd	r25, Y+38	; 0x26
    3c38:	20 e0       	ldi	r18, 0x00	; 0
    3c3a:	3f ef       	ldi	r19, 0xFF	; 255
    3c3c:	4f e7       	ldi	r20, 0x7F	; 127
    3c3e:	57 e4       	ldi	r21, 0x47	; 71
    3c40:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    3c44:	18 16       	cp	r1, r24
    3c46:	4c f5       	brge	.+82     	; 0x3c9a <checkForCube+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c48:	6f a1       	ldd	r22, Y+39	; 0x27
    3c4a:	78 a5       	ldd	r23, Y+40	; 0x28
    3c4c:	89 a5       	ldd	r24, Y+41	; 0x29
    3c4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c50:	20 e0       	ldi	r18, 0x00	; 0
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	40 e2       	ldi	r20, 0x20	; 32
    3c56:	51 e4       	ldi	r21, 0x41	; 65
    3c58:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    3c5c:	dc 01       	movw	r26, r24
    3c5e:	cb 01       	movw	r24, r22
    3c60:	bc 01       	movw	r22, r24
    3c62:	cd 01       	movw	r24, r26
    3c64:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    3c68:	dc 01       	movw	r26, r24
    3c6a:	cb 01       	movw	r24, r22
    3c6c:	9a a3       	std	Y+34, r25	; 0x22
    3c6e:	89 a3       	std	Y+33, r24	; 0x21
    3c70:	0f c0       	rjmp	.+30     	; 0x3c90 <checkForCube+0x188>
    3c72:	80 e7       	ldi	r24, 0x70	; 112
    3c74:	91 e0       	ldi	r25, 0x01	; 1
    3c76:	98 a3       	std	Y+32, r25	; 0x20
    3c78:	8f 8f       	std	Y+31, r24	; 0x1f
    3c7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c7c:	98 a1       	ldd	r25, Y+32	; 0x20
    3c7e:	01 97       	sbiw	r24, 0x01	; 1
    3c80:	f1 f7       	brne	.-4      	; 0x3c7e <checkForCube+0x176>
    3c82:	98 a3       	std	Y+32, r25	; 0x20
    3c84:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c86:	89 a1       	ldd	r24, Y+33	; 0x21
    3c88:	9a a1       	ldd	r25, Y+34	; 0x22
    3c8a:	01 97       	sbiw	r24, 0x01	; 1
    3c8c:	9a a3       	std	Y+34, r25	; 0x22
    3c8e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c90:	89 a1       	ldd	r24, Y+33	; 0x21
    3c92:	9a a1       	ldd	r25, Y+34	; 0x22
    3c94:	00 97       	sbiw	r24, 0x00	; 0
    3c96:	69 f7       	brne	.-38     	; 0x3c72 <checkForCube+0x16a>
    3c98:	14 c0       	rjmp	.+40     	; 0x3cc2 <checkForCube+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c9a:	6b a1       	ldd	r22, Y+35	; 0x23
    3c9c:	7c a1       	ldd	r23, Y+36	; 0x24
    3c9e:	8d a1       	ldd	r24, Y+37	; 0x25
    3ca0:	9e a1       	ldd	r25, Y+38	; 0x26
    3ca2:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    3ca6:	dc 01       	movw	r26, r24
    3ca8:	cb 01       	movw	r24, r22
    3caa:	9a a3       	std	Y+34, r25	; 0x22
    3cac:	89 a3       	std	Y+33, r24	; 0x21
    3cae:	89 a1       	ldd	r24, Y+33	; 0x21
    3cb0:	9a a1       	ldd	r25, Y+34	; 0x22
    3cb2:	9e 8f       	std	Y+30, r25	; 0x1e
    3cb4:	8d 8f       	std	Y+29, r24	; 0x1d
    3cb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3cb8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3cba:	01 97       	sbiw	r24, 0x01	; 1
    3cbc:	f1 f7       	brne	.-4      	; 0x3cba <checkForCube+0x1b2>
    3cbe:	9e 8f       	std	Y+30, r25	; 0x1e
    3cc0:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(100);

        sensorRight = ADC_Conversion(1);
    3cc2:	81 e0       	ldi	r24, 0x01	; 1
    3cc4:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    3cc8:	88 2f       	mov	r24, r24
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	90 93 2f 03 	sts	0x032F, r25
    3cd0:	80 93 2e 03 	sts	0x032E, r24
        left();
    3cd4:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <left>
    3cd8:	1b c0       	rjmp	.+54     	; 0x3d10 <checkForCube+0x208>
        while(sensorRight < 20)
        {
            value = ADC_Conversion(11);
    3cda:	8b e0       	ldi	r24, 0x0B	; 11
    3cdc:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    3ce0:	88 2f       	mov	r24, r24
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	9e a7       	std	Y+46, r25	; 0x2e
    3ce6:	8d a7       	std	Y+45, r24	; 0x2d
            if(value > max)
    3ce8:	2d a5       	ldd	r18, Y+45	; 0x2d
    3cea:	3e a5       	ldd	r19, Y+46	; 0x2e
    3cec:	8b a5       	ldd	r24, Y+43	; 0x2b
    3cee:	9c a5       	ldd	r25, Y+44	; 0x2c
    3cf0:	82 17       	cp	r24, r18
    3cf2:	93 07       	cpc	r25, r19
    3cf4:	24 f4       	brge	.+8      	; 0x3cfe <checkForCube+0x1f6>
                max = value;
    3cf6:	8d a5       	ldd	r24, Y+45	; 0x2d
    3cf8:	9e a5       	ldd	r25, Y+46	; 0x2e
    3cfa:	9c a7       	std	Y+44, r25	; 0x2c
    3cfc:	8b a7       	std	Y+43, r24	; 0x2b
            sensorRight = ADC_Conversion(1);
    3cfe:	81 e0       	ldi	r24, 0x01	; 1
    3d00:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    3d04:	88 2f       	mov	r24, r24
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	90 93 2f 03 	sts	0x032F, r25
    3d0c:	80 93 2e 03 	sts	0x032E, r24
        stop();
        _delay_ms(100);

        sensorRight = ADC_Conversion(1);
        left();
        while(sensorRight < 20)
    3d10:	80 91 2e 03 	lds	r24, 0x032E
    3d14:	90 91 2f 03 	lds	r25, 0x032F
    3d18:	84 31       	cpi	r24, 0x14	; 20
    3d1a:	91 05       	cpc	r25, r1
    3d1c:	f4 f2       	brlt	.-68     	; 0x3cda <checkForCube+0x1d2>
            if(value > max)
                max = value;
            sensorRight = ADC_Conversion(1);
        }

        stop();
    3d1e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
    3d22:	80 e0       	ldi	r24, 0x00	; 0
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	a8 ec       	ldi	r26, 0xC8	; 200
    3d28:	b2 e4       	ldi	r27, 0x42	; 66
    3d2a:	89 8f       	std	Y+25, r24	; 0x19
    3d2c:	9a 8f       	std	Y+26, r25	; 0x1a
    3d2e:	ab 8f       	std	Y+27, r26	; 0x1b
    3d30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d32:	69 8d       	ldd	r22, Y+25	; 0x19
    3d34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d3a:	26 e6       	ldi	r18, 0x66	; 102
    3d3c:	36 e6       	ldi	r19, 0x66	; 102
    3d3e:	46 e6       	ldi	r20, 0x66	; 102
    3d40:	55 e4       	ldi	r21, 0x45	; 69
    3d42:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    3d46:	dc 01       	movw	r26, r24
    3d48:	cb 01       	movw	r24, r22
    3d4a:	8d 8b       	std	Y+21, r24	; 0x15
    3d4c:	9e 8b       	std	Y+22, r25	; 0x16
    3d4e:	af 8b       	std	Y+23, r26	; 0x17
    3d50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d52:	6d 89       	ldd	r22, Y+21	; 0x15
    3d54:	7e 89       	ldd	r23, Y+22	; 0x16
    3d56:	8f 89       	ldd	r24, Y+23	; 0x17
    3d58:	98 8d       	ldd	r25, Y+24	; 0x18
    3d5a:	20 e0       	ldi	r18, 0x00	; 0
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	40 e8       	ldi	r20, 0x80	; 128
    3d60:	5f e3       	ldi	r21, 0x3F	; 63
    3d62:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    3d66:	88 23       	and	r24, r24
    3d68:	2c f4       	brge	.+10     	; 0x3d74 <checkForCube+0x26c>
		__ticks = 1;
    3d6a:	81 e0       	ldi	r24, 0x01	; 1
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	9c 8b       	std	Y+20, r25	; 0x14
    3d70:	8b 8b       	std	Y+19, r24	; 0x13
    3d72:	3f c0       	rjmp	.+126    	; 0x3df2 <checkForCube+0x2ea>
	else if (__tmp > 65535)
    3d74:	6d 89       	ldd	r22, Y+21	; 0x15
    3d76:	7e 89       	ldd	r23, Y+22	; 0x16
    3d78:	8f 89       	ldd	r24, Y+23	; 0x17
    3d7a:	98 8d       	ldd	r25, Y+24	; 0x18
    3d7c:	20 e0       	ldi	r18, 0x00	; 0
    3d7e:	3f ef       	ldi	r19, 0xFF	; 255
    3d80:	4f e7       	ldi	r20, 0x7F	; 127
    3d82:	57 e4       	ldi	r21, 0x47	; 71
    3d84:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    3d88:	18 16       	cp	r1, r24
    3d8a:	4c f5       	brge	.+82     	; 0x3dde <checkForCube+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d8c:	69 8d       	ldd	r22, Y+25	; 0x19
    3d8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d94:	20 e0       	ldi	r18, 0x00	; 0
    3d96:	30 e0       	ldi	r19, 0x00	; 0
    3d98:	40 e2       	ldi	r20, 0x20	; 32
    3d9a:	51 e4       	ldi	r21, 0x41	; 65
    3d9c:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    3da0:	dc 01       	movw	r26, r24
    3da2:	cb 01       	movw	r24, r22
    3da4:	bc 01       	movw	r22, r24
    3da6:	cd 01       	movw	r24, r26
    3da8:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    3dac:	dc 01       	movw	r26, r24
    3dae:	cb 01       	movw	r24, r22
    3db0:	9c 8b       	std	Y+20, r25	; 0x14
    3db2:	8b 8b       	std	Y+19, r24	; 0x13
    3db4:	0f c0       	rjmp	.+30     	; 0x3dd4 <checkForCube+0x2cc>
    3db6:	80 e7       	ldi	r24, 0x70	; 112
    3db8:	91 e0       	ldi	r25, 0x01	; 1
    3dba:	9a 8b       	std	Y+18, r25	; 0x12
    3dbc:	89 8b       	std	Y+17, r24	; 0x11
    3dbe:	89 89       	ldd	r24, Y+17	; 0x11
    3dc0:	9a 89       	ldd	r25, Y+18	; 0x12
    3dc2:	01 97       	sbiw	r24, 0x01	; 1
    3dc4:	f1 f7       	brne	.-4      	; 0x3dc2 <checkForCube+0x2ba>
    3dc6:	9a 8b       	std	Y+18, r25	; 0x12
    3dc8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dca:	8b 89       	ldd	r24, Y+19	; 0x13
    3dcc:	9c 89       	ldd	r25, Y+20	; 0x14
    3dce:	01 97       	sbiw	r24, 0x01	; 1
    3dd0:	9c 8b       	std	Y+20, r25	; 0x14
    3dd2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dd4:	8b 89       	ldd	r24, Y+19	; 0x13
    3dd6:	9c 89       	ldd	r25, Y+20	; 0x14
    3dd8:	00 97       	sbiw	r24, 0x00	; 0
    3dda:	69 f7       	brne	.-38     	; 0x3db6 <checkForCube+0x2ae>
    3ddc:	14 c0       	rjmp	.+40     	; 0x3e06 <checkForCube+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dde:	6d 89       	ldd	r22, Y+21	; 0x15
    3de0:	7e 89       	ldd	r23, Y+22	; 0x16
    3de2:	8f 89       	ldd	r24, Y+23	; 0x17
    3de4:	98 8d       	ldd	r25, Y+24	; 0x18
    3de6:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    3dea:	dc 01       	movw	r26, r24
    3dec:	cb 01       	movw	r24, r22
    3dee:	9c 8b       	std	Y+20, r25	; 0x14
    3df0:	8b 8b       	std	Y+19, r24	; 0x13
    3df2:	8b 89       	ldd	r24, Y+19	; 0x13
    3df4:	9c 89       	ldd	r25, Y+20	; 0x14
    3df6:	98 8b       	std	Y+16, r25	; 0x10
    3df8:	8f 87       	std	Y+15, r24	; 0x0f
    3dfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dfc:	98 89       	ldd	r25, Y+16	; 0x10
    3dfe:	01 97       	sbiw	r24, 0x01	; 1
    3e00:	f1 f7       	brne	.-4      	; 0x3dfe <checkForCube+0x2f6>
    3e02:	98 8b       	std	Y+16, r25	; 0x10
    3e04:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(100);

        centre = ADC_Conversion(2);
    3e06:	82 e0       	ldi	r24, 0x02	; 2
    3e08:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    3e0c:	88 2f       	mov	r24, r24
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	90 93 29 03 	sts	0x0329, r25
    3e14:	80 93 28 03 	sts	0x0328, r24
        right();
    3e18:	0e 94 80 03 	call	0x700	; 0x700 <right>
    3e1c:	1b c0       	rjmp	.+54     	; 0x3e54 <checkForCube+0x34c>
        while(centre < 15)
        {
            value = ADC_Conversion(11);
    3e1e:	8b e0       	ldi	r24, 0x0B	; 11
    3e20:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    3e24:	88 2f       	mov	r24, r24
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	9e a7       	std	Y+46, r25	; 0x2e
    3e2a:	8d a7       	std	Y+45, r24	; 0x2d
            if(value > max)
    3e2c:	2d a5       	ldd	r18, Y+45	; 0x2d
    3e2e:	3e a5       	ldd	r19, Y+46	; 0x2e
    3e30:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e32:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e34:	82 17       	cp	r24, r18
    3e36:	93 07       	cpc	r25, r19
    3e38:	24 f4       	brge	.+8      	; 0x3e42 <checkForCube+0x33a>
                max = value;
    3e3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3e3c:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e3e:	9c a7       	std	Y+44, r25	; 0x2c
    3e40:	8b a7       	std	Y+43, r24	; 0x2b
            centre = ADC_Conversion(2);
    3e42:	82 e0       	ldi	r24, 0x02	; 2
    3e44:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    3e48:	88 2f       	mov	r24, r24
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	90 93 29 03 	sts	0x0329, r25
    3e50:	80 93 28 03 	sts	0x0328, r24
        stop();
        _delay_ms(100);

        centre = ADC_Conversion(2);
        right();
        while(centre < 15)
    3e54:	80 91 28 03 	lds	r24, 0x0328
    3e58:	90 91 29 03 	lds	r25, 0x0329
    3e5c:	8f 30       	cpi	r24, 0x0F	; 15
    3e5e:	91 05       	cpc	r25, r1
    3e60:	f4 f2       	brlt	.-68     	; 0x3e1e <checkForCube+0x316>
            if(value > max)
                max = value;
            centre = ADC_Conversion(2);
        }

        stop();
    3e62:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
    3e66:	80 e0       	ldi	r24, 0x00	; 0
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	aa ef       	ldi	r26, 0xFA	; 250
    3e6c:	b3 e4       	ldi	r27, 0x43	; 67
    3e6e:	8b 87       	std	Y+11, r24	; 0x0b
    3e70:	9c 87       	std	Y+12, r25	; 0x0c
    3e72:	ad 87       	std	Y+13, r26	; 0x0d
    3e74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e76:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e78:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e7e:	26 e6       	ldi	r18, 0x66	; 102
    3e80:	36 e6       	ldi	r19, 0x66	; 102
    3e82:	46 e6       	ldi	r20, 0x66	; 102
    3e84:	55 e4       	ldi	r21, 0x45	; 69
    3e86:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    3e8a:	dc 01       	movw	r26, r24
    3e8c:	cb 01       	movw	r24, r22
    3e8e:	8f 83       	std	Y+7, r24	; 0x07
    3e90:	98 87       	std	Y+8, r25	; 0x08
    3e92:	a9 87       	std	Y+9, r26	; 0x09
    3e94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e96:	6f 81       	ldd	r22, Y+7	; 0x07
    3e98:	78 85       	ldd	r23, Y+8	; 0x08
    3e9a:	89 85       	ldd	r24, Y+9	; 0x09
    3e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	40 e8       	ldi	r20, 0x80	; 128
    3ea4:	5f e3       	ldi	r21, 0x3F	; 63
    3ea6:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    3eaa:	88 23       	and	r24, r24
    3eac:	2c f4       	brge	.+10     	; 0x3eb8 <checkForCube+0x3b0>
		__ticks = 1;
    3eae:	81 e0       	ldi	r24, 0x01	; 1
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	9e 83       	std	Y+6, r25	; 0x06
    3eb4:	8d 83       	std	Y+5, r24	; 0x05
    3eb6:	3f c0       	rjmp	.+126    	; 0x3f36 <checkForCube+0x42e>
	else if (__tmp > 65535)
    3eb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3eba:	78 85       	ldd	r23, Y+8	; 0x08
    3ebc:	89 85       	ldd	r24, Y+9	; 0x09
    3ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ec0:	20 e0       	ldi	r18, 0x00	; 0
    3ec2:	3f ef       	ldi	r19, 0xFF	; 255
    3ec4:	4f e7       	ldi	r20, 0x7F	; 127
    3ec6:	57 e4       	ldi	r21, 0x47	; 71
    3ec8:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    3ecc:	18 16       	cp	r1, r24
    3ece:	4c f5       	brge	.+82     	; 0x3f22 <checkForCube+0x41a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ed8:	20 e0       	ldi	r18, 0x00	; 0
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	40 e2       	ldi	r20, 0x20	; 32
    3ede:	51 e4       	ldi	r21, 0x41	; 65
    3ee0:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    3ee4:	dc 01       	movw	r26, r24
    3ee6:	cb 01       	movw	r24, r22
    3ee8:	bc 01       	movw	r22, r24
    3eea:	cd 01       	movw	r24, r26
    3eec:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    3ef0:	dc 01       	movw	r26, r24
    3ef2:	cb 01       	movw	r24, r22
    3ef4:	9e 83       	std	Y+6, r25	; 0x06
    3ef6:	8d 83       	std	Y+5, r24	; 0x05
    3ef8:	0f c0       	rjmp	.+30     	; 0x3f18 <checkForCube+0x410>
    3efa:	80 e7       	ldi	r24, 0x70	; 112
    3efc:	91 e0       	ldi	r25, 0x01	; 1
    3efe:	9c 83       	std	Y+4, r25	; 0x04
    3f00:	8b 83       	std	Y+3, r24	; 0x03
    3f02:	8b 81       	ldd	r24, Y+3	; 0x03
    3f04:	9c 81       	ldd	r25, Y+4	; 0x04
    3f06:	01 97       	sbiw	r24, 0x01	; 1
    3f08:	f1 f7       	brne	.-4      	; 0x3f06 <checkForCube+0x3fe>
    3f0a:	9c 83       	std	Y+4, r25	; 0x04
    3f0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f10:	9e 81       	ldd	r25, Y+6	; 0x06
    3f12:	01 97       	sbiw	r24, 0x01	; 1
    3f14:	9e 83       	std	Y+6, r25	; 0x06
    3f16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f18:	8d 81       	ldd	r24, Y+5	; 0x05
    3f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f1c:	00 97       	sbiw	r24, 0x00	; 0
    3f1e:	69 f7       	brne	.-38     	; 0x3efa <checkForCube+0x3f2>
    3f20:	14 c0       	rjmp	.+40     	; 0x3f4a <checkForCube+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f22:	6f 81       	ldd	r22, Y+7	; 0x07
    3f24:	78 85       	ldd	r23, Y+8	; 0x08
    3f26:	89 85       	ldd	r24, Y+9	; 0x09
    3f28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f2a:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    3f2e:	dc 01       	movw	r26, r24
    3f30:	cb 01       	movw	r24, r22
    3f32:	9e 83       	std	Y+6, r25	; 0x06
    3f34:	8d 83       	std	Y+5, r24	; 0x05
    3f36:	8d 81       	ldd	r24, Y+5	; 0x05
    3f38:	9e 81       	ldd	r25, Y+6	; 0x06
    3f3a:	9a 83       	std	Y+2, r25	; 0x02
    3f3c:	89 83       	std	Y+1, r24	; 0x01
    3f3e:	89 81       	ldd	r24, Y+1	; 0x01
    3f40:	9a 81       	ldd	r25, Y+2	; 0x02
    3f42:	01 97       	sbiw	r24, 0x01	; 1
    3f44:	f1 f7       	brne	.-4      	; 0x3f42 <checkForCube+0x43a>
    3f46:	9a 83       	std	Y+2, r25	; 0x02
    3f48:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(500);

        if(max > 130)
    3f4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f4c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f4e:	83 38       	cpi	r24, 0x83	; 131
    3f50:	91 05       	cpc	r25, r1
    3f52:	5c f0       	brlt	.+22     	; 0x3f6a <checkForCube+0x462>
        {
            nodeMissEnable = 1;
    3f54:	81 e0       	ldi	r24, 0x01	; 1
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	90 93 01 02 	sts	0x0201, r25
    3f5c:	80 93 00 02 	sts	0x0200, r24
            return 2;
    3f60:	82 e0       	ldi	r24, 0x02	; 2
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	98 ab       	std	Y+48, r25	; 0x30
    3f66:	8f a7       	std	Y+47, r24	; 0x2f
    3f68:	18 c0       	rjmp	.+48     	; 0x3f9a <checkForCube+0x492>
        }

        if(max > 45)
    3f6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f6c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f6e:	8e 32       	cpi	r24, 0x2E	; 46
    3f70:	91 05       	cpc	r25, r1
    3f72:	5c f0       	brlt	.+22     	; 0x3f8a <checkForCube+0x482>
        {
            nodeMissEnable = 1;
    3f74:	81 e0       	ldi	r24, 0x01	; 1
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	90 93 01 02 	sts	0x0201, r25
    3f7c:	80 93 00 02 	sts	0x0200, r24
            return 1;
    3f80:	81 e0       	ldi	r24, 0x01	; 1
    3f82:	90 e0       	ldi	r25, 0x00	; 0
    3f84:	98 ab       	std	Y+48, r25	; 0x30
    3f86:	8f a7       	std	Y+47, r24	; 0x2f
    3f88:	08 c0       	rjmp	.+16     	; 0x3f9a <checkForCube+0x492>
        }

        nodeMissEnable = 1;
    3f8a:	81 e0       	ldi	r24, 0x01	; 1
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	90 93 01 02 	sts	0x0201, r25
    3f92:	80 93 00 02 	sts	0x0200, r24
        return 0;
    3f96:	18 aa       	std	Y+48, r1	; 0x30
    3f98:	1f a6       	std	Y+47, r1	; 0x2f
    3f9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f9c:	98 a9       	ldd	r25, Y+48	; 0x30

    }
}
    3f9e:	e0 96       	adiw	r28, 0x30	; 48
    3fa0:	0f b6       	in	r0, 0x3f	; 63
    3fa2:	f8 94       	cli
    3fa4:	de bf       	out	0x3e, r29	; 62
    3fa6:	0f be       	out	0x3f, r0	; 63
    3fa8:	cd bf       	out	0x3d, r28	; 61
    3faa:	cf 91       	pop	r28
    3fac:	df 91       	pop	r29
    3fae:	08 95       	ret

00003fb0 <buzzerBeep>:

void buzzerBeep()
{
    3fb0:	df 93       	push	r29
    3fb2:	cf 93       	push	r28
    3fb4:	cd b7       	in	r28, 0x3d	; 61
    3fb6:	de b7       	in	r29, 0x3e	; 62
    PORTC |= (1 << 3);
    _delay_ms(500);

    PORTC &= ~(1 << 3);

}
    3fb8:	cf 91       	pop	r28
    3fba:	df 91       	pop	r29
    3fbc:	08 95       	ret

00003fbe <findLine>:

void findLine(void)
{
    3fbe:	df 93       	push	r29
    3fc0:	cf 93       	push	r28
    3fc2:	cd b7       	in	r28, 0x3d	; 61
    3fc4:	de b7       	in	r29, 0x3e	; 62
    3fc6:	62 97       	sbiw	r28, 0x12	; 18
    3fc8:	0f b6       	in	r0, 0x3f	; 63
    3fca:	f8 94       	cli
    3fcc:	de bf       	out	0x3e, r29	; 62
    3fce:	0f be       	out	0x3f, r0	; 63
    3fd0:	cd bf       	out	0x3d, r28	; 61
    nodeMissEnable = 0;
    3fd2:	10 92 01 02 	sts	0x0201, r1
    3fd6:	10 92 00 02 	sts	0x0200, r1

    int tempLeftCount = ShaftCountLeft;
    3fda:	80 91 0e 03 	lds	r24, 0x030E
    3fde:	90 91 0f 03 	lds	r25, 0x030F
    3fe2:	a0 91 10 03 	lds	r26, 0x0310
    3fe6:	b0 91 11 03 	lds	r27, 0x0311
    3fea:	9a 8b       	std	Y+18, r25	; 0x12
    3fec:	89 8b       	std	Y+17, r24	; 0x11
    int tempRightCount = ShaftCountRight;
    3fee:	80 91 12 03 	lds	r24, 0x0312
    3ff2:	90 91 13 03 	lds	r25, 0x0313
    3ff6:	a0 91 14 03 	lds	r26, 0x0314
    3ffa:	b0 91 15 03 	lds	r27, 0x0315
    3ffe:	98 8b       	std	Y+16, r25	; 0x10
    4000:	8f 87       	std	Y+15, r24	; 0x0f

    velocity(180, 150);
    4002:	84 eb       	ldi	r24, 0xB4	; 180
    4004:	66 e9       	ldi	r22, 0x96	; 150
    4006:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>

    sensorRight = ADC_Conversion(1);
    400a:	81 e0       	ldi	r24, 0x01	; 1
    400c:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    4010:	88 2f       	mov	r24, r24
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	90 93 2f 03 	sts	0x032F, r25
    4018:	80 93 2e 03 	sts	0x032E, r24
    left();
    401c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <left>
    4020:	22 c0       	rjmp	.+68     	; 0x4066 <findLine+0xa8>
    while(sensorRight < 20)
    {
        centre = ADC_Conversion(2);
    4022:	82 e0       	ldi	r24, 0x02	; 2
    4024:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    4028:	88 2f       	mov	r24, r24
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	90 93 29 03 	sts	0x0329, r25
    4030:	80 93 28 03 	sts	0x0328, r24
        if(centre > 30)
    4034:	80 91 28 03 	lds	r24, 0x0328
    4038:	90 91 29 03 	lds	r25, 0x0329
    403c:	8f 31       	cpi	r24, 0x1F	; 31
    403e:	91 05       	cpc	r25, r1
    4040:	4c f0       	brlt	.+18     	; 0x4054 <findLine+0x96>
        {
            forward();
    4042:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
            nodeMissEnable = 1;
    4046:	81 e0       	ldi	r24, 0x01	; 1
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	90 93 01 02 	sts	0x0201, r25
    404e:	80 93 00 02 	sts	0x0200, r24
    4052:	db c0       	rjmp	.+438    	; 0x420a <findLine+0x24c>
            return;
        }
        sensorRight = ADC_Conversion(1);
    4054:	81 e0       	ldi	r24, 0x01	; 1
    4056:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    405a:	88 2f       	mov	r24, r24
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	90 93 2f 03 	sts	0x032F, r25
    4062:	80 93 2e 03 	sts	0x032E, r24

    velocity(180, 150);

    sensorRight = ADC_Conversion(1);
    left();
    while(sensorRight < 20)
    4066:	80 91 2e 03 	lds	r24, 0x032E
    406a:	90 91 2f 03 	lds	r25, 0x032F
    406e:	84 31       	cpi	r24, 0x14	; 20
    4070:	91 05       	cpc	r25, r1
    4072:	bc f2       	brlt	.-82     	; 0x4022 <findLine+0x64>
            return;
        }
        sensorRight = ADC_Conversion(1);
    }

    stop();
    4074:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <stop>
    4078:	80 e0       	ldi	r24, 0x00	; 0
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	a8 ec       	ldi	r26, 0xC8	; 200
    407e:	b2 e4       	ldi	r27, 0x42	; 66
    4080:	8b 87       	std	Y+11, r24	; 0x0b
    4082:	9c 87       	std	Y+12, r25	; 0x0c
    4084:	ad 87       	std	Y+13, r26	; 0x0d
    4086:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4088:	6b 85       	ldd	r22, Y+11	; 0x0b
    408a:	7c 85       	ldd	r23, Y+12	; 0x0c
    408c:	8d 85       	ldd	r24, Y+13	; 0x0d
    408e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4090:	26 e6       	ldi	r18, 0x66	; 102
    4092:	36 e6       	ldi	r19, 0x66	; 102
    4094:	46 e6       	ldi	r20, 0x66	; 102
    4096:	55 e4       	ldi	r21, 0x45	; 69
    4098:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    409c:	dc 01       	movw	r26, r24
    409e:	cb 01       	movw	r24, r22
    40a0:	8f 83       	std	Y+7, r24	; 0x07
    40a2:	98 87       	std	Y+8, r25	; 0x08
    40a4:	a9 87       	std	Y+9, r26	; 0x09
    40a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40a8:	6f 81       	ldd	r22, Y+7	; 0x07
    40aa:	78 85       	ldd	r23, Y+8	; 0x08
    40ac:	89 85       	ldd	r24, Y+9	; 0x09
    40ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    40b0:	20 e0       	ldi	r18, 0x00	; 0
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	40 e8       	ldi	r20, 0x80	; 128
    40b6:	5f e3       	ldi	r21, 0x3F	; 63
    40b8:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__ltsf2>
    40bc:	88 23       	and	r24, r24
    40be:	2c f4       	brge	.+10     	; 0x40ca <findLine+0x10c>
		__ticks = 1;
    40c0:	81 e0       	ldi	r24, 0x01	; 1
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	9e 83       	std	Y+6, r25	; 0x06
    40c6:	8d 83       	std	Y+5, r24	; 0x05
    40c8:	3f c0       	rjmp	.+126    	; 0x4148 <findLine+0x18a>
	else if (__tmp > 65535)
    40ca:	6f 81       	ldd	r22, Y+7	; 0x07
    40cc:	78 85       	ldd	r23, Y+8	; 0x08
    40ce:	89 85       	ldd	r24, Y+9	; 0x09
    40d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    40d2:	20 e0       	ldi	r18, 0x00	; 0
    40d4:	3f ef       	ldi	r19, 0xFF	; 255
    40d6:	4f e7       	ldi	r20, 0x7F	; 127
    40d8:	57 e4       	ldi	r21, 0x47	; 71
    40da:	0e 94 8a 24 	call	0x4914	; 0x4914 <__gtsf2>
    40de:	18 16       	cp	r1, r24
    40e0:	4c f5       	brge	.+82     	; 0x4134 <findLine+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    40e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    40e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    40e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    40ea:	20 e0       	ldi	r18, 0x00	; 0
    40ec:	30 e0       	ldi	r19, 0x00	; 0
    40ee:	40 e2       	ldi	r20, 0x20	; 32
    40f0:	51 e4       	ldi	r21, 0x41	; 65
    40f2:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsf3>
    40f6:	dc 01       	movw	r26, r24
    40f8:	cb 01       	movw	r24, r22
    40fa:	bc 01       	movw	r22, r24
    40fc:	cd 01       	movw	r24, r26
    40fe:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    4102:	dc 01       	movw	r26, r24
    4104:	cb 01       	movw	r24, r22
    4106:	9e 83       	std	Y+6, r25	; 0x06
    4108:	8d 83       	std	Y+5, r24	; 0x05
    410a:	0f c0       	rjmp	.+30     	; 0x412a <findLine+0x16c>
    410c:	80 e7       	ldi	r24, 0x70	; 112
    410e:	91 e0       	ldi	r25, 0x01	; 1
    4110:	9c 83       	std	Y+4, r25	; 0x04
    4112:	8b 83       	std	Y+3, r24	; 0x03
    4114:	8b 81       	ldd	r24, Y+3	; 0x03
    4116:	9c 81       	ldd	r25, Y+4	; 0x04
    4118:	01 97       	sbiw	r24, 0x01	; 1
    411a:	f1 f7       	brne	.-4      	; 0x4118 <findLine+0x15a>
    411c:	9c 83       	std	Y+4, r25	; 0x04
    411e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4120:	8d 81       	ldd	r24, Y+5	; 0x05
    4122:	9e 81       	ldd	r25, Y+6	; 0x06
    4124:	01 97       	sbiw	r24, 0x01	; 1
    4126:	9e 83       	std	Y+6, r25	; 0x06
    4128:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    412a:	8d 81       	ldd	r24, Y+5	; 0x05
    412c:	9e 81       	ldd	r25, Y+6	; 0x06
    412e:	00 97       	sbiw	r24, 0x00	; 0
    4130:	69 f7       	brne	.-38     	; 0x410c <findLine+0x14e>
    4132:	14 c0       	rjmp	.+40     	; 0x415c <findLine+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4134:	6f 81       	ldd	r22, Y+7	; 0x07
    4136:	78 85       	ldd	r23, Y+8	; 0x08
    4138:	89 85       	ldd	r24, Y+9	; 0x09
    413a:	9a 85       	ldd	r25, Y+10	; 0x0a
    413c:	0e 94 0e 21 	call	0x421c	; 0x421c <__fixunssfsi>
    4140:	dc 01       	movw	r26, r24
    4142:	cb 01       	movw	r24, r22
    4144:	9e 83       	std	Y+6, r25	; 0x06
    4146:	8d 83       	std	Y+5, r24	; 0x05
    4148:	8d 81       	ldd	r24, Y+5	; 0x05
    414a:	9e 81       	ldd	r25, Y+6	; 0x06
    414c:	9a 83       	std	Y+2, r25	; 0x02
    414e:	89 83       	std	Y+1, r24	; 0x01
    4150:	89 81       	ldd	r24, Y+1	; 0x01
    4152:	9a 81       	ldd	r25, Y+2	; 0x02
    4154:	01 97       	sbiw	r24, 0x01	; 1
    4156:	f1 f7       	brne	.-4      	; 0x4154 <findLine+0x196>
    4158:	9a 83       	std	Y+2, r25	; 0x02
    415a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);

    sensorLeft = ADC_Conversion(3);
    415c:	83 e0       	ldi	r24, 0x03	; 3
    415e:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    4162:	88 2f       	mov	r24, r24
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	90 93 25 03 	sts	0x0325, r25
    416a:	80 93 24 03 	sts	0x0324, r24
    right();
    416e:	0e 94 80 03 	call	0x700	; 0x700 <right>
    4172:	22 c0       	rjmp	.+68     	; 0x41b8 <findLine+0x1fa>
    while(sensorLeft < 20)
    {
        centre = ADC_Conversion(2);
    4174:	82 e0       	ldi	r24, 0x02	; 2
    4176:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    417a:	88 2f       	mov	r24, r24
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	90 93 29 03 	sts	0x0329, r25
    4182:	80 93 28 03 	sts	0x0328, r24
        if(centre > 30)
    4186:	80 91 28 03 	lds	r24, 0x0328
    418a:	90 91 29 03 	lds	r25, 0x0329
    418e:	8f 31       	cpi	r24, 0x1F	; 31
    4190:	91 05       	cpc	r25, r1
    4192:	4c f0       	brlt	.+18     	; 0x41a6 <findLine+0x1e8>
        {
            forward();
    4194:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
            nodeMissEnable = 1;
    4198:	81 e0       	ldi	r24, 0x01	; 1
    419a:	90 e0       	ldi	r25, 0x00	; 0
    419c:	90 93 01 02 	sts	0x0201, r25
    41a0:	80 93 00 02 	sts	0x0200, r24
    41a4:	32 c0       	rjmp	.+100    	; 0x420a <findLine+0x24c>
            return;
        }
        sensorLeft = ADC_Conversion(3);
    41a6:	83 e0       	ldi	r24, 0x03	; 3
    41a8:	0e 94 b4 06 	call	0xd68	; 0xd68 <ADC_Conversion>
    41ac:	88 2f       	mov	r24, r24
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	90 93 25 03 	sts	0x0325, r25
    41b4:	80 93 24 03 	sts	0x0324, r24
    stop();
    _delay_ms(100);

    sensorLeft = ADC_Conversion(3);
    right();
    while(sensorLeft < 20)
    41b8:	80 91 24 03 	lds	r24, 0x0324
    41bc:	90 91 25 03 	lds	r25, 0x0325
    41c0:	84 31       	cpi	r24, 0x14	; 20
    41c2:	91 05       	cpc	r25, r1
    41c4:	bc f2       	brlt	.-82     	; 0x4174 <findLine+0x1b6>
            return;
        }
        sensorLeft = ADC_Conversion(3);
    }

    ShaftCountLeft = tempLeftCount;
    41c6:	89 89       	ldd	r24, Y+17	; 0x11
    41c8:	9a 89       	ldd	r25, Y+18	; 0x12
    41ca:	aa 27       	eor	r26, r26
    41cc:	97 fd       	sbrc	r25, 7
    41ce:	a0 95       	com	r26
    41d0:	ba 2f       	mov	r27, r26
    41d2:	80 93 0e 03 	sts	0x030E, r24
    41d6:	90 93 0f 03 	sts	0x030F, r25
    41da:	a0 93 10 03 	sts	0x0310, r26
    41de:	b0 93 11 03 	sts	0x0311, r27
    ShaftCountRight = tempRightCount;
    41e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    41e4:	98 89       	ldd	r25, Y+16	; 0x10
    41e6:	aa 27       	eor	r26, r26
    41e8:	97 fd       	sbrc	r25, 7
    41ea:	a0 95       	com	r26
    41ec:	ba 2f       	mov	r27, r26
    41ee:	80 93 12 03 	sts	0x0312, r24
    41f2:	90 93 13 03 	sts	0x0313, r25
    41f6:	a0 93 14 03 	sts	0x0314, r26
    41fa:	b0 93 15 03 	sts	0x0315, r27

    nodeMissEnable = 1;
    41fe:	81 e0       	ldi	r24, 0x01	; 1
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	90 93 01 02 	sts	0x0201, r25
    4206:	80 93 00 02 	sts	0x0200, r24
}
    420a:	62 96       	adiw	r28, 0x12	; 18
    420c:	0f b6       	in	r0, 0x3f	; 63
    420e:	f8 94       	cli
    4210:	de bf       	out	0x3e, r29	; 62
    4212:	0f be       	out	0x3f, r0	; 63
    4214:	cd bf       	out	0x3d, r28	; 61
    4216:	cf 91       	pop	r28
    4218:	df 91       	pop	r29
    421a:	08 95       	ret

0000421c <__fixunssfsi>:
    421c:	ef 92       	push	r14
    421e:	ff 92       	push	r15
    4220:	0f 93       	push	r16
    4222:	1f 93       	push	r17
    4224:	7b 01       	movw	r14, r22
    4226:	8c 01       	movw	r16, r24
    4228:	20 e0       	ldi	r18, 0x00	; 0
    422a:	30 e0       	ldi	r19, 0x00	; 0
    422c:	40 e0       	ldi	r20, 0x00	; 0
    422e:	5f e4       	ldi	r21, 0x4F	; 79
    4230:	0e 94 ba 24 	call	0x4974	; 0x4974 <__gesf2>
    4234:	88 23       	and	r24, r24
    4236:	8c f0       	brlt	.+34     	; 0x425a <__fixunssfsi+0x3e>
    4238:	c8 01       	movw	r24, r16
    423a:	b7 01       	movw	r22, r14
    423c:	20 e0       	ldi	r18, 0x00	; 0
    423e:	30 e0       	ldi	r19, 0x00	; 0
    4240:	40 e0       	ldi	r20, 0x00	; 0
    4242:	5f e4       	ldi	r21, 0x4F	; 79
    4244:	0e 94 86 22 	call	0x450c	; 0x450c <__subsf3>
    4248:	0e 94 78 25 	call	0x4af0	; 0x4af0 <__fixsfsi>
    424c:	9b 01       	movw	r18, r22
    424e:	ac 01       	movw	r20, r24
    4250:	20 50       	subi	r18, 0x00	; 0
    4252:	30 40       	sbci	r19, 0x00	; 0
    4254:	40 40       	sbci	r20, 0x00	; 0
    4256:	50 48       	sbci	r21, 0x80	; 128
    4258:	06 c0       	rjmp	.+12     	; 0x4266 <__fixunssfsi+0x4a>
    425a:	c8 01       	movw	r24, r16
    425c:	b7 01       	movw	r22, r14
    425e:	0e 94 78 25 	call	0x4af0	; 0x4af0 <__fixsfsi>
    4262:	9b 01       	movw	r18, r22
    4264:	ac 01       	movw	r20, r24
    4266:	b9 01       	movw	r22, r18
    4268:	ca 01       	movw	r24, r20
    426a:	1f 91       	pop	r17
    426c:	0f 91       	pop	r16
    426e:	ff 90       	pop	r15
    4270:	ef 90       	pop	r14
    4272:	08 95       	ret

00004274 <_fpadd_parts>:
    4274:	a0 e0       	ldi	r26, 0x00	; 0
    4276:	b0 e0       	ldi	r27, 0x00	; 0
    4278:	e0 e4       	ldi	r30, 0x40	; 64
    427a:	f1 e2       	ldi	r31, 0x21	; 33
    427c:	0c 94 4e 28 	jmp	0x509c	; 0x509c <__prologue_saves__>
    4280:	dc 01       	movw	r26, r24
    4282:	2b 01       	movw	r4, r22
    4284:	fa 01       	movw	r30, r20
    4286:	9c 91       	ld	r25, X
    4288:	92 30       	cpi	r25, 0x02	; 2
    428a:	08 f4       	brcc	.+2      	; 0x428e <_fpadd_parts+0x1a>
    428c:	39 c1       	rjmp	.+626    	; 0x4500 <_fpadd_parts+0x28c>
    428e:	eb 01       	movw	r28, r22
    4290:	88 81       	ld	r24, Y
    4292:	82 30       	cpi	r24, 0x02	; 2
    4294:	08 f4       	brcc	.+2      	; 0x4298 <_fpadd_parts+0x24>
    4296:	33 c1       	rjmp	.+614    	; 0x44fe <_fpadd_parts+0x28a>
    4298:	94 30       	cpi	r25, 0x04	; 4
    429a:	69 f4       	brne	.+26     	; 0x42b6 <_fpadd_parts+0x42>
    429c:	84 30       	cpi	r24, 0x04	; 4
    429e:	09 f0       	breq	.+2      	; 0x42a2 <_fpadd_parts+0x2e>
    42a0:	2f c1       	rjmp	.+606    	; 0x4500 <_fpadd_parts+0x28c>
    42a2:	11 96       	adiw	r26, 0x01	; 1
    42a4:	9c 91       	ld	r25, X
    42a6:	11 97       	sbiw	r26, 0x01	; 1
    42a8:	89 81       	ldd	r24, Y+1	; 0x01
    42aa:	98 17       	cp	r25, r24
    42ac:	09 f4       	brne	.+2      	; 0x42b0 <_fpadd_parts+0x3c>
    42ae:	28 c1       	rjmp	.+592    	; 0x4500 <_fpadd_parts+0x28c>
    42b0:	a6 e0       	ldi	r26, 0x06	; 6
    42b2:	b2 e0       	ldi	r27, 0x02	; 2
    42b4:	25 c1       	rjmp	.+586    	; 0x4500 <_fpadd_parts+0x28c>
    42b6:	84 30       	cpi	r24, 0x04	; 4
    42b8:	09 f4       	brne	.+2      	; 0x42bc <_fpadd_parts+0x48>
    42ba:	21 c1       	rjmp	.+578    	; 0x44fe <_fpadd_parts+0x28a>
    42bc:	82 30       	cpi	r24, 0x02	; 2
    42be:	a9 f4       	brne	.+42     	; 0x42ea <_fpadd_parts+0x76>
    42c0:	92 30       	cpi	r25, 0x02	; 2
    42c2:	09 f0       	breq	.+2      	; 0x42c6 <_fpadd_parts+0x52>
    42c4:	1d c1       	rjmp	.+570    	; 0x4500 <_fpadd_parts+0x28c>
    42c6:	9a 01       	movw	r18, r20
    42c8:	ad 01       	movw	r20, r26
    42ca:	88 e0       	ldi	r24, 0x08	; 8
    42cc:	ea 01       	movw	r28, r20
    42ce:	09 90       	ld	r0, Y+
    42d0:	ae 01       	movw	r20, r28
    42d2:	e9 01       	movw	r28, r18
    42d4:	09 92       	st	Y+, r0
    42d6:	9e 01       	movw	r18, r28
    42d8:	81 50       	subi	r24, 0x01	; 1
    42da:	c1 f7       	brne	.-16     	; 0x42cc <_fpadd_parts+0x58>
    42dc:	e2 01       	movw	r28, r4
    42de:	89 81       	ldd	r24, Y+1	; 0x01
    42e0:	11 96       	adiw	r26, 0x01	; 1
    42e2:	9c 91       	ld	r25, X
    42e4:	89 23       	and	r24, r25
    42e6:	81 83       	std	Z+1, r24	; 0x01
    42e8:	08 c1       	rjmp	.+528    	; 0x44fa <_fpadd_parts+0x286>
    42ea:	92 30       	cpi	r25, 0x02	; 2
    42ec:	09 f4       	brne	.+2      	; 0x42f0 <_fpadd_parts+0x7c>
    42ee:	07 c1       	rjmp	.+526    	; 0x44fe <_fpadd_parts+0x28a>
    42f0:	12 96       	adiw	r26, 0x02	; 2
    42f2:	2d 90       	ld	r2, X+
    42f4:	3c 90       	ld	r3, X
    42f6:	13 97       	sbiw	r26, 0x03	; 3
    42f8:	eb 01       	movw	r28, r22
    42fa:	8a 81       	ldd	r24, Y+2	; 0x02
    42fc:	9b 81       	ldd	r25, Y+3	; 0x03
    42fe:	14 96       	adiw	r26, 0x04	; 4
    4300:	ad 90       	ld	r10, X+
    4302:	bd 90       	ld	r11, X+
    4304:	cd 90       	ld	r12, X+
    4306:	dc 90       	ld	r13, X
    4308:	17 97       	sbiw	r26, 0x07	; 7
    430a:	ec 80       	ldd	r14, Y+4	; 0x04
    430c:	fd 80       	ldd	r15, Y+5	; 0x05
    430e:	0e 81       	ldd	r16, Y+6	; 0x06
    4310:	1f 81       	ldd	r17, Y+7	; 0x07
    4312:	91 01       	movw	r18, r2
    4314:	28 1b       	sub	r18, r24
    4316:	39 0b       	sbc	r19, r25
    4318:	b9 01       	movw	r22, r18
    431a:	37 ff       	sbrs	r19, 7
    431c:	04 c0       	rjmp	.+8      	; 0x4326 <_fpadd_parts+0xb2>
    431e:	66 27       	eor	r22, r22
    4320:	77 27       	eor	r23, r23
    4322:	62 1b       	sub	r22, r18
    4324:	73 0b       	sbc	r23, r19
    4326:	60 32       	cpi	r22, 0x20	; 32
    4328:	71 05       	cpc	r23, r1
    432a:	0c f0       	brlt	.+2      	; 0x432e <_fpadd_parts+0xba>
    432c:	61 c0       	rjmp	.+194    	; 0x43f0 <_fpadd_parts+0x17c>
    432e:	12 16       	cp	r1, r18
    4330:	13 06       	cpc	r1, r19
    4332:	6c f5       	brge	.+90     	; 0x438e <_fpadd_parts+0x11a>
    4334:	37 01       	movw	r6, r14
    4336:	48 01       	movw	r8, r16
    4338:	06 2e       	mov	r0, r22
    433a:	04 c0       	rjmp	.+8      	; 0x4344 <_fpadd_parts+0xd0>
    433c:	96 94       	lsr	r9
    433e:	87 94       	ror	r8
    4340:	77 94       	ror	r7
    4342:	67 94       	ror	r6
    4344:	0a 94       	dec	r0
    4346:	d2 f7       	brpl	.-12     	; 0x433c <_fpadd_parts+0xc8>
    4348:	21 e0       	ldi	r18, 0x01	; 1
    434a:	30 e0       	ldi	r19, 0x00	; 0
    434c:	40 e0       	ldi	r20, 0x00	; 0
    434e:	50 e0       	ldi	r21, 0x00	; 0
    4350:	04 c0       	rjmp	.+8      	; 0x435a <_fpadd_parts+0xe6>
    4352:	22 0f       	add	r18, r18
    4354:	33 1f       	adc	r19, r19
    4356:	44 1f       	adc	r20, r20
    4358:	55 1f       	adc	r21, r21
    435a:	6a 95       	dec	r22
    435c:	d2 f7       	brpl	.-12     	; 0x4352 <_fpadd_parts+0xde>
    435e:	21 50       	subi	r18, 0x01	; 1
    4360:	30 40       	sbci	r19, 0x00	; 0
    4362:	40 40       	sbci	r20, 0x00	; 0
    4364:	50 40       	sbci	r21, 0x00	; 0
    4366:	2e 21       	and	r18, r14
    4368:	3f 21       	and	r19, r15
    436a:	40 23       	and	r20, r16
    436c:	51 23       	and	r21, r17
    436e:	21 15       	cp	r18, r1
    4370:	31 05       	cpc	r19, r1
    4372:	41 05       	cpc	r20, r1
    4374:	51 05       	cpc	r21, r1
    4376:	21 f0       	breq	.+8      	; 0x4380 <_fpadd_parts+0x10c>
    4378:	21 e0       	ldi	r18, 0x01	; 1
    437a:	30 e0       	ldi	r19, 0x00	; 0
    437c:	40 e0       	ldi	r20, 0x00	; 0
    437e:	50 e0       	ldi	r21, 0x00	; 0
    4380:	79 01       	movw	r14, r18
    4382:	8a 01       	movw	r16, r20
    4384:	e6 28       	or	r14, r6
    4386:	f7 28       	or	r15, r7
    4388:	08 29       	or	r16, r8
    438a:	19 29       	or	r17, r9
    438c:	3c c0       	rjmp	.+120    	; 0x4406 <_fpadd_parts+0x192>
    438e:	23 2b       	or	r18, r19
    4390:	d1 f1       	breq	.+116    	; 0x4406 <_fpadd_parts+0x192>
    4392:	26 0e       	add	r2, r22
    4394:	37 1e       	adc	r3, r23
    4396:	35 01       	movw	r6, r10
    4398:	46 01       	movw	r8, r12
    439a:	06 2e       	mov	r0, r22
    439c:	04 c0       	rjmp	.+8      	; 0x43a6 <_fpadd_parts+0x132>
    439e:	96 94       	lsr	r9
    43a0:	87 94       	ror	r8
    43a2:	77 94       	ror	r7
    43a4:	67 94       	ror	r6
    43a6:	0a 94       	dec	r0
    43a8:	d2 f7       	brpl	.-12     	; 0x439e <_fpadd_parts+0x12a>
    43aa:	21 e0       	ldi	r18, 0x01	; 1
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	40 e0       	ldi	r20, 0x00	; 0
    43b0:	50 e0       	ldi	r21, 0x00	; 0
    43b2:	04 c0       	rjmp	.+8      	; 0x43bc <_fpadd_parts+0x148>
    43b4:	22 0f       	add	r18, r18
    43b6:	33 1f       	adc	r19, r19
    43b8:	44 1f       	adc	r20, r20
    43ba:	55 1f       	adc	r21, r21
    43bc:	6a 95       	dec	r22
    43be:	d2 f7       	brpl	.-12     	; 0x43b4 <_fpadd_parts+0x140>
    43c0:	21 50       	subi	r18, 0x01	; 1
    43c2:	30 40       	sbci	r19, 0x00	; 0
    43c4:	40 40       	sbci	r20, 0x00	; 0
    43c6:	50 40       	sbci	r21, 0x00	; 0
    43c8:	2a 21       	and	r18, r10
    43ca:	3b 21       	and	r19, r11
    43cc:	4c 21       	and	r20, r12
    43ce:	5d 21       	and	r21, r13
    43d0:	21 15       	cp	r18, r1
    43d2:	31 05       	cpc	r19, r1
    43d4:	41 05       	cpc	r20, r1
    43d6:	51 05       	cpc	r21, r1
    43d8:	21 f0       	breq	.+8      	; 0x43e2 <_fpadd_parts+0x16e>
    43da:	21 e0       	ldi	r18, 0x01	; 1
    43dc:	30 e0       	ldi	r19, 0x00	; 0
    43de:	40 e0       	ldi	r20, 0x00	; 0
    43e0:	50 e0       	ldi	r21, 0x00	; 0
    43e2:	59 01       	movw	r10, r18
    43e4:	6a 01       	movw	r12, r20
    43e6:	a6 28       	or	r10, r6
    43e8:	b7 28       	or	r11, r7
    43ea:	c8 28       	or	r12, r8
    43ec:	d9 28       	or	r13, r9
    43ee:	0b c0       	rjmp	.+22     	; 0x4406 <_fpadd_parts+0x192>
    43f0:	82 15       	cp	r24, r2
    43f2:	93 05       	cpc	r25, r3
    43f4:	2c f0       	brlt	.+10     	; 0x4400 <_fpadd_parts+0x18c>
    43f6:	1c 01       	movw	r2, r24
    43f8:	aa 24       	eor	r10, r10
    43fa:	bb 24       	eor	r11, r11
    43fc:	65 01       	movw	r12, r10
    43fe:	03 c0       	rjmp	.+6      	; 0x4406 <_fpadd_parts+0x192>
    4400:	ee 24       	eor	r14, r14
    4402:	ff 24       	eor	r15, r15
    4404:	87 01       	movw	r16, r14
    4406:	11 96       	adiw	r26, 0x01	; 1
    4408:	9c 91       	ld	r25, X
    440a:	d2 01       	movw	r26, r4
    440c:	11 96       	adiw	r26, 0x01	; 1
    440e:	8c 91       	ld	r24, X
    4410:	98 17       	cp	r25, r24
    4412:	09 f4       	brne	.+2      	; 0x4416 <_fpadd_parts+0x1a2>
    4414:	45 c0       	rjmp	.+138    	; 0x44a0 <_fpadd_parts+0x22c>
    4416:	99 23       	and	r25, r25
    4418:	39 f0       	breq	.+14     	; 0x4428 <_fpadd_parts+0x1b4>
    441a:	a8 01       	movw	r20, r16
    441c:	97 01       	movw	r18, r14
    441e:	2a 19       	sub	r18, r10
    4420:	3b 09       	sbc	r19, r11
    4422:	4c 09       	sbc	r20, r12
    4424:	5d 09       	sbc	r21, r13
    4426:	06 c0       	rjmp	.+12     	; 0x4434 <_fpadd_parts+0x1c0>
    4428:	a6 01       	movw	r20, r12
    442a:	95 01       	movw	r18, r10
    442c:	2e 19       	sub	r18, r14
    442e:	3f 09       	sbc	r19, r15
    4430:	40 0b       	sbc	r20, r16
    4432:	51 0b       	sbc	r21, r17
    4434:	57 fd       	sbrc	r21, 7
    4436:	08 c0       	rjmp	.+16     	; 0x4448 <_fpadd_parts+0x1d4>
    4438:	11 82       	std	Z+1, r1	; 0x01
    443a:	33 82       	std	Z+3, r3	; 0x03
    443c:	22 82       	std	Z+2, r2	; 0x02
    443e:	24 83       	std	Z+4, r18	; 0x04
    4440:	35 83       	std	Z+5, r19	; 0x05
    4442:	46 83       	std	Z+6, r20	; 0x06
    4444:	57 83       	std	Z+7, r21	; 0x07
    4446:	1d c0       	rjmp	.+58     	; 0x4482 <_fpadd_parts+0x20e>
    4448:	81 e0       	ldi	r24, 0x01	; 1
    444a:	81 83       	std	Z+1, r24	; 0x01
    444c:	33 82       	std	Z+3, r3	; 0x03
    444e:	22 82       	std	Z+2, r2	; 0x02
    4450:	88 27       	eor	r24, r24
    4452:	99 27       	eor	r25, r25
    4454:	dc 01       	movw	r26, r24
    4456:	82 1b       	sub	r24, r18
    4458:	93 0b       	sbc	r25, r19
    445a:	a4 0b       	sbc	r26, r20
    445c:	b5 0b       	sbc	r27, r21
    445e:	84 83       	std	Z+4, r24	; 0x04
    4460:	95 83       	std	Z+5, r25	; 0x05
    4462:	a6 83       	std	Z+6, r26	; 0x06
    4464:	b7 83       	std	Z+7, r27	; 0x07
    4466:	0d c0       	rjmp	.+26     	; 0x4482 <_fpadd_parts+0x20e>
    4468:	22 0f       	add	r18, r18
    446a:	33 1f       	adc	r19, r19
    446c:	44 1f       	adc	r20, r20
    446e:	55 1f       	adc	r21, r21
    4470:	24 83       	std	Z+4, r18	; 0x04
    4472:	35 83       	std	Z+5, r19	; 0x05
    4474:	46 83       	std	Z+6, r20	; 0x06
    4476:	57 83       	std	Z+7, r21	; 0x07
    4478:	82 81       	ldd	r24, Z+2	; 0x02
    447a:	93 81       	ldd	r25, Z+3	; 0x03
    447c:	01 97       	sbiw	r24, 0x01	; 1
    447e:	93 83       	std	Z+3, r25	; 0x03
    4480:	82 83       	std	Z+2, r24	; 0x02
    4482:	24 81       	ldd	r18, Z+4	; 0x04
    4484:	35 81       	ldd	r19, Z+5	; 0x05
    4486:	46 81       	ldd	r20, Z+6	; 0x06
    4488:	57 81       	ldd	r21, Z+7	; 0x07
    448a:	da 01       	movw	r26, r20
    448c:	c9 01       	movw	r24, r18
    448e:	01 97       	sbiw	r24, 0x01	; 1
    4490:	a1 09       	sbc	r26, r1
    4492:	b1 09       	sbc	r27, r1
    4494:	8f 5f       	subi	r24, 0xFF	; 255
    4496:	9f 4f       	sbci	r25, 0xFF	; 255
    4498:	af 4f       	sbci	r26, 0xFF	; 255
    449a:	bf 43       	sbci	r27, 0x3F	; 63
    449c:	28 f3       	brcs	.-54     	; 0x4468 <_fpadd_parts+0x1f4>
    449e:	0b c0       	rjmp	.+22     	; 0x44b6 <_fpadd_parts+0x242>
    44a0:	91 83       	std	Z+1, r25	; 0x01
    44a2:	33 82       	std	Z+3, r3	; 0x03
    44a4:	22 82       	std	Z+2, r2	; 0x02
    44a6:	ea 0c       	add	r14, r10
    44a8:	fb 1c       	adc	r15, r11
    44aa:	0c 1d       	adc	r16, r12
    44ac:	1d 1d       	adc	r17, r13
    44ae:	e4 82       	std	Z+4, r14	; 0x04
    44b0:	f5 82       	std	Z+5, r15	; 0x05
    44b2:	06 83       	std	Z+6, r16	; 0x06
    44b4:	17 83       	std	Z+7, r17	; 0x07
    44b6:	83 e0       	ldi	r24, 0x03	; 3
    44b8:	80 83       	st	Z, r24
    44ba:	24 81       	ldd	r18, Z+4	; 0x04
    44bc:	35 81       	ldd	r19, Z+5	; 0x05
    44be:	46 81       	ldd	r20, Z+6	; 0x06
    44c0:	57 81       	ldd	r21, Z+7	; 0x07
    44c2:	57 ff       	sbrs	r21, 7
    44c4:	1a c0       	rjmp	.+52     	; 0x44fa <_fpadd_parts+0x286>
    44c6:	c9 01       	movw	r24, r18
    44c8:	aa 27       	eor	r26, r26
    44ca:	97 fd       	sbrc	r25, 7
    44cc:	a0 95       	com	r26
    44ce:	ba 2f       	mov	r27, r26
    44d0:	81 70       	andi	r24, 0x01	; 1
    44d2:	90 70       	andi	r25, 0x00	; 0
    44d4:	a0 70       	andi	r26, 0x00	; 0
    44d6:	b0 70       	andi	r27, 0x00	; 0
    44d8:	56 95       	lsr	r21
    44da:	47 95       	ror	r20
    44dc:	37 95       	ror	r19
    44de:	27 95       	ror	r18
    44e0:	82 2b       	or	r24, r18
    44e2:	93 2b       	or	r25, r19
    44e4:	a4 2b       	or	r26, r20
    44e6:	b5 2b       	or	r27, r21
    44e8:	84 83       	std	Z+4, r24	; 0x04
    44ea:	95 83       	std	Z+5, r25	; 0x05
    44ec:	a6 83       	std	Z+6, r26	; 0x06
    44ee:	b7 83       	std	Z+7, r27	; 0x07
    44f0:	82 81       	ldd	r24, Z+2	; 0x02
    44f2:	93 81       	ldd	r25, Z+3	; 0x03
    44f4:	01 96       	adiw	r24, 0x01	; 1
    44f6:	93 83       	std	Z+3, r25	; 0x03
    44f8:	82 83       	std	Z+2, r24	; 0x02
    44fa:	df 01       	movw	r26, r30
    44fc:	01 c0       	rjmp	.+2      	; 0x4500 <_fpadd_parts+0x28c>
    44fe:	d2 01       	movw	r26, r4
    4500:	cd 01       	movw	r24, r26
    4502:	cd b7       	in	r28, 0x3d	; 61
    4504:	de b7       	in	r29, 0x3e	; 62
    4506:	e2 e1       	ldi	r30, 0x12	; 18
    4508:	0c 94 6a 28 	jmp	0x50d4	; 0x50d4 <__epilogue_restores__>

0000450c <__subsf3>:
    450c:	a0 e2       	ldi	r26, 0x20	; 32
    450e:	b0 e0       	ldi	r27, 0x00	; 0
    4510:	ec e8       	ldi	r30, 0x8C	; 140
    4512:	f2 e2       	ldi	r31, 0x22	; 34
    4514:	0c 94 5a 28 	jmp	0x50b4	; 0x50b4 <__prologue_saves__+0x18>
    4518:	69 83       	std	Y+1, r22	; 0x01
    451a:	7a 83       	std	Y+2, r23	; 0x02
    451c:	8b 83       	std	Y+3, r24	; 0x03
    451e:	9c 83       	std	Y+4, r25	; 0x04
    4520:	2d 83       	std	Y+5, r18	; 0x05
    4522:	3e 83       	std	Y+6, r19	; 0x06
    4524:	4f 83       	std	Y+7, r20	; 0x07
    4526:	58 87       	std	Y+8, r21	; 0x08
    4528:	e9 e0       	ldi	r30, 0x09	; 9
    452a:	ee 2e       	mov	r14, r30
    452c:	f1 2c       	mov	r15, r1
    452e:	ec 0e       	add	r14, r28
    4530:	fd 1e       	adc	r15, r29
    4532:	ce 01       	movw	r24, r28
    4534:	01 96       	adiw	r24, 0x01	; 1
    4536:	b7 01       	movw	r22, r14
    4538:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__unpack_f>
    453c:	8e 01       	movw	r16, r28
    453e:	0f 5e       	subi	r16, 0xEF	; 239
    4540:	1f 4f       	sbci	r17, 0xFF	; 255
    4542:	ce 01       	movw	r24, r28
    4544:	05 96       	adiw	r24, 0x05	; 5
    4546:	b8 01       	movw	r22, r16
    4548:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__unpack_f>
    454c:	8a 89       	ldd	r24, Y+18	; 0x12
    454e:	91 e0       	ldi	r25, 0x01	; 1
    4550:	89 27       	eor	r24, r25
    4552:	8a 8b       	std	Y+18, r24	; 0x12
    4554:	c7 01       	movw	r24, r14
    4556:	b8 01       	movw	r22, r16
    4558:	ae 01       	movw	r20, r28
    455a:	47 5e       	subi	r20, 0xE7	; 231
    455c:	5f 4f       	sbci	r21, 0xFF	; 255
    455e:	0e 94 3a 21 	call	0x4274	; 0x4274 <_fpadd_parts>
    4562:	0e 94 94 26 	call	0x4d28	; 0x4d28 <__pack_f>
    4566:	a0 96       	adiw	r28, 0x20	; 32
    4568:	e6 e0       	ldi	r30, 0x06	; 6
    456a:	0c 94 76 28 	jmp	0x50ec	; 0x50ec <__epilogue_restores__+0x18>

0000456e <__addsf3>:
    456e:	a0 e2       	ldi	r26, 0x20	; 32
    4570:	b0 e0       	ldi	r27, 0x00	; 0
    4572:	ed eb       	ldi	r30, 0xBD	; 189
    4574:	f2 e2       	ldi	r31, 0x22	; 34
    4576:	0c 94 5a 28 	jmp	0x50b4	; 0x50b4 <__prologue_saves__+0x18>
    457a:	69 83       	std	Y+1, r22	; 0x01
    457c:	7a 83       	std	Y+2, r23	; 0x02
    457e:	8b 83       	std	Y+3, r24	; 0x03
    4580:	9c 83       	std	Y+4, r25	; 0x04
    4582:	2d 83       	std	Y+5, r18	; 0x05
    4584:	3e 83       	std	Y+6, r19	; 0x06
    4586:	4f 83       	std	Y+7, r20	; 0x07
    4588:	58 87       	std	Y+8, r21	; 0x08
    458a:	f9 e0       	ldi	r31, 0x09	; 9
    458c:	ef 2e       	mov	r14, r31
    458e:	f1 2c       	mov	r15, r1
    4590:	ec 0e       	add	r14, r28
    4592:	fd 1e       	adc	r15, r29
    4594:	ce 01       	movw	r24, r28
    4596:	01 96       	adiw	r24, 0x01	; 1
    4598:	b7 01       	movw	r22, r14
    459a:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__unpack_f>
    459e:	8e 01       	movw	r16, r28
    45a0:	0f 5e       	subi	r16, 0xEF	; 239
    45a2:	1f 4f       	sbci	r17, 0xFF	; 255
    45a4:	ce 01       	movw	r24, r28
    45a6:	05 96       	adiw	r24, 0x05	; 5
    45a8:	b8 01       	movw	r22, r16
    45aa:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__unpack_f>
    45ae:	c7 01       	movw	r24, r14
    45b0:	b8 01       	movw	r22, r16
    45b2:	ae 01       	movw	r20, r28
    45b4:	47 5e       	subi	r20, 0xE7	; 231
    45b6:	5f 4f       	sbci	r21, 0xFF	; 255
    45b8:	0e 94 3a 21 	call	0x4274	; 0x4274 <_fpadd_parts>
    45bc:	0e 94 94 26 	call	0x4d28	; 0x4d28 <__pack_f>
    45c0:	a0 96       	adiw	r28, 0x20	; 32
    45c2:	e6 e0       	ldi	r30, 0x06	; 6
    45c4:	0c 94 76 28 	jmp	0x50ec	; 0x50ec <__epilogue_restores__+0x18>

000045c8 <__mulsf3>:
    45c8:	a0 e2       	ldi	r26, 0x20	; 32
    45ca:	b0 e0       	ldi	r27, 0x00	; 0
    45cc:	ea ee       	ldi	r30, 0xEA	; 234
    45ce:	f2 e2       	ldi	r31, 0x22	; 34
    45d0:	0c 94 4e 28 	jmp	0x509c	; 0x509c <__prologue_saves__>
    45d4:	69 83       	std	Y+1, r22	; 0x01
    45d6:	7a 83       	std	Y+2, r23	; 0x02
    45d8:	8b 83       	std	Y+3, r24	; 0x03
    45da:	9c 83       	std	Y+4, r25	; 0x04
    45dc:	2d 83       	std	Y+5, r18	; 0x05
    45de:	3e 83       	std	Y+6, r19	; 0x06
    45e0:	4f 83       	std	Y+7, r20	; 0x07
    45e2:	58 87       	std	Y+8, r21	; 0x08
    45e4:	ce 01       	movw	r24, r28
    45e6:	01 96       	adiw	r24, 0x01	; 1
    45e8:	be 01       	movw	r22, r28
    45ea:	67 5f       	subi	r22, 0xF7	; 247
    45ec:	7f 4f       	sbci	r23, 0xFF	; 255
    45ee:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__unpack_f>
    45f2:	ce 01       	movw	r24, r28
    45f4:	05 96       	adiw	r24, 0x05	; 5
    45f6:	be 01       	movw	r22, r28
    45f8:	6f 5e       	subi	r22, 0xEF	; 239
    45fa:	7f 4f       	sbci	r23, 0xFF	; 255
    45fc:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__unpack_f>
    4600:	99 85       	ldd	r25, Y+9	; 0x09
    4602:	92 30       	cpi	r25, 0x02	; 2
    4604:	88 f0       	brcs	.+34     	; 0x4628 <__mulsf3+0x60>
    4606:	89 89       	ldd	r24, Y+17	; 0x11
    4608:	82 30       	cpi	r24, 0x02	; 2
    460a:	c8 f0       	brcs	.+50     	; 0x463e <__mulsf3+0x76>
    460c:	94 30       	cpi	r25, 0x04	; 4
    460e:	19 f4       	brne	.+6      	; 0x4616 <__mulsf3+0x4e>
    4610:	82 30       	cpi	r24, 0x02	; 2
    4612:	51 f4       	brne	.+20     	; 0x4628 <__mulsf3+0x60>
    4614:	04 c0       	rjmp	.+8      	; 0x461e <__mulsf3+0x56>
    4616:	84 30       	cpi	r24, 0x04	; 4
    4618:	29 f4       	brne	.+10     	; 0x4624 <__mulsf3+0x5c>
    461a:	92 30       	cpi	r25, 0x02	; 2
    461c:	81 f4       	brne	.+32     	; 0x463e <__mulsf3+0x76>
    461e:	86 e0       	ldi	r24, 0x06	; 6
    4620:	92 e0       	ldi	r25, 0x02	; 2
    4622:	c6 c0       	rjmp	.+396    	; 0x47b0 <__mulsf3+0x1e8>
    4624:	92 30       	cpi	r25, 0x02	; 2
    4626:	49 f4       	brne	.+18     	; 0x463a <__mulsf3+0x72>
    4628:	20 e0       	ldi	r18, 0x00	; 0
    462a:	9a 85       	ldd	r25, Y+10	; 0x0a
    462c:	8a 89       	ldd	r24, Y+18	; 0x12
    462e:	98 13       	cpse	r25, r24
    4630:	21 e0       	ldi	r18, 0x01	; 1
    4632:	2a 87       	std	Y+10, r18	; 0x0a
    4634:	ce 01       	movw	r24, r28
    4636:	09 96       	adiw	r24, 0x09	; 9
    4638:	bb c0       	rjmp	.+374    	; 0x47b0 <__mulsf3+0x1e8>
    463a:	82 30       	cpi	r24, 0x02	; 2
    463c:	49 f4       	brne	.+18     	; 0x4650 <__mulsf3+0x88>
    463e:	20 e0       	ldi	r18, 0x00	; 0
    4640:	9a 85       	ldd	r25, Y+10	; 0x0a
    4642:	8a 89       	ldd	r24, Y+18	; 0x12
    4644:	98 13       	cpse	r25, r24
    4646:	21 e0       	ldi	r18, 0x01	; 1
    4648:	2a 8b       	std	Y+18, r18	; 0x12
    464a:	ce 01       	movw	r24, r28
    464c:	41 96       	adiw	r24, 0x11	; 17
    464e:	b0 c0       	rjmp	.+352    	; 0x47b0 <__mulsf3+0x1e8>
    4650:	2d 84       	ldd	r2, Y+13	; 0x0d
    4652:	3e 84       	ldd	r3, Y+14	; 0x0e
    4654:	4f 84       	ldd	r4, Y+15	; 0x0f
    4656:	58 88       	ldd	r5, Y+16	; 0x10
    4658:	6d 88       	ldd	r6, Y+21	; 0x15
    465a:	7e 88       	ldd	r7, Y+22	; 0x16
    465c:	8f 88       	ldd	r8, Y+23	; 0x17
    465e:	98 8c       	ldd	r9, Y+24	; 0x18
    4660:	ee 24       	eor	r14, r14
    4662:	ff 24       	eor	r15, r15
    4664:	87 01       	movw	r16, r14
    4666:	aa 24       	eor	r10, r10
    4668:	bb 24       	eor	r11, r11
    466a:	65 01       	movw	r12, r10
    466c:	40 e0       	ldi	r20, 0x00	; 0
    466e:	50 e0       	ldi	r21, 0x00	; 0
    4670:	60 e0       	ldi	r22, 0x00	; 0
    4672:	70 e0       	ldi	r23, 0x00	; 0
    4674:	e0 e0       	ldi	r30, 0x00	; 0
    4676:	f0 e0       	ldi	r31, 0x00	; 0
    4678:	c1 01       	movw	r24, r2
    467a:	81 70       	andi	r24, 0x01	; 1
    467c:	90 70       	andi	r25, 0x00	; 0
    467e:	89 2b       	or	r24, r25
    4680:	e9 f0       	breq	.+58     	; 0x46bc <__mulsf3+0xf4>
    4682:	e6 0c       	add	r14, r6
    4684:	f7 1c       	adc	r15, r7
    4686:	08 1d       	adc	r16, r8
    4688:	19 1d       	adc	r17, r9
    468a:	9a 01       	movw	r18, r20
    468c:	ab 01       	movw	r20, r22
    468e:	2a 0d       	add	r18, r10
    4690:	3b 1d       	adc	r19, r11
    4692:	4c 1d       	adc	r20, r12
    4694:	5d 1d       	adc	r21, r13
    4696:	80 e0       	ldi	r24, 0x00	; 0
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	a0 e0       	ldi	r26, 0x00	; 0
    469c:	b0 e0       	ldi	r27, 0x00	; 0
    469e:	e6 14       	cp	r14, r6
    46a0:	f7 04       	cpc	r15, r7
    46a2:	08 05       	cpc	r16, r8
    46a4:	19 05       	cpc	r17, r9
    46a6:	20 f4       	brcc	.+8      	; 0x46b0 <__mulsf3+0xe8>
    46a8:	81 e0       	ldi	r24, 0x01	; 1
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	a0 e0       	ldi	r26, 0x00	; 0
    46ae:	b0 e0       	ldi	r27, 0x00	; 0
    46b0:	ba 01       	movw	r22, r20
    46b2:	a9 01       	movw	r20, r18
    46b4:	48 0f       	add	r20, r24
    46b6:	59 1f       	adc	r21, r25
    46b8:	6a 1f       	adc	r22, r26
    46ba:	7b 1f       	adc	r23, r27
    46bc:	aa 0c       	add	r10, r10
    46be:	bb 1c       	adc	r11, r11
    46c0:	cc 1c       	adc	r12, r12
    46c2:	dd 1c       	adc	r13, r13
    46c4:	97 fe       	sbrs	r9, 7
    46c6:	08 c0       	rjmp	.+16     	; 0x46d8 <__mulsf3+0x110>
    46c8:	81 e0       	ldi	r24, 0x01	; 1
    46ca:	90 e0       	ldi	r25, 0x00	; 0
    46cc:	a0 e0       	ldi	r26, 0x00	; 0
    46ce:	b0 e0       	ldi	r27, 0x00	; 0
    46d0:	a8 2a       	or	r10, r24
    46d2:	b9 2a       	or	r11, r25
    46d4:	ca 2a       	or	r12, r26
    46d6:	db 2a       	or	r13, r27
    46d8:	31 96       	adiw	r30, 0x01	; 1
    46da:	e0 32       	cpi	r30, 0x20	; 32
    46dc:	f1 05       	cpc	r31, r1
    46de:	49 f0       	breq	.+18     	; 0x46f2 <__mulsf3+0x12a>
    46e0:	66 0c       	add	r6, r6
    46e2:	77 1c       	adc	r7, r7
    46e4:	88 1c       	adc	r8, r8
    46e6:	99 1c       	adc	r9, r9
    46e8:	56 94       	lsr	r5
    46ea:	47 94       	ror	r4
    46ec:	37 94       	ror	r3
    46ee:	27 94       	ror	r2
    46f0:	c3 cf       	rjmp	.-122    	; 0x4678 <__mulsf3+0xb0>
    46f2:	fa 85       	ldd	r31, Y+10	; 0x0a
    46f4:	ea 89       	ldd	r30, Y+18	; 0x12
    46f6:	2b 89       	ldd	r18, Y+19	; 0x13
    46f8:	3c 89       	ldd	r19, Y+20	; 0x14
    46fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    46fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    46fe:	28 0f       	add	r18, r24
    4700:	39 1f       	adc	r19, r25
    4702:	2e 5f       	subi	r18, 0xFE	; 254
    4704:	3f 4f       	sbci	r19, 0xFF	; 255
    4706:	17 c0       	rjmp	.+46     	; 0x4736 <__mulsf3+0x16e>
    4708:	ca 01       	movw	r24, r20
    470a:	81 70       	andi	r24, 0x01	; 1
    470c:	90 70       	andi	r25, 0x00	; 0
    470e:	89 2b       	or	r24, r25
    4710:	61 f0       	breq	.+24     	; 0x472a <__mulsf3+0x162>
    4712:	16 95       	lsr	r17
    4714:	07 95       	ror	r16
    4716:	f7 94       	ror	r15
    4718:	e7 94       	ror	r14
    471a:	80 e0       	ldi	r24, 0x00	; 0
    471c:	90 e0       	ldi	r25, 0x00	; 0
    471e:	a0 e0       	ldi	r26, 0x00	; 0
    4720:	b0 e8       	ldi	r27, 0x80	; 128
    4722:	e8 2a       	or	r14, r24
    4724:	f9 2a       	or	r15, r25
    4726:	0a 2b       	or	r16, r26
    4728:	1b 2b       	or	r17, r27
    472a:	76 95       	lsr	r23
    472c:	67 95       	ror	r22
    472e:	57 95       	ror	r21
    4730:	47 95       	ror	r20
    4732:	2f 5f       	subi	r18, 0xFF	; 255
    4734:	3f 4f       	sbci	r19, 0xFF	; 255
    4736:	77 fd       	sbrc	r23, 7
    4738:	e7 cf       	rjmp	.-50     	; 0x4708 <__mulsf3+0x140>
    473a:	0c c0       	rjmp	.+24     	; 0x4754 <__mulsf3+0x18c>
    473c:	44 0f       	add	r20, r20
    473e:	55 1f       	adc	r21, r21
    4740:	66 1f       	adc	r22, r22
    4742:	77 1f       	adc	r23, r23
    4744:	17 fd       	sbrc	r17, 7
    4746:	41 60       	ori	r20, 0x01	; 1
    4748:	ee 0c       	add	r14, r14
    474a:	ff 1c       	adc	r15, r15
    474c:	00 1f       	adc	r16, r16
    474e:	11 1f       	adc	r17, r17
    4750:	21 50       	subi	r18, 0x01	; 1
    4752:	30 40       	sbci	r19, 0x00	; 0
    4754:	40 30       	cpi	r20, 0x00	; 0
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	59 07       	cpc	r21, r25
    475a:	90 e0       	ldi	r25, 0x00	; 0
    475c:	69 07       	cpc	r22, r25
    475e:	90 e4       	ldi	r25, 0x40	; 64
    4760:	79 07       	cpc	r23, r25
    4762:	60 f3       	brcs	.-40     	; 0x473c <__mulsf3+0x174>
    4764:	2b 8f       	std	Y+27, r18	; 0x1b
    4766:	3c 8f       	std	Y+28, r19	; 0x1c
    4768:	db 01       	movw	r26, r22
    476a:	ca 01       	movw	r24, r20
    476c:	8f 77       	andi	r24, 0x7F	; 127
    476e:	90 70       	andi	r25, 0x00	; 0
    4770:	a0 70       	andi	r26, 0x00	; 0
    4772:	b0 70       	andi	r27, 0x00	; 0
    4774:	80 34       	cpi	r24, 0x40	; 64
    4776:	91 05       	cpc	r25, r1
    4778:	a1 05       	cpc	r26, r1
    477a:	b1 05       	cpc	r27, r1
    477c:	61 f4       	brne	.+24     	; 0x4796 <__mulsf3+0x1ce>
    477e:	47 fd       	sbrc	r20, 7
    4780:	0a c0       	rjmp	.+20     	; 0x4796 <__mulsf3+0x1ce>
    4782:	e1 14       	cp	r14, r1
    4784:	f1 04       	cpc	r15, r1
    4786:	01 05       	cpc	r16, r1
    4788:	11 05       	cpc	r17, r1
    478a:	29 f0       	breq	.+10     	; 0x4796 <__mulsf3+0x1ce>
    478c:	40 5c       	subi	r20, 0xC0	; 192
    478e:	5f 4f       	sbci	r21, 0xFF	; 255
    4790:	6f 4f       	sbci	r22, 0xFF	; 255
    4792:	7f 4f       	sbci	r23, 0xFF	; 255
    4794:	40 78       	andi	r20, 0x80	; 128
    4796:	1a 8e       	std	Y+26, r1	; 0x1a
    4798:	fe 17       	cp	r31, r30
    479a:	11 f0       	breq	.+4      	; 0x47a0 <__mulsf3+0x1d8>
    479c:	81 e0       	ldi	r24, 0x01	; 1
    479e:	8a 8f       	std	Y+26, r24	; 0x1a
    47a0:	4d 8f       	std	Y+29, r20	; 0x1d
    47a2:	5e 8f       	std	Y+30, r21	; 0x1e
    47a4:	6f 8f       	std	Y+31, r22	; 0x1f
    47a6:	78 a3       	std	Y+32, r23	; 0x20
    47a8:	83 e0       	ldi	r24, 0x03	; 3
    47aa:	89 8f       	std	Y+25, r24	; 0x19
    47ac:	ce 01       	movw	r24, r28
    47ae:	49 96       	adiw	r24, 0x19	; 25
    47b0:	0e 94 94 26 	call	0x4d28	; 0x4d28 <__pack_f>
    47b4:	a0 96       	adiw	r28, 0x20	; 32
    47b6:	e2 e1       	ldi	r30, 0x12	; 18
    47b8:	0c 94 6a 28 	jmp	0x50d4	; 0x50d4 <__epilogue_restores__>

000047bc <__divsf3>:
    47bc:	a8 e1       	ldi	r26, 0x18	; 24
    47be:	b0 e0       	ldi	r27, 0x00	; 0
    47c0:	e4 ee       	ldi	r30, 0xE4	; 228
    47c2:	f3 e2       	ldi	r31, 0x23	; 35
    47c4:	0c 94 56 28 	jmp	0x50ac	; 0x50ac <__prologue_saves__+0x10>
    47c8:	69 83       	std	Y+1, r22	; 0x01
    47ca:	7a 83       	std	Y+2, r23	; 0x02
    47cc:	8b 83       	std	Y+3, r24	; 0x03
    47ce:	9c 83       	std	Y+4, r25	; 0x04
    47d0:	2d 83       	std	Y+5, r18	; 0x05
    47d2:	3e 83       	std	Y+6, r19	; 0x06
    47d4:	4f 83       	std	Y+7, r20	; 0x07
    47d6:	58 87       	std	Y+8, r21	; 0x08
    47d8:	b9 e0       	ldi	r27, 0x09	; 9
    47da:	eb 2e       	mov	r14, r27
    47dc:	f1 2c       	mov	r15, r1
    47de:	ec 0e       	add	r14, r28
    47e0:	fd 1e       	adc	r15, r29
    47e2:	ce 01       	movw	r24, r28
    47e4:	01 96       	adiw	r24, 0x01	; 1
    47e6:	b7 01       	movw	r22, r14
    47e8:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__unpack_f>
    47ec:	8e 01       	movw	r16, r28
    47ee:	0f 5e       	subi	r16, 0xEF	; 239
    47f0:	1f 4f       	sbci	r17, 0xFF	; 255
    47f2:	ce 01       	movw	r24, r28
    47f4:	05 96       	adiw	r24, 0x05	; 5
    47f6:	b8 01       	movw	r22, r16
    47f8:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__unpack_f>
    47fc:	29 85       	ldd	r18, Y+9	; 0x09
    47fe:	22 30       	cpi	r18, 0x02	; 2
    4800:	08 f4       	brcc	.+2      	; 0x4804 <__divsf3+0x48>
    4802:	7e c0       	rjmp	.+252    	; 0x4900 <__divsf3+0x144>
    4804:	39 89       	ldd	r19, Y+17	; 0x11
    4806:	32 30       	cpi	r19, 0x02	; 2
    4808:	10 f4       	brcc	.+4      	; 0x480e <__divsf3+0x52>
    480a:	b8 01       	movw	r22, r16
    480c:	7c c0       	rjmp	.+248    	; 0x4906 <__divsf3+0x14a>
    480e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4810:	9a 89       	ldd	r25, Y+18	; 0x12
    4812:	89 27       	eor	r24, r25
    4814:	8a 87       	std	Y+10, r24	; 0x0a
    4816:	24 30       	cpi	r18, 0x04	; 4
    4818:	11 f0       	breq	.+4      	; 0x481e <__divsf3+0x62>
    481a:	22 30       	cpi	r18, 0x02	; 2
    481c:	31 f4       	brne	.+12     	; 0x482a <__divsf3+0x6e>
    481e:	23 17       	cp	r18, r19
    4820:	09 f0       	breq	.+2      	; 0x4824 <__divsf3+0x68>
    4822:	6e c0       	rjmp	.+220    	; 0x4900 <__divsf3+0x144>
    4824:	66 e0       	ldi	r22, 0x06	; 6
    4826:	72 e0       	ldi	r23, 0x02	; 2
    4828:	6e c0       	rjmp	.+220    	; 0x4906 <__divsf3+0x14a>
    482a:	34 30       	cpi	r19, 0x04	; 4
    482c:	39 f4       	brne	.+14     	; 0x483c <__divsf3+0x80>
    482e:	1d 86       	std	Y+13, r1	; 0x0d
    4830:	1e 86       	std	Y+14, r1	; 0x0e
    4832:	1f 86       	std	Y+15, r1	; 0x0f
    4834:	18 8a       	std	Y+16, r1	; 0x10
    4836:	1c 86       	std	Y+12, r1	; 0x0c
    4838:	1b 86       	std	Y+11, r1	; 0x0b
    483a:	04 c0       	rjmp	.+8      	; 0x4844 <__divsf3+0x88>
    483c:	32 30       	cpi	r19, 0x02	; 2
    483e:	21 f4       	brne	.+8      	; 0x4848 <__divsf3+0x8c>
    4840:	84 e0       	ldi	r24, 0x04	; 4
    4842:	89 87       	std	Y+9, r24	; 0x09
    4844:	b7 01       	movw	r22, r14
    4846:	5f c0       	rjmp	.+190    	; 0x4906 <__divsf3+0x14a>
    4848:	2b 85       	ldd	r18, Y+11	; 0x0b
    484a:	3c 85       	ldd	r19, Y+12	; 0x0c
    484c:	8b 89       	ldd	r24, Y+19	; 0x13
    484e:	9c 89       	ldd	r25, Y+20	; 0x14
    4850:	28 1b       	sub	r18, r24
    4852:	39 0b       	sbc	r19, r25
    4854:	3c 87       	std	Y+12, r19	; 0x0c
    4856:	2b 87       	std	Y+11, r18	; 0x0b
    4858:	ed 84       	ldd	r14, Y+13	; 0x0d
    485a:	fe 84       	ldd	r15, Y+14	; 0x0e
    485c:	0f 85       	ldd	r16, Y+15	; 0x0f
    485e:	18 89       	ldd	r17, Y+16	; 0x10
    4860:	ad 88       	ldd	r10, Y+21	; 0x15
    4862:	be 88       	ldd	r11, Y+22	; 0x16
    4864:	cf 88       	ldd	r12, Y+23	; 0x17
    4866:	d8 8c       	ldd	r13, Y+24	; 0x18
    4868:	ea 14       	cp	r14, r10
    486a:	fb 04       	cpc	r15, r11
    486c:	0c 05       	cpc	r16, r12
    486e:	1d 05       	cpc	r17, r13
    4870:	40 f4       	brcc	.+16     	; 0x4882 <__divsf3+0xc6>
    4872:	ee 0c       	add	r14, r14
    4874:	ff 1c       	adc	r15, r15
    4876:	00 1f       	adc	r16, r16
    4878:	11 1f       	adc	r17, r17
    487a:	21 50       	subi	r18, 0x01	; 1
    487c:	30 40       	sbci	r19, 0x00	; 0
    487e:	3c 87       	std	Y+12, r19	; 0x0c
    4880:	2b 87       	std	Y+11, r18	; 0x0b
    4882:	20 e0       	ldi	r18, 0x00	; 0
    4884:	30 e0       	ldi	r19, 0x00	; 0
    4886:	40 e0       	ldi	r20, 0x00	; 0
    4888:	50 e0       	ldi	r21, 0x00	; 0
    488a:	80 e0       	ldi	r24, 0x00	; 0
    488c:	90 e0       	ldi	r25, 0x00	; 0
    488e:	a0 e0       	ldi	r26, 0x00	; 0
    4890:	b0 e4       	ldi	r27, 0x40	; 64
    4892:	60 e0       	ldi	r22, 0x00	; 0
    4894:	70 e0       	ldi	r23, 0x00	; 0
    4896:	ea 14       	cp	r14, r10
    4898:	fb 04       	cpc	r15, r11
    489a:	0c 05       	cpc	r16, r12
    489c:	1d 05       	cpc	r17, r13
    489e:	40 f0       	brcs	.+16     	; 0x48b0 <__divsf3+0xf4>
    48a0:	28 2b       	or	r18, r24
    48a2:	39 2b       	or	r19, r25
    48a4:	4a 2b       	or	r20, r26
    48a6:	5b 2b       	or	r21, r27
    48a8:	ea 18       	sub	r14, r10
    48aa:	fb 08       	sbc	r15, r11
    48ac:	0c 09       	sbc	r16, r12
    48ae:	1d 09       	sbc	r17, r13
    48b0:	b6 95       	lsr	r27
    48b2:	a7 95       	ror	r26
    48b4:	97 95       	ror	r25
    48b6:	87 95       	ror	r24
    48b8:	ee 0c       	add	r14, r14
    48ba:	ff 1c       	adc	r15, r15
    48bc:	00 1f       	adc	r16, r16
    48be:	11 1f       	adc	r17, r17
    48c0:	6f 5f       	subi	r22, 0xFF	; 255
    48c2:	7f 4f       	sbci	r23, 0xFF	; 255
    48c4:	6f 31       	cpi	r22, 0x1F	; 31
    48c6:	71 05       	cpc	r23, r1
    48c8:	31 f7       	brne	.-52     	; 0x4896 <__divsf3+0xda>
    48ca:	da 01       	movw	r26, r20
    48cc:	c9 01       	movw	r24, r18
    48ce:	8f 77       	andi	r24, 0x7F	; 127
    48d0:	90 70       	andi	r25, 0x00	; 0
    48d2:	a0 70       	andi	r26, 0x00	; 0
    48d4:	b0 70       	andi	r27, 0x00	; 0
    48d6:	80 34       	cpi	r24, 0x40	; 64
    48d8:	91 05       	cpc	r25, r1
    48da:	a1 05       	cpc	r26, r1
    48dc:	b1 05       	cpc	r27, r1
    48de:	61 f4       	brne	.+24     	; 0x48f8 <__divsf3+0x13c>
    48e0:	27 fd       	sbrc	r18, 7
    48e2:	0a c0       	rjmp	.+20     	; 0x48f8 <__divsf3+0x13c>
    48e4:	e1 14       	cp	r14, r1
    48e6:	f1 04       	cpc	r15, r1
    48e8:	01 05       	cpc	r16, r1
    48ea:	11 05       	cpc	r17, r1
    48ec:	29 f0       	breq	.+10     	; 0x48f8 <__divsf3+0x13c>
    48ee:	20 5c       	subi	r18, 0xC0	; 192
    48f0:	3f 4f       	sbci	r19, 0xFF	; 255
    48f2:	4f 4f       	sbci	r20, 0xFF	; 255
    48f4:	5f 4f       	sbci	r21, 0xFF	; 255
    48f6:	20 78       	andi	r18, 0x80	; 128
    48f8:	2d 87       	std	Y+13, r18	; 0x0d
    48fa:	3e 87       	std	Y+14, r19	; 0x0e
    48fc:	4f 87       	std	Y+15, r20	; 0x0f
    48fe:	58 8b       	std	Y+16, r21	; 0x10
    4900:	be 01       	movw	r22, r28
    4902:	67 5f       	subi	r22, 0xF7	; 247
    4904:	7f 4f       	sbci	r23, 0xFF	; 255
    4906:	cb 01       	movw	r24, r22
    4908:	0e 94 94 26 	call	0x4d28	; 0x4d28 <__pack_f>
    490c:	68 96       	adiw	r28, 0x18	; 24
    490e:	ea e0       	ldi	r30, 0x0A	; 10
    4910:	0c 94 72 28 	jmp	0x50e4	; 0x50e4 <__epilogue_restores__+0x10>

00004914 <__gtsf2>:
    4914:	a8 e1       	ldi	r26, 0x18	; 24
    4916:	b0 e0       	ldi	r27, 0x00	; 0
    4918:	e0 e9       	ldi	r30, 0x90	; 144
    491a:	f4 e2       	ldi	r31, 0x24	; 36
    491c:	0c 94 5a 28 	jmp	0x50b4	; 0x50b4 <__prologue_saves__+0x18>
    4920:	69 83       	std	Y+1, r22	; 0x01
    4922:	7a 83       	std	Y+2, r23	; 0x02
    4924:	8b 83       	std	Y+3, r24	; 0x03
    4926:	9c 83       	std	Y+4, r25	; 0x04
    4928:	2d 83       	std	Y+5, r18	; 0x05
    492a:	3e 83       	std	Y+6, r19	; 0x06
    492c:	4f 83       	std	Y+7, r20	; 0x07
    492e:	58 87       	std	Y+8, r21	; 0x08
    4930:	89 e0       	ldi	r24, 0x09	; 9
    4932:	e8 2e       	mov	r14, r24
    4934:	f1 2c       	mov	r15, r1
    4936:	ec 0e       	add	r14, r28
    4938:	fd 1e       	adc	r15, r29
    493a:	ce 01       	movw	r24, r28
    493c:	01 96       	adiw	r24, 0x01	; 1
    493e:	b7 01       	movw	r22, r14
    4940:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__unpack_f>
    4944:	8e 01       	movw	r16, r28
    4946:	0f 5e       	subi	r16, 0xEF	; 239
    4948:	1f 4f       	sbci	r17, 0xFF	; 255
    494a:	ce 01       	movw	r24, r28
    494c:	05 96       	adiw	r24, 0x05	; 5
    494e:	b8 01       	movw	r22, r16
    4950:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__unpack_f>
    4954:	89 85       	ldd	r24, Y+9	; 0x09
    4956:	82 30       	cpi	r24, 0x02	; 2
    4958:	40 f0       	brcs	.+16     	; 0x496a <__gtsf2+0x56>
    495a:	89 89       	ldd	r24, Y+17	; 0x11
    495c:	82 30       	cpi	r24, 0x02	; 2
    495e:	28 f0       	brcs	.+10     	; 0x496a <__gtsf2+0x56>
    4960:	c7 01       	movw	r24, r14
    4962:	b8 01       	movw	r22, r16
    4964:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <__fpcmp_parts_f>
    4968:	01 c0       	rjmp	.+2      	; 0x496c <__gtsf2+0x58>
    496a:	8f ef       	ldi	r24, 0xFF	; 255
    496c:	68 96       	adiw	r28, 0x18	; 24
    496e:	e6 e0       	ldi	r30, 0x06	; 6
    4970:	0c 94 76 28 	jmp	0x50ec	; 0x50ec <__epilogue_restores__+0x18>

00004974 <__gesf2>:
    4974:	a8 e1       	ldi	r26, 0x18	; 24
    4976:	b0 e0       	ldi	r27, 0x00	; 0
    4978:	e0 ec       	ldi	r30, 0xC0	; 192
    497a:	f4 e2       	ldi	r31, 0x24	; 36
    497c:	0c 94 5a 28 	jmp	0x50b4	; 0x50b4 <__prologue_saves__+0x18>
    4980:	69 83       	std	Y+1, r22	; 0x01
    4982:	7a 83       	std	Y+2, r23	; 0x02
    4984:	8b 83       	std	Y+3, r24	; 0x03
    4986:	9c 83       	std	Y+4, r25	; 0x04
    4988:	2d 83       	std	Y+5, r18	; 0x05
    498a:	3e 83       	std	Y+6, r19	; 0x06
    498c:	4f 83       	std	Y+7, r20	; 0x07
    498e:	58 87       	std	Y+8, r21	; 0x08
    4990:	89 e0       	ldi	r24, 0x09	; 9
    4992:	e8 2e       	mov	r14, r24
    4994:	f1 2c       	mov	r15, r1
    4996:	ec 0e       	add	r14, r28
    4998:	fd 1e       	adc	r15, r29
    499a:	ce 01       	movw	r24, r28
    499c:	01 96       	adiw	r24, 0x01	; 1
    499e:	b7 01       	movw	r22, r14
    49a0:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__unpack_f>
    49a4:	8e 01       	movw	r16, r28
    49a6:	0f 5e       	subi	r16, 0xEF	; 239
    49a8:	1f 4f       	sbci	r17, 0xFF	; 255
    49aa:	ce 01       	movw	r24, r28
    49ac:	05 96       	adiw	r24, 0x05	; 5
    49ae:	b8 01       	movw	r22, r16
    49b0:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__unpack_f>
    49b4:	89 85       	ldd	r24, Y+9	; 0x09
    49b6:	82 30       	cpi	r24, 0x02	; 2
    49b8:	40 f0       	brcs	.+16     	; 0x49ca <__gesf2+0x56>
    49ba:	89 89       	ldd	r24, Y+17	; 0x11
    49bc:	82 30       	cpi	r24, 0x02	; 2
    49be:	28 f0       	brcs	.+10     	; 0x49ca <__gesf2+0x56>
    49c0:	c7 01       	movw	r24, r14
    49c2:	b8 01       	movw	r22, r16
    49c4:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <__fpcmp_parts_f>
    49c8:	01 c0       	rjmp	.+2      	; 0x49cc <__gesf2+0x58>
    49ca:	8f ef       	ldi	r24, 0xFF	; 255
    49cc:	68 96       	adiw	r28, 0x18	; 24
    49ce:	e6 e0       	ldi	r30, 0x06	; 6
    49d0:	0c 94 76 28 	jmp	0x50ec	; 0x50ec <__epilogue_restores__+0x18>

000049d4 <__ltsf2>:
    49d4:	a8 e1       	ldi	r26, 0x18	; 24
    49d6:	b0 e0       	ldi	r27, 0x00	; 0
    49d8:	e0 ef       	ldi	r30, 0xF0	; 240
    49da:	f4 e2       	ldi	r31, 0x24	; 36
    49dc:	0c 94 5a 28 	jmp	0x50b4	; 0x50b4 <__prologue_saves__+0x18>
    49e0:	69 83       	std	Y+1, r22	; 0x01
    49e2:	7a 83       	std	Y+2, r23	; 0x02
    49e4:	8b 83       	std	Y+3, r24	; 0x03
    49e6:	9c 83       	std	Y+4, r25	; 0x04
    49e8:	2d 83       	std	Y+5, r18	; 0x05
    49ea:	3e 83       	std	Y+6, r19	; 0x06
    49ec:	4f 83       	std	Y+7, r20	; 0x07
    49ee:	58 87       	std	Y+8, r21	; 0x08
    49f0:	89 e0       	ldi	r24, 0x09	; 9
    49f2:	e8 2e       	mov	r14, r24
    49f4:	f1 2c       	mov	r15, r1
    49f6:	ec 0e       	add	r14, r28
    49f8:	fd 1e       	adc	r15, r29
    49fa:	ce 01       	movw	r24, r28
    49fc:	01 96       	adiw	r24, 0x01	; 1
    49fe:	b7 01       	movw	r22, r14
    4a00:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__unpack_f>
    4a04:	8e 01       	movw	r16, r28
    4a06:	0f 5e       	subi	r16, 0xEF	; 239
    4a08:	1f 4f       	sbci	r17, 0xFF	; 255
    4a0a:	ce 01       	movw	r24, r28
    4a0c:	05 96       	adiw	r24, 0x05	; 5
    4a0e:	b8 01       	movw	r22, r16
    4a10:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__unpack_f>
    4a14:	89 85       	ldd	r24, Y+9	; 0x09
    4a16:	82 30       	cpi	r24, 0x02	; 2
    4a18:	40 f0       	brcs	.+16     	; 0x4a2a <__ltsf2+0x56>
    4a1a:	89 89       	ldd	r24, Y+17	; 0x11
    4a1c:	82 30       	cpi	r24, 0x02	; 2
    4a1e:	28 f0       	brcs	.+10     	; 0x4a2a <__ltsf2+0x56>
    4a20:	c7 01       	movw	r24, r14
    4a22:	b8 01       	movw	r22, r16
    4a24:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <__fpcmp_parts_f>
    4a28:	01 c0       	rjmp	.+2      	; 0x4a2c <__ltsf2+0x58>
    4a2a:	81 e0       	ldi	r24, 0x01	; 1
    4a2c:	68 96       	adiw	r28, 0x18	; 24
    4a2e:	e6 e0       	ldi	r30, 0x06	; 6
    4a30:	0c 94 76 28 	jmp	0x50ec	; 0x50ec <__epilogue_restores__+0x18>

00004a34 <__floatsisf>:
    4a34:	a8 e0       	ldi	r26, 0x08	; 8
    4a36:	b0 e0       	ldi	r27, 0x00	; 0
    4a38:	e0 e2       	ldi	r30, 0x20	; 32
    4a3a:	f5 e2       	ldi	r31, 0x25	; 37
    4a3c:	0c 94 57 28 	jmp	0x50ae	; 0x50ae <__prologue_saves__+0x12>
    4a40:	9b 01       	movw	r18, r22
    4a42:	ac 01       	movw	r20, r24
    4a44:	83 e0       	ldi	r24, 0x03	; 3
    4a46:	89 83       	std	Y+1, r24	; 0x01
    4a48:	da 01       	movw	r26, r20
    4a4a:	c9 01       	movw	r24, r18
    4a4c:	88 27       	eor	r24, r24
    4a4e:	b7 fd       	sbrc	r27, 7
    4a50:	83 95       	inc	r24
    4a52:	99 27       	eor	r25, r25
    4a54:	aa 27       	eor	r26, r26
    4a56:	bb 27       	eor	r27, r27
    4a58:	b8 2e       	mov	r11, r24
    4a5a:	21 15       	cp	r18, r1
    4a5c:	31 05       	cpc	r19, r1
    4a5e:	41 05       	cpc	r20, r1
    4a60:	51 05       	cpc	r21, r1
    4a62:	19 f4       	brne	.+6      	; 0x4a6a <__floatsisf+0x36>
    4a64:	82 e0       	ldi	r24, 0x02	; 2
    4a66:	89 83       	std	Y+1, r24	; 0x01
    4a68:	3a c0       	rjmp	.+116    	; 0x4ade <__floatsisf+0xaa>
    4a6a:	88 23       	and	r24, r24
    4a6c:	a9 f0       	breq	.+42     	; 0x4a98 <__floatsisf+0x64>
    4a6e:	20 30       	cpi	r18, 0x00	; 0
    4a70:	80 e0       	ldi	r24, 0x00	; 0
    4a72:	38 07       	cpc	r19, r24
    4a74:	80 e0       	ldi	r24, 0x00	; 0
    4a76:	48 07       	cpc	r20, r24
    4a78:	80 e8       	ldi	r24, 0x80	; 128
    4a7a:	58 07       	cpc	r21, r24
    4a7c:	29 f4       	brne	.+10     	; 0x4a88 <__floatsisf+0x54>
    4a7e:	60 e0       	ldi	r22, 0x00	; 0
    4a80:	70 e0       	ldi	r23, 0x00	; 0
    4a82:	80 e0       	ldi	r24, 0x00	; 0
    4a84:	9f ec       	ldi	r25, 0xCF	; 207
    4a86:	30 c0       	rjmp	.+96     	; 0x4ae8 <__floatsisf+0xb4>
    4a88:	ee 24       	eor	r14, r14
    4a8a:	ff 24       	eor	r15, r15
    4a8c:	87 01       	movw	r16, r14
    4a8e:	e2 1a       	sub	r14, r18
    4a90:	f3 0a       	sbc	r15, r19
    4a92:	04 0b       	sbc	r16, r20
    4a94:	15 0b       	sbc	r17, r21
    4a96:	02 c0       	rjmp	.+4      	; 0x4a9c <__floatsisf+0x68>
    4a98:	79 01       	movw	r14, r18
    4a9a:	8a 01       	movw	r16, r20
    4a9c:	8e e1       	ldi	r24, 0x1E	; 30
    4a9e:	c8 2e       	mov	r12, r24
    4aa0:	d1 2c       	mov	r13, r1
    4aa2:	dc 82       	std	Y+4, r13	; 0x04
    4aa4:	cb 82       	std	Y+3, r12	; 0x03
    4aa6:	ed 82       	std	Y+5, r14	; 0x05
    4aa8:	fe 82       	std	Y+6, r15	; 0x06
    4aaa:	0f 83       	std	Y+7, r16	; 0x07
    4aac:	18 87       	std	Y+8, r17	; 0x08
    4aae:	c8 01       	movw	r24, r16
    4ab0:	b7 01       	movw	r22, r14
    4ab2:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__clzsi2>
    4ab6:	01 97       	sbiw	r24, 0x01	; 1
    4ab8:	18 16       	cp	r1, r24
    4aba:	19 06       	cpc	r1, r25
    4abc:	84 f4       	brge	.+32     	; 0x4ade <__floatsisf+0xaa>
    4abe:	08 2e       	mov	r0, r24
    4ac0:	04 c0       	rjmp	.+8      	; 0x4aca <__floatsisf+0x96>
    4ac2:	ee 0c       	add	r14, r14
    4ac4:	ff 1c       	adc	r15, r15
    4ac6:	00 1f       	adc	r16, r16
    4ac8:	11 1f       	adc	r17, r17
    4aca:	0a 94       	dec	r0
    4acc:	d2 f7       	brpl	.-12     	; 0x4ac2 <__floatsisf+0x8e>
    4ace:	ed 82       	std	Y+5, r14	; 0x05
    4ad0:	fe 82       	std	Y+6, r15	; 0x06
    4ad2:	0f 83       	std	Y+7, r16	; 0x07
    4ad4:	18 87       	std	Y+8, r17	; 0x08
    4ad6:	c8 1a       	sub	r12, r24
    4ad8:	d9 0a       	sbc	r13, r25
    4ada:	dc 82       	std	Y+4, r13	; 0x04
    4adc:	cb 82       	std	Y+3, r12	; 0x03
    4ade:	ba 82       	std	Y+2, r11	; 0x02
    4ae0:	ce 01       	movw	r24, r28
    4ae2:	01 96       	adiw	r24, 0x01	; 1
    4ae4:	0e 94 94 26 	call	0x4d28	; 0x4d28 <__pack_f>
    4ae8:	28 96       	adiw	r28, 0x08	; 8
    4aea:	e9 e0       	ldi	r30, 0x09	; 9
    4aec:	0c 94 73 28 	jmp	0x50e6	; 0x50e6 <__epilogue_restores__+0x12>

00004af0 <__fixsfsi>:
    4af0:	ac e0       	ldi	r26, 0x0C	; 12
    4af2:	b0 e0       	ldi	r27, 0x00	; 0
    4af4:	ee e7       	ldi	r30, 0x7E	; 126
    4af6:	f5 e2       	ldi	r31, 0x25	; 37
    4af8:	0c 94 5e 28 	jmp	0x50bc	; 0x50bc <__prologue_saves__+0x20>
    4afc:	69 83       	std	Y+1, r22	; 0x01
    4afe:	7a 83       	std	Y+2, r23	; 0x02
    4b00:	8b 83       	std	Y+3, r24	; 0x03
    4b02:	9c 83       	std	Y+4, r25	; 0x04
    4b04:	ce 01       	movw	r24, r28
    4b06:	01 96       	adiw	r24, 0x01	; 1
    4b08:	be 01       	movw	r22, r28
    4b0a:	6b 5f       	subi	r22, 0xFB	; 251
    4b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    4b0e:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__unpack_f>
    4b12:	8d 81       	ldd	r24, Y+5	; 0x05
    4b14:	82 30       	cpi	r24, 0x02	; 2
    4b16:	61 f1       	breq	.+88     	; 0x4b70 <__fixsfsi+0x80>
    4b18:	82 30       	cpi	r24, 0x02	; 2
    4b1a:	50 f1       	brcs	.+84     	; 0x4b70 <__fixsfsi+0x80>
    4b1c:	84 30       	cpi	r24, 0x04	; 4
    4b1e:	21 f4       	brne	.+8      	; 0x4b28 <__fixsfsi+0x38>
    4b20:	8e 81       	ldd	r24, Y+6	; 0x06
    4b22:	88 23       	and	r24, r24
    4b24:	51 f1       	breq	.+84     	; 0x4b7a <__fixsfsi+0x8a>
    4b26:	2e c0       	rjmp	.+92     	; 0x4b84 <__fixsfsi+0x94>
    4b28:	2f 81       	ldd	r18, Y+7	; 0x07
    4b2a:	38 85       	ldd	r19, Y+8	; 0x08
    4b2c:	37 fd       	sbrc	r19, 7
    4b2e:	20 c0       	rjmp	.+64     	; 0x4b70 <__fixsfsi+0x80>
    4b30:	6e 81       	ldd	r22, Y+6	; 0x06
    4b32:	2f 31       	cpi	r18, 0x1F	; 31
    4b34:	31 05       	cpc	r19, r1
    4b36:	1c f0       	brlt	.+6      	; 0x4b3e <__fixsfsi+0x4e>
    4b38:	66 23       	and	r22, r22
    4b3a:	f9 f0       	breq	.+62     	; 0x4b7a <__fixsfsi+0x8a>
    4b3c:	23 c0       	rjmp	.+70     	; 0x4b84 <__fixsfsi+0x94>
    4b3e:	8e e1       	ldi	r24, 0x1E	; 30
    4b40:	90 e0       	ldi	r25, 0x00	; 0
    4b42:	82 1b       	sub	r24, r18
    4b44:	93 0b       	sbc	r25, r19
    4b46:	29 85       	ldd	r18, Y+9	; 0x09
    4b48:	3a 85       	ldd	r19, Y+10	; 0x0a
    4b4a:	4b 85       	ldd	r20, Y+11	; 0x0b
    4b4c:	5c 85       	ldd	r21, Y+12	; 0x0c
    4b4e:	04 c0       	rjmp	.+8      	; 0x4b58 <__fixsfsi+0x68>
    4b50:	56 95       	lsr	r21
    4b52:	47 95       	ror	r20
    4b54:	37 95       	ror	r19
    4b56:	27 95       	ror	r18
    4b58:	8a 95       	dec	r24
    4b5a:	d2 f7       	brpl	.-12     	; 0x4b50 <__fixsfsi+0x60>
    4b5c:	66 23       	and	r22, r22
    4b5e:	b1 f0       	breq	.+44     	; 0x4b8c <__fixsfsi+0x9c>
    4b60:	50 95       	com	r21
    4b62:	40 95       	com	r20
    4b64:	30 95       	com	r19
    4b66:	21 95       	neg	r18
    4b68:	3f 4f       	sbci	r19, 0xFF	; 255
    4b6a:	4f 4f       	sbci	r20, 0xFF	; 255
    4b6c:	5f 4f       	sbci	r21, 0xFF	; 255
    4b6e:	0e c0       	rjmp	.+28     	; 0x4b8c <__fixsfsi+0x9c>
    4b70:	20 e0       	ldi	r18, 0x00	; 0
    4b72:	30 e0       	ldi	r19, 0x00	; 0
    4b74:	40 e0       	ldi	r20, 0x00	; 0
    4b76:	50 e0       	ldi	r21, 0x00	; 0
    4b78:	09 c0       	rjmp	.+18     	; 0x4b8c <__fixsfsi+0x9c>
    4b7a:	2f ef       	ldi	r18, 0xFF	; 255
    4b7c:	3f ef       	ldi	r19, 0xFF	; 255
    4b7e:	4f ef       	ldi	r20, 0xFF	; 255
    4b80:	5f e7       	ldi	r21, 0x7F	; 127
    4b82:	04 c0       	rjmp	.+8      	; 0x4b8c <__fixsfsi+0x9c>
    4b84:	20 e0       	ldi	r18, 0x00	; 0
    4b86:	30 e0       	ldi	r19, 0x00	; 0
    4b88:	40 e0       	ldi	r20, 0x00	; 0
    4b8a:	50 e8       	ldi	r21, 0x80	; 128
    4b8c:	b9 01       	movw	r22, r18
    4b8e:	ca 01       	movw	r24, r20
    4b90:	2c 96       	adiw	r28, 0x0c	; 12
    4b92:	e2 e0       	ldi	r30, 0x02	; 2
    4b94:	0c 94 7a 28 	jmp	0x50f4	; 0x50f4 <__epilogue_restores__+0x20>

00004b98 <__floatunsisf>:
    4b98:	a8 e0       	ldi	r26, 0x08	; 8
    4b9a:	b0 e0       	ldi	r27, 0x00	; 0
    4b9c:	e2 ed       	ldi	r30, 0xD2	; 210
    4b9e:	f5 e2       	ldi	r31, 0x25	; 37
    4ba0:	0c 94 56 28 	jmp	0x50ac	; 0x50ac <__prologue_saves__+0x10>
    4ba4:	7b 01       	movw	r14, r22
    4ba6:	8c 01       	movw	r16, r24
    4ba8:	61 15       	cp	r22, r1
    4baa:	71 05       	cpc	r23, r1
    4bac:	81 05       	cpc	r24, r1
    4bae:	91 05       	cpc	r25, r1
    4bb0:	19 f4       	brne	.+6      	; 0x4bb8 <__floatunsisf+0x20>
    4bb2:	82 e0       	ldi	r24, 0x02	; 2
    4bb4:	89 83       	std	Y+1, r24	; 0x01
    4bb6:	60 c0       	rjmp	.+192    	; 0x4c78 <__floatunsisf+0xe0>
    4bb8:	83 e0       	ldi	r24, 0x03	; 3
    4bba:	89 83       	std	Y+1, r24	; 0x01
    4bbc:	8e e1       	ldi	r24, 0x1E	; 30
    4bbe:	c8 2e       	mov	r12, r24
    4bc0:	d1 2c       	mov	r13, r1
    4bc2:	dc 82       	std	Y+4, r13	; 0x04
    4bc4:	cb 82       	std	Y+3, r12	; 0x03
    4bc6:	ed 82       	std	Y+5, r14	; 0x05
    4bc8:	fe 82       	std	Y+6, r15	; 0x06
    4bca:	0f 83       	std	Y+7, r16	; 0x07
    4bcc:	18 87       	std	Y+8, r17	; 0x08
    4bce:	c8 01       	movw	r24, r16
    4bd0:	b7 01       	movw	r22, r14
    4bd2:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__clzsi2>
    4bd6:	fc 01       	movw	r30, r24
    4bd8:	31 97       	sbiw	r30, 0x01	; 1
    4bda:	f7 ff       	sbrs	r31, 7
    4bdc:	3b c0       	rjmp	.+118    	; 0x4c54 <__floatunsisf+0xbc>
    4bde:	22 27       	eor	r18, r18
    4be0:	33 27       	eor	r19, r19
    4be2:	2e 1b       	sub	r18, r30
    4be4:	3f 0b       	sbc	r19, r31
    4be6:	57 01       	movw	r10, r14
    4be8:	68 01       	movw	r12, r16
    4bea:	02 2e       	mov	r0, r18
    4bec:	04 c0       	rjmp	.+8      	; 0x4bf6 <__floatunsisf+0x5e>
    4bee:	d6 94       	lsr	r13
    4bf0:	c7 94       	ror	r12
    4bf2:	b7 94       	ror	r11
    4bf4:	a7 94       	ror	r10
    4bf6:	0a 94       	dec	r0
    4bf8:	d2 f7       	brpl	.-12     	; 0x4bee <__floatunsisf+0x56>
    4bfa:	40 e0       	ldi	r20, 0x00	; 0
    4bfc:	50 e0       	ldi	r21, 0x00	; 0
    4bfe:	60 e0       	ldi	r22, 0x00	; 0
    4c00:	70 e0       	ldi	r23, 0x00	; 0
    4c02:	81 e0       	ldi	r24, 0x01	; 1
    4c04:	90 e0       	ldi	r25, 0x00	; 0
    4c06:	a0 e0       	ldi	r26, 0x00	; 0
    4c08:	b0 e0       	ldi	r27, 0x00	; 0
    4c0a:	04 c0       	rjmp	.+8      	; 0x4c14 <__floatunsisf+0x7c>
    4c0c:	88 0f       	add	r24, r24
    4c0e:	99 1f       	adc	r25, r25
    4c10:	aa 1f       	adc	r26, r26
    4c12:	bb 1f       	adc	r27, r27
    4c14:	2a 95       	dec	r18
    4c16:	d2 f7       	brpl	.-12     	; 0x4c0c <__floatunsisf+0x74>
    4c18:	01 97       	sbiw	r24, 0x01	; 1
    4c1a:	a1 09       	sbc	r26, r1
    4c1c:	b1 09       	sbc	r27, r1
    4c1e:	8e 21       	and	r24, r14
    4c20:	9f 21       	and	r25, r15
    4c22:	a0 23       	and	r26, r16
    4c24:	b1 23       	and	r27, r17
    4c26:	00 97       	sbiw	r24, 0x00	; 0
    4c28:	a1 05       	cpc	r26, r1
    4c2a:	b1 05       	cpc	r27, r1
    4c2c:	21 f0       	breq	.+8      	; 0x4c36 <__floatunsisf+0x9e>
    4c2e:	41 e0       	ldi	r20, 0x01	; 1
    4c30:	50 e0       	ldi	r21, 0x00	; 0
    4c32:	60 e0       	ldi	r22, 0x00	; 0
    4c34:	70 e0       	ldi	r23, 0x00	; 0
    4c36:	4a 29       	or	r20, r10
    4c38:	5b 29       	or	r21, r11
    4c3a:	6c 29       	or	r22, r12
    4c3c:	7d 29       	or	r23, r13
    4c3e:	4d 83       	std	Y+5, r20	; 0x05
    4c40:	5e 83       	std	Y+6, r21	; 0x06
    4c42:	6f 83       	std	Y+7, r22	; 0x07
    4c44:	78 87       	std	Y+8, r23	; 0x08
    4c46:	8e e1       	ldi	r24, 0x1E	; 30
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	8e 1b       	sub	r24, r30
    4c4c:	9f 0b       	sbc	r25, r31
    4c4e:	9c 83       	std	Y+4, r25	; 0x04
    4c50:	8b 83       	std	Y+3, r24	; 0x03
    4c52:	12 c0       	rjmp	.+36     	; 0x4c78 <__floatunsisf+0xe0>
    4c54:	30 97       	sbiw	r30, 0x00	; 0
    4c56:	81 f0       	breq	.+32     	; 0x4c78 <__floatunsisf+0xe0>
    4c58:	0e 2e       	mov	r0, r30
    4c5a:	04 c0       	rjmp	.+8      	; 0x4c64 <__floatunsisf+0xcc>
    4c5c:	ee 0c       	add	r14, r14
    4c5e:	ff 1c       	adc	r15, r15
    4c60:	00 1f       	adc	r16, r16
    4c62:	11 1f       	adc	r17, r17
    4c64:	0a 94       	dec	r0
    4c66:	d2 f7       	brpl	.-12     	; 0x4c5c <__floatunsisf+0xc4>
    4c68:	ed 82       	std	Y+5, r14	; 0x05
    4c6a:	fe 82       	std	Y+6, r15	; 0x06
    4c6c:	0f 83       	std	Y+7, r16	; 0x07
    4c6e:	18 87       	std	Y+8, r17	; 0x08
    4c70:	ce 1a       	sub	r12, r30
    4c72:	df 0a       	sbc	r13, r31
    4c74:	dc 82       	std	Y+4, r13	; 0x04
    4c76:	cb 82       	std	Y+3, r12	; 0x03
    4c78:	1a 82       	std	Y+2, r1	; 0x02
    4c7a:	ce 01       	movw	r24, r28
    4c7c:	01 96       	adiw	r24, 0x01	; 1
    4c7e:	0e 94 94 26 	call	0x4d28	; 0x4d28 <__pack_f>
    4c82:	28 96       	adiw	r28, 0x08	; 8
    4c84:	ea e0       	ldi	r30, 0x0A	; 10
    4c86:	0c 94 72 28 	jmp	0x50e4	; 0x50e4 <__epilogue_restores__+0x10>

00004c8a <__clzsi2>:
    4c8a:	ef 92       	push	r14
    4c8c:	ff 92       	push	r15
    4c8e:	0f 93       	push	r16
    4c90:	1f 93       	push	r17
    4c92:	7b 01       	movw	r14, r22
    4c94:	8c 01       	movw	r16, r24
    4c96:	80 e0       	ldi	r24, 0x00	; 0
    4c98:	e8 16       	cp	r14, r24
    4c9a:	80 e0       	ldi	r24, 0x00	; 0
    4c9c:	f8 06       	cpc	r15, r24
    4c9e:	81 e0       	ldi	r24, 0x01	; 1
    4ca0:	08 07       	cpc	r16, r24
    4ca2:	80 e0       	ldi	r24, 0x00	; 0
    4ca4:	18 07       	cpc	r17, r24
    4ca6:	88 f4       	brcc	.+34     	; 0x4cca <__clzsi2+0x40>
    4ca8:	8f ef       	ldi	r24, 0xFF	; 255
    4caa:	e8 16       	cp	r14, r24
    4cac:	f1 04       	cpc	r15, r1
    4cae:	01 05       	cpc	r16, r1
    4cb0:	11 05       	cpc	r17, r1
    4cb2:	31 f0       	breq	.+12     	; 0x4cc0 <__clzsi2+0x36>
    4cb4:	28 f0       	brcs	.+10     	; 0x4cc0 <__clzsi2+0x36>
    4cb6:	88 e0       	ldi	r24, 0x08	; 8
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	a0 e0       	ldi	r26, 0x00	; 0
    4cbc:	b0 e0       	ldi	r27, 0x00	; 0
    4cbe:	17 c0       	rjmp	.+46     	; 0x4cee <__clzsi2+0x64>
    4cc0:	80 e0       	ldi	r24, 0x00	; 0
    4cc2:	90 e0       	ldi	r25, 0x00	; 0
    4cc4:	a0 e0       	ldi	r26, 0x00	; 0
    4cc6:	b0 e0       	ldi	r27, 0x00	; 0
    4cc8:	12 c0       	rjmp	.+36     	; 0x4cee <__clzsi2+0x64>
    4cca:	80 e0       	ldi	r24, 0x00	; 0
    4ccc:	e8 16       	cp	r14, r24
    4cce:	80 e0       	ldi	r24, 0x00	; 0
    4cd0:	f8 06       	cpc	r15, r24
    4cd2:	80 e0       	ldi	r24, 0x00	; 0
    4cd4:	08 07       	cpc	r16, r24
    4cd6:	81 e0       	ldi	r24, 0x01	; 1
    4cd8:	18 07       	cpc	r17, r24
    4cda:	28 f0       	brcs	.+10     	; 0x4ce6 <__clzsi2+0x5c>
    4cdc:	88 e1       	ldi	r24, 0x18	; 24
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	a0 e0       	ldi	r26, 0x00	; 0
    4ce2:	b0 e0       	ldi	r27, 0x00	; 0
    4ce4:	04 c0       	rjmp	.+8      	; 0x4cee <__clzsi2+0x64>
    4ce6:	80 e1       	ldi	r24, 0x10	; 16
    4ce8:	90 e0       	ldi	r25, 0x00	; 0
    4cea:	a0 e0       	ldi	r26, 0x00	; 0
    4cec:	b0 e0       	ldi	r27, 0x00	; 0
    4cee:	20 e2       	ldi	r18, 0x20	; 32
    4cf0:	30 e0       	ldi	r19, 0x00	; 0
    4cf2:	40 e0       	ldi	r20, 0x00	; 0
    4cf4:	50 e0       	ldi	r21, 0x00	; 0
    4cf6:	28 1b       	sub	r18, r24
    4cf8:	39 0b       	sbc	r19, r25
    4cfa:	4a 0b       	sbc	r20, r26
    4cfc:	5b 0b       	sbc	r21, r27
    4cfe:	04 c0       	rjmp	.+8      	; 0x4d08 <__clzsi2+0x7e>
    4d00:	16 95       	lsr	r17
    4d02:	07 95       	ror	r16
    4d04:	f7 94       	ror	r15
    4d06:	e7 94       	ror	r14
    4d08:	8a 95       	dec	r24
    4d0a:	d2 f7       	brpl	.-12     	; 0x4d00 <__clzsi2+0x76>
    4d0c:	f7 01       	movw	r30, r14
    4d0e:	e2 5f       	subi	r30, 0xF2	; 242
    4d10:	fd 4f       	sbci	r31, 0xFD	; 253
    4d12:	80 81       	ld	r24, Z
    4d14:	28 1b       	sub	r18, r24
    4d16:	31 09       	sbc	r19, r1
    4d18:	41 09       	sbc	r20, r1
    4d1a:	51 09       	sbc	r21, r1
    4d1c:	c9 01       	movw	r24, r18
    4d1e:	1f 91       	pop	r17
    4d20:	0f 91       	pop	r16
    4d22:	ff 90       	pop	r15
    4d24:	ef 90       	pop	r14
    4d26:	08 95       	ret

00004d28 <__pack_f>:
    4d28:	df 92       	push	r13
    4d2a:	ef 92       	push	r14
    4d2c:	ff 92       	push	r15
    4d2e:	0f 93       	push	r16
    4d30:	1f 93       	push	r17
    4d32:	fc 01       	movw	r30, r24
    4d34:	e4 80       	ldd	r14, Z+4	; 0x04
    4d36:	f5 80       	ldd	r15, Z+5	; 0x05
    4d38:	06 81       	ldd	r16, Z+6	; 0x06
    4d3a:	17 81       	ldd	r17, Z+7	; 0x07
    4d3c:	d1 80       	ldd	r13, Z+1	; 0x01
    4d3e:	80 81       	ld	r24, Z
    4d40:	82 30       	cpi	r24, 0x02	; 2
    4d42:	48 f4       	brcc	.+18     	; 0x4d56 <__pack_f+0x2e>
    4d44:	80 e0       	ldi	r24, 0x00	; 0
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	a0 e1       	ldi	r26, 0x10	; 16
    4d4a:	b0 e0       	ldi	r27, 0x00	; 0
    4d4c:	e8 2a       	or	r14, r24
    4d4e:	f9 2a       	or	r15, r25
    4d50:	0a 2b       	or	r16, r26
    4d52:	1b 2b       	or	r17, r27
    4d54:	a5 c0       	rjmp	.+330    	; 0x4ea0 <__pack_f+0x178>
    4d56:	84 30       	cpi	r24, 0x04	; 4
    4d58:	09 f4       	brne	.+2      	; 0x4d5c <__pack_f+0x34>
    4d5a:	9f c0       	rjmp	.+318    	; 0x4e9a <__pack_f+0x172>
    4d5c:	82 30       	cpi	r24, 0x02	; 2
    4d5e:	21 f4       	brne	.+8      	; 0x4d68 <__pack_f+0x40>
    4d60:	ee 24       	eor	r14, r14
    4d62:	ff 24       	eor	r15, r15
    4d64:	87 01       	movw	r16, r14
    4d66:	05 c0       	rjmp	.+10     	; 0x4d72 <__pack_f+0x4a>
    4d68:	e1 14       	cp	r14, r1
    4d6a:	f1 04       	cpc	r15, r1
    4d6c:	01 05       	cpc	r16, r1
    4d6e:	11 05       	cpc	r17, r1
    4d70:	19 f4       	brne	.+6      	; 0x4d78 <__pack_f+0x50>
    4d72:	e0 e0       	ldi	r30, 0x00	; 0
    4d74:	f0 e0       	ldi	r31, 0x00	; 0
    4d76:	96 c0       	rjmp	.+300    	; 0x4ea4 <__pack_f+0x17c>
    4d78:	62 81       	ldd	r22, Z+2	; 0x02
    4d7a:	73 81       	ldd	r23, Z+3	; 0x03
    4d7c:	9f ef       	ldi	r25, 0xFF	; 255
    4d7e:	62 38       	cpi	r22, 0x82	; 130
    4d80:	79 07       	cpc	r23, r25
    4d82:	0c f0       	brlt	.+2      	; 0x4d86 <__pack_f+0x5e>
    4d84:	5b c0       	rjmp	.+182    	; 0x4e3c <__pack_f+0x114>
    4d86:	22 e8       	ldi	r18, 0x82	; 130
    4d88:	3f ef       	ldi	r19, 0xFF	; 255
    4d8a:	26 1b       	sub	r18, r22
    4d8c:	37 0b       	sbc	r19, r23
    4d8e:	2a 31       	cpi	r18, 0x1A	; 26
    4d90:	31 05       	cpc	r19, r1
    4d92:	2c f0       	brlt	.+10     	; 0x4d9e <__pack_f+0x76>
    4d94:	20 e0       	ldi	r18, 0x00	; 0
    4d96:	30 e0       	ldi	r19, 0x00	; 0
    4d98:	40 e0       	ldi	r20, 0x00	; 0
    4d9a:	50 e0       	ldi	r21, 0x00	; 0
    4d9c:	2a c0       	rjmp	.+84     	; 0x4df2 <__pack_f+0xca>
    4d9e:	b8 01       	movw	r22, r16
    4da0:	a7 01       	movw	r20, r14
    4da2:	02 2e       	mov	r0, r18
    4da4:	04 c0       	rjmp	.+8      	; 0x4dae <__pack_f+0x86>
    4da6:	76 95       	lsr	r23
    4da8:	67 95       	ror	r22
    4daa:	57 95       	ror	r21
    4dac:	47 95       	ror	r20
    4dae:	0a 94       	dec	r0
    4db0:	d2 f7       	brpl	.-12     	; 0x4da6 <__pack_f+0x7e>
    4db2:	81 e0       	ldi	r24, 0x01	; 1
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	a0 e0       	ldi	r26, 0x00	; 0
    4db8:	b0 e0       	ldi	r27, 0x00	; 0
    4dba:	04 c0       	rjmp	.+8      	; 0x4dc4 <__pack_f+0x9c>
    4dbc:	88 0f       	add	r24, r24
    4dbe:	99 1f       	adc	r25, r25
    4dc0:	aa 1f       	adc	r26, r26
    4dc2:	bb 1f       	adc	r27, r27
    4dc4:	2a 95       	dec	r18
    4dc6:	d2 f7       	brpl	.-12     	; 0x4dbc <__pack_f+0x94>
    4dc8:	01 97       	sbiw	r24, 0x01	; 1
    4dca:	a1 09       	sbc	r26, r1
    4dcc:	b1 09       	sbc	r27, r1
    4dce:	8e 21       	and	r24, r14
    4dd0:	9f 21       	and	r25, r15
    4dd2:	a0 23       	and	r26, r16
    4dd4:	b1 23       	and	r27, r17
    4dd6:	00 97       	sbiw	r24, 0x00	; 0
    4dd8:	a1 05       	cpc	r26, r1
    4dda:	b1 05       	cpc	r27, r1
    4ddc:	21 f0       	breq	.+8      	; 0x4de6 <__pack_f+0xbe>
    4dde:	81 e0       	ldi	r24, 0x01	; 1
    4de0:	90 e0       	ldi	r25, 0x00	; 0
    4de2:	a0 e0       	ldi	r26, 0x00	; 0
    4de4:	b0 e0       	ldi	r27, 0x00	; 0
    4de6:	9a 01       	movw	r18, r20
    4de8:	ab 01       	movw	r20, r22
    4dea:	28 2b       	or	r18, r24
    4dec:	39 2b       	or	r19, r25
    4dee:	4a 2b       	or	r20, r26
    4df0:	5b 2b       	or	r21, r27
    4df2:	da 01       	movw	r26, r20
    4df4:	c9 01       	movw	r24, r18
    4df6:	8f 77       	andi	r24, 0x7F	; 127
    4df8:	90 70       	andi	r25, 0x00	; 0
    4dfa:	a0 70       	andi	r26, 0x00	; 0
    4dfc:	b0 70       	andi	r27, 0x00	; 0
    4dfe:	80 34       	cpi	r24, 0x40	; 64
    4e00:	91 05       	cpc	r25, r1
    4e02:	a1 05       	cpc	r26, r1
    4e04:	b1 05       	cpc	r27, r1
    4e06:	39 f4       	brne	.+14     	; 0x4e16 <__pack_f+0xee>
    4e08:	27 ff       	sbrs	r18, 7
    4e0a:	09 c0       	rjmp	.+18     	; 0x4e1e <__pack_f+0xf6>
    4e0c:	20 5c       	subi	r18, 0xC0	; 192
    4e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    4e10:	4f 4f       	sbci	r20, 0xFF	; 255
    4e12:	5f 4f       	sbci	r21, 0xFF	; 255
    4e14:	04 c0       	rjmp	.+8      	; 0x4e1e <__pack_f+0xf6>
    4e16:	21 5c       	subi	r18, 0xC1	; 193
    4e18:	3f 4f       	sbci	r19, 0xFF	; 255
    4e1a:	4f 4f       	sbci	r20, 0xFF	; 255
    4e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    4e1e:	e0 e0       	ldi	r30, 0x00	; 0
    4e20:	f0 e0       	ldi	r31, 0x00	; 0
    4e22:	20 30       	cpi	r18, 0x00	; 0
    4e24:	a0 e0       	ldi	r26, 0x00	; 0
    4e26:	3a 07       	cpc	r19, r26
    4e28:	a0 e0       	ldi	r26, 0x00	; 0
    4e2a:	4a 07       	cpc	r20, r26
    4e2c:	a0 e4       	ldi	r26, 0x40	; 64
    4e2e:	5a 07       	cpc	r21, r26
    4e30:	10 f0       	brcs	.+4      	; 0x4e36 <__pack_f+0x10e>
    4e32:	e1 e0       	ldi	r30, 0x01	; 1
    4e34:	f0 e0       	ldi	r31, 0x00	; 0
    4e36:	79 01       	movw	r14, r18
    4e38:	8a 01       	movw	r16, r20
    4e3a:	27 c0       	rjmp	.+78     	; 0x4e8a <__pack_f+0x162>
    4e3c:	60 38       	cpi	r22, 0x80	; 128
    4e3e:	71 05       	cpc	r23, r1
    4e40:	64 f5       	brge	.+88     	; 0x4e9a <__pack_f+0x172>
    4e42:	fb 01       	movw	r30, r22
    4e44:	e1 58       	subi	r30, 0x81	; 129
    4e46:	ff 4f       	sbci	r31, 0xFF	; 255
    4e48:	d8 01       	movw	r26, r16
    4e4a:	c7 01       	movw	r24, r14
    4e4c:	8f 77       	andi	r24, 0x7F	; 127
    4e4e:	90 70       	andi	r25, 0x00	; 0
    4e50:	a0 70       	andi	r26, 0x00	; 0
    4e52:	b0 70       	andi	r27, 0x00	; 0
    4e54:	80 34       	cpi	r24, 0x40	; 64
    4e56:	91 05       	cpc	r25, r1
    4e58:	a1 05       	cpc	r26, r1
    4e5a:	b1 05       	cpc	r27, r1
    4e5c:	39 f4       	brne	.+14     	; 0x4e6c <__pack_f+0x144>
    4e5e:	e7 fe       	sbrs	r14, 7
    4e60:	0d c0       	rjmp	.+26     	; 0x4e7c <__pack_f+0x154>
    4e62:	80 e4       	ldi	r24, 0x40	; 64
    4e64:	90 e0       	ldi	r25, 0x00	; 0
    4e66:	a0 e0       	ldi	r26, 0x00	; 0
    4e68:	b0 e0       	ldi	r27, 0x00	; 0
    4e6a:	04 c0       	rjmp	.+8      	; 0x4e74 <__pack_f+0x14c>
    4e6c:	8f e3       	ldi	r24, 0x3F	; 63
    4e6e:	90 e0       	ldi	r25, 0x00	; 0
    4e70:	a0 e0       	ldi	r26, 0x00	; 0
    4e72:	b0 e0       	ldi	r27, 0x00	; 0
    4e74:	e8 0e       	add	r14, r24
    4e76:	f9 1e       	adc	r15, r25
    4e78:	0a 1f       	adc	r16, r26
    4e7a:	1b 1f       	adc	r17, r27
    4e7c:	17 ff       	sbrs	r17, 7
    4e7e:	05 c0       	rjmp	.+10     	; 0x4e8a <__pack_f+0x162>
    4e80:	16 95       	lsr	r17
    4e82:	07 95       	ror	r16
    4e84:	f7 94       	ror	r15
    4e86:	e7 94       	ror	r14
    4e88:	31 96       	adiw	r30, 0x01	; 1
    4e8a:	87 e0       	ldi	r24, 0x07	; 7
    4e8c:	16 95       	lsr	r17
    4e8e:	07 95       	ror	r16
    4e90:	f7 94       	ror	r15
    4e92:	e7 94       	ror	r14
    4e94:	8a 95       	dec	r24
    4e96:	d1 f7       	brne	.-12     	; 0x4e8c <__pack_f+0x164>
    4e98:	05 c0       	rjmp	.+10     	; 0x4ea4 <__pack_f+0x17c>
    4e9a:	ee 24       	eor	r14, r14
    4e9c:	ff 24       	eor	r15, r15
    4e9e:	87 01       	movw	r16, r14
    4ea0:	ef ef       	ldi	r30, 0xFF	; 255
    4ea2:	f0 e0       	ldi	r31, 0x00	; 0
    4ea4:	6e 2f       	mov	r22, r30
    4ea6:	67 95       	ror	r22
    4ea8:	66 27       	eor	r22, r22
    4eaa:	67 95       	ror	r22
    4eac:	90 2f       	mov	r25, r16
    4eae:	9f 77       	andi	r25, 0x7F	; 127
    4eb0:	d7 94       	ror	r13
    4eb2:	dd 24       	eor	r13, r13
    4eb4:	d7 94       	ror	r13
    4eb6:	8e 2f       	mov	r24, r30
    4eb8:	86 95       	lsr	r24
    4eba:	49 2f       	mov	r20, r25
    4ebc:	46 2b       	or	r20, r22
    4ebe:	58 2f       	mov	r21, r24
    4ec0:	5d 29       	or	r21, r13
    4ec2:	b7 01       	movw	r22, r14
    4ec4:	ca 01       	movw	r24, r20
    4ec6:	1f 91       	pop	r17
    4ec8:	0f 91       	pop	r16
    4eca:	ff 90       	pop	r15
    4ecc:	ef 90       	pop	r14
    4ece:	df 90       	pop	r13
    4ed0:	08 95       	ret

00004ed2 <__unpack_f>:
    4ed2:	fc 01       	movw	r30, r24
    4ed4:	db 01       	movw	r26, r22
    4ed6:	40 81       	ld	r20, Z
    4ed8:	51 81       	ldd	r21, Z+1	; 0x01
    4eda:	22 81       	ldd	r18, Z+2	; 0x02
    4edc:	62 2f       	mov	r22, r18
    4ede:	6f 77       	andi	r22, 0x7F	; 127
    4ee0:	70 e0       	ldi	r23, 0x00	; 0
    4ee2:	22 1f       	adc	r18, r18
    4ee4:	22 27       	eor	r18, r18
    4ee6:	22 1f       	adc	r18, r18
    4ee8:	93 81       	ldd	r25, Z+3	; 0x03
    4eea:	89 2f       	mov	r24, r25
    4eec:	88 0f       	add	r24, r24
    4eee:	82 2b       	or	r24, r18
    4ef0:	28 2f       	mov	r18, r24
    4ef2:	30 e0       	ldi	r19, 0x00	; 0
    4ef4:	99 1f       	adc	r25, r25
    4ef6:	99 27       	eor	r25, r25
    4ef8:	99 1f       	adc	r25, r25
    4efa:	11 96       	adiw	r26, 0x01	; 1
    4efc:	9c 93       	st	X, r25
    4efe:	11 97       	sbiw	r26, 0x01	; 1
    4f00:	21 15       	cp	r18, r1
    4f02:	31 05       	cpc	r19, r1
    4f04:	a9 f5       	brne	.+106    	; 0x4f70 <__unpack_f+0x9e>
    4f06:	41 15       	cp	r20, r1
    4f08:	51 05       	cpc	r21, r1
    4f0a:	61 05       	cpc	r22, r1
    4f0c:	71 05       	cpc	r23, r1
    4f0e:	11 f4       	brne	.+4      	; 0x4f14 <__unpack_f+0x42>
    4f10:	82 e0       	ldi	r24, 0x02	; 2
    4f12:	37 c0       	rjmp	.+110    	; 0x4f82 <__unpack_f+0xb0>
    4f14:	82 e8       	ldi	r24, 0x82	; 130
    4f16:	9f ef       	ldi	r25, 0xFF	; 255
    4f18:	13 96       	adiw	r26, 0x03	; 3
    4f1a:	9c 93       	st	X, r25
    4f1c:	8e 93       	st	-X, r24
    4f1e:	12 97       	sbiw	r26, 0x02	; 2
    4f20:	9a 01       	movw	r18, r20
    4f22:	ab 01       	movw	r20, r22
    4f24:	67 e0       	ldi	r22, 0x07	; 7
    4f26:	22 0f       	add	r18, r18
    4f28:	33 1f       	adc	r19, r19
    4f2a:	44 1f       	adc	r20, r20
    4f2c:	55 1f       	adc	r21, r21
    4f2e:	6a 95       	dec	r22
    4f30:	d1 f7       	brne	.-12     	; 0x4f26 <__unpack_f+0x54>
    4f32:	83 e0       	ldi	r24, 0x03	; 3
    4f34:	8c 93       	st	X, r24
    4f36:	0d c0       	rjmp	.+26     	; 0x4f52 <__unpack_f+0x80>
    4f38:	22 0f       	add	r18, r18
    4f3a:	33 1f       	adc	r19, r19
    4f3c:	44 1f       	adc	r20, r20
    4f3e:	55 1f       	adc	r21, r21
    4f40:	12 96       	adiw	r26, 0x02	; 2
    4f42:	8d 91       	ld	r24, X+
    4f44:	9c 91       	ld	r25, X
    4f46:	13 97       	sbiw	r26, 0x03	; 3
    4f48:	01 97       	sbiw	r24, 0x01	; 1
    4f4a:	13 96       	adiw	r26, 0x03	; 3
    4f4c:	9c 93       	st	X, r25
    4f4e:	8e 93       	st	-X, r24
    4f50:	12 97       	sbiw	r26, 0x02	; 2
    4f52:	20 30       	cpi	r18, 0x00	; 0
    4f54:	80 e0       	ldi	r24, 0x00	; 0
    4f56:	38 07       	cpc	r19, r24
    4f58:	80 e0       	ldi	r24, 0x00	; 0
    4f5a:	48 07       	cpc	r20, r24
    4f5c:	80 e4       	ldi	r24, 0x40	; 64
    4f5e:	58 07       	cpc	r21, r24
    4f60:	58 f3       	brcs	.-42     	; 0x4f38 <__unpack_f+0x66>
    4f62:	14 96       	adiw	r26, 0x04	; 4
    4f64:	2d 93       	st	X+, r18
    4f66:	3d 93       	st	X+, r19
    4f68:	4d 93       	st	X+, r20
    4f6a:	5c 93       	st	X, r21
    4f6c:	17 97       	sbiw	r26, 0x07	; 7
    4f6e:	08 95       	ret
    4f70:	2f 3f       	cpi	r18, 0xFF	; 255
    4f72:	31 05       	cpc	r19, r1
    4f74:	79 f4       	brne	.+30     	; 0x4f94 <__unpack_f+0xc2>
    4f76:	41 15       	cp	r20, r1
    4f78:	51 05       	cpc	r21, r1
    4f7a:	61 05       	cpc	r22, r1
    4f7c:	71 05       	cpc	r23, r1
    4f7e:	19 f4       	brne	.+6      	; 0x4f86 <__unpack_f+0xb4>
    4f80:	84 e0       	ldi	r24, 0x04	; 4
    4f82:	8c 93       	st	X, r24
    4f84:	08 95       	ret
    4f86:	64 ff       	sbrs	r22, 4
    4f88:	03 c0       	rjmp	.+6      	; 0x4f90 <__unpack_f+0xbe>
    4f8a:	81 e0       	ldi	r24, 0x01	; 1
    4f8c:	8c 93       	st	X, r24
    4f8e:	12 c0       	rjmp	.+36     	; 0x4fb4 <__unpack_f+0xe2>
    4f90:	1c 92       	st	X, r1
    4f92:	10 c0       	rjmp	.+32     	; 0x4fb4 <__unpack_f+0xe2>
    4f94:	2f 57       	subi	r18, 0x7F	; 127
    4f96:	30 40       	sbci	r19, 0x00	; 0
    4f98:	13 96       	adiw	r26, 0x03	; 3
    4f9a:	3c 93       	st	X, r19
    4f9c:	2e 93       	st	-X, r18
    4f9e:	12 97       	sbiw	r26, 0x02	; 2
    4fa0:	83 e0       	ldi	r24, 0x03	; 3
    4fa2:	8c 93       	st	X, r24
    4fa4:	87 e0       	ldi	r24, 0x07	; 7
    4fa6:	44 0f       	add	r20, r20
    4fa8:	55 1f       	adc	r21, r21
    4faa:	66 1f       	adc	r22, r22
    4fac:	77 1f       	adc	r23, r23
    4fae:	8a 95       	dec	r24
    4fb0:	d1 f7       	brne	.-12     	; 0x4fa6 <__unpack_f+0xd4>
    4fb2:	70 64       	ori	r23, 0x40	; 64
    4fb4:	14 96       	adiw	r26, 0x04	; 4
    4fb6:	4d 93       	st	X+, r20
    4fb8:	5d 93       	st	X+, r21
    4fba:	6d 93       	st	X+, r22
    4fbc:	7c 93       	st	X, r23
    4fbe:	17 97       	sbiw	r26, 0x07	; 7
    4fc0:	08 95       	ret

00004fc2 <__fpcmp_parts_f>:
    4fc2:	1f 93       	push	r17
    4fc4:	dc 01       	movw	r26, r24
    4fc6:	fb 01       	movw	r30, r22
    4fc8:	9c 91       	ld	r25, X
    4fca:	92 30       	cpi	r25, 0x02	; 2
    4fcc:	08 f4       	brcc	.+2      	; 0x4fd0 <__fpcmp_parts_f+0xe>
    4fce:	47 c0       	rjmp	.+142    	; 0x505e <__fpcmp_parts_f+0x9c>
    4fd0:	80 81       	ld	r24, Z
    4fd2:	82 30       	cpi	r24, 0x02	; 2
    4fd4:	08 f4       	brcc	.+2      	; 0x4fd8 <__fpcmp_parts_f+0x16>
    4fd6:	43 c0       	rjmp	.+134    	; 0x505e <__fpcmp_parts_f+0x9c>
    4fd8:	94 30       	cpi	r25, 0x04	; 4
    4fda:	51 f4       	brne	.+20     	; 0x4ff0 <__fpcmp_parts_f+0x2e>
    4fdc:	11 96       	adiw	r26, 0x01	; 1
    4fde:	1c 91       	ld	r17, X
    4fe0:	84 30       	cpi	r24, 0x04	; 4
    4fe2:	99 f5       	brne	.+102    	; 0x504a <__fpcmp_parts_f+0x88>
    4fe4:	81 81       	ldd	r24, Z+1	; 0x01
    4fe6:	68 2f       	mov	r22, r24
    4fe8:	70 e0       	ldi	r23, 0x00	; 0
    4fea:	61 1b       	sub	r22, r17
    4fec:	71 09       	sbc	r23, r1
    4fee:	3f c0       	rjmp	.+126    	; 0x506e <__fpcmp_parts_f+0xac>
    4ff0:	84 30       	cpi	r24, 0x04	; 4
    4ff2:	21 f0       	breq	.+8      	; 0x4ffc <__fpcmp_parts_f+0x3a>
    4ff4:	92 30       	cpi	r25, 0x02	; 2
    4ff6:	31 f4       	brne	.+12     	; 0x5004 <__fpcmp_parts_f+0x42>
    4ff8:	82 30       	cpi	r24, 0x02	; 2
    4ffa:	b9 f1       	breq	.+110    	; 0x506a <__fpcmp_parts_f+0xa8>
    4ffc:	81 81       	ldd	r24, Z+1	; 0x01
    4ffe:	88 23       	and	r24, r24
    5000:	89 f1       	breq	.+98     	; 0x5064 <__fpcmp_parts_f+0xa2>
    5002:	2d c0       	rjmp	.+90     	; 0x505e <__fpcmp_parts_f+0x9c>
    5004:	11 96       	adiw	r26, 0x01	; 1
    5006:	1c 91       	ld	r17, X
    5008:	11 97       	sbiw	r26, 0x01	; 1
    500a:	82 30       	cpi	r24, 0x02	; 2
    500c:	f1 f0       	breq	.+60     	; 0x504a <__fpcmp_parts_f+0x88>
    500e:	81 81       	ldd	r24, Z+1	; 0x01
    5010:	18 17       	cp	r17, r24
    5012:	d9 f4       	brne	.+54     	; 0x504a <__fpcmp_parts_f+0x88>
    5014:	12 96       	adiw	r26, 0x02	; 2
    5016:	2d 91       	ld	r18, X+
    5018:	3c 91       	ld	r19, X
    501a:	13 97       	sbiw	r26, 0x03	; 3
    501c:	82 81       	ldd	r24, Z+2	; 0x02
    501e:	93 81       	ldd	r25, Z+3	; 0x03
    5020:	82 17       	cp	r24, r18
    5022:	93 07       	cpc	r25, r19
    5024:	94 f0       	brlt	.+36     	; 0x504a <__fpcmp_parts_f+0x88>
    5026:	28 17       	cp	r18, r24
    5028:	39 07       	cpc	r19, r25
    502a:	bc f0       	brlt	.+46     	; 0x505a <__fpcmp_parts_f+0x98>
    502c:	14 96       	adiw	r26, 0x04	; 4
    502e:	8d 91       	ld	r24, X+
    5030:	9d 91       	ld	r25, X+
    5032:	0d 90       	ld	r0, X+
    5034:	bc 91       	ld	r27, X
    5036:	a0 2d       	mov	r26, r0
    5038:	24 81       	ldd	r18, Z+4	; 0x04
    503a:	35 81       	ldd	r19, Z+5	; 0x05
    503c:	46 81       	ldd	r20, Z+6	; 0x06
    503e:	57 81       	ldd	r21, Z+7	; 0x07
    5040:	28 17       	cp	r18, r24
    5042:	39 07       	cpc	r19, r25
    5044:	4a 07       	cpc	r20, r26
    5046:	5b 07       	cpc	r21, r27
    5048:	18 f4       	brcc	.+6      	; 0x5050 <__fpcmp_parts_f+0x8e>
    504a:	11 23       	and	r17, r17
    504c:	41 f0       	breq	.+16     	; 0x505e <__fpcmp_parts_f+0x9c>
    504e:	0a c0       	rjmp	.+20     	; 0x5064 <__fpcmp_parts_f+0xa2>
    5050:	82 17       	cp	r24, r18
    5052:	93 07       	cpc	r25, r19
    5054:	a4 07       	cpc	r26, r20
    5056:	b5 07       	cpc	r27, r21
    5058:	40 f4       	brcc	.+16     	; 0x506a <__fpcmp_parts_f+0xa8>
    505a:	11 23       	and	r17, r17
    505c:	19 f0       	breq	.+6      	; 0x5064 <__fpcmp_parts_f+0xa2>
    505e:	61 e0       	ldi	r22, 0x01	; 1
    5060:	70 e0       	ldi	r23, 0x00	; 0
    5062:	05 c0       	rjmp	.+10     	; 0x506e <__fpcmp_parts_f+0xac>
    5064:	6f ef       	ldi	r22, 0xFF	; 255
    5066:	7f ef       	ldi	r23, 0xFF	; 255
    5068:	02 c0       	rjmp	.+4      	; 0x506e <__fpcmp_parts_f+0xac>
    506a:	60 e0       	ldi	r22, 0x00	; 0
    506c:	70 e0       	ldi	r23, 0x00	; 0
    506e:	cb 01       	movw	r24, r22
    5070:	1f 91       	pop	r17
    5072:	08 95       	ret

00005074 <__udivmodhi4>:
    5074:	aa 1b       	sub	r26, r26
    5076:	bb 1b       	sub	r27, r27
    5078:	51 e1       	ldi	r21, 0x11	; 17
    507a:	07 c0       	rjmp	.+14     	; 0x508a <__udivmodhi4_ep>

0000507c <__udivmodhi4_loop>:
    507c:	aa 1f       	adc	r26, r26
    507e:	bb 1f       	adc	r27, r27
    5080:	a6 17       	cp	r26, r22
    5082:	b7 07       	cpc	r27, r23
    5084:	10 f0       	brcs	.+4      	; 0x508a <__udivmodhi4_ep>
    5086:	a6 1b       	sub	r26, r22
    5088:	b7 0b       	sbc	r27, r23

0000508a <__udivmodhi4_ep>:
    508a:	88 1f       	adc	r24, r24
    508c:	99 1f       	adc	r25, r25
    508e:	5a 95       	dec	r21
    5090:	a9 f7       	brne	.-22     	; 0x507c <__udivmodhi4_loop>
    5092:	80 95       	com	r24
    5094:	90 95       	com	r25
    5096:	bc 01       	movw	r22, r24
    5098:	cd 01       	movw	r24, r26
    509a:	08 95       	ret

0000509c <__prologue_saves__>:
    509c:	2f 92       	push	r2
    509e:	3f 92       	push	r3
    50a0:	4f 92       	push	r4
    50a2:	5f 92       	push	r5
    50a4:	6f 92       	push	r6
    50a6:	7f 92       	push	r7
    50a8:	8f 92       	push	r8
    50aa:	9f 92       	push	r9
    50ac:	af 92       	push	r10
    50ae:	bf 92       	push	r11
    50b0:	cf 92       	push	r12
    50b2:	df 92       	push	r13
    50b4:	ef 92       	push	r14
    50b6:	ff 92       	push	r15
    50b8:	0f 93       	push	r16
    50ba:	1f 93       	push	r17
    50bc:	cf 93       	push	r28
    50be:	df 93       	push	r29
    50c0:	cd b7       	in	r28, 0x3d	; 61
    50c2:	de b7       	in	r29, 0x3e	; 62
    50c4:	ca 1b       	sub	r28, r26
    50c6:	db 0b       	sbc	r29, r27
    50c8:	0f b6       	in	r0, 0x3f	; 63
    50ca:	f8 94       	cli
    50cc:	de bf       	out	0x3e, r29	; 62
    50ce:	0f be       	out	0x3f, r0	; 63
    50d0:	cd bf       	out	0x3d, r28	; 61
    50d2:	19 94       	eijmp

000050d4 <__epilogue_restores__>:
    50d4:	2a 88       	ldd	r2, Y+18	; 0x12
    50d6:	39 88       	ldd	r3, Y+17	; 0x11
    50d8:	48 88       	ldd	r4, Y+16	; 0x10
    50da:	5f 84       	ldd	r5, Y+15	; 0x0f
    50dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    50de:	7d 84       	ldd	r7, Y+13	; 0x0d
    50e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    50e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    50e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    50e6:	b9 84       	ldd	r11, Y+9	; 0x09
    50e8:	c8 84       	ldd	r12, Y+8	; 0x08
    50ea:	df 80       	ldd	r13, Y+7	; 0x07
    50ec:	ee 80       	ldd	r14, Y+6	; 0x06
    50ee:	fd 80       	ldd	r15, Y+5	; 0x05
    50f0:	0c 81       	ldd	r16, Y+4	; 0x04
    50f2:	1b 81       	ldd	r17, Y+3	; 0x03
    50f4:	aa 81       	ldd	r26, Y+2	; 0x02
    50f6:	b9 81       	ldd	r27, Y+1	; 0x01
    50f8:	ce 0f       	add	r28, r30
    50fa:	d1 1d       	adc	r29, r1
    50fc:	0f b6       	in	r0, 0x3f	; 63
    50fe:	f8 94       	cli
    5100:	de bf       	out	0x3e, r29	; 62
    5102:	0f be       	out	0x3f, r0	; 63
    5104:	cd bf       	out	0x3d, r28	; 61
    5106:	ed 01       	movw	r28, r26
    5108:	08 95       	ret

0000510a <_exit>:
    510a:	f8 94       	cli

0000510c <__stop_program>:
    510c:	ff cf       	rjmp	.-2      	; 0x510c <__stop_program>
