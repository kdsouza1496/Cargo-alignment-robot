
Ultrasonic_Interfacing_FBV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012a  00800200  00002aac  00002b40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002aac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080032a  0080032a  00002c6a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001c4  00000000  00000000  00002c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009f0  00000000  00000000  00002e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000192  00000000  00000000  0000383e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d3a  00000000  00000000  000039d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  0000470c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c7  00000000  00000000  0000483c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec ea       	ldi	r30, 0xAC	; 172
      fc:	fa e2       	ldi	r31, 0x2A	; 42
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 32       	cpi	r26, 0x2A	; 42
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	aa e2       	ldi	r26, 0x2A	; 42
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ae 33       	cpi	r26, 0x3E	; 62
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <main>
     122:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
int i;


//Function to Reset LCD
void lcd_set_4bit()
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	df 93       	push	r29
     130:	cf 93       	push	r28
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c0 57       	subi	r28, 0x70	; 112
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	fe 01       	movw	r30, r28
     146:	e3 59       	subi	r30, 0x93	; 147
     148:	ff 4f       	sbci	r31, 0xFF	; 255
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	a0 e8       	ldi	r26, 0x80	; 128
     150:	bf e3       	ldi	r27, 0x3F	; 63
     152:	80 83       	st	Z, r24
     154:	91 83       	std	Z+1, r25	; 0x01
     156:	a2 83       	std	Z+2, r26	; 0x02
     158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     15a:	8e 01       	movw	r16, r28
     15c:	07 59       	subi	r16, 0x97	; 151
     15e:	1f 4f       	sbci	r17, 0xFF	; 255
     160:	fe 01       	movw	r30, r28
     162:	e3 59       	subi	r30, 0x93	; 147
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	60 81       	ld	r22, Z
     168:	71 81       	ldd	r23, Z+1	; 0x01
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	26 e6       	ldi	r18, 0x66	; 102
     170:	36 e6       	ldi	r19, 0x66	; 102
     172:	46 e6       	ldi	r20, 0x66	; 102
     174:	55 e4       	ldi	r21, 0x45	; 69
     176:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     17a:	dc 01       	movw	r26, r24
     17c:	cb 01       	movw	r24, r22
     17e:	f8 01       	movw	r30, r16
     180:	80 83       	st	Z, r24
     182:	91 83       	std	Z+1, r25	; 0x01
     184:	a2 83       	std	Z+2, r26	; 0x02
     186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     188:	fe 01       	movw	r30, r28
     18a:	e7 59       	subi	r30, 0x97	; 151
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	60 81       	ld	r22, Z
     190:	71 81       	ldd	r23, Z+1	; 0x01
     192:	82 81       	ldd	r24, Z+2	; 0x02
     194:	93 81       	ldd	r25, Z+3	; 0x03
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e8       	ldi	r20, 0x80	; 128
     19c:	5f e3       	ldi	r21, 0x3F	; 63
     19e:	0e 94 9b 11 	call	0x2336	; 0x2336 <__ltsf2>
     1a2:	88 23       	and	r24, r24
     1a4:	44 f4       	brge	.+16     	; 0x1b6 <lcd_set_4bit+0x8c>
		__ticks = 1;
     1a6:	fe 01       	movw	r30, r28
     1a8:	e9 59       	subi	r30, 0x99	; 153
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	91 83       	std	Z+1, r25	; 0x01
     1b2:	80 83       	st	Z, r24
     1b4:	64 c0       	rjmp	.+200    	; 0x27e <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     1b6:	fe 01       	movw	r30, r28
     1b8:	e7 59       	subi	r30, 0x97	; 151
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	60 81       	ld	r22, Z
     1be:	71 81       	ldd	r23, Z+1	; 0x01
     1c0:	82 81       	ldd	r24, Z+2	; 0x02
     1c2:	93 81       	ldd	r25, Z+3	; 0x03
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	3f ef       	ldi	r19, 0xFF	; 255
     1c8:	4f e7       	ldi	r20, 0x7F	; 127
     1ca:	57 e4       	ldi	r21, 0x47	; 71
     1cc:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gtsf2>
     1d0:	18 16       	cp	r1, r24
     1d2:	0c f0       	brlt	.+2      	; 0x1d6 <lcd_set_4bit+0xac>
     1d4:	43 c0       	rjmp	.+134    	; 0x25c <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1d6:	fe 01       	movw	r30, r28
     1d8:	e3 59       	subi	r30, 0x93	; 147
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
     1dc:	60 81       	ld	r22, Z
     1de:	71 81       	ldd	r23, Z+1	; 0x01
     1e0:	82 81       	ldd	r24, Z+2	; 0x02
     1e2:	93 81       	ldd	r25, Z+3	; 0x03
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 e2       	ldi	r20, 0x20	; 32
     1ea:	51 e4       	ldi	r21, 0x41	; 65
     1ec:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     1f0:	dc 01       	movw	r26, r24
     1f2:	cb 01       	movw	r24, r22
     1f4:	8e 01       	movw	r16, r28
     1f6:	09 59       	subi	r16, 0x99	; 153
     1f8:	1f 4f       	sbci	r17, 0xFF	; 255
     1fa:	bc 01       	movw	r22, r24
     1fc:	cd 01       	movw	r24, r26
     1fe:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	f8 01       	movw	r30, r16
     208:	91 83       	std	Z+1, r25	; 0x01
     20a:	80 83       	st	Z, r24
     20c:	1f c0       	rjmp	.+62     	; 0x24c <lcd_set_4bit+0x122>
     20e:	fe 01       	movw	r30, r28
     210:	eb 59       	subi	r30, 0x9B	; 155
     212:	ff 4f       	sbci	r31, 0xFF	; 255
     214:	80 e7       	ldi	r24, 0x70	; 112
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	91 83       	std	Z+1, r25	; 0x01
     21a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     21c:	fe 01       	movw	r30, r28
     21e:	eb 59       	subi	r30, 0x9B	; 155
     220:	ff 4f       	sbci	r31, 0xFF	; 255
     222:	80 81       	ld	r24, Z
     224:	91 81       	ldd	r25, Z+1	; 0x01
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0xfc>
     22a:	fe 01       	movw	r30, r28
     22c:	eb 59       	subi	r30, 0x9B	; 155
     22e:	ff 4f       	sbci	r31, 0xFF	; 255
     230:	91 83       	std	Z+1, r25	; 0x01
     232:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     234:	de 01       	movw	r26, r28
     236:	a9 59       	subi	r26, 0x99	; 153
     238:	bf 4f       	sbci	r27, 0xFF	; 255
     23a:	fe 01       	movw	r30, r28
     23c:	e9 59       	subi	r30, 0x99	; 153
     23e:	ff 4f       	sbci	r31, 0xFF	; 255
     240:	80 81       	ld	r24, Z
     242:	91 81       	ldd	r25, Z+1	; 0x01
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	11 96       	adiw	r26, 0x01	; 1
     248:	9c 93       	st	X, r25
     24a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24c:	fe 01       	movw	r30, r28
     24e:	e9 59       	subi	r30, 0x99	; 153
     250:	ff 4f       	sbci	r31, 0xFF	; 255
     252:	80 81       	ld	r24, Z
     254:	91 81       	ldd	r25, Z+1	; 0x01
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	d1 f6       	brne	.-76     	; 0x20e <lcd_set_4bit+0xe4>
     25a:	27 c0       	rjmp	.+78     	; 0x2aa <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     25c:	8e 01       	movw	r16, r28
     25e:	09 59       	subi	r16, 0x99	; 153
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	fe 01       	movw	r30, r28
     264:	e7 59       	subi	r30, 0x97	; 151
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	60 81       	ld	r22, Z
     26a:	71 81       	ldd	r23, Z+1	; 0x01
     26c:	82 81       	ldd	r24, Z+2	; 0x02
     26e:	93 81       	ldd	r25, Z+3	; 0x03
     270:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	f8 01       	movw	r30, r16
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
     27e:	de 01       	movw	r26, r28
     280:	ad 59       	subi	r26, 0x9D	; 157
     282:	bf 4f       	sbci	r27, 0xFF	; 255
     284:	fe 01       	movw	r30, r28
     286:	e9 59       	subi	r30, 0x99	; 153
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	80 81       	ld	r24, Z
     28c:	91 81       	ldd	r25, Z+1	; 0x01
     28e:	8d 93       	st	X+, r24
     290:	9c 93       	st	X, r25
     292:	fe 01       	movw	r30, r28
     294:	ed 59       	subi	r30, 0x9D	; 157
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	80 81       	ld	r24, Z
     29a:	91 81       	ldd	r25, Z+1	; 0x01
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x172>
     2a0:	fe 01       	movw	r30, r28
     2a2:	ed 59       	subi	r30, 0x9D	; 157
     2a4:	ff 4f       	sbci	r31, 0xFF	; 255
     2a6:	91 83       	std	Z+1, r25	; 0x01
     2a8:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2aa:	a8 e2       	ldi	r26, 0x28	; 40
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	e8 e2       	ldi	r30, 0x28	; 40
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8e 7f       	andi	r24, 0xFE	; 254
     2b6:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2b8:	a8 e2       	ldi	r26, 0x28	; 40
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e8 e2       	ldi	r30, 0x28	; 40
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8d 7f       	andi	r24, 0xFD	; 253
     2c4:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     2c6:	e8 e2       	ldi	r30, 0x28	; 40
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 e3       	ldi	r24, 0x30	; 48
     2cc:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     2ce:	a8 e2       	ldi	r26, 0x28	; 40
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e8 e2       	ldi	r30, 0x28	; 40
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	84 60       	ori	r24, 0x04	; 4
     2da:	8c 93       	st	X, r24
     2dc:	fe 01       	movw	r30, r28
     2de:	e1 5a       	subi	r30, 0xA1	; 161
     2e0:	ff 4f       	sbci	r31, 0xFF	; 255
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	a0 ea       	ldi	r26, 0xA0	; 160
     2e8:	b0 e4       	ldi	r27, 0x40	; 64
     2ea:	80 83       	st	Z, r24
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	a2 83       	std	Z+2, r26	; 0x02
     2f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2f2:	8e 01       	movw	r16, r28
     2f4:	05 5a       	subi	r16, 0xA5	; 165
     2f6:	1f 4f       	sbci	r17, 0xFF	; 255
     2f8:	fe 01       	movw	r30, r28
     2fa:	e1 5a       	subi	r30, 0xA1	; 161
     2fc:	ff 4f       	sbci	r31, 0xFF	; 255
     2fe:	60 81       	ld	r22, Z
     300:	71 81       	ldd	r23, Z+1	; 0x01
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	26 e6       	ldi	r18, 0x66	; 102
     308:	36 e6       	ldi	r19, 0x66	; 102
     30a:	46 e6       	ldi	r20, 0x66	; 102
     30c:	55 e4       	ldi	r21, 0x45	; 69
     30e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	f8 01       	movw	r30, r16
     318:	80 83       	st	Z, r24
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	a2 83       	std	Z+2, r26	; 0x02
     31e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     320:	fe 01       	movw	r30, r28
     322:	e5 5a       	subi	r30, 0xA5	; 165
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	60 81       	ld	r22, Z
     328:	71 81       	ldd	r23, Z+1	; 0x01
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e8       	ldi	r20, 0x80	; 128
     334:	5f e3       	ldi	r21, 0x3F	; 63
     336:	0e 94 9b 11 	call	0x2336	; 0x2336 <__ltsf2>
     33a:	88 23       	and	r24, r24
     33c:	44 f4       	brge	.+16     	; 0x34e <lcd_set_4bit+0x224>
		__ticks = 1;
     33e:	fe 01       	movw	r30, r28
     340:	e7 5a       	subi	r30, 0xA7	; 167
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	80 83       	st	Z, r24
     34c:	64 c0       	rjmp	.+200    	; 0x416 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     34e:	fe 01       	movw	r30, r28
     350:	e5 5a       	subi	r30, 0xA5	; 165
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	60 81       	ld	r22, Z
     356:	71 81       	ldd	r23, Z+1	; 0x01
     358:	82 81       	ldd	r24, Z+2	; 0x02
     35a:	93 81       	ldd	r25, Z+3	; 0x03
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	3f ef       	ldi	r19, 0xFF	; 255
     360:	4f e7       	ldi	r20, 0x7F	; 127
     362:	57 e4       	ldi	r21, 0x47	; 71
     364:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gtsf2>
     368:	18 16       	cp	r1, r24
     36a:	0c f0       	brlt	.+2      	; 0x36e <lcd_set_4bit+0x244>
     36c:	43 c0       	rjmp	.+134    	; 0x3f4 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     36e:	fe 01       	movw	r30, r28
     370:	e1 5a       	subi	r30, 0xA1	; 161
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	60 81       	ld	r22, Z
     376:	71 81       	ldd	r23, Z+1	; 0x01
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	93 81       	ldd	r25, Z+3	; 0x03
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e2       	ldi	r20, 0x20	; 32
     382:	51 e4       	ldi	r21, 0x41	; 65
     384:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	8e 01       	movw	r16, r28
     38e:	07 5a       	subi	r16, 0xA7	; 167
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	f8 01       	movw	r30, r16
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
     3a4:	1f c0       	rjmp	.+62     	; 0x3e4 <lcd_set_4bit+0x2ba>
     3a6:	fe 01       	movw	r30, r28
     3a8:	e9 5a       	subi	r30, 0xA9	; 169
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	80 e7       	ldi	r24, 0x70	; 112
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	91 83       	std	Z+1, r25	; 0x01
     3b2:	80 83       	st	Z, r24
     3b4:	fe 01       	movw	r30, r28
     3b6:	e9 5a       	subi	r30, 0xA9	; 169
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_set_4bit+0x294>
     3c2:	fe 01       	movw	r30, r28
     3c4:	e9 5a       	subi	r30, 0xA9	; 169
     3c6:	ff 4f       	sbci	r31, 0xFF	; 255
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3cc:	de 01       	movw	r26, r28
     3ce:	a7 5a       	subi	r26, 0xA7	; 167
     3d0:	bf 4f       	sbci	r27, 0xFF	; 255
     3d2:	fe 01       	movw	r30, r28
     3d4:	e7 5a       	subi	r30, 0xA7	; 167
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	80 81       	ld	r24, Z
     3da:	91 81       	ldd	r25, Z+1	; 0x01
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	9c 93       	st	X, r25
     3e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e4:	fe 01       	movw	r30, r28
     3e6:	e7 5a       	subi	r30, 0xA7	; 167
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	d1 f6       	brne	.-76     	; 0x3a6 <lcd_set_4bit+0x27c>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f4:	8e 01       	movw	r16, r28
     3f6:	07 5a       	subi	r16, 0xA7	; 167
     3f8:	1f 4f       	sbci	r17, 0xFF	; 255
     3fa:	fe 01       	movw	r30, r28
     3fc:	e5 5a       	subi	r30, 0xA5	; 165
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	60 81       	ld	r22, Z
     402:	71 81       	ldd	r23, Z+1	; 0x01
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	93 81       	ldd	r25, Z+3	; 0x03
     408:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	f8 01       	movw	r30, r16
     412:	91 83       	std	Z+1, r25	; 0x01
     414:	80 83       	st	Z, r24
     416:	de 01       	movw	r26, r28
     418:	ab 5a       	subi	r26, 0xAB	; 171
     41a:	bf 4f       	sbci	r27, 0xFF	; 255
     41c:	fe 01       	movw	r30, r28
     41e:	e7 5a       	subi	r30, 0xA7	; 167
     420:	ff 4f       	sbci	r31, 0xFF	; 255
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	8d 93       	st	X+, r24
     428:	9c 93       	st	X, r25
     42a:	fe 01       	movw	r30, r28
     42c:	eb 5a       	subi	r30, 0xAB	; 171
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	80 81       	ld	r24, Z
     432:	91 81       	ldd	r25, Z+1	; 0x01
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <lcd_set_4bit+0x30a>
     438:	fe 01       	movw	r30, r28
     43a:	eb 5a       	subi	r30, 0xAB	; 171
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	91 83       	std	Z+1, r25	; 0x01
     440:	80 83       	st	Z, r24
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     442:	a8 e2       	ldi	r26, 0x28	; 40
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e8 e2       	ldi	r30, 0x28	; 40
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8b 7f       	andi	r24, 0xFB	; 251
     44e:	8c 93       	st	X, r24
     450:	fe 01       	movw	r30, r28
     452:	ef 5a       	subi	r30, 0xAF	; 175
     454:	ff 4f       	sbci	r31, 0xFF	; 255
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	a0 e8       	ldi	r26, 0x80	; 128
     45c:	bf e3       	ldi	r27, 0x3F	; 63
     45e:	80 83       	st	Z, r24
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	a2 83       	std	Z+2, r26	; 0x02
     464:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     466:	8e 01       	movw	r16, r28
     468:	03 5b       	subi	r16, 0xB3	; 179
     46a:	1f 4f       	sbci	r17, 0xFF	; 255
     46c:	fe 01       	movw	r30, r28
     46e:	ef 5a       	subi	r30, 0xAF	; 175
     470:	ff 4f       	sbci	r31, 0xFF	; 255
     472:	60 81       	ld	r22, Z
     474:	71 81       	ldd	r23, Z+1	; 0x01
     476:	82 81       	ldd	r24, Z+2	; 0x02
     478:	93 81       	ldd	r25, Z+3	; 0x03
     47a:	26 e6       	ldi	r18, 0x66	; 102
     47c:	36 e6       	ldi	r19, 0x66	; 102
     47e:	46 e6       	ldi	r20, 0x66	; 102
     480:	55 e4       	ldi	r21, 0x45	; 69
     482:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     486:	dc 01       	movw	r26, r24
     488:	cb 01       	movw	r24, r22
     48a:	f8 01       	movw	r30, r16
     48c:	80 83       	st	Z, r24
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	a2 83       	std	Z+2, r26	; 0x02
     492:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     494:	fe 01       	movw	r30, r28
     496:	e3 5b       	subi	r30, 0xB3	; 179
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	60 81       	ld	r22, Z
     49c:	71 81       	ldd	r23, Z+1	; 0x01
     49e:	82 81       	ldd	r24, Z+2	; 0x02
     4a0:	93 81       	ldd	r25, Z+3	; 0x03
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e8       	ldi	r20, 0x80	; 128
     4a8:	5f e3       	ldi	r21, 0x3F	; 63
     4aa:	0e 94 9b 11 	call	0x2336	; 0x2336 <__ltsf2>
     4ae:	88 23       	and	r24, r24
     4b0:	44 f4       	brge	.+16     	; 0x4c2 <lcd_set_4bit+0x398>
		__ticks = 1;
     4b2:	fe 01       	movw	r30, r28
     4b4:	e5 5b       	subi	r30, 0xB5	; 181
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	64 c0       	rjmp	.+200    	; 0x58a <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     4c2:	fe 01       	movw	r30, r28
     4c4:	e3 5b       	subi	r30, 0xB3	; 179
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	60 81       	ld	r22, Z
     4ca:	71 81       	ldd	r23, Z+1	; 0x01
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	93 81       	ldd	r25, Z+3	; 0x03
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	3f ef       	ldi	r19, 0xFF	; 255
     4d4:	4f e7       	ldi	r20, 0x7F	; 127
     4d6:	57 e4       	ldi	r21, 0x47	; 71
     4d8:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gtsf2>
     4dc:	18 16       	cp	r1, r24
     4de:	0c f0       	brlt	.+2      	; 0x4e2 <lcd_set_4bit+0x3b8>
     4e0:	43 c0       	rjmp	.+134    	; 0x568 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4e2:	fe 01       	movw	r30, r28
     4e4:	ef 5a       	subi	r30, 0xAF	; 175
     4e6:	ff 4f       	sbci	r31, 0xFF	; 255
     4e8:	60 81       	ld	r22, Z
     4ea:	71 81       	ldd	r23, Z+1	; 0x01
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 e2       	ldi	r20, 0x20	; 32
     4f6:	51 e4       	ldi	r21, 0x41	; 65
     4f8:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	8e 01       	movw	r16, r28
     502:	05 5b       	subi	r16, 0xB5	; 181
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	f8 01       	movw	r30, r16
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	80 83       	st	Z, r24
     518:	1f c0       	rjmp	.+62     	; 0x558 <lcd_set_4bit+0x42e>
     51a:	fe 01       	movw	r30, r28
     51c:	e7 5b       	subi	r30, 0xB7	; 183
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	80 e7       	ldi	r24, 0x70	; 112
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	91 83       	std	Z+1, r25	; 0x01
     526:	80 83       	st	Z, r24
     528:	fe 01       	movw	r30, r28
     52a:	e7 5b       	subi	r30, 0xB7	; 183
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <lcd_set_4bit+0x408>
     536:	fe 01       	movw	r30, r28
     538:	e7 5b       	subi	r30, 0xB7	; 183
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     540:	de 01       	movw	r26, r28
     542:	a5 5b       	subi	r26, 0xB5	; 181
     544:	bf 4f       	sbci	r27, 0xFF	; 255
     546:	fe 01       	movw	r30, r28
     548:	e5 5b       	subi	r30, 0xB5	; 181
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	80 81       	ld	r24, Z
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	11 96       	adiw	r26, 0x01	; 1
     554:	9c 93       	st	X, r25
     556:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     558:	fe 01       	movw	r30, r28
     55a:	e5 5b       	subi	r30, 0xB5	; 181
     55c:	ff 4f       	sbci	r31, 0xFF	; 255
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	d1 f6       	brne	.-76     	; 0x51a <lcd_set_4bit+0x3f0>
     566:	27 c0       	rjmp	.+78     	; 0x5b6 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     568:	8e 01       	movw	r16, r28
     56a:	05 5b       	subi	r16, 0xB5	; 181
     56c:	1f 4f       	sbci	r17, 0xFF	; 255
     56e:	fe 01       	movw	r30, r28
     570:	e3 5b       	subi	r30, 0xB3	; 179
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	60 81       	ld	r22, Z
     576:	71 81       	ldd	r23, Z+1	; 0x01
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	93 81       	ldd	r25, Z+3	; 0x03
     57c:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	f8 01       	movw	r30, r16
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
     58a:	de 01       	movw	r26, r28
     58c:	a9 5b       	subi	r26, 0xB9	; 185
     58e:	bf 4f       	sbci	r27, 0xFF	; 255
     590:	fe 01       	movw	r30, r28
     592:	e5 5b       	subi	r30, 0xB5	; 181
     594:	ff 4f       	sbci	r31, 0xFF	; 255
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	8d 93       	st	X+, r24
     59c:	9c 93       	st	X, r25
     59e:	fe 01       	movw	r30, r28
     5a0:	e9 5b       	subi	r30, 0xB9	; 185
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_set_4bit+0x47e>
     5ac:	fe 01       	movw	r30, r28
     5ae:	e9 5b       	subi	r30, 0xB9	; 185
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	91 83       	std	Z+1, r25	; 0x01
     5b4:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     5b6:	a8 e2       	ldi	r26, 0x28	; 40
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
     5ba:	e8 e2       	ldi	r30, 0x28	; 40
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	8e 7f       	andi	r24, 0xFE	; 254
     5c2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     5c4:	a8 e2       	ldi	r26, 0x28	; 40
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	e8 e2       	ldi	r30, 0x28	; 40
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	8d 7f       	andi	r24, 0xFD	; 253
     5d0:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     5d2:	e8 e2       	ldi	r30, 0x28	; 40
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 e3       	ldi	r24, 0x30	; 48
     5d8:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     5da:	a8 e2       	ldi	r26, 0x28	; 40
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e8 e2       	ldi	r30, 0x28	; 40
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	84 60       	ori	r24, 0x04	; 4
     5e6:	8c 93       	st	X, r24
     5e8:	fe 01       	movw	r30, r28
     5ea:	ed 5b       	subi	r30, 0xBD	; 189
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	a0 ea       	ldi	r26, 0xA0	; 160
     5f4:	b0 e4       	ldi	r27, 0x40	; 64
     5f6:	80 83       	st	Z, r24
     5f8:	91 83       	std	Z+1, r25	; 0x01
     5fa:	a2 83       	std	Z+2, r26	; 0x02
     5fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5fe:	8e 01       	movw	r16, r28
     600:	01 5c       	subi	r16, 0xC1	; 193
     602:	1f 4f       	sbci	r17, 0xFF	; 255
     604:	fe 01       	movw	r30, r28
     606:	ed 5b       	subi	r30, 0xBD	; 189
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	60 81       	ld	r22, Z
     60c:	71 81       	ldd	r23, Z+1	; 0x01
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	93 81       	ldd	r25, Z+3	; 0x03
     612:	26 e6       	ldi	r18, 0x66	; 102
     614:	36 e6       	ldi	r19, 0x66	; 102
     616:	46 e6       	ldi	r20, 0x66	; 102
     618:	55 e4       	ldi	r21, 0x45	; 69
     61a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	f8 01       	movw	r30, r16
     624:	80 83       	st	Z, r24
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62c:	fe 01       	movw	r30, r28
     62e:	ff 96       	adiw	r30, 0x3f	; 63
     630:	60 81       	ld	r22, Z
     632:	71 81       	ldd	r23, Z+1	; 0x01
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	93 81       	ldd	r25, Z+3	; 0x03
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	0e 94 9b 11 	call	0x2336	; 0x2336 <__ltsf2>
     644:	88 23       	and	r24, r24
     646:	2c f4       	brge	.+10     	; 0x652 <lcd_set_4bit+0x528>
		__ticks = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	9e af       	std	Y+62, r25	; 0x3e
     64e:	8d af       	std	Y+61, r24	; 0x3d
     650:	46 c0       	rjmp	.+140    	; 0x6de <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     652:	fe 01       	movw	r30, r28
     654:	ff 96       	adiw	r30, 0x3f	; 63
     656:	60 81       	ld	r22, Z
     658:	71 81       	ldd	r23, Z+1	; 0x01
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	93 81       	ldd	r25, Z+3	; 0x03
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	3f ef       	ldi	r19, 0xFF	; 255
     662:	4f e7       	ldi	r20, 0x7F	; 127
     664:	57 e4       	ldi	r21, 0x47	; 71
     666:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gtsf2>
     66a:	18 16       	cp	r1, r24
     66c:	64 f5       	brge	.+88     	; 0x6c6 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66e:	fe 01       	movw	r30, r28
     670:	ed 5b       	subi	r30, 0xBD	; 189
     672:	ff 4f       	sbci	r31, 0xFF	; 255
     674:	60 81       	ld	r22, Z
     676:	71 81       	ldd	r23, Z+1	; 0x01
     678:	82 81       	ldd	r24, Z+2	; 0x02
     67a:	93 81       	ldd	r25, Z+3	; 0x03
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e2       	ldi	r20, 0x20	; 32
     682:	51 e4       	ldi	r21, 0x41	; 65
     684:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	9e af       	std	Y+62, r25	; 0x3e
     69a:	8d af       	std	Y+61, r24	; 0x3d
     69c:	0f c0       	rjmp	.+30     	; 0x6bc <lcd_set_4bit+0x592>
     69e:	80 e7       	ldi	r24, 0x70	; 112
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	9c af       	std	Y+60, r25	; 0x3c
     6a4:	8b af       	std	Y+59, r24	; 0x3b
     6a6:	8b ad       	ldd	r24, Y+59	; 0x3b
     6a8:	9c ad       	ldd	r25, Y+60	; 0x3c
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <lcd_set_4bit+0x580>
     6ae:	9c af       	std	Y+60, r25	; 0x3c
     6b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b2:	8d ad       	ldd	r24, Y+61	; 0x3d
     6b4:	9e ad       	ldd	r25, Y+62	; 0x3e
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	9e af       	std	Y+62, r25	; 0x3e
     6ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6bc:	8d ad       	ldd	r24, Y+61	; 0x3d
     6be:	9e ad       	ldd	r25, Y+62	; 0x3e
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	69 f7       	brne	.-38     	; 0x69e <lcd_set_4bit+0x574>
     6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6c6:	fe 01       	movw	r30, r28
     6c8:	ff 96       	adiw	r30, 0x3f	; 63
     6ca:	60 81       	ld	r22, Z
     6cc:	71 81       	ldd	r23, Z+1	; 0x01
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
     6d0:	93 81       	ldd	r25, Z+3	; 0x03
     6d2:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	9e af       	std	Y+62, r25	; 0x3e
     6dc:	8d af       	std	Y+61, r24	; 0x3d
     6de:	8d ad       	ldd	r24, Y+61	; 0x3d
     6e0:	9e ad       	ldd	r25, Y+62	; 0x3e
     6e2:	9a af       	std	Y+58, r25	; 0x3a
     6e4:	89 af       	std	Y+57, r24	; 0x39
     6e6:	89 ad       	ldd	r24, Y+57	; 0x39
     6e8:	9a ad       	ldd	r25, Y+58	; 0x3a
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <lcd_set_4bit+0x5c0>
     6ee:	9a af       	std	Y+58, r25	; 0x3a
     6f0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     6f2:	a8 e2       	ldi	r26, 0x28	; 40
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	e8 e2       	ldi	r30, 0x28	; 40
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	8b 7f       	andi	r24, 0xFB	; 251
     6fe:	8c 93       	st	X, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e8       	ldi	r26, 0x80	; 128
     706:	bf e3       	ldi	r27, 0x3F	; 63
     708:	8d ab       	std	Y+53, r24	; 0x35
     70a:	9e ab       	std	Y+54, r25	; 0x36
     70c:	af ab       	std	Y+55, r26	; 0x37
     70e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     710:	6d a9       	ldd	r22, Y+53	; 0x35
     712:	7e a9       	ldd	r23, Y+54	; 0x36
     714:	8f a9       	ldd	r24, Y+55	; 0x37
     716:	98 ad       	ldd	r25, Y+56	; 0x38
     718:	26 e6       	ldi	r18, 0x66	; 102
     71a:	36 e6       	ldi	r19, 0x66	; 102
     71c:	46 e6       	ldi	r20, 0x66	; 102
     71e:	55 e4       	ldi	r21, 0x45	; 69
     720:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	89 ab       	std	Y+49, r24	; 0x31
     72a:	9a ab       	std	Y+50, r25	; 0x32
     72c:	ab ab       	std	Y+51, r26	; 0x33
     72e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     730:	69 a9       	ldd	r22, Y+49	; 0x31
     732:	7a a9       	ldd	r23, Y+50	; 0x32
     734:	8b a9       	ldd	r24, Y+51	; 0x33
     736:	9c a9       	ldd	r25, Y+52	; 0x34
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e8       	ldi	r20, 0x80	; 128
     73e:	5f e3       	ldi	r21, 0x3F	; 63
     740:	0e 94 9b 11 	call	0x2336	; 0x2336 <__ltsf2>
     744:	88 23       	and	r24, r24
     746:	2c f4       	brge	.+10     	; 0x752 <lcd_set_4bit+0x628>
		__ticks = 1;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	98 ab       	std	Y+48, r25	; 0x30
     74e:	8f a7       	std	Y+47, r24	; 0x2f
     750:	3f c0       	rjmp	.+126    	; 0x7d0 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     752:	69 a9       	ldd	r22, Y+49	; 0x31
     754:	7a a9       	ldd	r23, Y+50	; 0x32
     756:	8b a9       	ldd	r24, Y+51	; 0x33
     758:	9c a9       	ldd	r25, Y+52	; 0x34
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	3f ef       	ldi	r19, 0xFF	; 255
     75e:	4f e7       	ldi	r20, 0x7F	; 127
     760:	57 e4       	ldi	r21, 0x47	; 71
     762:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gtsf2>
     766:	18 16       	cp	r1, r24
     768:	4c f5       	brge	.+82     	; 0x7bc <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     76a:	6d a9       	ldd	r22, Y+53	; 0x35
     76c:	7e a9       	ldd	r23, Y+54	; 0x36
     76e:	8f a9       	ldd	r24, Y+55	; 0x37
     770:	98 ad       	ldd	r25, Y+56	; 0x38
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e2       	ldi	r20, 0x20	; 32
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	bc 01       	movw	r22, r24
     784:	cd 01       	movw	r24, r26
     786:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	98 ab       	std	Y+48, r25	; 0x30
     790:	8f a7       	std	Y+47, r24	; 0x2f
     792:	0f c0       	rjmp	.+30     	; 0x7b2 <lcd_set_4bit+0x688>
     794:	80 e7       	ldi	r24, 0x70	; 112
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9e a7       	std	Y+46, r25	; 0x2e
     79a:	8d a7       	std	Y+45, r24	; 0x2d
     79c:	8d a5       	ldd	r24, Y+45	; 0x2d
     79e:	9e a5       	ldd	r25, Y+46	; 0x2e
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <lcd_set_4bit+0x676>
     7a4:	9e a7       	std	Y+46, r25	; 0x2e
     7a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a8:	8f a5       	ldd	r24, Y+47	; 0x2f
     7aa:	98 a9       	ldd	r25, Y+48	; 0x30
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	98 ab       	std	Y+48, r25	; 0x30
     7b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b2:	8f a5       	ldd	r24, Y+47	; 0x2f
     7b4:	98 a9       	ldd	r25, Y+48	; 0x30
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	69 f7       	brne	.-38     	; 0x794 <lcd_set_4bit+0x66a>
     7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7bc:	69 a9       	ldd	r22, Y+49	; 0x31
     7be:	7a a9       	ldd	r23, Y+50	; 0x32
     7c0:	8b a9       	ldd	r24, Y+51	; 0x33
     7c2:	9c a9       	ldd	r25, Y+52	; 0x34
     7c4:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	98 ab       	std	Y+48, r25	; 0x30
     7ce:	8f a7       	std	Y+47, r24	; 0x2f
     7d0:	8f a5       	ldd	r24, Y+47	; 0x2f
     7d2:	98 a9       	ldd	r25, Y+48	; 0x30
     7d4:	9c a7       	std	Y+44, r25	; 0x2c
     7d6:	8b a7       	std	Y+43, r24	; 0x2b
     7d8:	8b a5       	ldd	r24, Y+43	; 0x2b
     7da:	9c a5       	ldd	r25, Y+44	; 0x2c
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <lcd_set_4bit+0x6b2>
     7e0:	9c a7       	std	Y+44, r25	; 0x2c
     7e2:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     7e4:	a8 e2       	ldi	r26, 0x28	; 40
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e8 e2       	ldi	r30, 0x28	; 40
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	8e 7f       	andi	r24, 0xFE	; 254
     7f0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     7f2:	a8 e2       	ldi	r26, 0x28	; 40
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	e8 e2       	ldi	r30, 0x28	; 40
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	8d 7f       	andi	r24, 0xFD	; 253
     7fe:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     800:	e8 e2       	ldi	r30, 0x28	; 40
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 e3       	ldi	r24, 0x30	; 48
     806:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     808:	a8 e2       	ldi	r26, 0x28	; 40
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	e8 e2       	ldi	r30, 0x28	; 40
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	84 60       	ori	r24, 0x04	; 4
     814:	8c 93       	st	X, r24
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 ea       	ldi	r26, 0xA0	; 160
     81c:	b0 e4       	ldi	r27, 0x40	; 64
     81e:	8f a3       	std	Y+39, r24	; 0x27
     820:	98 a7       	std	Y+40, r25	; 0x28
     822:	a9 a7       	std	Y+41, r26	; 0x29
     824:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     826:	6f a1       	ldd	r22, Y+39	; 0x27
     828:	78 a5       	ldd	r23, Y+40	; 0x28
     82a:	89 a5       	ldd	r24, Y+41	; 0x29
     82c:	9a a5       	ldd	r25, Y+42	; 0x2a
     82e:	26 e6       	ldi	r18, 0x66	; 102
     830:	36 e6       	ldi	r19, 0x66	; 102
     832:	46 e6       	ldi	r20, 0x66	; 102
     834:	55 e4       	ldi	r21, 0x45	; 69
     836:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	8b a3       	std	Y+35, r24	; 0x23
     840:	9c a3       	std	Y+36, r25	; 0x24
     842:	ad a3       	std	Y+37, r26	; 0x25
     844:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     846:	6b a1       	ldd	r22, Y+35	; 0x23
     848:	7c a1       	ldd	r23, Y+36	; 0x24
     84a:	8d a1       	ldd	r24, Y+37	; 0x25
     84c:	9e a1       	ldd	r25, Y+38	; 0x26
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e8       	ldi	r20, 0x80	; 128
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	0e 94 9b 11 	call	0x2336	; 0x2336 <__ltsf2>
     85a:	88 23       	and	r24, r24
     85c:	2c f4       	brge	.+10     	; 0x868 <lcd_set_4bit+0x73e>
		__ticks = 1;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	9a a3       	std	Y+34, r25	; 0x22
     864:	89 a3       	std	Y+33, r24	; 0x21
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     868:	6b a1       	ldd	r22, Y+35	; 0x23
     86a:	7c a1       	ldd	r23, Y+36	; 0x24
     86c:	8d a1       	ldd	r24, Y+37	; 0x25
     86e:	9e a1       	ldd	r25, Y+38	; 0x26
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	3f ef       	ldi	r19, 0xFF	; 255
     874:	4f e7       	ldi	r20, 0x7F	; 127
     876:	57 e4       	ldi	r21, 0x47	; 71
     878:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gtsf2>
     87c:	18 16       	cp	r1, r24
     87e:	4c f5       	brge	.+82     	; 0x8d2 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     880:	6f a1       	ldd	r22, Y+39	; 0x27
     882:	78 a5       	ldd	r23, Y+40	; 0x28
     884:	89 a5       	ldd	r24, Y+41	; 0x29
     886:	9a a5       	ldd	r25, Y+42	; 0x2a
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e2       	ldi	r20, 0x20	; 32
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	bc 01       	movw	r22, r24
     89a:	cd 01       	movw	r24, r26
     89c:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	9a a3       	std	Y+34, r25	; 0x22
     8a6:	89 a3       	std	Y+33, r24	; 0x21
     8a8:	0f c0       	rjmp	.+30     	; 0x8c8 <lcd_set_4bit+0x79e>
     8aa:	80 e7       	ldi	r24, 0x70	; 112
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	98 a3       	std	Y+32, r25	; 0x20
     8b0:	8f 8f       	std	Y+31, r24	; 0x1f
     8b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8b4:	98 a1       	ldd	r25, Y+32	; 0x20
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <lcd_set_4bit+0x78c>
     8ba:	98 a3       	std	Y+32, r25	; 0x20
     8bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8be:	89 a1       	ldd	r24, Y+33	; 0x21
     8c0:	9a a1       	ldd	r25, Y+34	; 0x22
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	9a a3       	std	Y+34, r25	; 0x22
     8c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c8:	89 a1       	ldd	r24, Y+33	; 0x21
     8ca:	9a a1       	ldd	r25, Y+34	; 0x22
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	69 f7       	brne	.-38     	; 0x8aa <lcd_set_4bit+0x780>
     8d0:	14 c0       	rjmp	.+40     	; 0x8fa <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d2:	6b a1       	ldd	r22, Y+35	; 0x23
     8d4:	7c a1       	ldd	r23, Y+36	; 0x24
     8d6:	8d a1       	ldd	r24, Y+37	; 0x25
     8d8:	9e a1       	ldd	r25, Y+38	; 0x26
     8da:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	9a a3       	std	Y+34, r25	; 0x22
     8e4:	89 a3       	std	Y+33, r24	; 0x21
     8e6:	89 a1       	ldd	r24, Y+33	; 0x21
     8e8:	9a a1       	ldd	r25, Y+34	; 0x22
     8ea:	9e 8f       	std	Y+30, r25	; 0x1e
     8ec:	8d 8f       	std	Y+29, r24	; 0x1d
     8ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <lcd_set_4bit+0x7c8>
     8f6:	9e 8f       	std	Y+30, r25	; 0x1e
     8f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8fa:	a8 e2       	ldi	r26, 0x28	; 40
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e8 e2       	ldi	r30, 0x28	; 40
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	8b 7f       	andi	r24, 0xFB	; 251
     906:	8c 93       	st	X, r24
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e8       	ldi	r26, 0x80	; 128
     90e:	bf e3       	ldi	r27, 0x3F	; 63
     910:	89 8f       	std	Y+25, r24	; 0x19
     912:	9a 8f       	std	Y+26, r25	; 0x1a
     914:	ab 8f       	std	Y+27, r26	; 0x1b
     916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     918:	69 8d       	ldd	r22, Y+25	; 0x19
     91a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     91c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     91e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     920:	26 e6       	ldi	r18, 0x66	; 102
     922:	36 e6       	ldi	r19, 0x66	; 102
     924:	46 e6       	ldi	r20, 0x66	; 102
     926:	55 e4       	ldi	r21, 0x45	; 69
     928:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	8d 8b       	std	Y+21, r24	; 0x15
     932:	9e 8b       	std	Y+22, r25	; 0x16
     934:	af 8b       	std	Y+23, r26	; 0x17
     936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     938:	6d 89       	ldd	r22, Y+21	; 0x15
     93a:	7e 89       	ldd	r23, Y+22	; 0x16
     93c:	8f 89       	ldd	r24, Y+23	; 0x17
     93e:	98 8d       	ldd	r25, Y+24	; 0x18
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e8       	ldi	r20, 0x80	; 128
     946:	5f e3       	ldi	r21, 0x3F	; 63
     948:	0e 94 9b 11 	call	0x2336	; 0x2336 <__ltsf2>
     94c:	88 23       	and	r24, r24
     94e:	2c f4       	brge	.+10     	; 0x95a <lcd_set_4bit+0x830>
		__ticks = 1;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	9c 8b       	std	Y+20, r25	; 0x14
     956:	8b 8b       	std	Y+19, r24	; 0x13
     958:	3f c0       	rjmp	.+126    	; 0x9d8 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     95a:	6d 89       	ldd	r22, Y+21	; 0x15
     95c:	7e 89       	ldd	r23, Y+22	; 0x16
     95e:	8f 89       	ldd	r24, Y+23	; 0x17
     960:	98 8d       	ldd	r25, Y+24	; 0x18
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	3f ef       	ldi	r19, 0xFF	; 255
     966:	4f e7       	ldi	r20, 0x7F	; 127
     968:	57 e4       	ldi	r21, 0x47	; 71
     96a:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gtsf2>
     96e:	18 16       	cp	r1, r24
     970:	4c f5       	brge	.+82     	; 0x9c4 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     972:	69 8d       	ldd	r22, Y+25	; 0x19
     974:	7a 8d       	ldd	r23, Y+26	; 0x1a
     976:	8b 8d       	ldd	r24, Y+27	; 0x1b
     978:	9c 8d       	ldd	r25, Y+28	; 0x1c
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e2       	ldi	r20, 0x20	; 32
     980:	51 e4       	ldi	r21, 0x41	; 65
     982:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	bc 01       	movw	r22, r24
     98c:	cd 01       	movw	r24, r26
     98e:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	9c 8b       	std	Y+20, r25	; 0x14
     998:	8b 8b       	std	Y+19, r24	; 0x13
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <lcd_set_4bit+0x890>
     99c:	80 e7       	ldi	r24, 0x70	; 112
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	9a 8b       	std	Y+18, r25	; 0x12
     9a2:	89 8b       	std	Y+17, r24	; 0x11
     9a4:	89 89       	ldd	r24, Y+17	; 0x11
     9a6:	9a 89       	ldd	r25, Y+18	; 0x12
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <lcd_set_4bit+0x87e>
     9ac:	9a 8b       	std	Y+18, r25	; 0x12
     9ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b0:	8b 89       	ldd	r24, Y+19	; 0x13
     9b2:	9c 89       	ldd	r25, Y+20	; 0x14
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	9c 8b       	std	Y+20, r25	; 0x14
     9b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ba:	8b 89       	ldd	r24, Y+19	; 0x13
     9bc:	9c 89       	ldd	r25, Y+20	; 0x14
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	69 f7       	brne	.-38     	; 0x99c <lcd_set_4bit+0x872>
     9c2:	14 c0       	rjmp	.+40     	; 0x9ec <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c4:	6d 89       	ldd	r22, Y+21	; 0x15
     9c6:	7e 89       	ldd	r23, Y+22	; 0x16
     9c8:	8f 89       	ldd	r24, Y+23	; 0x17
     9ca:	98 8d       	ldd	r25, Y+24	; 0x18
     9cc:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	9c 8b       	std	Y+20, r25	; 0x14
     9d6:	8b 8b       	std	Y+19, r24	; 0x13
     9d8:	8b 89       	ldd	r24, Y+19	; 0x13
     9da:	9c 89       	ldd	r25, Y+20	; 0x14
     9dc:	98 8b       	std	Y+16, r25	; 0x10
     9de:	8f 87       	std	Y+15, r24	; 0x0f
     9e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9e2:	98 89       	ldd	r25, Y+16	; 0x10
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <lcd_set_4bit+0x8ba>
     9e8:	98 8b       	std	Y+16, r25	; 0x10
     9ea:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     9ec:	a8 e2       	ldi	r26, 0x28	; 40
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e8 e2       	ldi	r30, 0x28	; 40
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8e 7f       	andi	r24, 0xFE	; 254
     9f8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     9fa:	a8 e2       	ldi	r26, 0x28	; 40
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e8 e2       	ldi	r30, 0x28	; 40
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8d 7f       	andi	r24, 0xFD	; 253
     a06:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
     a08:	e8 e2       	ldi	r30, 0x28	; 40
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a10:	a8 e2       	ldi	r26, 0x28	; 40
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e8 e2       	ldi	r30, 0x28	; 40
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	84 60       	ori	r24, 0x04	; 4
     a1c:	8c 93       	st	X, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	a0 ea       	ldi	r26, 0xA0	; 160
     a24:	b0 e4       	ldi	r27, 0x40	; 64
     a26:	8b 87       	std	Y+11, r24	; 0x0b
     a28:	9c 87       	std	Y+12, r25	; 0x0c
     a2a:	ad 87       	std	Y+13, r26	; 0x0d
     a2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a30:	7c 85       	ldd	r23, Y+12	; 0x0c
     a32:	8d 85       	ldd	r24, Y+13	; 0x0d
     a34:	9e 85       	ldd	r25, Y+14	; 0x0e
     a36:	26 e6       	ldi	r18, 0x66	; 102
     a38:	36 e6       	ldi	r19, 0x66	; 102
     a3a:	46 e6       	ldi	r20, 0x66	; 102
     a3c:	55 e4       	ldi	r21, 0x45	; 69
     a3e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	8f 83       	std	Y+7, r24	; 0x07
     a48:	98 87       	std	Y+8, r25	; 0x08
     a4a:	a9 87       	std	Y+9, r26	; 0x09
     a4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a4e:	6f 81       	ldd	r22, Y+7	; 0x07
     a50:	78 85       	ldd	r23, Y+8	; 0x08
     a52:	89 85       	ldd	r24, Y+9	; 0x09
     a54:	9a 85       	ldd	r25, Y+10	; 0x0a
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e8       	ldi	r20, 0x80	; 128
     a5c:	5f e3       	ldi	r21, 0x3F	; 63
     a5e:	0e 94 9b 11 	call	0x2336	; 0x2336 <__ltsf2>
     a62:	88 23       	and	r24, r24
     a64:	2c f4       	brge	.+10     	; 0xa70 <lcd_set_4bit+0x946>
		__ticks = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9e 83       	std	Y+6, r25	; 0x06
     a6c:	8d 83       	std	Y+5, r24	; 0x05
     a6e:	3f c0       	rjmp	.+126    	; 0xaee <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     a70:	6f 81       	ldd	r22, Y+7	; 0x07
     a72:	78 85       	ldd	r23, Y+8	; 0x08
     a74:	89 85       	ldd	r24, Y+9	; 0x09
     a76:	9a 85       	ldd	r25, Y+10	; 0x0a
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	3f ef       	ldi	r19, 0xFF	; 255
     a7c:	4f e7       	ldi	r20, 0x7F	; 127
     a7e:	57 e4       	ldi	r21, 0x47	; 71
     a80:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gtsf2>
     a84:	18 16       	cp	r1, r24
     a86:	4c f5       	brge	.+82     	; 0xada <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a88:	6b 85       	ldd	r22, Y+11	; 0x0b
     a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e2       	ldi	r20, 0x20	; 32
     a96:	51 e4       	ldi	r21, 0x41	; 65
     a98:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	bc 01       	movw	r22, r24
     aa2:	cd 01       	movw	r24, r26
     aa4:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	9e 83       	std	Y+6, r25	; 0x06
     aae:	8d 83       	std	Y+5, r24	; 0x05
     ab0:	0f c0       	rjmp	.+30     	; 0xad0 <lcd_set_4bit+0x9a6>
     ab2:	80 e7       	ldi	r24, 0x70	; 112
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <lcd_set_4bit+0x994>
     ac2:	9c 83       	std	Y+4, r25	; 0x04
     ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac6:	8d 81       	ldd	r24, Y+5	; 0x05
     ac8:	9e 81       	ldd	r25, Y+6	; 0x06
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	9e 83       	std	Y+6, r25	; 0x06
     ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	69 f7       	brne	.-38     	; 0xab2 <lcd_set_4bit+0x988>
     ad8:	14 c0       	rjmp	.+40     	; 0xb02 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ada:	6f 81       	ldd	r22, Y+7	; 0x07
     adc:	78 85       	ldd	r23, Y+8	; 0x08
     ade:	89 85       	ldd	r24, Y+9	; 0x09
     ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae2:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	9e 83       	std	Y+6, r25	; 0x06
     aec:	8d 83       	std	Y+5, r24	; 0x05
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	9e 81       	ldd	r25, Y+6	; 0x06
     af2:	9a 83       	std	Y+2, r25	; 0x02
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <lcd_set_4bit+0x9d0>
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b02:	a8 e2       	ldi	r26, 0x28	; 40
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 e2       	ldi	r30, 0x28	; 40
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8b 7f       	andi	r24, 0xFB	; 251
     b0e:	8c 93       	st	X, r24
}
     b10:	c0 59       	subi	r28, 0x90	; 144
     b12:	df 4f       	sbci	r29, 0xFF	; 255
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	cf 91       	pop	r28
     b20:	df 91       	pop	r29
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2e 97       	sbiw	r28, 0x0e	; 14
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 e8       	ldi	r26, 0x80	; 128
     b42:	bf e3       	ldi	r27, 0x3F	; 63
     b44:	8b 87       	std	Y+11, r24	; 0x0b
     b46:	9c 87       	std	Y+12, r25	; 0x0c
     b48:	ad 87       	std	Y+13, r26	; 0x0d
     b4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b50:	8d 85       	ldd	r24, Y+13	; 0x0d
     b52:	9e 85       	ldd	r25, Y+14	; 0x0e
     b54:	26 e6       	ldi	r18, 0x66	; 102
     b56:	36 e6       	ldi	r19, 0x66	; 102
     b58:	46 e6       	ldi	r20, 0x66	; 102
     b5a:	55 e4       	ldi	r21, 0x45	; 69
     b5c:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	8f 83       	std	Y+7, r24	; 0x07
     b66:	98 87       	std	Y+8, r25	; 0x08
     b68:	a9 87       	std	Y+9, r26	; 0x09
     b6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b6c:	6f 81       	ldd	r22, Y+7	; 0x07
     b6e:	78 85       	ldd	r23, Y+8	; 0x08
     b70:	89 85       	ldd	r24, Y+9	; 0x09
     b72:	9a 85       	ldd	r25, Y+10	; 0x0a
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e8       	ldi	r20, 0x80	; 128
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	0e 94 9b 11 	call	0x2336	; 0x2336 <__ltsf2>
     b80:	88 23       	and	r24, r24
     b82:	2c f4       	brge	.+10     	; 0xb8e <lcd_init+0x66>
		__ticks = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	9e 83       	std	Y+6, r25	; 0x06
     b8a:	8d 83       	std	Y+5, r24	; 0x05
     b8c:	3f c0       	rjmp	.+126    	; 0xc0c <lcd_init+0xe4>
	else if (__tmp > 65535)
     b8e:	6f 81       	ldd	r22, Y+7	; 0x07
     b90:	78 85       	ldd	r23, Y+8	; 0x08
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	3f ef       	ldi	r19, 0xFF	; 255
     b9a:	4f e7       	ldi	r20, 0x7F	; 127
     b9c:	57 e4       	ldi	r21, 0x47	; 71
     b9e:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gtsf2>
     ba2:	18 16       	cp	r1, r24
     ba4:	4c f5       	brge	.+82     	; 0xbf8 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
     baa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bac:	9e 85       	ldd	r25, Y+14	; 0x0e
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e2       	ldi	r20, 0x20	; 32
     bb4:	51 e4       	ldi	r21, 0x41	; 65
     bb6:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	bc 01       	movw	r22, r24
     bc0:	cd 01       	movw	r24, r26
     bc2:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	9e 83       	std	Y+6, r25	; 0x06
     bcc:	8d 83       	std	Y+5, r24	; 0x05
     bce:	0f c0       	rjmp	.+30     	; 0xbee <lcd_init+0xc6>
     bd0:	80 e7       	ldi	r24, 0x70	; 112
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	8b 83       	std	Y+3, r24	; 0x03
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <lcd_init+0xb4>
     be0:	9c 83       	std	Y+4, r25	; 0x04
     be2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be4:	8d 81       	ldd	r24, Y+5	; 0x05
     be6:	9e 81       	ldd	r25, Y+6	; 0x06
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	9e 83       	std	Y+6, r25	; 0x06
     bec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bee:	8d 81       	ldd	r24, Y+5	; 0x05
     bf0:	9e 81       	ldd	r25, Y+6	; 0x06
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	69 f7       	brne	.-38     	; 0xbd0 <lcd_init+0xa8>
     bf6:	14 c0       	rjmp	.+40     	; 0xc20 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf8:	6f 81       	ldd	r22, Y+7	; 0x07
     bfa:	78 85       	ldd	r23, Y+8	; 0x08
     bfc:	89 85       	ldd	r24, Y+9	; 0x09
     bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     c00:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <lcd_init+0xf0>
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
     c20:	88 e2       	ldi	r24, 0x28	; 40
     c22:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
     c2c:	86 e0       	ldi	r24, 0x06	; 6
     c2e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
     c32:	8e e0       	ldi	r24, 0x0E	; 14
     c34:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
     c38:	80 e8       	ldi	r24, 0x80	; 128
     c3a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
}
     c3e:	2e 96       	adiw	r28, 0x0e	; 14
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <lcd_wr_command>:

	 
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	6e 97       	sbiw	r28, 0x1e	; 30
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     c66:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c68:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     c6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c6c:	80 7f       	andi	r24, 0xF0	; 240
     c6e:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     c70:	a8 e2       	ldi	r26, 0x28	; 40
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e8 e2       	ldi	r30, 0x28	; 40
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8f 70       	andi	r24, 0x0F	; 15
     c7c:	8c 93       	st	X, r24
	lcd_port |= temp;
     c7e:	a8 e2       	ldi	r26, 0x28	; 40
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 e2       	ldi	r30, 0x28	; 40
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	90 81       	ld	r25, Z
     c88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c8a:	89 2b       	or	r24, r25
     c8c:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     c8e:	a8 e2       	ldi	r26, 0x28	; 40
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e8 e2       	ldi	r30, 0x28	; 40
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8e 7f       	andi	r24, 0xFE	; 254
     c9a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     c9c:	a8 e2       	ldi	r26, 0x28	; 40
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e8 e2       	ldi	r30, 0x28	; 40
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     caa:	a8 e2       	ldi	r26, 0x28	; 40
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e8 e2       	ldi	r30, 0x28	; 40
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	84 60       	ori	r24, 0x04	; 4
     cb6:	8c 93       	st	X, r24
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 ea       	ldi	r26, 0xA0	; 160
     cbe:	b0 e4       	ldi	r27, 0x40	; 64
     cc0:	89 8f       	std	Y+25, r24	; 0x19
     cc2:	9a 8f       	std	Y+26, r25	; 0x1a
     cc4:	ab 8f       	std	Y+27, r26	; 0x1b
     cc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc8:	69 8d       	ldd	r22, Y+25	; 0x19
     cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd0:	26 e6       	ldi	r18, 0x66	; 102
     cd2:	36 e6       	ldi	r19, 0x66	; 102
     cd4:	46 e6       	ldi	r20, 0x66	; 102
     cd6:	55 e4       	ldi	r21, 0x45	; 69
     cd8:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	8d 8b       	std	Y+21, r24	; 0x15
     ce2:	9e 8b       	std	Y+22, r25	; 0x16
     ce4:	af 8b       	std	Y+23, r26	; 0x17
     ce6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ce8:	6d 89       	ldd	r22, Y+21	; 0x15
     cea:	7e 89       	ldd	r23, Y+22	; 0x16
     cec:	8f 89       	ldd	r24, Y+23	; 0x17
     cee:	98 8d       	ldd	r25, Y+24	; 0x18
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e8       	ldi	r20, 0x80	; 128
     cf6:	5f e3       	ldi	r21, 0x3F	; 63
     cf8:	0e 94 9b 11 	call	0x2336	; 0x2336 <__ltsf2>
     cfc:	88 23       	and	r24, r24
     cfe:	2c f4       	brge	.+10     	; 0xd0a <lcd_wr_command+0xba>
		__ticks = 1;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9c 8b       	std	Y+20, r25	; 0x14
     d06:	8b 8b       	std	Y+19, r24	; 0x13
     d08:	3f c0       	rjmp	.+126    	; 0xd88 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d0a:	6d 89       	ldd	r22, Y+21	; 0x15
     d0c:	7e 89       	ldd	r23, Y+22	; 0x16
     d0e:	8f 89       	ldd	r24, Y+23	; 0x17
     d10:	98 8d       	ldd	r25, Y+24	; 0x18
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	3f ef       	ldi	r19, 0xFF	; 255
     d16:	4f e7       	ldi	r20, 0x7F	; 127
     d18:	57 e4       	ldi	r21, 0x47	; 71
     d1a:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gtsf2>
     d1e:	18 16       	cp	r1, r24
     d20:	4c f5       	brge	.+82     	; 0xd74 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d22:	69 8d       	ldd	r22, Y+25	; 0x19
     d24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e2       	ldi	r20, 0x20	; 32
     d30:	51 e4       	ldi	r21, 0x41	; 65
     d32:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	9c 8b       	std	Y+20, r25	; 0x14
     d48:	8b 8b       	std	Y+19, r24	; 0x13
     d4a:	0f c0       	rjmp	.+30     	; 0xd6a <lcd_wr_command+0x11a>
     d4c:	80 e7       	ldi	r24, 0x70	; 112
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	9a 8b       	std	Y+18, r25	; 0x12
     d52:	89 8b       	std	Y+17, r24	; 0x11
     d54:	89 89       	ldd	r24, Y+17	; 0x11
     d56:	9a 89       	ldd	r25, Y+18	; 0x12
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <lcd_wr_command+0x108>
     d5c:	9a 8b       	std	Y+18, r25	; 0x12
     d5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d60:	8b 89       	ldd	r24, Y+19	; 0x13
     d62:	9c 89       	ldd	r25, Y+20	; 0x14
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	9c 8b       	std	Y+20, r25	; 0x14
     d68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d6a:	8b 89       	ldd	r24, Y+19	; 0x13
     d6c:	9c 89       	ldd	r25, Y+20	; 0x14
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	69 f7       	brne	.-38     	; 0xd4c <lcd_wr_command+0xfc>
     d72:	14 c0       	rjmp	.+40     	; 0xd9c <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d74:	6d 89       	ldd	r22, Y+21	; 0x15
     d76:	7e 89       	ldd	r23, Y+22	; 0x16
     d78:	8f 89       	ldd	r24, Y+23	; 0x17
     d7a:	98 8d       	ldd	r25, Y+24	; 0x18
     d7c:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	9c 8b       	std	Y+20, r25	; 0x14
     d86:	8b 8b       	std	Y+19, r24	; 0x13
     d88:	8b 89       	ldd	r24, Y+19	; 0x13
     d8a:	9c 89       	ldd	r25, Y+20	; 0x14
     d8c:	98 8b       	std	Y+16, r25	; 0x10
     d8e:	8f 87       	std	Y+15, r24	; 0x0f
     d90:	8f 85       	ldd	r24, Y+15	; 0x0f
     d92:	98 89       	ldd	r25, Y+16	; 0x10
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <lcd_wr_command+0x144>
     d98:	98 8b       	std	Y+16, r25	; 0x10
     d9a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     d9c:	a8 e2       	ldi	r26, 0x28	; 40
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e8 e2       	ldi	r30, 0x28	; 40
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8b 7f       	andi	r24, 0xFB	; 251
     da8:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     daa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dac:	8f 70       	andi	r24, 0x0F	; 15
     dae:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     db0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db2:	82 95       	swap	r24
     db4:	80 7f       	andi	r24, 0xF0	; 240
     db6:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     db8:	a8 e2       	ldi	r26, 0x28	; 40
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e8 e2       	ldi	r30, 0x28	; 40
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8f 70       	andi	r24, 0x0F	; 15
     dc4:	8c 93       	st	X, r24
	lcd_port |= cmd;
     dc6:	a8 e2       	ldi	r26, 0x28	; 40
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e2       	ldi	r30, 0x28	; 40
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	90 81       	ld	r25, Z
     dd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dd2:	89 2b       	or	r24, r25
     dd4:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     dd6:	a8 e2       	ldi	r26, 0x28	; 40
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e8 e2       	ldi	r30, 0x28	; 40
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8e 7f       	andi	r24, 0xFE	; 254
     de2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     de4:	a8 e2       	ldi	r26, 0x28	; 40
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e8 e2       	ldi	r30, 0x28	; 40
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8d 7f       	andi	r24, 0xFD	; 253
     df0:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     df2:	a8 e2       	ldi	r26, 0x28	; 40
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e8 e2       	ldi	r30, 0x28	; 40
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	84 60       	ori	r24, 0x04	; 4
     dfe:	8c 93       	st	X, r24
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 ea       	ldi	r26, 0xA0	; 160
     e06:	b0 e4       	ldi	r27, 0x40	; 64
     e08:	8b 87       	std	Y+11, r24	; 0x0b
     e0a:	9c 87       	std	Y+12, r25	; 0x0c
     e0c:	ad 87       	std	Y+13, r26	; 0x0d
     e0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e10:	6b 85       	ldd	r22, Y+11	; 0x0b
     e12:	7c 85       	ldd	r23, Y+12	; 0x0c
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	26 e6       	ldi	r18, 0x66	; 102
     e1a:	36 e6       	ldi	r19, 0x66	; 102
     e1c:	46 e6       	ldi	r20, 0x66	; 102
     e1e:	55 e4       	ldi	r21, 0x45	; 69
     e20:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	8f 83       	std	Y+7, r24	; 0x07
     e2a:	98 87       	std	Y+8, r25	; 0x08
     e2c:	a9 87       	std	Y+9, r26	; 0x09
     e2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e30:	6f 81       	ldd	r22, Y+7	; 0x07
     e32:	78 85       	ldd	r23, Y+8	; 0x08
     e34:	89 85       	ldd	r24, Y+9	; 0x09
     e36:	9a 85       	ldd	r25, Y+10	; 0x0a
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	0e 94 9b 11 	call	0x2336	; 0x2336 <__ltsf2>
     e44:	88 23       	and	r24, r24
     e46:	2c f4       	brge	.+10     	; 0xe52 <lcd_wr_command+0x202>
		__ticks = 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	3f c0       	rjmp	.+126    	; 0xed0 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     e52:	6f 81       	ldd	r22, Y+7	; 0x07
     e54:	78 85       	ldd	r23, Y+8	; 0x08
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
     e5e:	4f e7       	ldi	r20, 0x7F	; 127
     e60:	57 e4       	ldi	r21, 0x47	; 71
     e62:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gtsf2>
     e66:	18 16       	cp	r1, r24
     e68:	4c f5       	brge	.+82     	; 0xebc <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	0f c0       	rjmp	.+30     	; 0xeb2 <lcd_wr_command+0x262>
     e94:	80 e7       	ldi	r24, 0x70	; 112
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <lcd_wr_command+0x250>
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	69 f7       	brne	.-38     	; 0xe94 <lcd_wr_command+0x244>
     eba:	14 c0       	rjmp	.+40     	; 0xee4 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9e 83       	std	Y+6, r25	; 0x06
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	9e 81       	ldd	r25, Y+6	; 0x06
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <lcd_wr_command+0x28c>
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     ee4:	a8 e2       	ldi	r26, 0x28	; 40
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e8 e2       	ldi	r30, 0x28	; 40
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8b 7f       	andi	r24, 0xFB	; 251
     ef0:	8c 93       	st	X, r24
}
     ef2:	6e 96       	adiw	r28, 0x1e	; 30
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <lcd_wr_char>:

//Function to write data on LCD
void lcd_wr_char(char letter)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	6e 97       	sbiw	r28, 0x1e	; 30
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f1c:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     f1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f20:	80 7f       	andi	r24, 0xF0	; 240
     f22:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     f24:	a8 e2       	ldi	r26, 0x28	; 40
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 e2       	ldi	r30, 0x28	; 40
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 70       	andi	r24, 0x0F	; 15
     f30:	8c 93       	st	X, r24
	lcd_port |= temp;
     f32:	a8 e2       	ldi	r26, 0x28	; 40
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e8 e2       	ldi	r30, 0x28	; 40
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	90 81       	ld	r25, Z
     f3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f3e:	89 2b       	or	r24, r25
     f40:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     f42:	a8 e2       	ldi	r26, 0x28	; 40
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e2       	ldi	r30, 0x28	; 40
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	81 60       	ori	r24, 0x01	; 1
     f4e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f50:	a8 e2       	ldi	r26, 0x28	; 40
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e8 e2       	ldi	r30, 0x28	; 40
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     f5e:	a8 e2       	ldi	r26, 0x28	; 40
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e8 e2       	ldi	r30, 0x28	; 40
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	8c 93       	st	X, r24
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	a0 ea       	ldi	r26, 0xA0	; 160
     f72:	b0 e4       	ldi	r27, 0x40	; 64
     f74:	89 8f       	std	Y+25, r24	; 0x19
     f76:	9a 8f       	std	Y+26, r25	; 0x1a
     f78:	ab 8f       	std	Y+27, r26	; 0x1b
     f7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7c:	69 8d       	ldd	r22, Y+25	; 0x19
     f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f84:	26 e6       	ldi	r18, 0x66	; 102
     f86:	36 e6       	ldi	r19, 0x66	; 102
     f88:	46 e6       	ldi	r20, 0x66	; 102
     f8a:	55 e4       	ldi	r21, 0x45	; 69
     f8c:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	8d 8b       	std	Y+21, r24	; 0x15
     f96:	9e 8b       	std	Y+22, r25	; 0x16
     f98:	af 8b       	std	Y+23, r26	; 0x17
     f9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f9c:	6d 89       	ldd	r22, Y+21	; 0x15
     f9e:	7e 89       	ldd	r23, Y+22	; 0x16
     fa0:	8f 89       	ldd	r24, Y+23	; 0x17
     fa2:	98 8d       	ldd	r25, Y+24	; 0x18
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e8       	ldi	r20, 0x80	; 128
     faa:	5f e3       	ldi	r21, 0x3F	; 63
     fac:	0e 94 9b 11 	call	0x2336	; 0x2336 <__ltsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	2c f4       	brge	.+10     	; 0xfbe <lcd_wr_char+0xba>
		__ticks = 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	3f c0       	rjmp	.+126    	; 0x103c <lcd_wr_char+0x138>
	else if (__tmp > 65535)
     fbe:	6d 89       	ldd	r22, Y+21	; 0x15
     fc0:	7e 89       	ldd	r23, Y+22	; 0x16
     fc2:	8f 89       	ldd	r24, Y+23	; 0x17
     fc4:	98 8d       	ldd	r25, Y+24	; 0x18
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	57 e4       	ldi	r21, 0x47	; 71
     fce:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	4c f5       	brge	.+82     	; 0x1028 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd6:	69 8d       	ldd	r22, Y+25	; 0x19
     fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <lcd_wr_char+0x11a>
    1000:	80 e7       	ldi	r24, 0x70	; 112
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	9a 8b       	std	Y+18, r25	; 0x12
    1006:	89 8b       	std	Y+17, r24	; 0x11
    1008:	89 89       	ldd	r24, Y+17	; 0x11
    100a:	9a 89       	ldd	r25, Y+18	; 0x12
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <lcd_wr_char+0x108>
    1010:	9a 8b       	std	Y+18, r25	; 0x12
    1012:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	8b 89       	ldd	r24, Y+19	; 0x13
    1016:	9c 89       	ldd	r25, Y+20	; 0x14
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	9c 8b       	std	Y+20, r25	; 0x14
    101c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	8b 89       	ldd	r24, Y+19	; 0x13
    1020:	9c 89       	ldd	r25, Y+20	; 0x14
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	69 f7       	brne	.-38     	; 0x1000 <lcd_wr_char+0xfc>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1028:	6d 89       	ldd	r22, Y+21	; 0x15
    102a:	7e 89       	ldd	r23, Y+22	; 0x16
    102c:	8f 89       	ldd	r24, Y+23	; 0x17
    102e:	98 8d       	ldd	r25, Y+24	; 0x18
    1030:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9c 8b       	std	Y+20, r25	; 0x14
    103a:	8b 8b       	std	Y+19, r24	; 0x13
    103c:	8b 89       	ldd	r24, Y+19	; 0x13
    103e:	9c 89       	ldd	r25, Y+20	; 0x14
    1040:	98 8b       	std	Y+16, r25	; 0x10
    1042:	8f 87       	std	Y+15, r24	; 0x0f
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	98 89       	ldd	r25, Y+16	; 0x10
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <lcd_wr_char+0x144>
    104c:	98 8b       	std	Y+16, r25	; 0x10
    104e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1050:	a8 e2       	ldi	r26, 0x28	; 40
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e8 e2       	ldi	r30, 0x28	; 40
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8b 7f       	andi	r24, 0xFB	; 251
    105c:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    105e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1060:	8f 70       	andi	r24, 0x0F	; 15
    1062:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1064:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1066:	82 95       	swap	r24
    1068:	80 7f       	andi	r24, 0xF0	; 240
    106a:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    106c:	a8 e2       	ldi	r26, 0x28	; 40
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e8 e2       	ldi	r30, 0x28	; 40
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8f 70       	andi	r24, 0x0F	; 15
    1078:	8c 93       	st	X, r24
	lcd_port |= letter;
    107a:	a8 e2       	ldi	r26, 0x28	; 40
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e8 e2       	ldi	r30, 0x28	; 40
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	90 81       	ld	r25, Z
    1084:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1086:	89 2b       	or	r24, r25
    1088:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    108a:	a8 e2       	ldi	r26, 0x28	; 40
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e8 e2       	ldi	r30, 0x28	; 40
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1098:	a8 e2       	ldi	r26, 0x28	; 40
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e2       	ldi	r30, 0x28	; 40
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8d 7f       	andi	r24, 0xFD	; 253
    10a4:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    10a6:	a8 e2       	ldi	r26, 0x28	; 40
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e2       	ldi	r30, 0x28	; 40
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	84 60       	ori	r24, 0x04	; 4
    10b2:	8c 93       	st	X, r24
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a0 ea       	ldi	r26, 0xA0	; 160
    10ba:	b0 e4       	ldi	r27, 0x40	; 64
    10bc:	8b 87       	std	Y+11, r24	; 0x0b
    10be:	9c 87       	std	Y+12, r25	; 0x0c
    10c0:	ad 87       	std	Y+13, r26	; 0x0d
    10c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    10cc:	26 e6       	ldi	r18, 0x66	; 102
    10ce:	36 e6       	ldi	r19, 0x66	; 102
    10d0:	46 e6       	ldi	r20, 0x66	; 102
    10d2:	55 e4       	ldi	r21, 0x45	; 69
    10d4:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	8f 83       	std	Y+7, r24	; 0x07
    10de:	98 87       	std	Y+8, r25	; 0x08
    10e0:	a9 87       	std	Y+9, r26	; 0x09
    10e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e4:	6f 81       	ldd	r22, Y+7	; 0x07
    10e6:	78 85       	ldd	r23, Y+8	; 0x08
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e8       	ldi	r20, 0x80	; 128
    10f2:	5f e3       	ldi	r21, 0x3F	; 63
    10f4:	0e 94 9b 11 	call	0x2336	; 0x2336 <__ltsf2>
    10f8:	88 23       	and	r24, r24
    10fa:	2c f4       	brge	.+10     	; 0x1106 <lcd_wr_char+0x202>
		__ticks = 1;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9e 83       	std	Y+6, r25	; 0x06
    1102:	8d 83       	std	Y+5, r24	; 0x05
    1104:	3f c0       	rjmp	.+126    	; 0x1184 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	3f ef       	ldi	r19, 0xFF	; 255
    1112:	4f e7       	ldi	r20, 0x7F	; 127
    1114:	57 e4       	ldi	r21, 0x47	; 71
    1116:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gtsf2>
    111a:	18 16       	cp	r1, r24
    111c:	4c f5       	brge	.+82     	; 0x1170 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1120:	7c 85       	ldd	r23, Y+12	; 0x0c
    1122:	8d 85       	ldd	r24, Y+13	; 0x0d
    1124:	9e 85       	ldd	r25, Y+14	; 0x0e
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e2       	ldi	r20, 0x20	; 32
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <lcd_wr_char+0x262>
    1148:	80 e7       	ldi	r24, 0x70	; 112
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <lcd_wr_char+0x250>
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	69 f7       	brne	.-38     	; 0x1148 <lcd_wr_char+0x244>
    116e:	14 c0       	rjmp	.+40     	; 0x1198 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1170:	6f 81       	ldd	r22, Y+7	; 0x07
    1172:	78 85       	ldd	r23, Y+8	; 0x08
    1174:	89 85       	ldd	r24, Y+9	; 0x09
    1176:	9a 85       	ldd	r25, Y+10	; 0x0a
    1178:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <lcd_wr_char+0x28c>
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1198:	a8 e2       	ldi	r26, 0x28	; 40
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e8 e2       	ldi	r30, 0x28	; 40
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8b 7f       	andi	r24, 0xFB	; 251
    11a4:	8c 93       	st	X, r24
}
    11a6:	6e 96       	adiw	r28, 0x1e	; 30
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <lcd_home>:


void lcd_home()
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    11c0:	80 e8       	ldi	r24, 0x80	; 128
    11c2:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	0f 92       	push	r0
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	0a c0       	rjmp	.+20     	; 0x11f2 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    11de:	e9 81       	ldd	r30, Y+1	; 0x01
    11e0:	fa 81       	ldd	r31, Y+2	; 0x02
    11e2:	80 81       	ld	r24, Z
    11e4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		str++;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	80 81       	ld	r24, Z
    11f8:	88 23       	and	r24, r24
    11fa:	89 f7       	brne	.-30     	; 0x11de <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <lcd_cursor+0x6>
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3c 83       	std	Y+4, r19	; 0x04
    121e:	2b 83       	std	Y+3, r18	; 0x03
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	91 05       	cpc	r25, r1
    1228:	d9 f0       	breq	.+54     	; 0x1260 <lcd_cursor+0x5a>
    122a:	2b 81       	ldd	r18, Y+3	; 0x03
    122c:	3c 81       	ldd	r19, Y+4	; 0x04
    122e:	23 30       	cpi	r18, 0x03	; 3
    1230:	31 05       	cpc	r19, r1
    1232:	34 f4       	brge	.+12     	; 0x1240 <lcd_cursor+0x3a>
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	61 f0       	breq	.+24     	; 0x1256 <lcd_cursor+0x50>
    123e:	1e c0       	rjmp	.+60     	; 0x127c <lcd_cursor+0x76>
    1240:	2b 81       	ldd	r18, Y+3	; 0x03
    1242:	3c 81       	ldd	r19, Y+4	; 0x04
    1244:	23 30       	cpi	r18, 0x03	; 3
    1246:	31 05       	cpc	r19, r1
    1248:	81 f0       	breq	.+32     	; 0x126a <lcd_cursor+0x64>
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	91 05       	cpc	r25, r1
    1252:	81 f0       	breq	.+32     	; 0x1274 <lcd_cursor+0x6e>
    1254:	13 c0       	rjmp	.+38     	; 0x127c <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	81 58       	subi	r24, 0x81	; 129
    125a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    125e:	0e c0       	rjmp	.+28     	; 0x127c <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	81 54       	subi	r24, 0x41	; 65
    1264:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1268:	09 c0       	rjmp	.+18     	; 0x127c <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	8d 56       	subi	r24, 0x6D	; 109
    126e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	8d 52       	subi	r24, 0x2D	; 45
    1278:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		default: break;
	}
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <lcd_print>:

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	27 97       	sbiw	r28, 0x07	; 7
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	8a 83       	std	Y+2, r24	; 0x02
    12a0:	6b 83       	std	Y+3, r22	; 0x03
    12a2:	5d 83       	std	Y+5, r21	; 0x05
    12a4:	4c 83       	std	Y+4, r20	; 0x04
    12a6:	3f 83       	std	Y+7, r19	; 0x07
    12a8:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    12aa:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	88 23       	and	r24, r24
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <lcd_print+0x2e>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	88 23       	and	r24, r24
    12b6:	19 f4       	brne	.+6      	; 0x12be <lcd_print+0x34>
	{
		lcd_home();
    12b8:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <lcd_home>
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	6b 81       	ldd	r22, Y+3	; 0x03
    12c2:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	85 30       	cpi	r24, 0x05	; 5
    12cc:	91 05       	cpc	r25, r1
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <lcd_print+0x4c>
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	a9 f4       	brne	.+42     	; 0x1300 <lcd_print+0x76>
	{
		million=value/10000+48;
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	20 e1       	ldi	r18, 0x10	; 16
    12dc:	37 e2       	ldi	r19, 0x27	; 39
    12de:	b9 01       	movw	r22, r18
    12e0:	0e 94 8d 14 	call	0x291a	; 0x291a <__udivmodhi4>
    12e4:	cb 01       	movw	r24, r22
    12e6:	c0 96       	adiw	r24, 0x30	; 48
    12e8:	90 93 31 03 	sts	0x0331, r25
    12ec:	80 93 30 03 	sts	0x0330, r24
		lcd_wr_char(million);
    12f0:	80 91 30 03 	lds	r24, 0x0330
    12f4:	90 91 31 03 	lds	r25, 0x0331
    12f8:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	9f 81       	ldd	r25, Y+7	; 0x07
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	91 05       	cpc	r25, r1
    1308:	19 f0       	breq	.+6      	; 0x1310 <lcd_print+0x86>
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	11 f5       	brne	.+68     	; 0x1354 <lcd_print+0xca>
	{
		temp = value/1000;
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	28 ee       	ldi	r18, 0xE8	; 232
    1316:	33 e0       	ldi	r19, 0x03	; 3
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 8d 14 	call	0x291a	; 0x291a <__udivmodhi4>
    131e:	cb 01       	movw	r24, r22
    1320:	90 93 33 03 	sts	0x0333, r25
    1324:	80 93 32 03 	sts	0x0332, r24
		thousand = temp%10 + 48;
    1328:	80 91 32 03 	lds	r24, 0x0332
    132c:	90 91 33 03 	lds	r25, 0x0333
    1330:	2a e0       	ldi	r18, 0x0A	; 10
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	b9 01       	movw	r22, r18
    1336:	0e 94 8d 14 	call	0x291a	; 0x291a <__udivmodhi4>
    133a:	c0 96       	adiw	r24, 0x30	; 48
    133c:	90 93 3d 03 	sts	0x033D, r25
    1340:	80 93 3c 03 	sts	0x033C, r24
		lcd_wr_char(thousand);
    1344:	80 91 3c 03 	lds	r24, 0x033C
    1348:	90 91 3d 03 	lds	r25, 0x033D
    134c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1354:	8e 81       	ldd	r24, Y+6	; 0x06
    1356:	9f 81       	ldd	r25, Y+7	; 0x07
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	19 f0       	breq	.+6      	; 0x1364 <lcd_print+0xda>
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	11 f5       	brne	.+68     	; 0x13a8 <lcd_print+0x11e>
	{
		temp = value/100;
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	24 e6       	ldi	r18, 0x64	; 100
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 8d 14 	call	0x291a	; 0x291a <__udivmodhi4>
    1372:	cb 01       	movw	r24, r22
    1374:	90 93 33 03 	sts	0x0333, r25
    1378:	80 93 32 03 	sts	0x0332, r24
		hundred = temp%10 + 48;
    137c:	80 91 32 03 	lds	r24, 0x0332
    1380:	90 91 33 03 	lds	r25, 0x0333
    1384:	2a e0       	ldi	r18, 0x0A	; 10
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	b9 01       	movw	r22, r18
    138a:	0e 94 8d 14 	call	0x291a	; 0x291a <__udivmodhi4>
    138e:	c0 96       	adiw	r24, 0x30	; 48
    1390:	90 93 39 03 	sts	0x0339, r25
    1394:	80 93 38 03 	sts	0x0338, r24
		lcd_wr_char(hundred);
    1398:	80 91 38 03 	lds	r24, 0x0338
    139c:	90 91 39 03 	lds	r25, 0x0339
    13a0:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    13a8:	8e 81       	ldd	r24, Y+6	; 0x06
    13aa:	9f 81       	ldd	r25, Y+7	; 0x07
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	91 05       	cpc	r25, r1
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <lcd_print+0x12e>
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	11 f5       	brne	.+68     	; 0x13fc <lcd_print+0x172>
	{
		temp = value/10;
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	9d 81       	ldd	r25, Y+5	; 0x05
    13bc:	2a e0       	ldi	r18, 0x0A	; 10
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	b9 01       	movw	r22, r18
    13c2:	0e 94 8d 14 	call	0x291a	; 0x291a <__udivmodhi4>
    13c6:	cb 01       	movw	r24, r22
    13c8:	90 93 33 03 	sts	0x0333, r25
    13cc:	80 93 32 03 	sts	0x0332, r24
		tens = temp%10 + 48;
    13d0:	80 91 32 03 	lds	r24, 0x0332
    13d4:	90 91 33 03 	lds	r25, 0x0333
    13d8:	2a e0       	ldi	r18, 0x0A	; 10
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	b9 01       	movw	r22, r18
    13de:	0e 94 8d 14 	call	0x291a	; 0x291a <__udivmodhi4>
    13e2:	c0 96       	adiw	r24, 0x30	; 48
    13e4:	90 93 37 03 	sts	0x0337, r25
    13e8:	80 93 36 03 	sts	0x0336, r24
		lcd_wr_char(tens);
    13ec:	80 91 36 03 	lds	r24, 0x0336
    13f0:	90 91 37 03 	lds	r25, 0x0337
    13f4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	91 05       	cpc	r25, r1
    1404:	19 f0       	breq	.+6      	; 0x140c <lcd_print+0x182>
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 f4       	brne	.+36     	; 0x1430 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	2a e0       	ldi	r18, 0x0A	; 10
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	b9 01       	movw	r22, r18
    1416:	0e 94 8d 14 	call	0x291a	; 0x291a <__udivmodhi4>
    141a:	c0 96       	adiw	r24, 0x30	; 48
    141c:	90 93 3b 03 	sts	0x033B, r25
    1420:	80 93 3a 03 	sts	0x033A, r24
		lcd_wr_char(unit);
    1424:	80 91 3a 03 	lds	r24, 0x033A
    1428:	90 91 3b 03 	lds	r25, 0x033B
    142c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	if(digits>5)
    1430:	8e 81       	ldd	r24, Y+6	; 0x06
    1432:	9f 81       	ldd	r25, Y+7	; 0x07
    1434:	86 30       	cpi	r24, 0x06	; 6
    1436:	91 05       	cpc	r25, r1
    1438:	1c f0       	brlt	.+6      	; 0x1440 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    143a:	85 e4       	ldi	r24, 0x45	; 69
    143c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
}
    1440:	27 96       	adiw	r28, 0x07	; 7
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <lcd_port_config>:
unsigned int ADC_Value = 0;
float distance_in_cm = 0;

//Function to configure LCD port
void lcd_port_config (void)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7;   //all the LCD pin's direction set as output
    145a:	a7 e2       	ldi	r26, 0x27	; 39
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e7 e2       	ldi	r30, 0x27	; 39
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	87 6f       	ori	r24, 0xF7	; 247
    1466:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1468:	a8 e2       	ldi	r26, 0x28	; 40
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e8 e2       	ldi	r30, 0x28	; 40
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	80 78       	andi	r24, 0x80	; 128
    1474:	8c 93       	st	X, r24
}
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
 DDRK = 0x7F;  //set PORTK7 direction as input
    1484:	e7 e0       	ldi	r30, 0x07	; 7
    1486:	f1 e0       	ldi	r31, 0x01	; 1
    1488:	8f e7       	ldi	r24, 0x7F	; 127
    148a:	80 83       	st	Z, r24
 PORTK = 0x00; //set PORTK7 pins floating
    148c:	e8 e0       	ldi	r30, 0x08	; 8
    148e:	f1 e0       	ldi	r31, 0x01	; 1
    1490:	10 82       	st	Z, r1
}
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <ultrsonic_trigger_config>:

// ultarasonic trigger configuration
void ultrsonic_trigger_config(void)
{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	0f 92       	push	r0
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
 DDRB = DDRB | 0x10;   // PB4 direction set as output
    14a2:	a4 e2       	ldi	r26, 0x24	; 36
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e4 e2       	ldi	r30, 0x24	; 36
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	80 61       	ori	r24, 0x10	; 16
    14ae:	8c 93       	st	X, r24
 PORTB = PORTB & 0x00; // PB4 set to logic 0 
    14b0:	e5 e2       	ldi	r30, 0x25	; 37
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	e5 e2       	ldi	r30, 0x25	; 37
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	10 82       	st	Z, r1
}
    14bc:	0f 90       	pop	r0
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <port_init>:

//Function to Initialize PORTS
void port_init()
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
 lcd_port_config();
    14cc:	0e 94 29 0a 	call	0x1452	; 0x1452 <lcd_port_config>
 adc_pin_config();	
    14d0:	0e 94 3e 0a 	call	0x147c	; 0x147c <adc_pin_config>
 ultrsonic_trigger_config();
    14d4:	0e 94 4c 0a 	call	0x1498	; 0x1498 <ultrsonic_trigger_config>
}
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <adc_init>:

//Function to Initialize ADC
void adc_init()
{
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
 ADCSRA = 0x00;
    14e6:	ea e7       	ldi	r30, 0x7A	; 122
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	10 82       	st	Z, r1
 ADCSRB = 0x00;		//MUX5 = 0
    14ec:	eb e7       	ldi	r30, 0x7B	; 123
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	10 82       	st	Z, r1
 ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    14f2:	ec e7       	ldi	r30, 0x7C	; 124
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 e2       	ldi	r24, 0x20	; 32
    14f8:	80 83       	st	Z, r24
 ACSR = 0x80;
    14fa:	e0 e5       	ldi	r30, 0x50	; 80
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 e8       	ldi	r24, 0x80	; 128
    1500:	80 83       	st	Z, r24
 ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    1502:	ea e7       	ldi	r30, 0x7A	; 122
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	86 e8       	ldi	r24, 0x86	; 134
    1508:	80 83       	st	Z, r24
}
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <ADC_Conversion>:

//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned int ADC_Conversion(unsigned char Ch)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	00 d0       	rcall	.+0      	; 0x1516 <ADC_Conversion+0x6>
    1516:	0f 92       	push	r0
    1518:	0f 92       	push	r0
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	8d 83       	std	Y+5, r24	; 0x05
 //unsigned char a;
 unsigned int a = 0,b = 0;
    1520:	1c 82       	std	Y+4, r1	; 0x04
    1522:	1b 82       	std	Y+3, r1	; 0x03
    1524:	1a 82       	std	Y+2, r1	; 0x02
    1526:	19 82       	std	Y+1, r1	; 0x01
 
 if(Ch>7)
    1528:	8d 81       	ldd	r24, Y+5	; 0x05
    152a:	88 30       	cpi	r24, 0x08	; 8
    152c:	20 f0       	brcs	.+8      	; 0x1536 <ADC_Conversion+0x26>
  {
	ADCSRB = 0x08;
    152e:	eb e7       	ldi	r30, 0x7B	; 123
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	88 e0       	ldi	r24, 0x08	; 8
    1534:	80 83       	st	Z, r24
  }

 Ch = Ch & 0x07;  			
    1536:	8d 81       	ldd	r24, Y+5	; 0x05
    1538:	87 70       	andi	r24, 0x07	; 7
    153a:	8d 83       	std	Y+5, r24	; 0x05
 ADMUX= 0x20| Ch;	   		
    153c:	ec e7       	ldi	r30, 0x7C	; 124
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	80 62       	ori	r24, 0x20	; 32
    1544:	80 83       	st	Z, r24
 ADCSRA = ADCSRA | 0x40;	    //Set start conversion bit
    1546:	aa e7       	ldi	r26, 0x7A	; 122
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	ea e7       	ldi	r30, 0x7A	; 122
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	80 64       	ori	r24, 0x40	; 64
    1552:	8c 93       	st	X, r24
 while((ADCSRA&0x10)==0);	    //Wait for ADC conversion to complete
    1554:	ea e7       	ldi	r30, 0x7A	; 122
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	80 71       	andi	r24, 0x10	; 16
    1560:	90 70       	andi	r25, 0x00	; 0
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	b9 f3       	breq	.-18     	; 0x1554 <ADC_Conversion+0x44>
 b = (unsigned int)(ADCL>>6);   //read & adjust ADCL result to read as a right adjusted result
    1566:	e8 e7       	ldi	r30, 0x78	; 120
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	82 95       	swap	r24
    156e:	86 95       	lsr	r24
    1570:	86 95       	lsr	r24
    1572:	83 70       	andi	r24, 0x03	; 3
    1574:	88 2f       	mov	r24, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	9a 83       	std	Y+2, r25	; 0x02
    157a:	89 83       	std	Y+1, r24	; 0x01
 a = (unsigned int)(ADCH<<2);   //read & adjust ADCH result to read as a right adjusted result
    157c:	e9 e7       	ldi	r30, 0x79	; 121
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	88 2f       	mov	r24, r24
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	9c 83       	std	Y+4, r25	; 0x04
    1590:	8b 83       	std	Y+3, r24	; 0x03
 a = a | b;                      
    1592:	2b 81       	ldd	r18, Y+3	; 0x03
    1594:	3c 81       	ldd	r19, Y+4	; 0x04
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	9a 81       	ldd	r25, Y+2	; 0x02
    159a:	82 2b       	or	r24, r18
    159c:	93 2b       	or	r25, r19
    159e:	9c 83       	std	Y+4, r25	; 0x04
    15a0:	8b 83       	std	Y+3, r24	; 0x03
 ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    15a2:	aa e7       	ldi	r26, 0x7A	; 122
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	ea e7       	ldi	r30, 0x7A	; 122
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	80 61       	ori	r24, 0x10	; 16
    15ae:	8c 93       	st	X, r24
 ADCSRB = 0x00;
    15b0:	eb e7       	ldi	r30, 0x7B	; 123
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	10 82       	st	Z, r1
 return a;
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
}
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	08 95       	ret

000015ca <print_sensor>:

// This Function prints the Analog Value Of Corresponding Channel No. at required Row
// and Coloumn Location. 
void print_sensor(char row, char coloumn,unsigned char channel)
{
    15ca:	df 93       	push	r29
    15cc:	cf 93       	push	r28
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <print_sensor+0x6>
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	6a 83       	std	Y+2, r22	; 0x02
    15d8:	4b 83       	std	Y+3, r20	; 0x03
 ADC_Value = ADC_Conversion(channel);
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	0e 94 88 0a 	call	0x1510	; 0x1510 <ADC_Conversion>
    15e0:	90 93 2b 03 	sts	0x032B, r25
    15e4:	80 93 2a 03 	sts	0x032A, r24
 lcd_print(row, coloumn, ADC_Value, 4);
    15e8:	20 91 2a 03 	lds	r18, 0x032A
    15ec:	30 91 2b 03 	lds	r19, 0x032B
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	6a 81       	ldd	r22, Y+2	; 0x02
    15f4:	a9 01       	movw	r20, r18
    15f6:	24 e0       	ldi	r18, 0x04	; 4
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
}
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <ultrasonic_trigger>:
//--------------------------------------------------------------------------------
// Ultrasonic sensor are connected in chaining mode. This function rise a 
// trigger pulse of >20usec to command ringing.     
//--------------------------------------------------------------------------------
void ultrasonic_trigger(void)                 
{
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	68 97       	sbiw	r28, 0x18	; 24
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
 PORTB = PORTB | 0x10;  // make high the Trigger input for Ultrasonic sensor
    161e:	a5 e2       	ldi	r26, 0x25	; 37
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e5 e2       	ldi	r30, 0x25	; 37
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	80 61       	ori	r24, 0x10	; 16
    162a:	8c 93       	st	X, r24
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	a8 e4       	ldi	r26, 0x48	; 72
    1632:	b2 e4       	ldi	r27, 0x42	; 66
    1634:	8d 8b       	std	Y+21, r24	; 0x15
    1636:	9e 8b       	std	Y+22, r25	; 0x16
    1638:	af 8b       	std	Y+23, r26	; 0x17
    163a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    163c:	6d 89       	ldd	r22, Y+21	; 0x15
    163e:	7e 89       	ldd	r23, Y+22	; 0x16
    1640:	8f 89       	ldd	r24, Y+23	; 0x17
    1642:	98 8d       	ldd	r25, Y+24	; 0x18
    1644:	22 e5       	ldi	r18, 0x52	; 82
    1646:	39 e4       	ldi	r19, 0x49	; 73
    1648:	4d e9       	ldi	r20, 0x9D	; 157
    164a:	50 e4       	ldi	r21, 0x40	; 64
    164c:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	89 8b       	std	Y+17, r24	; 0x11
    1656:	9a 8b       	std	Y+18, r25	; 0x12
    1658:	ab 8b       	std	Y+19, r26	; 0x13
    165a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    165c:	69 89       	ldd	r22, Y+17	; 0x11
    165e:	7a 89       	ldd	r23, Y+18	; 0x12
    1660:	8b 89       	ldd	r24, Y+19	; 0x13
    1662:	9c 89       	ldd	r25, Y+20	; 0x14
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e8       	ldi	r20, 0x80	; 128
    166a:	5f e3       	ldi	r21, 0x3F	; 63
    166c:	0e 94 9b 11 	call	0x2336	; 0x2336 <__ltsf2>
    1670:	88 23       	and	r24, r24
    1672:	1c f4       	brge	.+6      	; 0x167a <ultrasonic_trigger+0x70>
		__ticks = 1;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	88 8b       	std	Y+16, r24	; 0x10
    1678:	91 c0       	rjmp	.+290    	; 0x179c <ultrasonic_trigger+0x192>
	else if (__tmp > 255)
    167a:	69 89       	ldd	r22, Y+17	; 0x11
    167c:	7a 89       	ldd	r23, Y+18	; 0x12
    167e:	8b 89       	ldd	r24, Y+19	; 0x13
    1680:	9c 89       	ldd	r25, Y+20	; 0x14
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	4f e7       	ldi	r20, 0x7F	; 127
    1688:	53 e4       	ldi	r21, 0x43	; 67
    168a:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gtsf2>
    168e:	18 16       	cp	r1, r24
    1690:	0c f0       	brlt	.+2      	; 0x1694 <ultrasonic_trigger+0x8a>
    1692:	7b c0       	rjmp	.+246    	; 0x178a <ultrasonic_trigger+0x180>
	{
		_delay_ms(__us / 1000.0);
    1694:	6d 89       	ldd	r22, Y+21	; 0x15
    1696:	7e 89       	ldd	r23, Y+22	; 0x16
    1698:	8f 89       	ldd	r24, Y+23	; 0x17
    169a:	98 8d       	ldd	r25, Y+24	; 0x18
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	4a e7       	ldi	r20, 0x7A	; 122
    16a2:	54 e4       	ldi	r21, 0x44	; 68
    16a4:	0e 94 8f 10 	call	0x211e	; 0x211e <__divsf3>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	8c 87       	std	Y+12, r24	; 0x0c
    16ae:	9d 87       	std	Y+13, r25	; 0x0d
    16b0:	ae 87       	std	Y+14, r26	; 0x0e
    16b2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b4:	6c 85       	ldd	r22, Y+12	; 0x0c
    16b6:	7d 85       	ldd	r23, Y+13	; 0x0d
    16b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    16ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    16bc:	26 e6       	ldi	r18, 0x66	; 102
    16be:	36 e6       	ldi	r19, 0x66	; 102
    16c0:	46 e6       	ldi	r20, 0x66	; 102
    16c2:	55 e4       	ldi	r21, 0x45	; 69
    16c4:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	88 87       	std	Y+8, r24	; 0x08
    16ce:	99 87       	std	Y+9, r25	; 0x09
    16d0:	aa 87       	std	Y+10, r26	; 0x0a
    16d2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    16d4:	68 85       	ldd	r22, Y+8	; 0x08
    16d6:	79 85       	ldd	r23, Y+9	; 0x09
    16d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    16da:	9b 85       	ldd	r25, Y+11	; 0x0b
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e8       	ldi	r20, 0x80	; 128
    16e2:	5f e3       	ldi	r21, 0x3F	; 63
    16e4:	0e 94 9b 11 	call	0x2336	; 0x2336 <__ltsf2>
    16e8:	88 23       	and	r24, r24
    16ea:	2c f4       	brge	.+10     	; 0x16f6 <ultrasonic_trigger+0xec>
		__ticks = 1;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	9f 83       	std	Y+7, r25	; 0x07
    16f2:	8e 83       	std	Y+6, r24	; 0x06
    16f4:	3f c0       	rjmp	.+126    	; 0x1774 <ultrasonic_trigger+0x16a>
	else if (__tmp > 65535)
    16f6:	68 85       	ldd	r22, Y+8	; 0x08
    16f8:	79 85       	ldd	r23, Y+9	; 0x09
    16fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    16fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	3f ef       	ldi	r19, 0xFF	; 255
    1702:	4f e7       	ldi	r20, 0x7F	; 127
    1704:	57 e4       	ldi	r21, 0x47	; 71
    1706:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gtsf2>
    170a:	18 16       	cp	r1, r24
    170c:	4c f5       	brge	.+82     	; 0x1760 <ultrasonic_trigger+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1710:	7d 85       	ldd	r23, Y+13	; 0x0d
    1712:	8e 85       	ldd	r24, Y+14	; 0x0e
    1714:	9f 85       	ldd	r25, Y+15	; 0x0f
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e2       	ldi	r20, 0x20	; 32
    171c:	51 e4       	ldi	r21, 0x41	; 65
    171e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	bc 01       	movw	r22, r24
    1728:	cd 01       	movw	r24, r26
    172a:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	9f 83       	std	Y+7, r25	; 0x07
    1734:	8e 83       	std	Y+6, r24	; 0x06
    1736:	0f c0       	rjmp	.+30     	; 0x1756 <ultrasonic_trigger+0x14c>
    1738:	80 e7       	ldi	r24, 0x70	; 112
    173a:	91 e0       	ldi	r25, 0x01	; 1
    173c:	9d 83       	std	Y+5, r25	; 0x05
    173e:	8c 83       	std	Y+4, r24	; 0x04
    1740:	8c 81       	ldd	r24, Y+4	; 0x04
    1742:	9d 81       	ldd	r25, Y+5	; 0x05
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <ultrasonic_trigger+0x13a>
    1748:	9d 83       	std	Y+5, r25	; 0x05
    174a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174c:	8e 81       	ldd	r24, Y+6	; 0x06
    174e:	9f 81       	ldd	r25, Y+7	; 0x07
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	9f 83       	std	Y+7, r25	; 0x07
    1754:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1756:	8e 81       	ldd	r24, Y+6	; 0x06
    1758:	9f 81       	ldd	r25, Y+7	; 0x07
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	69 f7       	brne	.-38     	; 0x1738 <ultrasonic_trigger+0x12e>
    175e:	24 c0       	rjmp	.+72     	; 0x17a8 <ultrasonic_trigger+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1760:	68 85       	ldd	r22, Y+8	; 0x08
    1762:	79 85       	ldd	r23, Y+9	; 0x09
    1764:	8a 85       	ldd	r24, Y+10	; 0x0a
    1766:	9b 85       	ldd	r25, Y+11	; 0x0b
    1768:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	9f 83       	std	Y+7, r25	; 0x07
    1772:	8e 83       	std	Y+6, r24	; 0x06
    1774:	8e 81       	ldd	r24, Y+6	; 0x06
    1776:	9f 81       	ldd	r25, Y+7	; 0x07
    1778:	9b 83       	std	Y+3, r25	; 0x03
    177a:	8a 83       	std	Y+2, r24	; 0x02
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	9b 81       	ldd	r25, Y+3	; 0x03
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	f1 f7       	brne	.-4      	; 0x1780 <ultrasonic_trigger+0x176>
    1784:	9b 83       	std	Y+3, r25	; 0x03
    1786:	8a 83       	std	Y+2, r24	; 0x02
    1788:	0f c0       	rjmp	.+30     	; 0x17a8 <ultrasonic_trigger+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    178a:	69 89       	ldd	r22, Y+17	; 0x11
    178c:	7a 89       	ldd	r23, Y+18	; 0x12
    178e:	8b 89       	ldd	r24, Y+19	; 0x13
    1790:	9c 89       	ldd	r25, Y+20	; 0x14
    1792:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	88 8b       	std	Y+16, r24	; 0x10
    179c:	88 89       	ldd	r24, Y+16	; 0x10
    179e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	8a 95       	dec	r24
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <ultrasonic_trigger+0x198>
    17a6:	89 83       	std	Y+1, r24	; 0x01
 _delay_us(50);         // Wait for >20usec
 PORTB = PORTB & 0xEF;  // make low the Trigger input for Ultrasonic sensor
    17a8:	a5 e2       	ldi	r26, 0x25	; 37
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e5 e2       	ldi	r30, 0x25	; 37
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	8f 7e       	andi	r24, 0xEF	; 239
    17b4:	8c 93       	st	X, r24
}
    17b6:	68 96       	adiw	r28, 0x18	; 24
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <init_devices>:

void init_devices (void)
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
    17d0:	f8 94       	cli
 port_init();
    17d2:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <port_init>
 adc_init();
    17d6:	0e 94 6f 0a 	call	0x14de	; 0x14de <adc_init>
 sei(); //Enables the global interrupts
    17da:	78 94       	sei
}
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <main>:

//Main Function
int main(void)
{
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	e2 97       	sbiw	r28, 0x32	; 50
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
 float distance_in_cm;
 unsigned int distance_in_cm_int;
 unsigned int distance_in_cm_fraction;

 init_devices();                  // initialise required modules
    17f6:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <init_devices>
	
 lcd_set_4bit();                  // initialise LCD
    17fa:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
 lcd_init();                      // initialise LCD
    17fe:	0e 94 94 05 	call	0xb28	; 0xb28 <lcd_init>

 lcd_string(first_row);           // display message on 1st row
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	92 e0       	ldi	r25, 0x02	; 2
    1806:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	a6 e1       	ldi	r26, 0x16	; 22
    1810:	b3 e4       	ldi	r27, 0x43	; 67
    1812:	8f a3       	std	Y+39, r24	; 0x27
    1814:	98 a7       	std	Y+40, r25	; 0x28
    1816:	a9 a7       	std	Y+41, r26	; 0x29
    1818:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181a:	6f a1       	ldd	r22, Y+39	; 0x27
    181c:	78 a5       	ldd	r23, Y+40	; 0x28
    181e:	89 a5       	ldd	r24, Y+41	; 0x29
    1820:	9a a5       	ldd	r25, Y+42	; 0x2a
    1822:	26 e6       	ldi	r18, 0x66	; 102
    1824:	36 e6       	ldi	r19, 0x66	; 102
    1826:	46 e6       	ldi	r20, 0x66	; 102
    1828:	55 e4       	ldi	r21, 0x45	; 69
    182a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	8b a3       	std	Y+35, r24	; 0x23
    1834:	9c a3       	std	Y+36, r25	; 0x24
    1836:	ad a3       	std	Y+37, r26	; 0x25
    1838:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    183a:	6b a1       	ldd	r22, Y+35	; 0x23
    183c:	7c a1       	ldd	r23, Y+36	; 0x24
    183e:	8d a1       	ldd	r24, Y+37	; 0x25
    1840:	9e a1       	ldd	r25, Y+38	; 0x26
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e8       	ldi	r20, 0x80	; 128
    1848:	5f e3       	ldi	r21, 0x3F	; 63
    184a:	0e 94 9b 11 	call	0x2336	; 0x2336 <__ltsf2>
    184e:	88 23       	and	r24, r24
    1850:	2c f4       	brge	.+10     	; 0x185c <main+0x7a>
		__ticks = 1;
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	9a a3       	std	Y+34, r25	; 0x22
    1858:	89 a3       	std	Y+33, r24	; 0x21
    185a:	3f c0       	rjmp	.+126    	; 0x18da <main+0xf8>
	else if (__tmp > 65535)
    185c:	6b a1       	ldd	r22, Y+35	; 0x23
    185e:	7c a1       	ldd	r23, Y+36	; 0x24
    1860:	8d a1       	ldd	r24, Y+37	; 0x25
    1862:	9e a1       	ldd	r25, Y+38	; 0x26
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	3f ef       	ldi	r19, 0xFF	; 255
    1868:	4f e7       	ldi	r20, 0x7F	; 127
    186a:	57 e4       	ldi	r21, 0x47	; 71
    186c:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gtsf2>
    1870:	18 16       	cp	r1, r24
    1872:	4c f5       	brge	.+82     	; 0x18c6 <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1874:	6f a1       	ldd	r22, Y+39	; 0x27
    1876:	78 a5       	ldd	r23, Y+40	; 0x28
    1878:	89 a5       	ldd	r24, Y+41	; 0x29
    187a:	9a a5       	ldd	r25, Y+42	; 0x2a
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e2       	ldi	r20, 0x20	; 32
    1882:	51 e4       	ldi	r21, 0x41	; 65
    1884:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	bc 01       	movw	r22, r24
    188e:	cd 01       	movw	r24, r26
    1890:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	9a a3       	std	Y+34, r25	; 0x22
    189a:	89 a3       	std	Y+33, r24	; 0x21
    189c:	0f c0       	rjmp	.+30     	; 0x18bc <main+0xda>
    189e:	80 e7       	ldi	r24, 0x70	; 112
    18a0:	91 e0       	ldi	r25, 0x01	; 1
    18a2:	98 a3       	std	Y+32, r25	; 0x20
    18a4:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18a8:	98 a1       	ldd	r25, Y+32	; 0x20
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <main+0xc8>
    18ae:	98 a3       	std	Y+32, r25	; 0x20
    18b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b2:	89 a1       	ldd	r24, Y+33	; 0x21
    18b4:	9a a1       	ldd	r25, Y+34	; 0x22
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	9a a3       	std	Y+34, r25	; 0x22
    18ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18bc:	89 a1       	ldd	r24, Y+33	; 0x21
    18be:	9a a1       	ldd	r25, Y+34	; 0x22
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	69 f7       	brne	.-38     	; 0x189e <main+0xbc>
    18c4:	14 c0       	rjmp	.+40     	; 0x18ee <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c6:	6b a1       	ldd	r22, Y+35	; 0x23
    18c8:	7c a1       	ldd	r23, Y+36	; 0x24
    18ca:	8d a1       	ldd	r24, Y+37	; 0x25
    18cc:	9e a1       	ldd	r25, Y+38	; 0x26
    18ce:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	9a a3       	std	Y+34, r25	; 0x22
    18d8:	89 a3       	std	Y+33, r24	; 0x21
    18da:	89 a1       	ldd	r24, Y+33	; 0x21
    18dc:	9a a1       	ldd	r25, Y+34	; 0x22
    18de:	9e 8f       	std	Y+30, r25	; 0x1e
    18e0:	8d 8f       	std	Y+29, r24	; 0x1d
    18e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	f1 f7       	brne	.-4      	; 0x18e6 <main+0x104>
    18ea:	9e 8f       	std	Y+30, r25	; 0x1e
    18ec:	8d 8f       	std	Y+29, r24	; 0x1d
 _delay_ms(150); 

 lcd_wr_command (0xC0);           // move cursor at start second row
    18ee:	80 ec       	ldi	r24, 0xC0	; 192
    18f0:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
 lcd_string(second_row);          // display message on 2nd row
    18f4:	81 e1       	ldi	r24, 0x11	; 17
    18f6:	92 e0       	ldi	r25, 0x02	; 2
    18f8:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	a6 e1       	ldi	r26, 0x16	; 22
    1902:	b3 e4       	ldi	r27, 0x43	; 67
    1904:	89 8f       	std	Y+25, r24	; 0x19
    1906:	9a 8f       	std	Y+26, r25	; 0x1a
    1908:	ab 8f       	std	Y+27, r26	; 0x1b
    190a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190c:	69 8d       	ldd	r22, Y+25	; 0x19
    190e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1910:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1912:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1914:	26 e6       	ldi	r18, 0x66	; 102
    1916:	36 e6       	ldi	r19, 0x66	; 102
    1918:	46 e6       	ldi	r20, 0x66	; 102
    191a:	55 e4       	ldi	r21, 0x45	; 69
    191c:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	8d 8b       	std	Y+21, r24	; 0x15
    1926:	9e 8b       	std	Y+22, r25	; 0x16
    1928:	af 8b       	std	Y+23, r26	; 0x17
    192a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    192c:	6d 89       	ldd	r22, Y+21	; 0x15
    192e:	7e 89       	ldd	r23, Y+22	; 0x16
    1930:	8f 89       	ldd	r24, Y+23	; 0x17
    1932:	98 8d       	ldd	r25, Y+24	; 0x18
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e8       	ldi	r20, 0x80	; 128
    193a:	5f e3       	ldi	r21, 0x3F	; 63
    193c:	0e 94 9b 11 	call	0x2336	; 0x2336 <__ltsf2>
    1940:	88 23       	and	r24, r24
    1942:	2c f4       	brge	.+10     	; 0x194e <main+0x16c>
		__ticks = 1;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	9c 8b       	std	Y+20, r25	; 0x14
    194a:	8b 8b       	std	Y+19, r24	; 0x13
    194c:	3f c0       	rjmp	.+126    	; 0x19cc <main+0x1ea>
	else if (__tmp > 65535)
    194e:	6d 89       	ldd	r22, Y+21	; 0x15
    1950:	7e 89       	ldd	r23, Y+22	; 0x16
    1952:	8f 89       	ldd	r24, Y+23	; 0x17
    1954:	98 8d       	ldd	r25, Y+24	; 0x18
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	3f ef       	ldi	r19, 0xFF	; 255
    195a:	4f e7       	ldi	r20, 0x7F	; 127
    195c:	57 e4       	ldi	r21, 0x47	; 71
    195e:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gtsf2>
    1962:	18 16       	cp	r1, r24
    1964:	4c f5       	brge	.+82     	; 0x19b8 <main+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1966:	69 8d       	ldd	r22, Y+25	; 0x19
    1968:	7a 8d       	ldd	r23, Y+26	; 0x1a
    196a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    196c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e2       	ldi	r20, 0x20	; 32
    1974:	51 e4       	ldi	r21, 0x41	; 65
    1976:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	bc 01       	movw	r22, r24
    1980:	cd 01       	movw	r24, r26
    1982:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	9c 8b       	std	Y+20, r25	; 0x14
    198c:	8b 8b       	std	Y+19, r24	; 0x13
    198e:	0f c0       	rjmp	.+30     	; 0x19ae <main+0x1cc>
    1990:	80 e7       	ldi	r24, 0x70	; 112
    1992:	91 e0       	ldi	r25, 0x01	; 1
    1994:	9a 8b       	std	Y+18, r25	; 0x12
    1996:	89 8b       	std	Y+17, r24	; 0x11
    1998:	89 89       	ldd	r24, Y+17	; 0x11
    199a:	9a 89       	ldd	r25, Y+18	; 0x12
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <main+0x1ba>
    19a0:	9a 8b       	std	Y+18, r25	; 0x12
    19a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a4:	8b 89       	ldd	r24, Y+19	; 0x13
    19a6:	9c 89       	ldd	r25, Y+20	; 0x14
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	9c 8b       	std	Y+20, r25	; 0x14
    19ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ae:	8b 89       	ldd	r24, Y+19	; 0x13
    19b0:	9c 89       	ldd	r25, Y+20	; 0x14
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	69 f7       	brne	.-38     	; 0x1990 <main+0x1ae>
    19b6:	14 c0       	rjmp	.+40     	; 0x19e0 <main+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b8:	6d 89       	ldd	r22, Y+21	; 0x15
    19ba:	7e 89       	ldd	r23, Y+22	; 0x16
    19bc:	8f 89       	ldd	r24, Y+23	; 0x17
    19be:	98 8d       	ldd	r25, Y+24	; 0x18
    19c0:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	9c 8b       	std	Y+20, r25	; 0x14
    19ca:	8b 8b       	std	Y+19, r24	; 0x13
    19cc:	8b 89       	ldd	r24, Y+19	; 0x13
    19ce:	9c 89       	ldd	r25, Y+20	; 0x14
    19d0:	98 8b       	std	Y+16, r25	; 0x10
    19d2:	8f 87       	std	Y+15, r24	; 0x0f
    19d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d6:	98 89       	ldd	r25, Y+16	; 0x10
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <main+0x1f6>
    19dc:	98 8b       	std	Y+16, r25	; 0x10
    19de:	8f 87       	std	Y+15, r24	; 0x0f
 _delay_ms(150); 
	
 while(1)
  {
   ultrasonic_trigger();            // call ultrasonic triggering after enery 150msec  
    19e0:	0e 94 05 0b 	call	0x160a	; 0x160a <ultrasonic_trigger>
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	a6 e1       	ldi	r26, 0x16	; 22
    19ea:	b3 e4       	ldi	r27, 0x43	; 67
    19ec:	8b 87       	std	Y+11, r24	; 0x0b
    19ee:	9c 87       	std	Y+12, r25	; 0x0c
    19f0:	ad 87       	std	Y+13, r26	; 0x0d
    19f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    19fc:	26 e6       	ldi	r18, 0x66	; 102
    19fe:	36 e6       	ldi	r19, 0x66	; 102
    1a00:	46 e6       	ldi	r20, 0x66	; 102
    1a02:	55 e4       	ldi	r21, 0x45	; 69
    1a04:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	8f 83       	std	Y+7, r24	; 0x07
    1a0e:	98 87       	std	Y+8, r25	; 0x08
    1a10:	a9 87       	std	Y+9, r26	; 0x09
    1a12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a14:	6f 81       	ldd	r22, Y+7	; 0x07
    1a16:	78 85       	ldd	r23, Y+8	; 0x08
    1a18:	89 85       	ldd	r24, Y+9	; 0x09
    1a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e8       	ldi	r20, 0x80	; 128
    1a22:	5f e3       	ldi	r21, 0x3F	; 63
    1a24:	0e 94 9b 11 	call	0x2336	; 0x2336 <__ltsf2>
    1a28:	88 23       	and	r24, r24
    1a2a:	2c f4       	brge	.+10     	; 0x1a36 <main+0x254>
		__ticks = 1;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	8d 83       	std	Y+5, r24	; 0x05
    1a34:	3f c0       	rjmp	.+126    	; 0x1ab4 <main+0x2d2>
	else if (__tmp > 65535)
    1a36:	6f 81       	ldd	r22, Y+7	; 0x07
    1a38:	78 85       	ldd	r23, Y+8	; 0x08
    1a3a:	89 85       	ldd	r24, Y+9	; 0x09
    1a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	3f ef       	ldi	r19, 0xFF	; 255
    1a42:	4f e7       	ldi	r20, 0x7F	; 127
    1a44:	57 e4       	ldi	r21, 0x47	; 71
    1a46:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gtsf2>
    1a4a:	18 16       	cp	r1, r24
    1a4c:	4c f5       	brge	.+82     	; 0x1aa0 <main+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e2       	ldi	r20, 0x20	; 32
    1a5c:	51 e4       	ldi	r21, 0x41	; 65
    1a5e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	9e 83       	std	Y+6, r25	; 0x06
    1a74:	8d 83       	std	Y+5, r24	; 0x05
    1a76:	0f c0       	rjmp	.+30     	; 0x1a96 <main+0x2b4>
    1a78:	80 e7       	ldi	r24, 0x70	; 112
    1a7a:	91 e0       	ldi	r25, 0x01	; 1
    1a7c:	9c 83       	std	Y+4, r25	; 0x04
    1a7e:	8b 83       	std	Y+3, r24	; 0x03
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	9c 81       	ldd	r25, Y+4	; 0x04
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <main+0x2a2>
    1a88:	9c 83       	std	Y+4, r25	; 0x04
    1a8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	9e 83       	std	Y+6, r25	; 0x06
    1a94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a96:	8d 81       	ldd	r24, Y+5	; 0x05
    1a98:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	69 f7       	brne	.-38     	; 0x1a78 <main+0x296>
    1a9e:	14 c0       	rjmp	.+40     	; 0x1ac8 <main+0x2e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa0:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa2:	78 85       	ldd	r23, Y+8	; 0x08
    1aa4:	89 85       	ldd	r24, Y+9	; 0x09
    1aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa8:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	9e 83       	std	Y+6, r25	; 0x06
    1ab2:	8d 83       	std	Y+5, r24	; 0x05
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <main+0x2de>
    1ac4:	9a 83       	std	Y+2, r25	; 0x02
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(150); 

   ADC_Value = ADC_Conversion(15);
    1ac8:	8f e0       	ldi	r24, 0x0F	; 15
    1aca:	0e 94 88 0a 	call	0x1510	; 0x1510 <ADC_Conversion>
    1ace:	90 93 2b 03 	sts	0x032B, r25
    1ad2:	80 93 2a 03 	sts	0x032A, r24
 
   distance_in_cm = ADC_Value * 1.268;  // where, 5V/1024 = 0.00488/step & 9.85mV/2.54cm = 0.00385mV/cm
    1ad6:	80 91 2a 03 	lds	r24, 0x032A
    1ada:	90 91 2b 03 	lds	r25, 0x032B
    1ade:	cc 01       	movw	r24, r24
    1ae0:	a0 e0       	ldi	r26, 0x00	; 0
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	bc 01       	movw	r22, r24
    1ae6:	cd 01       	movw	r24, r26
    1ae8:	0e 94 1f 12 	call	0x243e	; 0x243e <__floatunsisf>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	bc 01       	movw	r22, r24
    1af2:	cd 01       	movw	r24, r26
    1af4:	23 ed       	ldi	r18, 0xD3	; 211
    1af6:	3d e4       	ldi	r19, 0x4D	; 77
    1af8:	42 ea       	ldi	r20, 0xA2	; 162
    1afa:	5f e3       	ldi	r21, 0x3F	; 63
    1afc:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	8f a7       	std	Y+47, r24	; 0x2f
    1b06:	98 ab       	std	Y+48, r25	; 0x30
    1b08:	a9 ab       	std	Y+49, r26	; 0x31
    1b0a:	ba ab       	std	Y+50, r27	; 0x32
                                        // for distance in cm, we get 0.00488/0.00385 = 1.267 as const multiplier   

   distance_in_cm_int = floor(distance_in_cm);        // seperate integer part from float value
    1b0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b10:	a9 a9       	ldd	r26, Y+49	; 0x31
    1b12:	ba a9       	ldd	r27, Y+50	; 0x32
    1b14:	bc 01       	movw	r22, r24
    1b16:	cd 01       	movw	r24, r26
    1b18:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <floor>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	bc 01       	movw	r22, r24
    1b22:	cd 01       	movw	r24, r26
    1b24:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	9e a7       	std	Y+46, r25	; 0x2e
    1b2e:	8d a7       	std	Y+45, r24	; 0x2d
   distance_in_cm_fraction = (distance_in_cm * 100);  // seperate fractional part from float value
    1b30:	6f a5       	ldd	r22, Y+47	; 0x2f
    1b32:	78 a9       	ldd	r23, Y+48	; 0x30
    1b34:	89 a9       	ldd	r24, Y+49	; 0x31
    1b36:	9a a9       	ldd	r25, Y+50	; 0x32
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	48 ec       	ldi	r20, 0xC8	; 200
    1b3e:	52 e4       	ldi	r21, 0x42	; 66
    1b40:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	bc 01       	movw	r22, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	9c a7       	std	Y+44, r25	; 0x2c
    1b56:	8b a7       	std	Y+43, r24	; 0x2b

   lcd_print(2, 7, distance_in_cm_int, 3);            // print integer part on LCD
    1b58:	2d a5       	ldd	r18, Y+45	; 0x2d
    1b5a:	3e a5       	ldd	r19, Y+46	; 0x2e
    1b5c:	82 e0       	ldi	r24, 0x02	; 2
    1b5e:	67 e0       	ldi	r22, 0x07	; 7
    1b60:	a9 01       	movw	r20, r18
    1b62:	23 e0       	ldi	r18, 0x03	; 3
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
   lcd_print(2, 11, distance_in_cm_fraction, 2);       // print fractional part on LCD
    1b6a:	2b a5       	ldd	r18, Y+43	; 0x2b
    1b6c:	3c a5       	ldd	r19, Y+44	; 0x2c
    1b6e:	82 e0       	ldi	r24, 0x02	; 2
    1b70:	6b e0       	ldi	r22, 0x0B	; 11
    1b72:	a9 01       	movw	r20, r18
    1b74:	22 e0       	ldi	r18, 0x02	; 2
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
    1b7c:	31 cf       	rjmp	.-414    	; 0x19e0 <main+0x1fe>

00001b7e <__fixunssfsi>:
    1b7e:	ef 92       	push	r14
    1b80:	ff 92       	push	r15
    1b82:	0f 93       	push	r16
    1b84:	1f 93       	push	r17
    1b86:	7b 01       	movw	r14, r22
    1b88:	8c 01       	movw	r16, r24
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e0       	ldi	r20, 0x00	; 0
    1b90:	5f e4       	ldi	r21, 0x4F	; 79
    1b92:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__gesf2>
    1b96:	88 23       	and	r24, r24
    1b98:	8c f0       	brlt	.+34     	; 0x1bbc <__fixunssfsi+0x3e>
    1b9a:	c8 01       	movw	r24, r16
    1b9c:	b7 01       	movw	r22, r14
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e0       	ldi	r20, 0x00	; 0
    1ba4:	5f e4       	ldi	r21, 0x4F	; 79
    1ba6:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <__subsf3>
    1baa:	0e 94 cb 11 	call	0x2396	; 0x2396 <__fixsfsi>
    1bae:	9b 01       	movw	r18, r22
    1bb0:	ac 01       	movw	r20, r24
    1bb2:	20 50       	subi	r18, 0x00	; 0
    1bb4:	30 40       	sbci	r19, 0x00	; 0
    1bb6:	40 40       	sbci	r20, 0x00	; 0
    1bb8:	50 48       	sbci	r21, 0x80	; 128
    1bba:	06 c0       	rjmp	.+12     	; 0x1bc8 <__fixunssfsi+0x4a>
    1bbc:	c8 01       	movw	r24, r16
    1bbe:	b7 01       	movw	r22, r14
    1bc0:	0e 94 cb 11 	call	0x2396	; 0x2396 <__fixsfsi>
    1bc4:	9b 01       	movw	r18, r22
    1bc6:	ac 01       	movw	r20, r24
    1bc8:	b9 01       	movw	r22, r18
    1bca:	ca 01       	movw	r24, r20
    1bcc:	1f 91       	pop	r17
    1bce:	0f 91       	pop	r16
    1bd0:	ff 90       	pop	r15
    1bd2:	ef 90       	pop	r14
    1bd4:	08 95       	ret

00001bd6 <_fpadd_parts>:
    1bd6:	a0 e0       	ldi	r26, 0x00	; 0
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e1 ef       	ldi	r30, 0xF1	; 241
    1bdc:	fd e0       	ldi	r31, 0x0D	; 13
    1bde:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__prologue_saves__>
    1be2:	dc 01       	movw	r26, r24
    1be4:	2b 01       	movw	r4, r22
    1be6:	fa 01       	movw	r30, r20
    1be8:	9c 91       	ld	r25, X
    1bea:	92 30       	cpi	r25, 0x02	; 2
    1bec:	08 f4       	brcc	.+2      	; 0x1bf0 <_fpadd_parts+0x1a>
    1bee:	39 c1       	rjmp	.+626    	; 0x1e62 <_fpadd_parts+0x28c>
    1bf0:	eb 01       	movw	r28, r22
    1bf2:	88 81       	ld	r24, Y
    1bf4:	82 30       	cpi	r24, 0x02	; 2
    1bf6:	08 f4       	brcc	.+2      	; 0x1bfa <_fpadd_parts+0x24>
    1bf8:	33 c1       	rjmp	.+614    	; 0x1e60 <_fpadd_parts+0x28a>
    1bfa:	94 30       	cpi	r25, 0x04	; 4
    1bfc:	69 f4       	brne	.+26     	; 0x1c18 <_fpadd_parts+0x42>
    1bfe:	84 30       	cpi	r24, 0x04	; 4
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <_fpadd_parts+0x2e>
    1c02:	2f c1       	rjmp	.+606    	; 0x1e62 <_fpadd_parts+0x28c>
    1c04:	11 96       	adiw	r26, 0x01	; 1
    1c06:	9c 91       	ld	r25, X
    1c08:	11 97       	sbiw	r26, 0x01	; 1
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	98 17       	cp	r25, r24
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <_fpadd_parts+0x3c>
    1c10:	28 c1       	rjmp	.+592    	; 0x1e62 <_fpadd_parts+0x28c>
    1c12:	a2 e2       	ldi	r26, 0x22	; 34
    1c14:	b2 e0       	ldi	r27, 0x02	; 2
    1c16:	25 c1       	rjmp	.+586    	; 0x1e62 <_fpadd_parts+0x28c>
    1c18:	84 30       	cpi	r24, 0x04	; 4
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <_fpadd_parts+0x48>
    1c1c:	21 c1       	rjmp	.+578    	; 0x1e60 <_fpadd_parts+0x28a>
    1c1e:	82 30       	cpi	r24, 0x02	; 2
    1c20:	a9 f4       	brne	.+42     	; 0x1c4c <_fpadd_parts+0x76>
    1c22:	92 30       	cpi	r25, 0x02	; 2
    1c24:	09 f0       	breq	.+2      	; 0x1c28 <_fpadd_parts+0x52>
    1c26:	1d c1       	rjmp	.+570    	; 0x1e62 <_fpadd_parts+0x28c>
    1c28:	9a 01       	movw	r18, r20
    1c2a:	ad 01       	movw	r20, r26
    1c2c:	88 e0       	ldi	r24, 0x08	; 8
    1c2e:	ea 01       	movw	r28, r20
    1c30:	09 90       	ld	r0, Y+
    1c32:	ae 01       	movw	r20, r28
    1c34:	e9 01       	movw	r28, r18
    1c36:	09 92       	st	Y+, r0
    1c38:	9e 01       	movw	r18, r28
    1c3a:	81 50       	subi	r24, 0x01	; 1
    1c3c:	c1 f7       	brne	.-16     	; 0x1c2e <_fpadd_parts+0x58>
    1c3e:	e2 01       	movw	r28, r4
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	11 96       	adiw	r26, 0x01	; 1
    1c44:	9c 91       	ld	r25, X
    1c46:	89 23       	and	r24, r25
    1c48:	81 83       	std	Z+1, r24	; 0x01
    1c4a:	08 c1       	rjmp	.+528    	; 0x1e5c <_fpadd_parts+0x286>
    1c4c:	92 30       	cpi	r25, 0x02	; 2
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <_fpadd_parts+0x7c>
    1c50:	07 c1       	rjmp	.+526    	; 0x1e60 <_fpadd_parts+0x28a>
    1c52:	12 96       	adiw	r26, 0x02	; 2
    1c54:	2d 90       	ld	r2, X+
    1c56:	3c 90       	ld	r3, X
    1c58:	13 97       	sbiw	r26, 0x03	; 3
    1c5a:	eb 01       	movw	r28, r22
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c60:	14 96       	adiw	r26, 0x04	; 4
    1c62:	ad 90       	ld	r10, X+
    1c64:	bd 90       	ld	r11, X+
    1c66:	cd 90       	ld	r12, X+
    1c68:	dc 90       	ld	r13, X
    1c6a:	17 97       	sbiw	r26, 0x07	; 7
    1c6c:	ec 80       	ldd	r14, Y+4	; 0x04
    1c6e:	fd 80       	ldd	r15, Y+5	; 0x05
    1c70:	0e 81       	ldd	r16, Y+6	; 0x06
    1c72:	1f 81       	ldd	r17, Y+7	; 0x07
    1c74:	91 01       	movw	r18, r2
    1c76:	28 1b       	sub	r18, r24
    1c78:	39 0b       	sbc	r19, r25
    1c7a:	b9 01       	movw	r22, r18
    1c7c:	37 ff       	sbrs	r19, 7
    1c7e:	04 c0       	rjmp	.+8      	; 0x1c88 <_fpadd_parts+0xb2>
    1c80:	66 27       	eor	r22, r22
    1c82:	77 27       	eor	r23, r23
    1c84:	62 1b       	sub	r22, r18
    1c86:	73 0b       	sbc	r23, r19
    1c88:	60 32       	cpi	r22, 0x20	; 32
    1c8a:	71 05       	cpc	r23, r1
    1c8c:	0c f0       	brlt	.+2      	; 0x1c90 <_fpadd_parts+0xba>
    1c8e:	61 c0       	rjmp	.+194    	; 0x1d52 <_fpadd_parts+0x17c>
    1c90:	12 16       	cp	r1, r18
    1c92:	13 06       	cpc	r1, r19
    1c94:	6c f5       	brge	.+90     	; 0x1cf0 <_fpadd_parts+0x11a>
    1c96:	37 01       	movw	r6, r14
    1c98:	48 01       	movw	r8, r16
    1c9a:	06 2e       	mov	r0, r22
    1c9c:	04 c0       	rjmp	.+8      	; 0x1ca6 <_fpadd_parts+0xd0>
    1c9e:	96 94       	lsr	r9
    1ca0:	87 94       	ror	r8
    1ca2:	77 94       	ror	r7
    1ca4:	67 94       	ror	r6
    1ca6:	0a 94       	dec	r0
    1ca8:	d2 f7       	brpl	.-12     	; 0x1c9e <_fpadd_parts+0xc8>
    1caa:	21 e0       	ldi	r18, 0x01	; 1
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	50 e0       	ldi	r21, 0x00	; 0
    1cb2:	04 c0       	rjmp	.+8      	; 0x1cbc <_fpadd_parts+0xe6>
    1cb4:	22 0f       	add	r18, r18
    1cb6:	33 1f       	adc	r19, r19
    1cb8:	44 1f       	adc	r20, r20
    1cba:	55 1f       	adc	r21, r21
    1cbc:	6a 95       	dec	r22
    1cbe:	d2 f7       	brpl	.-12     	; 0x1cb4 <_fpadd_parts+0xde>
    1cc0:	21 50       	subi	r18, 0x01	; 1
    1cc2:	30 40       	sbci	r19, 0x00	; 0
    1cc4:	40 40       	sbci	r20, 0x00	; 0
    1cc6:	50 40       	sbci	r21, 0x00	; 0
    1cc8:	2e 21       	and	r18, r14
    1cca:	3f 21       	and	r19, r15
    1ccc:	40 23       	and	r20, r16
    1cce:	51 23       	and	r21, r17
    1cd0:	21 15       	cp	r18, r1
    1cd2:	31 05       	cpc	r19, r1
    1cd4:	41 05       	cpc	r20, r1
    1cd6:	51 05       	cpc	r21, r1
    1cd8:	21 f0       	breq	.+8      	; 0x1ce2 <_fpadd_parts+0x10c>
    1cda:	21 e0       	ldi	r18, 0x01	; 1
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e0       	ldi	r20, 0x00	; 0
    1ce0:	50 e0       	ldi	r21, 0x00	; 0
    1ce2:	79 01       	movw	r14, r18
    1ce4:	8a 01       	movw	r16, r20
    1ce6:	e6 28       	or	r14, r6
    1ce8:	f7 28       	or	r15, r7
    1cea:	08 29       	or	r16, r8
    1cec:	19 29       	or	r17, r9
    1cee:	3c c0       	rjmp	.+120    	; 0x1d68 <_fpadd_parts+0x192>
    1cf0:	23 2b       	or	r18, r19
    1cf2:	d1 f1       	breq	.+116    	; 0x1d68 <_fpadd_parts+0x192>
    1cf4:	26 0e       	add	r2, r22
    1cf6:	37 1e       	adc	r3, r23
    1cf8:	35 01       	movw	r6, r10
    1cfa:	46 01       	movw	r8, r12
    1cfc:	06 2e       	mov	r0, r22
    1cfe:	04 c0       	rjmp	.+8      	; 0x1d08 <_fpadd_parts+0x132>
    1d00:	96 94       	lsr	r9
    1d02:	87 94       	ror	r8
    1d04:	77 94       	ror	r7
    1d06:	67 94       	ror	r6
    1d08:	0a 94       	dec	r0
    1d0a:	d2 f7       	brpl	.-12     	; 0x1d00 <_fpadd_parts+0x12a>
    1d0c:	21 e0       	ldi	r18, 0x01	; 1
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	50 e0       	ldi	r21, 0x00	; 0
    1d14:	04 c0       	rjmp	.+8      	; 0x1d1e <_fpadd_parts+0x148>
    1d16:	22 0f       	add	r18, r18
    1d18:	33 1f       	adc	r19, r19
    1d1a:	44 1f       	adc	r20, r20
    1d1c:	55 1f       	adc	r21, r21
    1d1e:	6a 95       	dec	r22
    1d20:	d2 f7       	brpl	.-12     	; 0x1d16 <_fpadd_parts+0x140>
    1d22:	21 50       	subi	r18, 0x01	; 1
    1d24:	30 40       	sbci	r19, 0x00	; 0
    1d26:	40 40       	sbci	r20, 0x00	; 0
    1d28:	50 40       	sbci	r21, 0x00	; 0
    1d2a:	2a 21       	and	r18, r10
    1d2c:	3b 21       	and	r19, r11
    1d2e:	4c 21       	and	r20, r12
    1d30:	5d 21       	and	r21, r13
    1d32:	21 15       	cp	r18, r1
    1d34:	31 05       	cpc	r19, r1
    1d36:	41 05       	cpc	r20, r1
    1d38:	51 05       	cpc	r21, r1
    1d3a:	21 f0       	breq	.+8      	; 0x1d44 <_fpadd_parts+0x16e>
    1d3c:	21 e0       	ldi	r18, 0x01	; 1
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	50 e0       	ldi	r21, 0x00	; 0
    1d44:	59 01       	movw	r10, r18
    1d46:	6a 01       	movw	r12, r20
    1d48:	a6 28       	or	r10, r6
    1d4a:	b7 28       	or	r11, r7
    1d4c:	c8 28       	or	r12, r8
    1d4e:	d9 28       	or	r13, r9
    1d50:	0b c0       	rjmp	.+22     	; 0x1d68 <_fpadd_parts+0x192>
    1d52:	82 15       	cp	r24, r2
    1d54:	93 05       	cpc	r25, r3
    1d56:	2c f0       	brlt	.+10     	; 0x1d62 <_fpadd_parts+0x18c>
    1d58:	1c 01       	movw	r2, r24
    1d5a:	aa 24       	eor	r10, r10
    1d5c:	bb 24       	eor	r11, r11
    1d5e:	65 01       	movw	r12, r10
    1d60:	03 c0       	rjmp	.+6      	; 0x1d68 <_fpadd_parts+0x192>
    1d62:	ee 24       	eor	r14, r14
    1d64:	ff 24       	eor	r15, r15
    1d66:	87 01       	movw	r16, r14
    1d68:	11 96       	adiw	r26, 0x01	; 1
    1d6a:	9c 91       	ld	r25, X
    1d6c:	d2 01       	movw	r26, r4
    1d6e:	11 96       	adiw	r26, 0x01	; 1
    1d70:	8c 91       	ld	r24, X
    1d72:	98 17       	cp	r25, r24
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <_fpadd_parts+0x1a2>
    1d76:	45 c0       	rjmp	.+138    	; 0x1e02 <_fpadd_parts+0x22c>
    1d78:	99 23       	and	r25, r25
    1d7a:	39 f0       	breq	.+14     	; 0x1d8a <_fpadd_parts+0x1b4>
    1d7c:	a8 01       	movw	r20, r16
    1d7e:	97 01       	movw	r18, r14
    1d80:	2a 19       	sub	r18, r10
    1d82:	3b 09       	sbc	r19, r11
    1d84:	4c 09       	sbc	r20, r12
    1d86:	5d 09       	sbc	r21, r13
    1d88:	06 c0       	rjmp	.+12     	; 0x1d96 <_fpadd_parts+0x1c0>
    1d8a:	a6 01       	movw	r20, r12
    1d8c:	95 01       	movw	r18, r10
    1d8e:	2e 19       	sub	r18, r14
    1d90:	3f 09       	sbc	r19, r15
    1d92:	40 0b       	sbc	r20, r16
    1d94:	51 0b       	sbc	r21, r17
    1d96:	57 fd       	sbrc	r21, 7
    1d98:	08 c0       	rjmp	.+16     	; 0x1daa <_fpadd_parts+0x1d4>
    1d9a:	11 82       	std	Z+1, r1	; 0x01
    1d9c:	33 82       	std	Z+3, r3	; 0x03
    1d9e:	22 82       	std	Z+2, r2	; 0x02
    1da0:	24 83       	std	Z+4, r18	; 0x04
    1da2:	35 83       	std	Z+5, r19	; 0x05
    1da4:	46 83       	std	Z+6, r20	; 0x06
    1da6:	57 83       	std	Z+7, r21	; 0x07
    1da8:	1d c0       	rjmp	.+58     	; 0x1de4 <_fpadd_parts+0x20e>
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	81 83       	std	Z+1, r24	; 0x01
    1dae:	33 82       	std	Z+3, r3	; 0x03
    1db0:	22 82       	std	Z+2, r2	; 0x02
    1db2:	88 27       	eor	r24, r24
    1db4:	99 27       	eor	r25, r25
    1db6:	dc 01       	movw	r26, r24
    1db8:	82 1b       	sub	r24, r18
    1dba:	93 0b       	sbc	r25, r19
    1dbc:	a4 0b       	sbc	r26, r20
    1dbe:	b5 0b       	sbc	r27, r21
    1dc0:	84 83       	std	Z+4, r24	; 0x04
    1dc2:	95 83       	std	Z+5, r25	; 0x05
    1dc4:	a6 83       	std	Z+6, r26	; 0x06
    1dc6:	b7 83       	std	Z+7, r27	; 0x07
    1dc8:	0d c0       	rjmp	.+26     	; 0x1de4 <_fpadd_parts+0x20e>
    1dca:	22 0f       	add	r18, r18
    1dcc:	33 1f       	adc	r19, r19
    1dce:	44 1f       	adc	r20, r20
    1dd0:	55 1f       	adc	r21, r21
    1dd2:	24 83       	std	Z+4, r18	; 0x04
    1dd4:	35 83       	std	Z+5, r19	; 0x05
    1dd6:	46 83       	std	Z+6, r20	; 0x06
    1dd8:	57 83       	std	Z+7, r21	; 0x07
    1dda:	82 81       	ldd	r24, Z+2	; 0x02
    1ddc:	93 81       	ldd	r25, Z+3	; 0x03
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	93 83       	std	Z+3, r25	; 0x03
    1de2:	82 83       	std	Z+2, r24	; 0x02
    1de4:	24 81       	ldd	r18, Z+4	; 0x04
    1de6:	35 81       	ldd	r19, Z+5	; 0x05
    1de8:	46 81       	ldd	r20, Z+6	; 0x06
    1dea:	57 81       	ldd	r21, Z+7	; 0x07
    1dec:	da 01       	movw	r26, r20
    1dee:	c9 01       	movw	r24, r18
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	a1 09       	sbc	r26, r1
    1df4:	b1 09       	sbc	r27, r1
    1df6:	8f 5f       	subi	r24, 0xFF	; 255
    1df8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dfa:	af 4f       	sbci	r26, 0xFF	; 255
    1dfc:	bf 43       	sbci	r27, 0x3F	; 63
    1dfe:	28 f3       	brcs	.-54     	; 0x1dca <_fpadd_parts+0x1f4>
    1e00:	0b c0       	rjmp	.+22     	; 0x1e18 <_fpadd_parts+0x242>
    1e02:	91 83       	std	Z+1, r25	; 0x01
    1e04:	33 82       	std	Z+3, r3	; 0x03
    1e06:	22 82       	std	Z+2, r2	; 0x02
    1e08:	ea 0c       	add	r14, r10
    1e0a:	fb 1c       	adc	r15, r11
    1e0c:	0c 1d       	adc	r16, r12
    1e0e:	1d 1d       	adc	r17, r13
    1e10:	e4 82       	std	Z+4, r14	; 0x04
    1e12:	f5 82       	std	Z+5, r15	; 0x05
    1e14:	06 83       	std	Z+6, r16	; 0x06
    1e16:	17 83       	std	Z+7, r17	; 0x07
    1e18:	83 e0       	ldi	r24, 0x03	; 3
    1e1a:	80 83       	st	Z, r24
    1e1c:	24 81       	ldd	r18, Z+4	; 0x04
    1e1e:	35 81       	ldd	r19, Z+5	; 0x05
    1e20:	46 81       	ldd	r20, Z+6	; 0x06
    1e22:	57 81       	ldd	r21, Z+7	; 0x07
    1e24:	57 ff       	sbrs	r21, 7
    1e26:	1a c0       	rjmp	.+52     	; 0x1e5c <_fpadd_parts+0x286>
    1e28:	c9 01       	movw	r24, r18
    1e2a:	aa 27       	eor	r26, r26
    1e2c:	97 fd       	sbrc	r25, 7
    1e2e:	a0 95       	com	r26
    1e30:	ba 2f       	mov	r27, r26
    1e32:	81 70       	andi	r24, 0x01	; 1
    1e34:	90 70       	andi	r25, 0x00	; 0
    1e36:	a0 70       	andi	r26, 0x00	; 0
    1e38:	b0 70       	andi	r27, 0x00	; 0
    1e3a:	56 95       	lsr	r21
    1e3c:	47 95       	ror	r20
    1e3e:	37 95       	ror	r19
    1e40:	27 95       	ror	r18
    1e42:	82 2b       	or	r24, r18
    1e44:	93 2b       	or	r25, r19
    1e46:	a4 2b       	or	r26, r20
    1e48:	b5 2b       	or	r27, r21
    1e4a:	84 83       	std	Z+4, r24	; 0x04
    1e4c:	95 83       	std	Z+5, r25	; 0x05
    1e4e:	a6 83       	std	Z+6, r26	; 0x06
    1e50:	b7 83       	std	Z+7, r27	; 0x07
    1e52:	82 81       	ldd	r24, Z+2	; 0x02
    1e54:	93 81       	ldd	r25, Z+3	; 0x03
    1e56:	01 96       	adiw	r24, 0x01	; 1
    1e58:	93 83       	std	Z+3, r25	; 0x03
    1e5a:	82 83       	std	Z+2, r24	; 0x02
    1e5c:	df 01       	movw	r26, r30
    1e5e:	01 c0       	rjmp	.+2      	; 0x1e62 <_fpadd_parts+0x28c>
    1e60:	d2 01       	movw	r26, r4
    1e62:	cd 01       	movw	r24, r26
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	e2 e1       	ldi	r30, 0x12	; 18
    1e6a:	0c 94 bd 14 	jmp	0x297a	; 0x297a <__epilogue_restores__>

00001e6e <__subsf3>:
    1e6e:	a0 e2       	ldi	r26, 0x20	; 32
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	ed e3       	ldi	r30, 0x3D	; 61
    1e74:	ff e0       	ldi	r31, 0x0F	; 15
    1e76:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__prologue_saves__+0x18>
    1e7a:	69 83       	std	Y+1, r22	; 0x01
    1e7c:	7a 83       	std	Y+2, r23	; 0x02
    1e7e:	8b 83       	std	Y+3, r24	; 0x03
    1e80:	9c 83       	std	Y+4, r25	; 0x04
    1e82:	2d 83       	std	Y+5, r18	; 0x05
    1e84:	3e 83       	std	Y+6, r19	; 0x06
    1e86:	4f 83       	std	Y+7, r20	; 0x07
    1e88:	58 87       	std	Y+8, r21	; 0x08
    1e8a:	e9 e0       	ldi	r30, 0x09	; 9
    1e8c:	ee 2e       	mov	r14, r30
    1e8e:	f1 2c       	mov	r15, r1
    1e90:	ec 0e       	add	r14, r28
    1e92:	fd 1e       	adc	r15, r29
    1e94:	ce 01       	movw	r24, r28
    1e96:	01 96       	adiw	r24, 0x01	; 1
    1e98:	b7 01       	movw	r22, r14
    1e9a:	0e 94 bc 13 	call	0x2778	; 0x2778 <__unpack_f>
    1e9e:	8e 01       	movw	r16, r28
    1ea0:	0f 5e       	subi	r16, 0xEF	; 239
    1ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	05 96       	adiw	r24, 0x05	; 5
    1ea8:	b8 01       	movw	r22, r16
    1eaa:	0e 94 bc 13 	call	0x2778	; 0x2778 <__unpack_f>
    1eae:	8a 89       	ldd	r24, Y+18	; 0x12
    1eb0:	91 e0       	ldi	r25, 0x01	; 1
    1eb2:	89 27       	eor	r24, r25
    1eb4:	8a 8b       	std	Y+18, r24	; 0x12
    1eb6:	c7 01       	movw	r24, r14
    1eb8:	b8 01       	movw	r22, r16
    1eba:	ae 01       	movw	r20, r28
    1ebc:	47 5e       	subi	r20, 0xE7	; 231
    1ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec0:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <_fpadd_parts>
    1ec4:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__pack_f>
    1ec8:	a0 96       	adiw	r28, 0x20	; 32
    1eca:	e6 e0       	ldi	r30, 0x06	; 6
    1ecc:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <__epilogue_restores__+0x18>

00001ed0 <__addsf3>:
    1ed0:	a0 e2       	ldi	r26, 0x20	; 32
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	ee e6       	ldi	r30, 0x6E	; 110
    1ed6:	ff e0       	ldi	r31, 0x0F	; 15
    1ed8:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__prologue_saves__+0x18>
    1edc:	69 83       	std	Y+1, r22	; 0x01
    1ede:	7a 83       	std	Y+2, r23	; 0x02
    1ee0:	8b 83       	std	Y+3, r24	; 0x03
    1ee2:	9c 83       	std	Y+4, r25	; 0x04
    1ee4:	2d 83       	std	Y+5, r18	; 0x05
    1ee6:	3e 83       	std	Y+6, r19	; 0x06
    1ee8:	4f 83       	std	Y+7, r20	; 0x07
    1eea:	58 87       	std	Y+8, r21	; 0x08
    1eec:	f9 e0       	ldi	r31, 0x09	; 9
    1eee:	ef 2e       	mov	r14, r31
    1ef0:	f1 2c       	mov	r15, r1
    1ef2:	ec 0e       	add	r14, r28
    1ef4:	fd 1e       	adc	r15, r29
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	01 96       	adiw	r24, 0x01	; 1
    1efa:	b7 01       	movw	r22, r14
    1efc:	0e 94 bc 13 	call	0x2778	; 0x2778 <__unpack_f>
    1f00:	8e 01       	movw	r16, r28
    1f02:	0f 5e       	subi	r16, 0xEF	; 239
    1f04:	1f 4f       	sbci	r17, 0xFF	; 255
    1f06:	ce 01       	movw	r24, r28
    1f08:	05 96       	adiw	r24, 0x05	; 5
    1f0a:	b8 01       	movw	r22, r16
    1f0c:	0e 94 bc 13 	call	0x2778	; 0x2778 <__unpack_f>
    1f10:	c7 01       	movw	r24, r14
    1f12:	b8 01       	movw	r22, r16
    1f14:	ae 01       	movw	r20, r28
    1f16:	47 5e       	subi	r20, 0xE7	; 231
    1f18:	5f 4f       	sbci	r21, 0xFF	; 255
    1f1a:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <_fpadd_parts>
    1f1e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__pack_f>
    1f22:	a0 96       	adiw	r28, 0x20	; 32
    1f24:	e6 e0       	ldi	r30, 0x06	; 6
    1f26:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <__epilogue_restores__+0x18>

00001f2a <__mulsf3>:
    1f2a:	a0 e2       	ldi	r26, 0x20	; 32
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	eb e9       	ldi	r30, 0x9B	; 155
    1f30:	ff e0       	ldi	r31, 0x0F	; 15
    1f32:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__prologue_saves__>
    1f36:	69 83       	std	Y+1, r22	; 0x01
    1f38:	7a 83       	std	Y+2, r23	; 0x02
    1f3a:	8b 83       	std	Y+3, r24	; 0x03
    1f3c:	9c 83       	std	Y+4, r25	; 0x04
    1f3e:	2d 83       	std	Y+5, r18	; 0x05
    1f40:	3e 83       	std	Y+6, r19	; 0x06
    1f42:	4f 83       	std	Y+7, r20	; 0x07
    1f44:	58 87       	std	Y+8, r21	; 0x08
    1f46:	ce 01       	movw	r24, r28
    1f48:	01 96       	adiw	r24, 0x01	; 1
    1f4a:	be 01       	movw	r22, r28
    1f4c:	67 5f       	subi	r22, 0xF7	; 247
    1f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f50:	0e 94 bc 13 	call	0x2778	; 0x2778 <__unpack_f>
    1f54:	ce 01       	movw	r24, r28
    1f56:	05 96       	adiw	r24, 0x05	; 5
    1f58:	be 01       	movw	r22, r28
    1f5a:	6f 5e       	subi	r22, 0xEF	; 239
    1f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5e:	0e 94 bc 13 	call	0x2778	; 0x2778 <__unpack_f>
    1f62:	99 85       	ldd	r25, Y+9	; 0x09
    1f64:	92 30       	cpi	r25, 0x02	; 2
    1f66:	88 f0       	brcs	.+34     	; 0x1f8a <__mulsf3+0x60>
    1f68:	89 89       	ldd	r24, Y+17	; 0x11
    1f6a:	82 30       	cpi	r24, 0x02	; 2
    1f6c:	c8 f0       	brcs	.+50     	; 0x1fa0 <__mulsf3+0x76>
    1f6e:	94 30       	cpi	r25, 0x04	; 4
    1f70:	19 f4       	brne	.+6      	; 0x1f78 <__mulsf3+0x4e>
    1f72:	82 30       	cpi	r24, 0x02	; 2
    1f74:	51 f4       	brne	.+20     	; 0x1f8a <__mulsf3+0x60>
    1f76:	04 c0       	rjmp	.+8      	; 0x1f80 <__mulsf3+0x56>
    1f78:	84 30       	cpi	r24, 0x04	; 4
    1f7a:	29 f4       	brne	.+10     	; 0x1f86 <__mulsf3+0x5c>
    1f7c:	92 30       	cpi	r25, 0x02	; 2
    1f7e:	81 f4       	brne	.+32     	; 0x1fa0 <__mulsf3+0x76>
    1f80:	82 e2       	ldi	r24, 0x22	; 34
    1f82:	92 e0       	ldi	r25, 0x02	; 2
    1f84:	c6 c0       	rjmp	.+396    	; 0x2112 <__mulsf3+0x1e8>
    1f86:	92 30       	cpi	r25, 0x02	; 2
    1f88:	49 f4       	brne	.+18     	; 0x1f9c <__mulsf3+0x72>
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8e:	8a 89       	ldd	r24, Y+18	; 0x12
    1f90:	98 13       	cpse	r25, r24
    1f92:	21 e0       	ldi	r18, 0x01	; 1
    1f94:	2a 87       	std	Y+10, r18	; 0x0a
    1f96:	ce 01       	movw	r24, r28
    1f98:	09 96       	adiw	r24, 0x09	; 9
    1f9a:	bb c0       	rjmp	.+374    	; 0x2112 <__mulsf3+0x1e8>
    1f9c:	82 30       	cpi	r24, 0x02	; 2
    1f9e:	49 f4       	brne	.+18     	; 0x1fb2 <__mulsf3+0x88>
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa4:	8a 89       	ldd	r24, Y+18	; 0x12
    1fa6:	98 13       	cpse	r25, r24
    1fa8:	21 e0       	ldi	r18, 0x01	; 1
    1faa:	2a 8b       	std	Y+18, r18	; 0x12
    1fac:	ce 01       	movw	r24, r28
    1fae:	41 96       	adiw	r24, 0x11	; 17
    1fb0:	b0 c0       	rjmp	.+352    	; 0x2112 <__mulsf3+0x1e8>
    1fb2:	2d 84       	ldd	r2, Y+13	; 0x0d
    1fb4:	3e 84       	ldd	r3, Y+14	; 0x0e
    1fb6:	4f 84       	ldd	r4, Y+15	; 0x0f
    1fb8:	58 88       	ldd	r5, Y+16	; 0x10
    1fba:	6d 88       	ldd	r6, Y+21	; 0x15
    1fbc:	7e 88       	ldd	r7, Y+22	; 0x16
    1fbe:	8f 88       	ldd	r8, Y+23	; 0x17
    1fc0:	98 8c       	ldd	r9, Y+24	; 0x18
    1fc2:	ee 24       	eor	r14, r14
    1fc4:	ff 24       	eor	r15, r15
    1fc6:	87 01       	movw	r16, r14
    1fc8:	aa 24       	eor	r10, r10
    1fca:	bb 24       	eor	r11, r11
    1fcc:	65 01       	movw	r12, r10
    1fce:	40 e0       	ldi	r20, 0x00	; 0
    1fd0:	50 e0       	ldi	r21, 0x00	; 0
    1fd2:	60 e0       	ldi	r22, 0x00	; 0
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	e0 e0       	ldi	r30, 0x00	; 0
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	c1 01       	movw	r24, r2
    1fdc:	81 70       	andi	r24, 0x01	; 1
    1fde:	90 70       	andi	r25, 0x00	; 0
    1fe0:	89 2b       	or	r24, r25
    1fe2:	e9 f0       	breq	.+58     	; 0x201e <__mulsf3+0xf4>
    1fe4:	e6 0c       	add	r14, r6
    1fe6:	f7 1c       	adc	r15, r7
    1fe8:	08 1d       	adc	r16, r8
    1fea:	19 1d       	adc	r17, r9
    1fec:	9a 01       	movw	r18, r20
    1fee:	ab 01       	movw	r20, r22
    1ff0:	2a 0d       	add	r18, r10
    1ff2:	3b 1d       	adc	r19, r11
    1ff4:	4c 1d       	adc	r20, r12
    1ff6:	5d 1d       	adc	r21, r13
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	a0 e0       	ldi	r26, 0x00	; 0
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e6 14       	cp	r14, r6
    2002:	f7 04       	cpc	r15, r7
    2004:	08 05       	cpc	r16, r8
    2006:	19 05       	cpc	r17, r9
    2008:	20 f4       	brcc	.+8      	; 0x2012 <__mulsf3+0xe8>
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	a0 e0       	ldi	r26, 0x00	; 0
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	ba 01       	movw	r22, r20
    2014:	a9 01       	movw	r20, r18
    2016:	48 0f       	add	r20, r24
    2018:	59 1f       	adc	r21, r25
    201a:	6a 1f       	adc	r22, r26
    201c:	7b 1f       	adc	r23, r27
    201e:	aa 0c       	add	r10, r10
    2020:	bb 1c       	adc	r11, r11
    2022:	cc 1c       	adc	r12, r12
    2024:	dd 1c       	adc	r13, r13
    2026:	97 fe       	sbrs	r9, 7
    2028:	08 c0       	rjmp	.+16     	; 0x203a <__mulsf3+0x110>
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	a0 e0       	ldi	r26, 0x00	; 0
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	a8 2a       	or	r10, r24
    2034:	b9 2a       	or	r11, r25
    2036:	ca 2a       	or	r12, r26
    2038:	db 2a       	or	r13, r27
    203a:	31 96       	adiw	r30, 0x01	; 1
    203c:	e0 32       	cpi	r30, 0x20	; 32
    203e:	f1 05       	cpc	r31, r1
    2040:	49 f0       	breq	.+18     	; 0x2054 <__mulsf3+0x12a>
    2042:	66 0c       	add	r6, r6
    2044:	77 1c       	adc	r7, r7
    2046:	88 1c       	adc	r8, r8
    2048:	99 1c       	adc	r9, r9
    204a:	56 94       	lsr	r5
    204c:	47 94       	ror	r4
    204e:	37 94       	ror	r3
    2050:	27 94       	ror	r2
    2052:	c3 cf       	rjmp	.-122    	; 0x1fda <__mulsf3+0xb0>
    2054:	fa 85       	ldd	r31, Y+10	; 0x0a
    2056:	ea 89       	ldd	r30, Y+18	; 0x12
    2058:	2b 89       	ldd	r18, Y+19	; 0x13
    205a:	3c 89       	ldd	r19, Y+20	; 0x14
    205c:	8b 85       	ldd	r24, Y+11	; 0x0b
    205e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2060:	28 0f       	add	r18, r24
    2062:	39 1f       	adc	r19, r25
    2064:	2e 5f       	subi	r18, 0xFE	; 254
    2066:	3f 4f       	sbci	r19, 0xFF	; 255
    2068:	17 c0       	rjmp	.+46     	; 0x2098 <__mulsf3+0x16e>
    206a:	ca 01       	movw	r24, r20
    206c:	81 70       	andi	r24, 0x01	; 1
    206e:	90 70       	andi	r25, 0x00	; 0
    2070:	89 2b       	or	r24, r25
    2072:	61 f0       	breq	.+24     	; 0x208c <__mulsf3+0x162>
    2074:	16 95       	lsr	r17
    2076:	07 95       	ror	r16
    2078:	f7 94       	ror	r15
    207a:	e7 94       	ror	r14
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	a0 e0       	ldi	r26, 0x00	; 0
    2082:	b0 e8       	ldi	r27, 0x80	; 128
    2084:	e8 2a       	or	r14, r24
    2086:	f9 2a       	or	r15, r25
    2088:	0a 2b       	or	r16, r26
    208a:	1b 2b       	or	r17, r27
    208c:	76 95       	lsr	r23
    208e:	67 95       	ror	r22
    2090:	57 95       	ror	r21
    2092:	47 95       	ror	r20
    2094:	2f 5f       	subi	r18, 0xFF	; 255
    2096:	3f 4f       	sbci	r19, 0xFF	; 255
    2098:	77 fd       	sbrc	r23, 7
    209a:	e7 cf       	rjmp	.-50     	; 0x206a <__mulsf3+0x140>
    209c:	0c c0       	rjmp	.+24     	; 0x20b6 <__mulsf3+0x18c>
    209e:	44 0f       	add	r20, r20
    20a0:	55 1f       	adc	r21, r21
    20a2:	66 1f       	adc	r22, r22
    20a4:	77 1f       	adc	r23, r23
    20a6:	17 fd       	sbrc	r17, 7
    20a8:	41 60       	ori	r20, 0x01	; 1
    20aa:	ee 0c       	add	r14, r14
    20ac:	ff 1c       	adc	r15, r15
    20ae:	00 1f       	adc	r16, r16
    20b0:	11 1f       	adc	r17, r17
    20b2:	21 50       	subi	r18, 0x01	; 1
    20b4:	30 40       	sbci	r19, 0x00	; 0
    20b6:	40 30       	cpi	r20, 0x00	; 0
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	59 07       	cpc	r21, r25
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	69 07       	cpc	r22, r25
    20c0:	90 e4       	ldi	r25, 0x40	; 64
    20c2:	79 07       	cpc	r23, r25
    20c4:	60 f3       	brcs	.-40     	; 0x209e <__mulsf3+0x174>
    20c6:	2b 8f       	std	Y+27, r18	; 0x1b
    20c8:	3c 8f       	std	Y+28, r19	; 0x1c
    20ca:	db 01       	movw	r26, r22
    20cc:	ca 01       	movw	r24, r20
    20ce:	8f 77       	andi	r24, 0x7F	; 127
    20d0:	90 70       	andi	r25, 0x00	; 0
    20d2:	a0 70       	andi	r26, 0x00	; 0
    20d4:	b0 70       	andi	r27, 0x00	; 0
    20d6:	80 34       	cpi	r24, 0x40	; 64
    20d8:	91 05       	cpc	r25, r1
    20da:	a1 05       	cpc	r26, r1
    20dc:	b1 05       	cpc	r27, r1
    20de:	61 f4       	brne	.+24     	; 0x20f8 <__mulsf3+0x1ce>
    20e0:	47 fd       	sbrc	r20, 7
    20e2:	0a c0       	rjmp	.+20     	; 0x20f8 <__mulsf3+0x1ce>
    20e4:	e1 14       	cp	r14, r1
    20e6:	f1 04       	cpc	r15, r1
    20e8:	01 05       	cpc	r16, r1
    20ea:	11 05       	cpc	r17, r1
    20ec:	29 f0       	breq	.+10     	; 0x20f8 <__mulsf3+0x1ce>
    20ee:	40 5c       	subi	r20, 0xC0	; 192
    20f0:	5f 4f       	sbci	r21, 0xFF	; 255
    20f2:	6f 4f       	sbci	r22, 0xFF	; 255
    20f4:	7f 4f       	sbci	r23, 0xFF	; 255
    20f6:	40 78       	andi	r20, 0x80	; 128
    20f8:	1a 8e       	std	Y+26, r1	; 0x1a
    20fa:	fe 17       	cp	r31, r30
    20fc:	11 f0       	breq	.+4      	; 0x2102 <__mulsf3+0x1d8>
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	8a 8f       	std	Y+26, r24	; 0x1a
    2102:	4d 8f       	std	Y+29, r20	; 0x1d
    2104:	5e 8f       	std	Y+30, r21	; 0x1e
    2106:	6f 8f       	std	Y+31, r22	; 0x1f
    2108:	78 a3       	std	Y+32, r23	; 0x20
    210a:	83 e0       	ldi	r24, 0x03	; 3
    210c:	89 8f       	std	Y+25, r24	; 0x19
    210e:	ce 01       	movw	r24, r28
    2110:	49 96       	adiw	r24, 0x19	; 25
    2112:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__pack_f>
    2116:	a0 96       	adiw	r28, 0x20	; 32
    2118:	e2 e1       	ldi	r30, 0x12	; 18
    211a:	0c 94 bd 14 	jmp	0x297a	; 0x297a <__epilogue_restores__>

0000211e <__divsf3>:
    211e:	a8 e1       	ldi	r26, 0x18	; 24
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	e5 e9       	ldi	r30, 0x95	; 149
    2124:	f0 e1       	ldi	r31, 0x10	; 16
    2126:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__prologue_saves__+0x10>
    212a:	69 83       	std	Y+1, r22	; 0x01
    212c:	7a 83       	std	Y+2, r23	; 0x02
    212e:	8b 83       	std	Y+3, r24	; 0x03
    2130:	9c 83       	std	Y+4, r25	; 0x04
    2132:	2d 83       	std	Y+5, r18	; 0x05
    2134:	3e 83       	std	Y+6, r19	; 0x06
    2136:	4f 83       	std	Y+7, r20	; 0x07
    2138:	58 87       	std	Y+8, r21	; 0x08
    213a:	b9 e0       	ldi	r27, 0x09	; 9
    213c:	eb 2e       	mov	r14, r27
    213e:	f1 2c       	mov	r15, r1
    2140:	ec 0e       	add	r14, r28
    2142:	fd 1e       	adc	r15, r29
    2144:	ce 01       	movw	r24, r28
    2146:	01 96       	adiw	r24, 0x01	; 1
    2148:	b7 01       	movw	r22, r14
    214a:	0e 94 bc 13 	call	0x2778	; 0x2778 <__unpack_f>
    214e:	8e 01       	movw	r16, r28
    2150:	0f 5e       	subi	r16, 0xEF	; 239
    2152:	1f 4f       	sbci	r17, 0xFF	; 255
    2154:	ce 01       	movw	r24, r28
    2156:	05 96       	adiw	r24, 0x05	; 5
    2158:	b8 01       	movw	r22, r16
    215a:	0e 94 bc 13 	call	0x2778	; 0x2778 <__unpack_f>
    215e:	29 85       	ldd	r18, Y+9	; 0x09
    2160:	22 30       	cpi	r18, 0x02	; 2
    2162:	08 f4       	brcc	.+2      	; 0x2166 <__divsf3+0x48>
    2164:	7e c0       	rjmp	.+252    	; 0x2262 <__stack+0x63>
    2166:	39 89       	ldd	r19, Y+17	; 0x11
    2168:	32 30       	cpi	r19, 0x02	; 2
    216a:	10 f4       	brcc	.+4      	; 0x2170 <__divsf3+0x52>
    216c:	b8 01       	movw	r22, r16
    216e:	7c c0       	rjmp	.+248    	; 0x2268 <__stack+0x69>
    2170:	8a 85       	ldd	r24, Y+10	; 0x0a
    2172:	9a 89       	ldd	r25, Y+18	; 0x12
    2174:	89 27       	eor	r24, r25
    2176:	8a 87       	std	Y+10, r24	; 0x0a
    2178:	24 30       	cpi	r18, 0x04	; 4
    217a:	11 f0       	breq	.+4      	; 0x2180 <__divsf3+0x62>
    217c:	22 30       	cpi	r18, 0x02	; 2
    217e:	31 f4       	brne	.+12     	; 0x218c <__divsf3+0x6e>
    2180:	23 17       	cp	r18, r19
    2182:	09 f0       	breq	.+2      	; 0x2186 <__divsf3+0x68>
    2184:	6e c0       	rjmp	.+220    	; 0x2262 <__stack+0x63>
    2186:	62 e2       	ldi	r22, 0x22	; 34
    2188:	72 e0       	ldi	r23, 0x02	; 2
    218a:	6e c0       	rjmp	.+220    	; 0x2268 <__stack+0x69>
    218c:	34 30       	cpi	r19, 0x04	; 4
    218e:	39 f4       	brne	.+14     	; 0x219e <__divsf3+0x80>
    2190:	1d 86       	std	Y+13, r1	; 0x0d
    2192:	1e 86       	std	Y+14, r1	; 0x0e
    2194:	1f 86       	std	Y+15, r1	; 0x0f
    2196:	18 8a       	std	Y+16, r1	; 0x10
    2198:	1c 86       	std	Y+12, r1	; 0x0c
    219a:	1b 86       	std	Y+11, r1	; 0x0b
    219c:	04 c0       	rjmp	.+8      	; 0x21a6 <__divsf3+0x88>
    219e:	32 30       	cpi	r19, 0x02	; 2
    21a0:	21 f4       	brne	.+8      	; 0x21aa <__divsf3+0x8c>
    21a2:	84 e0       	ldi	r24, 0x04	; 4
    21a4:	89 87       	std	Y+9, r24	; 0x09
    21a6:	b7 01       	movw	r22, r14
    21a8:	5f c0       	rjmp	.+190    	; 0x2268 <__stack+0x69>
    21aa:	2b 85       	ldd	r18, Y+11	; 0x0b
    21ac:	3c 85       	ldd	r19, Y+12	; 0x0c
    21ae:	8b 89       	ldd	r24, Y+19	; 0x13
    21b0:	9c 89       	ldd	r25, Y+20	; 0x14
    21b2:	28 1b       	sub	r18, r24
    21b4:	39 0b       	sbc	r19, r25
    21b6:	3c 87       	std	Y+12, r19	; 0x0c
    21b8:	2b 87       	std	Y+11, r18	; 0x0b
    21ba:	ed 84       	ldd	r14, Y+13	; 0x0d
    21bc:	fe 84       	ldd	r15, Y+14	; 0x0e
    21be:	0f 85       	ldd	r16, Y+15	; 0x0f
    21c0:	18 89       	ldd	r17, Y+16	; 0x10
    21c2:	ad 88       	ldd	r10, Y+21	; 0x15
    21c4:	be 88       	ldd	r11, Y+22	; 0x16
    21c6:	cf 88       	ldd	r12, Y+23	; 0x17
    21c8:	d8 8c       	ldd	r13, Y+24	; 0x18
    21ca:	ea 14       	cp	r14, r10
    21cc:	fb 04       	cpc	r15, r11
    21ce:	0c 05       	cpc	r16, r12
    21d0:	1d 05       	cpc	r17, r13
    21d2:	40 f4       	brcc	.+16     	; 0x21e4 <__divsf3+0xc6>
    21d4:	ee 0c       	add	r14, r14
    21d6:	ff 1c       	adc	r15, r15
    21d8:	00 1f       	adc	r16, r16
    21da:	11 1f       	adc	r17, r17
    21dc:	21 50       	subi	r18, 0x01	; 1
    21de:	30 40       	sbci	r19, 0x00	; 0
    21e0:	3c 87       	std	Y+12, r19	; 0x0c
    21e2:	2b 87       	std	Y+11, r18	; 0x0b
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	a0 e0       	ldi	r26, 0x00	; 0
    21f2:	b0 e4       	ldi	r27, 0x40	; 64
    21f4:	60 e0       	ldi	r22, 0x00	; 0
    21f6:	70 e0       	ldi	r23, 0x00	; 0
    21f8:	ea 14       	cp	r14, r10
    21fa:	fb 04       	cpc	r15, r11
    21fc:	0c 05       	cpc	r16, r12
    21fe:	1d 05       	cpc	r17, r13
    2200:	40 f0       	brcs	.+16     	; 0x2212 <__stack+0x13>
    2202:	28 2b       	or	r18, r24
    2204:	39 2b       	or	r19, r25
    2206:	4a 2b       	or	r20, r26
    2208:	5b 2b       	or	r21, r27
    220a:	ea 18       	sub	r14, r10
    220c:	fb 08       	sbc	r15, r11
    220e:	0c 09       	sbc	r16, r12
    2210:	1d 09       	sbc	r17, r13
    2212:	b6 95       	lsr	r27
    2214:	a7 95       	ror	r26
    2216:	97 95       	ror	r25
    2218:	87 95       	ror	r24
    221a:	ee 0c       	add	r14, r14
    221c:	ff 1c       	adc	r15, r15
    221e:	00 1f       	adc	r16, r16
    2220:	11 1f       	adc	r17, r17
    2222:	6f 5f       	subi	r22, 0xFF	; 255
    2224:	7f 4f       	sbci	r23, 0xFF	; 255
    2226:	6f 31       	cpi	r22, 0x1F	; 31
    2228:	71 05       	cpc	r23, r1
    222a:	31 f7       	brne	.-52     	; 0x21f8 <__divsf3+0xda>
    222c:	da 01       	movw	r26, r20
    222e:	c9 01       	movw	r24, r18
    2230:	8f 77       	andi	r24, 0x7F	; 127
    2232:	90 70       	andi	r25, 0x00	; 0
    2234:	a0 70       	andi	r26, 0x00	; 0
    2236:	b0 70       	andi	r27, 0x00	; 0
    2238:	80 34       	cpi	r24, 0x40	; 64
    223a:	91 05       	cpc	r25, r1
    223c:	a1 05       	cpc	r26, r1
    223e:	b1 05       	cpc	r27, r1
    2240:	61 f4       	brne	.+24     	; 0x225a <__stack+0x5b>
    2242:	27 fd       	sbrc	r18, 7
    2244:	0a c0       	rjmp	.+20     	; 0x225a <__stack+0x5b>
    2246:	e1 14       	cp	r14, r1
    2248:	f1 04       	cpc	r15, r1
    224a:	01 05       	cpc	r16, r1
    224c:	11 05       	cpc	r17, r1
    224e:	29 f0       	breq	.+10     	; 0x225a <__stack+0x5b>
    2250:	20 5c       	subi	r18, 0xC0	; 192
    2252:	3f 4f       	sbci	r19, 0xFF	; 255
    2254:	4f 4f       	sbci	r20, 0xFF	; 255
    2256:	5f 4f       	sbci	r21, 0xFF	; 255
    2258:	20 78       	andi	r18, 0x80	; 128
    225a:	2d 87       	std	Y+13, r18	; 0x0d
    225c:	3e 87       	std	Y+14, r19	; 0x0e
    225e:	4f 87       	std	Y+15, r20	; 0x0f
    2260:	58 8b       	std	Y+16, r21	; 0x10
    2262:	be 01       	movw	r22, r28
    2264:	67 5f       	subi	r22, 0xF7	; 247
    2266:	7f 4f       	sbci	r23, 0xFF	; 255
    2268:	cb 01       	movw	r24, r22
    226a:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__pack_f>
    226e:	68 96       	adiw	r28, 0x18	; 24
    2270:	ea e0       	ldi	r30, 0x0A	; 10
    2272:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__epilogue_restores__+0x10>

00002276 <__gtsf2>:
    2276:	a8 e1       	ldi	r26, 0x18	; 24
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	e1 e4       	ldi	r30, 0x41	; 65
    227c:	f1 e1       	ldi	r31, 0x11	; 17
    227e:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__prologue_saves__+0x18>
    2282:	69 83       	std	Y+1, r22	; 0x01
    2284:	7a 83       	std	Y+2, r23	; 0x02
    2286:	8b 83       	std	Y+3, r24	; 0x03
    2288:	9c 83       	std	Y+4, r25	; 0x04
    228a:	2d 83       	std	Y+5, r18	; 0x05
    228c:	3e 83       	std	Y+6, r19	; 0x06
    228e:	4f 83       	std	Y+7, r20	; 0x07
    2290:	58 87       	std	Y+8, r21	; 0x08
    2292:	89 e0       	ldi	r24, 0x09	; 9
    2294:	e8 2e       	mov	r14, r24
    2296:	f1 2c       	mov	r15, r1
    2298:	ec 0e       	add	r14, r28
    229a:	fd 1e       	adc	r15, r29
    229c:	ce 01       	movw	r24, r28
    229e:	01 96       	adiw	r24, 0x01	; 1
    22a0:	b7 01       	movw	r22, r14
    22a2:	0e 94 bc 13 	call	0x2778	; 0x2778 <__unpack_f>
    22a6:	8e 01       	movw	r16, r28
    22a8:	0f 5e       	subi	r16, 0xEF	; 239
    22aa:	1f 4f       	sbci	r17, 0xFF	; 255
    22ac:	ce 01       	movw	r24, r28
    22ae:	05 96       	adiw	r24, 0x05	; 5
    22b0:	b8 01       	movw	r22, r16
    22b2:	0e 94 bc 13 	call	0x2778	; 0x2778 <__unpack_f>
    22b6:	89 85       	ldd	r24, Y+9	; 0x09
    22b8:	82 30       	cpi	r24, 0x02	; 2
    22ba:	40 f0       	brcs	.+16     	; 0x22cc <__gtsf2+0x56>
    22bc:	89 89       	ldd	r24, Y+17	; 0x11
    22be:	82 30       	cpi	r24, 0x02	; 2
    22c0:	28 f0       	brcs	.+10     	; 0x22cc <__gtsf2+0x56>
    22c2:	c7 01       	movw	r24, r14
    22c4:	b8 01       	movw	r22, r16
    22c6:	0e 94 34 14 	call	0x2868	; 0x2868 <__fpcmp_parts_f>
    22ca:	01 c0       	rjmp	.+2      	; 0x22ce <__gtsf2+0x58>
    22cc:	8f ef       	ldi	r24, 0xFF	; 255
    22ce:	68 96       	adiw	r28, 0x18	; 24
    22d0:	e6 e0       	ldi	r30, 0x06	; 6
    22d2:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <__epilogue_restores__+0x18>

000022d6 <__gesf2>:
    22d6:	a8 e1       	ldi	r26, 0x18	; 24
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e1 e7       	ldi	r30, 0x71	; 113
    22dc:	f1 e1       	ldi	r31, 0x11	; 17
    22de:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__prologue_saves__+0x18>
    22e2:	69 83       	std	Y+1, r22	; 0x01
    22e4:	7a 83       	std	Y+2, r23	; 0x02
    22e6:	8b 83       	std	Y+3, r24	; 0x03
    22e8:	9c 83       	std	Y+4, r25	; 0x04
    22ea:	2d 83       	std	Y+5, r18	; 0x05
    22ec:	3e 83       	std	Y+6, r19	; 0x06
    22ee:	4f 83       	std	Y+7, r20	; 0x07
    22f0:	58 87       	std	Y+8, r21	; 0x08
    22f2:	89 e0       	ldi	r24, 0x09	; 9
    22f4:	e8 2e       	mov	r14, r24
    22f6:	f1 2c       	mov	r15, r1
    22f8:	ec 0e       	add	r14, r28
    22fa:	fd 1e       	adc	r15, r29
    22fc:	ce 01       	movw	r24, r28
    22fe:	01 96       	adiw	r24, 0x01	; 1
    2300:	b7 01       	movw	r22, r14
    2302:	0e 94 bc 13 	call	0x2778	; 0x2778 <__unpack_f>
    2306:	8e 01       	movw	r16, r28
    2308:	0f 5e       	subi	r16, 0xEF	; 239
    230a:	1f 4f       	sbci	r17, 0xFF	; 255
    230c:	ce 01       	movw	r24, r28
    230e:	05 96       	adiw	r24, 0x05	; 5
    2310:	b8 01       	movw	r22, r16
    2312:	0e 94 bc 13 	call	0x2778	; 0x2778 <__unpack_f>
    2316:	89 85       	ldd	r24, Y+9	; 0x09
    2318:	82 30       	cpi	r24, 0x02	; 2
    231a:	40 f0       	brcs	.+16     	; 0x232c <__gesf2+0x56>
    231c:	89 89       	ldd	r24, Y+17	; 0x11
    231e:	82 30       	cpi	r24, 0x02	; 2
    2320:	28 f0       	brcs	.+10     	; 0x232c <__gesf2+0x56>
    2322:	c7 01       	movw	r24, r14
    2324:	b8 01       	movw	r22, r16
    2326:	0e 94 34 14 	call	0x2868	; 0x2868 <__fpcmp_parts_f>
    232a:	01 c0       	rjmp	.+2      	; 0x232e <__gesf2+0x58>
    232c:	8f ef       	ldi	r24, 0xFF	; 255
    232e:	68 96       	adiw	r28, 0x18	; 24
    2330:	e6 e0       	ldi	r30, 0x06	; 6
    2332:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <__epilogue_restores__+0x18>

00002336 <__ltsf2>:
    2336:	a8 e1       	ldi	r26, 0x18	; 24
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	e1 ea       	ldi	r30, 0xA1	; 161
    233c:	f1 e1       	ldi	r31, 0x11	; 17
    233e:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__prologue_saves__+0x18>
    2342:	69 83       	std	Y+1, r22	; 0x01
    2344:	7a 83       	std	Y+2, r23	; 0x02
    2346:	8b 83       	std	Y+3, r24	; 0x03
    2348:	9c 83       	std	Y+4, r25	; 0x04
    234a:	2d 83       	std	Y+5, r18	; 0x05
    234c:	3e 83       	std	Y+6, r19	; 0x06
    234e:	4f 83       	std	Y+7, r20	; 0x07
    2350:	58 87       	std	Y+8, r21	; 0x08
    2352:	89 e0       	ldi	r24, 0x09	; 9
    2354:	e8 2e       	mov	r14, r24
    2356:	f1 2c       	mov	r15, r1
    2358:	ec 0e       	add	r14, r28
    235a:	fd 1e       	adc	r15, r29
    235c:	ce 01       	movw	r24, r28
    235e:	01 96       	adiw	r24, 0x01	; 1
    2360:	b7 01       	movw	r22, r14
    2362:	0e 94 bc 13 	call	0x2778	; 0x2778 <__unpack_f>
    2366:	8e 01       	movw	r16, r28
    2368:	0f 5e       	subi	r16, 0xEF	; 239
    236a:	1f 4f       	sbci	r17, 0xFF	; 255
    236c:	ce 01       	movw	r24, r28
    236e:	05 96       	adiw	r24, 0x05	; 5
    2370:	b8 01       	movw	r22, r16
    2372:	0e 94 bc 13 	call	0x2778	; 0x2778 <__unpack_f>
    2376:	89 85       	ldd	r24, Y+9	; 0x09
    2378:	82 30       	cpi	r24, 0x02	; 2
    237a:	40 f0       	brcs	.+16     	; 0x238c <__ltsf2+0x56>
    237c:	89 89       	ldd	r24, Y+17	; 0x11
    237e:	82 30       	cpi	r24, 0x02	; 2
    2380:	28 f0       	brcs	.+10     	; 0x238c <__ltsf2+0x56>
    2382:	c7 01       	movw	r24, r14
    2384:	b8 01       	movw	r22, r16
    2386:	0e 94 34 14 	call	0x2868	; 0x2868 <__fpcmp_parts_f>
    238a:	01 c0       	rjmp	.+2      	; 0x238e <__ltsf2+0x58>
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	68 96       	adiw	r28, 0x18	; 24
    2390:	e6 e0       	ldi	r30, 0x06	; 6
    2392:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <__epilogue_restores__+0x18>

00002396 <__fixsfsi>:
    2396:	ac e0       	ldi	r26, 0x0C	; 12
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	e1 ed       	ldi	r30, 0xD1	; 209
    239c:	f1 e1       	ldi	r31, 0x11	; 17
    239e:	0c 94 b1 14 	jmp	0x2962	; 0x2962 <__prologue_saves__+0x20>
    23a2:	69 83       	std	Y+1, r22	; 0x01
    23a4:	7a 83       	std	Y+2, r23	; 0x02
    23a6:	8b 83       	std	Y+3, r24	; 0x03
    23a8:	9c 83       	std	Y+4, r25	; 0x04
    23aa:	ce 01       	movw	r24, r28
    23ac:	01 96       	adiw	r24, 0x01	; 1
    23ae:	be 01       	movw	r22, r28
    23b0:	6b 5f       	subi	r22, 0xFB	; 251
    23b2:	7f 4f       	sbci	r23, 0xFF	; 255
    23b4:	0e 94 bc 13 	call	0x2778	; 0x2778 <__unpack_f>
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	82 30       	cpi	r24, 0x02	; 2
    23bc:	61 f1       	breq	.+88     	; 0x2416 <__fixsfsi+0x80>
    23be:	82 30       	cpi	r24, 0x02	; 2
    23c0:	50 f1       	brcs	.+84     	; 0x2416 <__fixsfsi+0x80>
    23c2:	84 30       	cpi	r24, 0x04	; 4
    23c4:	21 f4       	brne	.+8      	; 0x23ce <__fixsfsi+0x38>
    23c6:	8e 81       	ldd	r24, Y+6	; 0x06
    23c8:	88 23       	and	r24, r24
    23ca:	51 f1       	breq	.+84     	; 0x2420 <__fixsfsi+0x8a>
    23cc:	2e c0       	rjmp	.+92     	; 0x242a <__fixsfsi+0x94>
    23ce:	2f 81       	ldd	r18, Y+7	; 0x07
    23d0:	38 85       	ldd	r19, Y+8	; 0x08
    23d2:	37 fd       	sbrc	r19, 7
    23d4:	20 c0       	rjmp	.+64     	; 0x2416 <__fixsfsi+0x80>
    23d6:	6e 81       	ldd	r22, Y+6	; 0x06
    23d8:	2f 31       	cpi	r18, 0x1F	; 31
    23da:	31 05       	cpc	r19, r1
    23dc:	1c f0       	brlt	.+6      	; 0x23e4 <__fixsfsi+0x4e>
    23de:	66 23       	and	r22, r22
    23e0:	f9 f0       	breq	.+62     	; 0x2420 <__fixsfsi+0x8a>
    23e2:	23 c0       	rjmp	.+70     	; 0x242a <__fixsfsi+0x94>
    23e4:	8e e1       	ldi	r24, 0x1E	; 30
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	82 1b       	sub	r24, r18
    23ea:	93 0b       	sbc	r25, r19
    23ec:	29 85       	ldd	r18, Y+9	; 0x09
    23ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    23f0:	4b 85       	ldd	r20, Y+11	; 0x0b
    23f2:	5c 85       	ldd	r21, Y+12	; 0x0c
    23f4:	04 c0       	rjmp	.+8      	; 0x23fe <__fixsfsi+0x68>
    23f6:	56 95       	lsr	r21
    23f8:	47 95       	ror	r20
    23fa:	37 95       	ror	r19
    23fc:	27 95       	ror	r18
    23fe:	8a 95       	dec	r24
    2400:	d2 f7       	brpl	.-12     	; 0x23f6 <__fixsfsi+0x60>
    2402:	66 23       	and	r22, r22
    2404:	b1 f0       	breq	.+44     	; 0x2432 <__fixsfsi+0x9c>
    2406:	50 95       	com	r21
    2408:	40 95       	com	r20
    240a:	30 95       	com	r19
    240c:	21 95       	neg	r18
    240e:	3f 4f       	sbci	r19, 0xFF	; 255
    2410:	4f 4f       	sbci	r20, 0xFF	; 255
    2412:	5f 4f       	sbci	r21, 0xFF	; 255
    2414:	0e c0       	rjmp	.+28     	; 0x2432 <__fixsfsi+0x9c>
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	50 e0       	ldi	r21, 0x00	; 0
    241e:	09 c0       	rjmp	.+18     	; 0x2432 <__fixsfsi+0x9c>
    2420:	2f ef       	ldi	r18, 0xFF	; 255
    2422:	3f ef       	ldi	r19, 0xFF	; 255
    2424:	4f ef       	ldi	r20, 0xFF	; 255
    2426:	5f e7       	ldi	r21, 0x7F	; 127
    2428:	04 c0       	rjmp	.+8      	; 0x2432 <__fixsfsi+0x9c>
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e0       	ldi	r20, 0x00	; 0
    2430:	50 e8       	ldi	r21, 0x80	; 128
    2432:	b9 01       	movw	r22, r18
    2434:	ca 01       	movw	r24, r20
    2436:	2c 96       	adiw	r28, 0x0c	; 12
    2438:	e2 e0       	ldi	r30, 0x02	; 2
    243a:	0c 94 cd 14 	jmp	0x299a	; 0x299a <__epilogue_restores__+0x20>

0000243e <__floatunsisf>:
    243e:	a8 e0       	ldi	r26, 0x08	; 8
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e5 e2       	ldi	r30, 0x25	; 37
    2444:	f2 e1       	ldi	r31, 0x12	; 18
    2446:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__prologue_saves__+0x10>
    244a:	7b 01       	movw	r14, r22
    244c:	8c 01       	movw	r16, r24
    244e:	61 15       	cp	r22, r1
    2450:	71 05       	cpc	r23, r1
    2452:	81 05       	cpc	r24, r1
    2454:	91 05       	cpc	r25, r1
    2456:	19 f4       	brne	.+6      	; 0x245e <__floatunsisf+0x20>
    2458:	82 e0       	ldi	r24, 0x02	; 2
    245a:	89 83       	std	Y+1, r24	; 0x01
    245c:	60 c0       	rjmp	.+192    	; 0x251e <__floatunsisf+0xe0>
    245e:	83 e0       	ldi	r24, 0x03	; 3
    2460:	89 83       	std	Y+1, r24	; 0x01
    2462:	8e e1       	ldi	r24, 0x1E	; 30
    2464:	c8 2e       	mov	r12, r24
    2466:	d1 2c       	mov	r13, r1
    2468:	dc 82       	std	Y+4, r13	; 0x04
    246a:	cb 82       	std	Y+3, r12	; 0x03
    246c:	ed 82       	std	Y+5, r14	; 0x05
    246e:	fe 82       	std	Y+6, r15	; 0x06
    2470:	0f 83       	std	Y+7, r16	; 0x07
    2472:	18 87       	std	Y+8, r17	; 0x08
    2474:	c8 01       	movw	r24, r16
    2476:	b7 01       	movw	r22, r14
    2478:	0e 94 98 12 	call	0x2530	; 0x2530 <__clzsi2>
    247c:	fc 01       	movw	r30, r24
    247e:	31 97       	sbiw	r30, 0x01	; 1
    2480:	f7 ff       	sbrs	r31, 7
    2482:	3b c0       	rjmp	.+118    	; 0x24fa <__floatunsisf+0xbc>
    2484:	22 27       	eor	r18, r18
    2486:	33 27       	eor	r19, r19
    2488:	2e 1b       	sub	r18, r30
    248a:	3f 0b       	sbc	r19, r31
    248c:	57 01       	movw	r10, r14
    248e:	68 01       	movw	r12, r16
    2490:	02 2e       	mov	r0, r18
    2492:	04 c0       	rjmp	.+8      	; 0x249c <__floatunsisf+0x5e>
    2494:	d6 94       	lsr	r13
    2496:	c7 94       	ror	r12
    2498:	b7 94       	ror	r11
    249a:	a7 94       	ror	r10
    249c:	0a 94       	dec	r0
    249e:	d2 f7       	brpl	.-12     	; 0x2494 <__floatunsisf+0x56>
    24a0:	40 e0       	ldi	r20, 0x00	; 0
    24a2:	50 e0       	ldi	r21, 0x00	; 0
    24a4:	60 e0       	ldi	r22, 0x00	; 0
    24a6:	70 e0       	ldi	r23, 0x00	; 0
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	a0 e0       	ldi	r26, 0x00	; 0
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	04 c0       	rjmp	.+8      	; 0x24ba <__floatunsisf+0x7c>
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	aa 1f       	adc	r26, r26
    24b8:	bb 1f       	adc	r27, r27
    24ba:	2a 95       	dec	r18
    24bc:	d2 f7       	brpl	.-12     	; 0x24b2 <__floatunsisf+0x74>
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	a1 09       	sbc	r26, r1
    24c2:	b1 09       	sbc	r27, r1
    24c4:	8e 21       	and	r24, r14
    24c6:	9f 21       	and	r25, r15
    24c8:	a0 23       	and	r26, r16
    24ca:	b1 23       	and	r27, r17
    24cc:	00 97       	sbiw	r24, 0x00	; 0
    24ce:	a1 05       	cpc	r26, r1
    24d0:	b1 05       	cpc	r27, r1
    24d2:	21 f0       	breq	.+8      	; 0x24dc <__floatunsisf+0x9e>
    24d4:	41 e0       	ldi	r20, 0x01	; 1
    24d6:	50 e0       	ldi	r21, 0x00	; 0
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	70 e0       	ldi	r23, 0x00	; 0
    24dc:	4a 29       	or	r20, r10
    24de:	5b 29       	or	r21, r11
    24e0:	6c 29       	or	r22, r12
    24e2:	7d 29       	or	r23, r13
    24e4:	4d 83       	std	Y+5, r20	; 0x05
    24e6:	5e 83       	std	Y+6, r21	; 0x06
    24e8:	6f 83       	std	Y+7, r22	; 0x07
    24ea:	78 87       	std	Y+8, r23	; 0x08
    24ec:	8e e1       	ldi	r24, 0x1E	; 30
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	8e 1b       	sub	r24, r30
    24f2:	9f 0b       	sbc	r25, r31
    24f4:	9c 83       	std	Y+4, r25	; 0x04
    24f6:	8b 83       	std	Y+3, r24	; 0x03
    24f8:	12 c0       	rjmp	.+36     	; 0x251e <__floatunsisf+0xe0>
    24fa:	30 97       	sbiw	r30, 0x00	; 0
    24fc:	81 f0       	breq	.+32     	; 0x251e <__floatunsisf+0xe0>
    24fe:	0e 2e       	mov	r0, r30
    2500:	04 c0       	rjmp	.+8      	; 0x250a <__floatunsisf+0xcc>
    2502:	ee 0c       	add	r14, r14
    2504:	ff 1c       	adc	r15, r15
    2506:	00 1f       	adc	r16, r16
    2508:	11 1f       	adc	r17, r17
    250a:	0a 94       	dec	r0
    250c:	d2 f7       	brpl	.-12     	; 0x2502 <__floatunsisf+0xc4>
    250e:	ed 82       	std	Y+5, r14	; 0x05
    2510:	fe 82       	std	Y+6, r15	; 0x06
    2512:	0f 83       	std	Y+7, r16	; 0x07
    2514:	18 87       	std	Y+8, r17	; 0x08
    2516:	ce 1a       	sub	r12, r30
    2518:	df 0a       	sbc	r13, r31
    251a:	dc 82       	std	Y+4, r13	; 0x04
    251c:	cb 82       	std	Y+3, r12	; 0x03
    251e:	1a 82       	std	Y+2, r1	; 0x02
    2520:	ce 01       	movw	r24, r28
    2522:	01 96       	adiw	r24, 0x01	; 1
    2524:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__pack_f>
    2528:	28 96       	adiw	r28, 0x08	; 8
    252a:	ea e0       	ldi	r30, 0x0A	; 10
    252c:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__epilogue_restores__+0x10>

00002530 <__clzsi2>:
    2530:	ef 92       	push	r14
    2532:	ff 92       	push	r15
    2534:	0f 93       	push	r16
    2536:	1f 93       	push	r17
    2538:	7b 01       	movw	r14, r22
    253a:	8c 01       	movw	r16, r24
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	e8 16       	cp	r14, r24
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	f8 06       	cpc	r15, r24
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	08 07       	cpc	r16, r24
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	18 07       	cpc	r17, r24
    254c:	88 f4       	brcc	.+34     	; 0x2570 <__clzsi2+0x40>
    254e:	8f ef       	ldi	r24, 0xFF	; 255
    2550:	e8 16       	cp	r14, r24
    2552:	f1 04       	cpc	r15, r1
    2554:	01 05       	cpc	r16, r1
    2556:	11 05       	cpc	r17, r1
    2558:	31 f0       	breq	.+12     	; 0x2566 <__clzsi2+0x36>
    255a:	28 f0       	brcs	.+10     	; 0x2566 <__clzsi2+0x36>
    255c:	88 e0       	ldi	r24, 0x08	; 8
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	a0 e0       	ldi	r26, 0x00	; 0
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	17 c0       	rjmp	.+46     	; 0x2594 <__clzsi2+0x64>
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	a0 e0       	ldi	r26, 0x00	; 0
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	12 c0       	rjmp	.+36     	; 0x2594 <__clzsi2+0x64>
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	e8 16       	cp	r14, r24
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	f8 06       	cpc	r15, r24
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	08 07       	cpc	r16, r24
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	18 07       	cpc	r17, r24
    2580:	28 f0       	brcs	.+10     	; 0x258c <__clzsi2+0x5c>
    2582:	88 e1       	ldi	r24, 0x18	; 24
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	a0 e0       	ldi	r26, 0x00	; 0
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	04 c0       	rjmp	.+8      	; 0x2594 <__clzsi2+0x64>
    258c:	80 e1       	ldi	r24, 0x10	; 16
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	a0 e0       	ldi	r26, 0x00	; 0
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	20 e2       	ldi	r18, 0x20	; 32
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e0       	ldi	r20, 0x00	; 0
    259a:	50 e0       	ldi	r21, 0x00	; 0
    259c:	28 1b       	sub	r18, r24
    259e:	39 0b       	sbc	r19, r25
    25a0:	4a 0b       	sbc	r20, r26
    25a2:	5b 0b       	sbc	r21, r27
    25a4:	04 c0       	rjmp	.+8      	; 0x25ae <__clzsi2+0x7e>
    25a6:	16 95       	lsr	r17
    25a8:	07 95       	ror	r16
    25aa:	f7 94       	ror	r15
    25ac:	e7 94       	ror	r14
    25ae:	8a 95       	dec	r24
    25b0:	d2 f7       	brpl	.-12     	; 0x25a6 <__clzsi2+0x76>
    25b2:	f7 01       	movw	r30, r14
    25b4:	e6 5d       	subi	r30, 0xD6	; 214
    25b6:	fd 4f       	sbci	r31, 0xFD	; 253
    25b8:	80 81       	ld	r24, Z
    25ba:	28 1b       	sub	r18, r24
    25bc:	31 09       	sbc	r19, r1
    25be:	41 09       	sbc	r20, r1
    25c0:	51 09       	sbc	r21, r1
    25c2:	c9 01       	movw	r24, r18
    25c4:	1f 91       	pop	r17
    25c6:	0f 91       	pop	r16
    25c8:	ff 90       	pop	r15
    25ca:	ef 90       	pop	r14
    25cc:	08 95       	ret

000025ce <__pack_f>:
    25ce:	df 92       	push	r13
    25d0:	ef 92       	push	r14
    25d2:	ff 92       	push	r15
    25d4:	0f 93       	push	r16
    25d6:	1f 93       	push	r17
    25d8:	fc 01       	movw	r30, r24
    25da:	e4 80       	ldd	r14, Z+4	; 0x04
    25dc:	f5 80       	ldd	r15, Z+5	; 0x05
    25de:	06 81       	ldd	r16, Z+6	; 0x06
    25e0:	17 81       	ldd	r17, Z+7	; 0x07
    25e2:	d1 80       	ldd	r13, Z+1	; 0x01
    25e4:	80 81       	ld	r24, Z
    25e6:	82 30       	cpi	r24, 0x02	; 2
    25e8:	48 f4       	brcc	.+18     	; 0x25fc <__pack_f+0x2e>
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	a0 e1       	ldi	r26, 0x10	; 16
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	e8 2a       	or	r14, r24
    25f4:	f9 2a       	or	r15, r25
    25f6:	0a 2b       	or	r16, r26
    25f8:	1b 2b       	or	r17, r27
    25fa:	a5 c0       	rjmp	.+330    	; 0x2746 <__pack_f+0x178>
    25fc:	84 30       	cpi	r24, 0x04	; 4
    25fe:	09 f4       	brne	.+2      	; 0x2602 <__pack_f+0x34>
    2600:	9f c0       	rjmp	.+318    	; 0x2740 <__pack_f+0x172>
    2602:	82 30       	cpi	r24, 0x02	; 2
    2604:	21 f4       	brne	.+8      	; 0x260e <__pack_f+0x40>
    2606:	ee 24       	eor	r14, r14
    2608:	ff 24       	eor	r15, r15
    260a:	87 01       	movw	r16, r14
    260c:	05 c0       	rjmp	.+10     	; 0x2618 <__pack_f+0x4a>
    260e:	e1 14       	cp	r14, r1
    2610:	f1 04       	cpc	r15, r1
    2612:	01 05       	cpc	r16, r1
    2614:	11 05       	cpc	r17, r1
    2616:	19 f4       	brne	.+6      	; 0x261e <__pack_f+0x50>
    2618:	e0 e0       	ldi	r30, 0x00	; 0
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	96 c0       	rjmp	.+300    	; 0x274a <__pack_f+0x17c>
    261e:	62 81       	ldd	r22, Z+2	; 0x02
    2620:	73 81       	ldd	r23, Z+3	; 0x03
    2622:	9f ef       	ldi	r25, 0xFF	; 255
    2624:	62 38       	cpi	r22, 0x82	; 130
    2626:	79 07       	cpc	r23, r25
    2628:	0c f0       	brlt	.+2      	; 0x262c <__pack_f+0x5e>
    262a:	5b c0       	rjmp	.+182    	; 0x26e2 <__pack_f+0x114>
    262c:	22 e8       	ldi	r18, 0x82	; 130
    262e:	3f ef       	ldi	r19, 0xFF	; 255
    2630:	26 1b       	sub	r18, r22
    2632:	37 0b       	sbc	r19, r23
    2634:	2a 31       	cpi	r18, 0x1A	; 26
    2636:	31 05       	cpc	r19, r1
    2638:	2c f0       	brlt	.+10     	; 0x2644 <__pack_f+0x76>
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	2a c0       	rjmp	.+84     	; 0x2698 <__pack_f+0xca>
    2644:	b8 01       	movw	r22, r16
    2646:	a7 01       	movw	r20, r14
    2648:	02 2e       	mov	r0, r18
    264a:	04 c0       	rjmp	.+8      	; 0x2654 <__pack_f+0x86>
    264c:	76 95       	lsr	r23
    264e:	67 95       	ror	r22
    2650:	57 95       	ror	r21
    2652:	47 95       	ror	r20
    2654:	0a 94       	dec	r0
    2656:	d2 f7       	brpl	.-12     	; 0x264c <__pack_f+0x7e>
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	a0 e0       	ldi	r26, 0x00	; 0
    265e:	b0 e0       	ldi	r27, 0x00	; 0
    2660:	04 c0       	rjmp	.+8      	; 0x266a <__pack_f+0x9c>
    2662:	88 0f       	add	r24, r24
    2664:	99 1f       	adc	r25, r25
    2666:	aa 1f       	adc	r26, r26
    2668:	bb 1f       	adc	r27, r27
    266a:	2a 95       	dec	r18
    266c:	d2 f7       	brpl	.-12     	; 0x2662 <__pack_f+0x94>
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	a1 09       	sbc	r26, r1
    2672:	b1 09       	sbc	r27, r1
    2674:	8e 21       	and	r24, r14
    2676:	9f 21       	and	r25, r15
    2678:	a0 23       	and	r26, r16
    267a:	b1 23       	and	r27, r17
    267c:	00 97       	sbiw	r24, 0x00	; 0
    267e:	a1 05       	cpc	r26, r1
    2680:	b1 05       	cpc	r27, r1
    2682:	21 f0       	breq	.+8      	; 0x268c <__pack_f+0xbe>
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	a0 e0       	ldi	r26, 0x00	; 0
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	9a 01       	movw	r18, r20
    268e:	ab 01       	movw	r20, r22
    2690:	28 2b       	or	r18, r24
    2692:	39 2b       	or	r19, r25
    2694:	4a 2b       	or	r20, r26
    2696:	5b 2b       	or	r21, r27
    2698:	da 01       	movw	r26, r20
    269a:	c9 01       	movw	r24, r18
    269c:	8f 77       	andi	r24, 0x7F	; 127
    269e:	90 70       	andi	r25, 0x00	; 0
    26a0:	a0 70       	andi	r26, 0x00	; 0
    26a2:	b0 70       	andi	r27, 0x00	; 0
    26a4:	80 34       	cpi	r24, 0x40	; 64
    26a6:	91 05       	cpc	r25, r1
    26a8:	a1 05       	cpc	r26, r1
    26aa:	b1 05       	cpc	r27, r1
    26ac:	39 f4       	brne	.+14     	; 0x26bc <__pack_f+0xee>
    26ae:	27 ff       	sbrs	r18, 7
    26b0:	09 c0       	rjmp	.+18     	; 0x26c4 <__pack_f+0xf6>
    26b2:	20 5c       	subi	r18, 0xC0	; 192
    26b4:	3f 4f       	sbci	r19, 0xFF	; 255
    26b6:	4f 4f       	sbci	r20, 0xFF	; 255
    26b8:	5f 4f       	sbci	r21, 0xFF	; 255
    26ba:	04 c0       	rjmp	.+8      	; 0x26c4 <__pack_f+0xf6>
    26bc:	21 5c       	subi	r18, 0xC1	; 193
    26be:	3f 4f       	sbci	r19, 0xFF	; 255
    26c0:	4f 4f       	sbci	r20, 0xFF	; 255
    26c2:	5f 4f       	sbci	r21, 0xFF	; 255
    26c4:	e0 e0       	ldi	r30, 0x00	; 0
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	20 30       	cpi	r18, 0x00	; 0
    26ca:	a0 e0       	ldi	r26, 0x00	; 0
    26cc:	3a 07       	cpc	r19, r26
    26ce:	a0 e0       	ldi	r26, 0x00	; 0
    26d0:	4a 07       	cpc	r20, r26
    26d2:	a0 e4       	ldi	r26, 0x40	; 64
    26d4:	5a 07       	cpc	r21, r26
    26d6:	10 f0       	brcs	.+4      	; 0x26dc <__pack_f+0x10e>
    26d8:	e1 e0       	ldi	r30, 0x01	; 1
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	79 01       	movw	r14, r18
    26de:	8a 01       	movw	r16, r20
    26e0:	27 c0       	rjmp	.+78     	; 0x2730 <__pack_f+0x162>
    26e2:	60 38       	cpi	r22, 0x80	; 128
    26e4:	71 05       	cpc	r23, r1
    26e6:	64 f5       	brge	.+88     	; 0x2740 <__pack_f+0x172>
    26e8:	fb 01       	movw	r30, r22
    26ea:	e1 58       	subi	r30, 0x81	; 129
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	d8 01       	movw	r26, r16
    26f0:	c7 01       	movw	r24, r14
    26f2:	8f 77       	andi	r24, 0x7F	; 127
    26f4:	90 70       	andi	r25, 0x00	; 0
    26f6:	a0 70       	andi	r26, 0x00	; 0
    26f8:	b0 70       	andi	r27, 0x00	; 0
    26fa:	80 34       	cpi	r24, 0x40	; 64
    26fc:	91 05       	cpc	r25, r1
    26fe:	a1 05       	cpc	r26, r1
    2700:	b1 05       	cpc	r27, r1
    2702:	39 f4       	brne	.+14     	; 0x2712 <__pack_f+0x144>
    2704:	e7 fe       	sbrs	r14, 7
    2706:	0d c0       	rjmp	.+26     	; 0x2722 <__pack_f+0x154>
    2708:	80 e4       	ldi	r24, 0x40	; 64
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	a0 e0       	ldi	r26, 0x00	; 0
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	04 c0       	rjmp	.+8      	; 0x271a <__pack_f+0x14c>
    2712:	8f e3       	ldi	r24, 0x3F	; 63
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	a0 e0       	ldi	r26, 0x00	; 0
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	e8 0e       	add	r14, r24
    271c:	f9 1e       	adc	r15, r25
    271e:	0a 1f       	adc	r16, r26
    2720:	1b 1f       	adc	r17, r27
    2722:	17 ff       	sbrs	r17, 7
    2724:	05 c0       	rjmp	.+10     	; 0x2730 <__pack_f+0x162>
    2726:	16 95       	lsr	r17
    2728:	07 95       	ror	r16
    272a:	f7 94       	ror	r15
    272c:	e7 94       	ror	r14
    272e:	31 96       	adiw	r30, 0x01	; 1
    2730:	87 e0       	ldi	r24, 0x07	; 7
    2732:	16 95       	lsr	r17
    2734:	07 95       	ror	r16
    2736:	f7 94       	ror	r15
    2738:	e7 94       	ror	r14
    273a:	8a 95       	dec	r24
    273c:	d1 f7       	brne	.-12     	; 0x2732 <__pack_f+0x164>
    273e:	05 c0       	rjmp	.+10     	; 0x274a <__pack_f+0x17c>
    2740:	ee 24       	eor	r14, r14
    2742:	ff 24       	eor	r15, r15
    2744:	87 01       	movw	r16, r14
    2746:	ef ef       	ldi	r30, 0xFF	; 255
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	6e 2f       	mov	r22, r30
    274c:	67 95       	ror	r22
    274e:	66 27       	eor	r22, r22
    2750:	67 95       	ror	r22
    2752:	90 2f       	mov	r25, r16
    2754:	9f 77       	andi	r25, 0x7F	; 127
    2756:	d7 94       	ror	r13
    2758:	dd 24       	eor	r13, r13
    275a:	d7 94       	ror	r13
    275c:	8e 2f       	mov	r24, r30
    275e:	86 95       	lsr	r24
    2760:	49 2f       	mov	r20, r25
    2762:	46 2b       	or	r20, r22
    2764:	58 2f       	mov	r21, r24
    2766:	5d 29       	or	r21, r13
    2768:	b7 01       	movw	r22, r14
    276a:	ca 01       	movw	r24, r20
    276c:	1f 91       	pop	r17
    276e:	0f 91       	pop	r16
    2770:	ff 90       	pop	r15
    2772:	ef 90       	pop	r14
    2774:	df 90       	pop	r13
    2776:	08 95       	ret

00002778 <__unpack_f>:
    2778:	fc 01       	movw	r30, r24
    277a:	db 01       	movw	r26, r22
    277c:	40 81       	ld	r20, Z
    277e:	51 81       	ldd	r21, Z+1	; 0x01
    2780:	22 81       	ldd	r18, Z+2	; 0x02
    2782:	62 2f       	mov	r22, r18
    2784:	6f 77       	andi	r22, 0x7F	; 127
    2786:	70 e0       	ldi	r23, 0x00	; 0
    2788:	22 1f       	adc	r18, r18
    278a:	22 27       	eor	r18, r18
    278c:	22 1f       	adc	r18, r18
    278e:	93 81       	ldd	r25, Z+3	; 0x03
    2790:	89 2f       	mov	r24, r25
    2792:	88 0f       	add	r24, r24
    2794:	82 2b       	or	r24, r18
    2796:	28 2f       	mov	r18, r24
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	99 1f       	adc	r25, r25
    279c:	99 27       	eor	r25, r25
    279e:	99 1f       	adc	r25, r25
    27a0:	11 96       	adiw	r26, 0x01	; 1
    27a2:	9c 93       	st	X, r25
    27a4:	11 97       	sbiw	r26, 0x01	; 1
    27a6:	21 15       	cp	r18, r1
    27a8:	31 05       	cpc	r19, r1
    27aa:	a9 f5       	brne	.+106    	; 0x2816 <__unpack_f+0x9e>
    27ac:	41 15       	cp	r20, r1
    27ae:	51 05       	cpc	r21, r1
    27b0:	61 05       	cpc	r22, r1
    27b2:	71 05       	cpc	r23, r1
    27b4:	11 f4       	brne	.+4      	; 0x27ba <__unpack_f+0x42>
    27b6:	82 e0       	ldi	r24, 0x02	; 2
    27b8:	37 c0       	rjmp	.+110    	; 0x2828 <__unpack_f+0xb0>
    27ba:	82 e8       	ldi	r24, 0x82	; 130
    27bc:	9f ef       	ldi	r25, 0xFF	; 255
    27be:	13 96       	adiw	r26, 0x03	; 3
    27c0:	9c 93       	st	X, r25
    27c2:	8e 93       	st	-X, r24
    27c4:	12 97       	sbiw	r26, 0x02	; 2
    27c6:	9a 01       	movw	r18, r20
    27c8:	ab 01       	movw	r20, r22
    27ca:	67 e0       	ldi	r22, 0x07	; 7
    27cc:	22 0f       	add	r18, r18
    27ce:	33 1f       	adc	r19, r19
    27d0:	44 1f       	adc	r20, r20
    27d2:	55 1f       	adc	r21, r21
    27d4:	6a 95       	dec	r22
    27d6:	d1 f7       	brne	.-12     	; 0x27cc <__unpack_f+0x54>
    27d8:	83 e0       	ldi	r24, 0x03	; 3
    27da:	8c 93       	st	X, r24
    27dc:	0d c0       	rjmp	.+26     	; 0x27f8 <__unpack_f+0x80>
    27de:	22 0f       	add	r18, r18
    27e0:	33 1f       	adc	r19, r19
    27e2:	44 1f       	adc	r20, r20
    27e4:	55 1f       	adc	r21, r21
    27e6:	12 96       	adiw	r26, 0x02	; 2
    27e8:	8d 91       	ld	r24, X+
    27ea:	9c 91       	ld	r25, X
    27ec:	13 97       	sbiw	r26, 0x03	; 3
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	13 96       	adiw	r26, 0x03	; 3
    27f2:	9c 93       	st	X, r25
    27f4:	8e 93       	st	-X, r24
    27f6:	12 97       	sbiw	r26, 0x02	; 2
    27f8:	20 30       	cpi	r18, 0x00	; 0
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	38 07       	cpc	r19, r24
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	48 07       	cpc	r20, r24
    2802:	80 e4       	ldi	r24, 0x40	; 64
    2804:	58 07       	cpc	r21, r24
    2806:	58 f3       	brcs	.-42     	; 0x27de <__unpack_f+0x66>
    2808:	14 96       	adiw	r26, 0x04	; 4
    280a:	2d 93       	st	X+, r18
    280c:	3d 93       	st	X+, r19
    280e:	4d 93       	st	X+, r20
    2810:	5c 93       	st	X, r21
    2812:	17 97       	sbiw	r26, 0x07	; 7
    2814:	08 95       	ret
    2816:	2f 3f       	cpi	r18, 0xFF	; 255
    2818:	31 05       	cpc	r19, r1
    281a:	79 f4       	brne	.+30     	; 0x283a <__unpack_f+0xc2>
    281c:	41 15       	cp	r20, r1
    281e:	51 05       	cpc	r21, r1
    2820:	61 05       	cpc	r22, r1
    2822:	71 05       	cpc	r23, r1
    2824:	19 f4       	brne	.+6      	; 0x282c <__unpack_f+0xb4>
    2826:	84 e0       	ldi	r24, 0x04	; 4
    2828:	8c 93       	st	X, r24
    282a:	08 95       	ret
    282c:	64 ff       	sbrs	r22, 4
    282e:	03 c0       	rjmp	.+6      	; 0x2836 <__unpack_f+0xbe>
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	8c 93       	st	X, r24
    2834:	12 c0       	rjmp	.+36     	; 0x285a <__unpack_f+0xe2>
    2836:	1c 92       	st	X, r1
    2838:	10 c0       	rjmp	.+32     	; 0x285a <__unpack_f+0xe2>
    283a:	2f 57       	subi	r18, 0x7F	; 127
    283c:	30 40       	sbci	r19, 0x00	; 0
    283e:	13 96       	adiw	r26, 0x03	; 3
    2840:	3c 93       	st	X, r19
    2842:	2e 93       	st	-X, r18
    2844:	12 97       	sbiw	r26, 0x02	; 2
    2846:	83 e0       	ldi	r24, 0x03	; 3
    2848:	8c 93       	st	X, r24
    284a:	87 e0       	ldi	r24, 0x07	; 7
    284c:	44 0f       	add	r20, r20
    284e:	55 1f       	adc	r21, r21
    2850:	66 1f       	adc	r22, r22
    2852:	77 1f       	adc	r23, r23
    2854:	8a 95       	dec	r24
    2856:	d1 f7       	brne	.-12     	; 0x284c <__unpack_f+0xd4>
    2858:	70 64       	ori	r23, 0x40	; 64
    285a:	14 96       	adiw	r26, 0x04	; 4
    285c:	4d 93       	st	X+, r20
    285e:	5d 93       	st	X+, r21
    2860:	6d 93       	st	X+, r22
    2862:	7c 93       	st	X, r23
    2864:	17 97       	sbiw	r26, 0x07	; 7
    2866:	08 95       	ret

00002868 <__fpcmp_parts_f>:
    2868:	1f 93       	push	r17
    286a:	dc 01       	movw	r26, r24
    286c:	fb 01       	movw	r30, r22
    286e:	9c 91       	ld	r25, X
    2870:	92 30       	cpi	r25, 0x02	; 2
    2872:	08 f4       	brcc	.+2      	; 0x2876 <__fpcmp_parts_f+0xe>
    2874:	47 c0       	rjmp	.+142    	; 0x2904 <__fpcmp_parts_f+0x9c>
    2876:	80 81       	ld	r24, Z
    2878:	82 30       	cpi	r24, 0x02	; 2
    287a:	08 f4       	brcc	.+2      	; 0x287e <__fpcmp_parts_f+0x16>
    287c:	43 c0       	rjmp	.+134    	; 0x2904 <__fpcmp_parts_f+0x9c>
    287e:	94 30       	cpi	r25, 0x04	; 4
    2880:	51 f4       	brne	.+20     	; 0x2896 <__fpcmp_parts_f+0x2e>
    2882:	11 96       	adiw	r26, 0x01	; 1
    2884:	1c 91       	ld	r17, X
    2886:	84 30       	cpi	r24, 0x04	; 4
    2888:	99 f5       	brne	.+102    	; 0x28f0 <__fpcmp_parts_f+0x88>
    288a:	81 81       	ldd	r24, Z+1	; 0x01
    288c:	68 2f       	mov	r22, r24
    288e:	70 e0       	ldi	r23, 0x00	; 0
    2890:	61 1b       	sub	r22, r17
    2892:	71 09       	sbc	r23, r1
    2894:	3f c0       	rjmp	.+126    	; 0x2914 <__fpcmp_parts_f+0xac>
    2896:	84 30       	cpi	r24, 0x04	; 4
    2898:	21 f0       	breq	.+8      	; 0x28a2 <__fpcmp_parts_f+0x3a>
    289a:	92 30       	cpi	r25, 0x02	; 2
    289c:	31 f4       	brne	.+12     	; 0x28aa <__fpcmp_parts_f+0x42>
    289e:	82 30       	cpi	r24, 0x02	; 2
    28a0:	b9 f1       	breq	.+110    	; 0x2910 <__fpcmp_parts_f+0xa8>
    28a2:	81 81       	ldd	r24, Z+1	; 0x01
    28a4:	88 23       	and	r24, r24
    28a6:	89 f1       	breq	.+98     	; 0x290a <__fpcmp_parts_f+0xa2>
    28a8:	2d c0       	rjmp	.+90     	; 0x2904 <__fpcmp_parts_f+0x9c>
    28aa:	11 96       	adiw	r26, 0x01	; 1
    28ac:	1c 91       	ld	r17, X
    28ae:	11 97       	sbiw	r26, 0x01	; 1
    28b0:	82 30       	cpi	r24, 0x02	; 2
    28b2:	f1 f0       	breq	.+60     	; 0x28f0 <__fpcmp_parts_f+0x88>
    28b4:	81 81       	ldd	r24, Z+1	; 0x01
    28b6:	18 17       	cp	r17, r24
    28b8:	d9 f4       	brne	.+54     	; 0x28f0 <__fpcmp_parts_f+0x88>
    28ba:	12 96       	adiw	r26, 0x02	; 2
    28bc:	2d 91       	ld	r18, X+
    28be:	3c 91       	ld	r19, X
    28c0:	13 97       	sbiw	r26, 0x03	; 3
    28c2:	82 81       	ldd	r24, Z+2	; 0x02
    28c4:	93 81       	ldd	r25, Z+3	; 0x03
    28c6:	82 17       	cp	r24, r18
    28c8:	93 07       	cpc	r25, r19
    28ca:	94 f0       	brlt	.+36     	; 0x28f0 <__fpcmp_parts_f+0x88>
    28cc:	28 17       	cp	r18, r24
    28ce:	39 07       	cpc	r19, r25
    28d0:	bc f0       	brlt	.+46     	; 0x2900 <__fpcmp_parts_f+0x98>
    28d2:	14 96       	adiw	r26, 0x04	; 4
    28d4:	8d 91       	ld	r24, X+
    28d6:	9d 91       	ld	r25, X+
    28d8:	0d 90       	ld	r0, X+
    28da:	bc 91       	ld	r27, X
    28dc:	a0 2d       	mov	r26, r0
    28de:	24 81       	ldd	r18, Z+4	; 0x04
    28e0:	35 81       	ldd	r19, Z+5	; 0x05
    28e2:	46 81       	ldd	r20, Z+6	; 0x06
    28e4:	57 81       	ldd	r21, Z+7	; 0x07
    28e6:	28 17       	cp	r18, r24
    28e8:	39 07       	cpc	r19, r25
    28ea:	4a 07       	cpc	r20, r26
    28ec:	5b 07       	cpc	r21, r27
    28ee:	18 f4       	brcc	.+6      	; 0x28f6 <__fpcmp_parts_f+0x8e>
    28f0:	11 23       	and	r17, r17
    28f2:	41 f0       	breq	.+16     	; 0x2904 <__fpcmp_parts_f+0x9c>
    28f4:	0a c0       	rjmp	.+20     	; 0x290a <__fpcmp_parts_f+0xa2>
    28f6:	82 17       	cp	r24, r18
    28f8:	93 07       	cpc	r25, r19
    28fa:	a4 07       	cpc	r26, r20
    28fc:	b5 07       	cpc	r27, r21
    28fe:	40 f4       	brcc	.+16     	; 0x2910 <__fpcmp_parts_f+0xa8>
    2900:	11 23       	and	r17, r17
    2902:	19 f0       	breq	.+6      	; 0x290a <__fpcmp_parts_f+0xa2>
    2904:	61 e0       	ldi	r22, 0x01	; 1
    2906:	70 e0       	ldi	r23, 0x00	; 0
    2908:	05 c0       	rjmp	.+10     	; 0x2914 <__fpcmp_parts_f+0xac>
    290a:	6f ef       	ldi	r22, 0xFF	; 255
    290c:	7f ef       	ldi	r23, 0xFF	; 255
    290e:	02 c0       	rjmp	.+4      	; 0x2914 <__fpcmp_parts_f+0xac>
    2910:	60 e0       	ldi	r22, 0x00	; 0
    2912:	70 e0       	ldi	r23, 0x00	; 0
    2914:	cb 01       	movw	r24, r22
    2916:	1f 91       	pop	r17
    2918:	08 95       	ret

0000291a <__udivmodhi4>:
    291a:	aa 1b       	sub	r26, r26
    291c:	bb 1b       	sub	r27, r27
    291e:	51 e1       	ldi	r21, 0x11	; 17
    2920:	07 c0       	rjmp	.+14     	; 0x2930 <__udivmodhi4_ep>

00002922 <__udivmodhi4_loop>:
    2922:	aa 1f       	adc	r26, r26
    2924:	bb 1f       	adc	r27, r27
    2926:	a6 17       	cp	r26, r22
    2928:	b7 07       	cpc	r27, r23
    292a:	10 f0       	brcs	.+4      	; 0x2930 <__udivmodhi4_ep>
    292c:	a6 1b       	sub	r26, r22
    292e:	b7 0b       	sbc	r27, r23

00002930 <__udivmodhi4_ep>:
    2930:	88 1f       	adc	r24, r24
    2932:	99 1f       	adc	r25, r25
    2934:	5a 95       	dec	r21
    2936:	a9 f7       	brne	.-22     	; 0x2922 <__udivmodhi4_loop>
    2938:	80 95       	com	r24
    293a:	90 95       	com	r25
    293c:	bc 01       	movw	r22, r24
    293e:	cd 01       	movw	r24, r26
    2940:	08 95       	ret

00002942 <__prologue_saves__>:
    2942:	2f 92       	push	r2
    2944:	3f 92       	push	r3
    2946:	4f 92       	push	r4
    2948:	5f 92       	push	r5
    294a:	6f 92       	push	r6
    294c:	7f 92       	push	r7
    294e:	8f 92       	push	r8
    2950:	9f 92       	push	r9
    2952:	af 92       	push	r10
    2954:	bf 92       	push	r11
    2956:	cf 92       	push	r12
    2958:	df 92       	push	r13
    295a:	ef 92       	push	r14
    295c:	ff 92       	push	r15
    295e:	0f 93       	push	r16
    2960:	1f 93       	push	r17
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	cd b7       	in	r28, 0x3d	; 61
    2968:	de b7       	in	r29, 0x3e	; 62
    296a:	ca 1b       	sub	r28, r26
    296c:	db 0b       	sbc	r29, r27
    296e:	0f b6       	in	r0, 0x3f	; 63
    2970:	f8 94       	cli
    2972:	de bf       	out	0x3e, r29	; 62
    2974:	0f be       	out	0x3f, r0	; 63
    2976:	cd bf       	out	0x3d, r28	; 61
    2978:	19 94       	eijmp

0000297a <__epilogue_restores__>:
    297a:	2a 88       	ldd	r2, Y+18	; 0x12
    297c:	39 88       	ldd	r3, Y+17	; 0x11
    297e:	48 88       	ldd	r4, Y+16	; 0x10
    2980:	5f 84       	ldd	r5, Y+15	; 0x0f
    2982:	6e 84       	ldd	r6, Y+14	; 0x0e
    2984:	7d 84       	ldd	r7, Y+13	; 0x0d
    2986:	8c 84       	ldd	r8, Y+12	; 0x0c
    2988:	9b 84       	ldd	r9, Y+11	; 0x0b
    298a:	aa 84       	ldd	r10, Y+10	; 0x0a
    298c:	b9 84       	ldd	r11, Y+9	; 0x09
    298e:	c8 84       	ldd	r12, Y+8	; 0x08
    2990:	df 80       	ldd	r13, Y+7	; 0x07
    2992:	ee 80       	ldd	r14, Y+6	; 0x06
    2994:	fd 80       	ldd	r15, Y+5	; 0x05
    2996:	0c 81       	ldd	r16, Y+4	; 0x04
    2998:	1b 81       	ldd	r17, Y+3	; 0x03
    299a:	aa 81       	ldd	r26, Y+2	; 0x02
    299c:	b9 81       	ldd	r27, Y+1	; 0x01
    299e:	ce 0f       	add	r28, r30
    29a0:	d1 1d       	adc	r29, r1
    29a2:	0f b6       	in	r0, 0x3f	; 63
    29a4:	f8 94       	cli
    29a6:	de bf       	out	0x3e, r29	; 62
    29a8:	0f be       	out	0x3f, r0	; 63
    29aa:	cd bf       	out	0x3d, r28	; 61
    29ac:	ed 01       	movw	r28, r26
    29ae:	08 95       	ret

000029b0 <floor>:
    29b0:	3b d0       	rcall	.+118    	; 0x2a28 <__fp_trunc>
    29b2:	80 f0       	brcs	.+32     	; 0x29d4 <floor+0x24>
    29b4:	9f 37       	cpi	r25, 0x7F	; 127
    29b6:	40 f4       	brcc	.+16     	; 0x29c8 <floor+0x18>
    29b8:	91 11       	cpse	r25, r1
    29ba:	0e f0       	brts	.+2      	; 0x29be <floor+0xe>
    29bc:	4d c0       	rjmp	.+154    	; 0x2a58 <__fp_szero>
    29be:	60 e0       	ldi	r22, 0x00	; 0
    29c0:	70 e0       	ldi	r23, 0x00	; 0
    29c2:	80 e8       	ldi	r24, 0x80	; 128
    29c4:	9f eb       	ldi	r25, 0xBF	; 191
    29c6:	08 95       	ret
    29c8:	26 f4       	brtc	.+8      	; 0x29d2 <floor+0x22>
    29ca:	1b 16       	cp	r1, r27
    29cc:	61 1d       	adc	r22, r1
    29ce:	71 1d       	adc	r23, r1
    29d0:	81 1d       	adc	r24, r1
    29d2:	01 c0       	rjmp	.+2      	; 0x29d6 <__fp_mintl>
    29d4:	1b c0       	rjmp	.+54     	; 0x2a0c <__fp_mpack>

000029d6 <__fp_mintl>:
    29d6:	88 23       	and	r24, r24
    29d8:	71 f4       	brne	.+28     	; 0x29f6 <__fp_mintl+0x20>
    29da:	77 23       	and	r23, r23
    29dc:	21 f0       	breq	.+8      	; 0x29e6 <__fp_mintl+0x10>
    29de:	98 50       	subi	r25, 0x08	; 8
    29e0:	87 2b       	or	r24, r23
    29e2:	76 2f       	mov	r23, r22
    29e4:	07 c0       	rjmp	.+14     	; 0x29f4 <__fp_mintl+0x1e>
    29e6:	66 23       	and	r22, r22
    29e8:	11 f4       	brne	.+4      	; 0x29ee <__fp_mintl+0x18>
    29ea:	99 27       	eor	r25, r25
    29ec:	0d c0       	rjmp	.+26     	; 0x2a08 <__fp_mintl+0x32>
    29ee:	90 51       	subi	r25, 0x10	; 16
    29f0:	86 2b       	or	r24, r22
    29f2:	70 e0       	ldi	r23, 0x00	; 0
    29f4:	60 e0       	ldi	r22, 0x00	; 0
    29f6:	2a f0       	brmi	.+10     	; 0x2a02 <__fp_mintl+0x2c>
    29f8:	9a 95       	dec	r25
    29fa:	66 0f       	add	r22, r22
    29fc:	77 1f       	adc	r23, r23
    29fe:	88 1f       	adc	r24, r24
    2a00:	da f7       	brpl	.-10     	; 0x29f8 <__fp_mintl+0x22>
    2a02:	88 0f       	add	r24, r24
    2a04:	96 95       	lsr	r25
    2a06:	87 95       	ror	r24
    2a08:	97 f9       	bld	r25, 7
    2a0a:	08 95       	ret

00002a0c <__fp_mpack>:
    2a0c:	9f 3f       	cpi	r25, 0xFF	; 255
    2a0e:	31 f0       	breq	.+12     	; 0x2a1c <__fp_mpack_finite+0xc>

00002a10 <__fp_mpack_finite>:
    2a10:	91 50       	subi	r25, 0x01	; 1
    2a12:	20 f4       	brcc	.+8      	; 0x2a1c <__fp_mpack_finite+0xc>
    2a14:	87 95       	ror	r24
    2a16:	77 95       	ror	r23
    2a18:	67 95       	ror	r22
    2a1a:	b7 95       	ror	r27
    2a1c:	88 0f       	add	r24, r24
    2a1e:	91 1d       	adc	r25, r1
    2a20:	96 95       	lsr	r25
    2a22:	87 95       	ror	r24
    2a24:	97 f9       	bld	r25, 7
    2a26:	08 95       	ret

00002a28 <__fp_trunc>:
    2a28:	25 d0       	rcall	.+74     	; 0x2a74 <__fp_splitA>
    2a2a:	a0 f0       	brcs	.+40     	; 0x2a54 <__fp_trunc+0x2c>
    2a2c:	be e7       	ldi	r27, 0x7E	; 126
    2a2e:	b9 17       	cp	r27, r25
    2a30:	88 f4       	brcc	.+34     	; 0x2a54 <__fp_trunc+0x2c>
    2a32:	bb 27       	eor	r27, r27
    2a34:	9f 38       	cpi	r25, 0x8F	; 143
    2a36:	60 f4       	brcc	.+24     	; 0x2a50 <__fp_trunc+0x28>
    2a38:	16 16       	cp	r1, r22
    2a3a:	b1 1d       	adc	r27, r1
    2a3c:	67 2f       	mov	r22, r23
    2a3e:	78 2f       	mov	r23, r24
    2a40:	88 27       	eor	r24, r24
    2a42:	98 5f       	subi	r25, 0xF8	; 248
    2a44:	f7 cf       	rjmp	.-18     	; 0x2a34 <__fp_trunc+0xc>
    2a46:	86 95       	lsr	r24
    2a48:	77 95       	ror	r23
    2a4a:	67 95       	ror	r22
    2a4c:	b1 1d       	adc	r27, r1
    2a4e:	93 95       	inc	r25
    2a50:	96 39       	cpi	r25, 0x96	; 150
    2a52:	c8 f3       	brcs	.-14     	; 0x2a46 <__fp_trunc+0x1e>
    2a54:	08 95       	ret

00002a56 <__fp_zero>:
    2a56:	e8 94       	clt

00002a58 <__fp_szero>:
    2a58:	bb 27       	eor	r27, r27
    2a5a:	66 27       	eor	r22, r22
    2a5c:	77 27       	eor	r23, r23
    2a5e:	cb 01       	movw	r24, r22
    2a60:	97 f9       	bld	r25, 7
    2a62:	08 95       	ret

00002a64 <__fp_split3>:
    2a64:	57 fd       	sbrc	r21, 7
    2a66:	90 58       	subi	r25, 0x80	; 128
    2a68:	44 0f       	add	r20, r20
    2a6a:	55 1f       	adc	r21, r21
    2a6c:	59 f0       	breq	.+22     	; 0x2a84 <__fp_splitA+0x10>
    2a6e:	5f 3f       	cpi	r21, 0xFF	; 255
    2a70:	71 f0       	breq	.+28     	; 0x2a8e <__fp_splitA+0x1a>
    2a72:	47 95       	ror	r20

00002a74 <__fp_splitA>:
    2a74:	88 0f       	add	r24, r24
    2a76:	97 fb       	bst	r25, 7
    2a78:	99 1f       	adc	r25, r25
    2a7a:	61 f0       	breq	.+24     	; 0x2a94 <__fp_splitA+0x20>
    2a7c:	9f 3f       	cpi	r25, 0xFF	; 255
    2a7e:	79 f0       	breq	.+30     	; 0x2a9e <__fp_splitA+0x2a>
    2a80:	87 95       	ror	r24
    2a82:	08 95       	ret
    2a84:	12 16       	cp	r1, r18
    2a86:	13 06       	cpc	r1, r19
    2a88:	14 06       	cpc	r1, r20
    2a8a:	55 1f       	adc	r21, r21
    2a8c:	f2 cf       	rjmp	.-28     	; 0x2a72 <__fp_split3+0xe>
    2a8e:	46 95       	lsr	r20
    2a90:	f1 df       	rcall	.-30     	; 0x2a74 <__fp_splitA>
    2a92:	08 c0       	rjmp	.+16     	; 0x2aa4 <__fp_splitA+0x30>
    2a94:	16 16       	cp	r1, r22
    2a96:	17 06       	cpc	r1, r23
    2a98:	18 06       	cpc	r1, r24
    2a9a:	99 1f       	adc	r25, r25
    2a9c:	f1 cf       	rjmp	.-30     	; 0x2a80 <__fp_splitA+0xc>
    2a9e:	86 95       	lsr	r24
    2aa0:	71 05       	cpc	r23, r1
    2aa2:	61 05       	cpc	r22, r1
    2aa4:	08 94       	sec
    2aa6:	08 95       	ret

00002aa8 <_exit>:
    2aa8:	f8 94       	cli

00002aaa <__stop_program>:
    2aaa:	ff cf       	rjmp	.-2      	; 0x2aaa <__stop_program>
