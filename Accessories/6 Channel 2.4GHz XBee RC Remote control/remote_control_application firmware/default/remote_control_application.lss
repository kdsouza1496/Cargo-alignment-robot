
remote_control_application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  000017d4  00001868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080016a  0080016a  00001972  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001972  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000211  00000000  00000000  00001992  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000508  00000000  00000000  00001ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000015a  00000000  00000000  000020ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000840  00000000  00000000  00002205  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00002a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d0  00000000  00000000  00002b18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	f9 c0       	rjmp	.+498    	; 0x204 <__vector_8>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	25 c1       	rjmp	.+586    	; 0x262 <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	11 e0       	ldi	r17, 0x01	; 1
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e4 ed       	ldi	r30, 0xD4	; 212
      3a:	f7 e1       	ldi	r31, 0x17	; 23
      3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
      42:	aa 36       	cpi	r26, 0x6A	; 106
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
      48:	11 e0       	ldi	r17, 0x01	; 1
      4a:	aa e6       	ldi	r26, 0x6A	; 106
      4c:	b1 e0       	ldi	r27, 0x01	; 1
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a7 37       	cpi	r26, 0x77	; 119
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	48 d2       	rcall	.+1168   	; 0x4ea <main>
      5a:	ba cb       	rjmp	.-2188   	; 0xfffff7d0 <__eeprom_end+0xff7ef7d0>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <buzzer_pin_config>:
unsigned char flag2 = 0;
//--------------------------------------------------------------------------------
// function to initialize Buzzer for debugging
//--------------------------------------------------------------------------------
void buzzer_pin_config (void)
{
      5e:	df 93       	push	r29
      60:	cf 93       	push	r28
      62:	cd b7       	in	r28, 0x3d	; 61
      64:	de b7       	in	r29, 0x3e	; 62
 DDRD = DDRD | 0x04;   //Setting PORTD 2 as output
      66:	a1 e3       	ldi	r26, 0x31	; 49
      68:	b0 e0       	ldi	r27, 0x00	; 0
      6a:	e1 e3       	ldi	r30, 0x31	; 49
      6c:	f0 e0       	ldi	r31, 0x00	; 0
      6e:	80 81       	ld	r24, Z
      70:	84 60       	ori	r24, 0x04	; 4
      72:	8c 93       	st	X, r24
 PORTD = PORTD & 0xFB; //Setting PORTD 2 logic low to turnoff buzzer
      74:	a2 e3       	ldi	r26, 0x32	; 50
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	e2 e3       	ldi	r30, 0x32	; 50
      7a:	f0 e0       	ldi	r31, 0x00	; 0
      7c:	80 81       	ld	r24, Z
      7e:	8b 7f       	andi	r24, 0xFB	; 251
      80:	8c 93       	st	X, r24
}
      82:	cf 91       	pop	r28
      84:	df 91       	pop	r29
      86:	08 95       	ret

00000088 <buzzer_on>:

void buzzer_on (void)
{
      88:	df 93       	push	r29
      8a:	cf 93       	push	r28
      8c:	0f 92       	push	r0
      8e:	cd b7       	in	r28, 0x3d	; 61
      90:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
      92:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PIND;
      94:	e0 e3       	ldi	r30, 0x30	; 48
      96:	f0 e0       	ldi	r31, 0x00	; 0
      98:	80 81       	ld	r24, Z
      9a:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x04;
      9c:	89 81       	ldd	r24, Y+1	; 0x01
      9e:	84 60       	ori	r24, 0x04	; 4
      a0:	89 83       	std	Y+1, r24	; 0x01
 PORTD = port_restore;
      a2:	e2 e3       	ldi	r30, 0x32	; 50
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	89 81       	ldd	r24, Y+1	; 0x01
      a8:	80 83       	st	Z, r24
}
      aa:	0f 90       	pop	r0
      ac:	cf 91       	pop	r28
      ae:	df 91       	pop	r29
      b0:	08 95       	ret

000000b2 <buzzer_off>:

void buzzer_off (void)
{
      b2:	df 93       	push	r29
      b4:	cf 93       	push	r28
      b6:	0f 92       	push	r0
      b8:	cd b7       	in	r28, 0x3d	; 61
      ba:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
      bc:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PIND;
      be:	e0 e3       	ldi	r30, 0x30	; 48
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	80 81       	ld	r24, Z
      c4:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xFB;
      c6:	89 81       	ldd	r24, Y+1	; 0x01
      c8:	8b 7f       	andi	r24, 0xFB	; 251
      ca:	89 83       	std	Y+1, r24	; 0x01
 PORTD = port_restore;
      cc:	e2 e3       	ldi	r30, 0x32	; 50
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	89 81       	ldd	r24, Y+1	; 0x01
      d2:	80 83       	st	Z, r24
}
      d4:	0f 90       	pop	r0
      d6:	cf 91       	pop	r28
      d8:	df 91       	pop	r29
      da:	08 95       	ret

000000dc <uart_init>:
// actual: baud rate:115200 (0.0%)
// char size: 8 bit
// parity: Disabled
//--------------------------------------------------------------------------------
void uart_init(void)
{
      dc:	df 93       	push	r29
      de:	cf 93       	push	r28
      e0:	cd b7       	in	r28, 0x3d	; 61
      e2:	de b7       	in	r29, 0x3e	; 62
 UCSRB = 0x00; //disable while setting baud rate
      e4:	ea e2       	ldi	r30, 0x2A	; 42
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	10 82       	st	Z, r1
 UCSRA = 0x00;
      ea:	eb e2       	ldi	r30, 0x2B	; 43
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	10 82       	st	Z, r1
 UCSRC = 0x86;
      f0:	e0 e4       	ldi	r30, 0x40	; 64
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	86 e8       	ldi	r24, 0x86	; 134
      f6:	80 83       	st	Z, r24
 UBRRL = 0x03; //set baud rate lo  //2F is for 7.3728MHz 9600 baudrate
      f8:	e9 e2       	ldi	r30, 0x29	; 41
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	83 e0       	ldi	r24, 0x03	; 3
      fe:	80 83       	st	Z, r24
 UBRRH = 0x00; //set baud rate hi
     100:	e0 e4       	ldi	r30, 0x40	; 64
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	10 82       	st	Z, r1
 UCSRB = 0x98; 
     106:	ea e2       	ldi	r30, 0x2A	; 42
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	88 e9       	ldi	r24, 0x98	; 152
     10c:	80 83       	st	Z, r24
}
     10e:	cf 91       	pop	r28
     110:	df 91       	pop	r29
     112:	08 95       	ret

00000114 <adc_init>:
//--------------------------------------------------------------------------------
// atmega8 ADC initialisation
// Conversion time: 225uS (Prescale : 128)
//--------------------------------------------------------------------------------
void adc_init(void)
{
     114:	df 93       	push	r29
     116:	cf 93       	push	r28
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
 ADCSRA = 0x00; //disable ADC
     11c:	e6 e2       	ldi	r30, 0x26	; 38
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	10 82       	st	Z, r1
 ACSR  = 0x80;
     122:	e8 e2       	ldi	r30, 0x28	; 40
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 e8       	ldi	r24, 0x80	; 128
     128:	80 83       	st	Z, r24
 ADCSRA = 0x87; //Enable ADC
     12a:	e6 e2       	ldi	r30, 0x26	; 38
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	87 e8       	ldi	r24, 0x87	; 135
     130:	80 83       	st	Z, r24
}
     132:	cf 91       	pop	r28
     134:	df 91       	pop	r29
     136:	08 95       	ret

00000138 <timer1_init>:
// WGM: 0) Normal, TOP=0xFFFF
// desired value: 1Hz
// actual value:  1.000Hz (0.0%)
//--------------------------------------------------------------------------------
void timer1_init(void)
{
     138:	df 93       	push	r29
     13a:	cf 93       	push	r28
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
     140:	ee e4       	ldi	r30, 0x4E	; 78
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	10 82       	st	Z, r1
 TCNT1H = 0x8F; //setup
     146:	ed e4       	ldi	r30, 0x4D	; 77
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	8f e8       	ldi	r24, 0x8F	; 143
     14c:	80 83       	st	Z, r24
 TCNT1L = 0x81;
     14e:	ec e4       	ldi	r30, 0x4C	; 76
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	81 e8       	ldi	r24, 0x81	; 129
     154:	80 83       	st	Z, r24
 TCCR1A = 0x00;
     156:	ef e4       	ldi	r30, 0x4F	; 79
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	10 82       	st	Z, r1
 TCCR1B = 0x04; //start Timer
     15c:	ee e4       	ldi	r30, 0x4E	; 78
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	84 e0       	ldi	r24, 0x04	; 4
     162:	80 83       	st	Z, r24
}
     164:	cf 91       	pop	r28
     166:	df 91       	pop	r29
     168:	08 95       	ret

0000016a <ADC_conversion>:

//--------------------------------------------------------------------------------
// Analog to digital convsersion 
//--------------------------------------------------------------------------------
unsigned char ADC_conversion()
{
     16a:	df 93       	push	r29
     16c:	cf 93       	push	r28
     16e:	0f 92       	push	r0
     170:	cd b7       	in	r28, 0x3d	; 61
     172:	de b7       	in	r29, 0x3e	; 62
 unsigned char adc_dataH=0;
     174:	19 82       	std	Y+1, r1	; 0x01
  
 ADCSRA = ADCSRA | 0x40;       //SOC
     176:	a6 e2       	ldi	r26, 0x26	; 38
     178:	b0 e0       	ldi	r27, 0x00	; 0
     17a:	e6 e2       	ldi	r30, 0x26	; 38
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	80 81       	ld	r24, Z
     180:	80 64       	ori	r24, 0x40	; 64
     182:	8c 93       	st	X, r24
 while((ADCSRA & 0x10)==0);    //Wait till conversion complete
     184:	e6 e2       	ldi	r30, 0x26	; 38
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	80 81       	ld	r24, Z
     18a:	88 2f       	mov	r24, r24
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	80 71       	andi	r24, 0x10	; 16
     190:	90 70       	andi	r25, 0x00	; 0
     192:	00 97       	sbiw	r24, 0x00	; 0
     194:	b9 f3       	breq	.-18     	; 0x184 <ADC_conversion+0x1a>
 adc_dataH=ADCH;               //Higher Bytes
     196:	e5 e2       	ldi	r30, 0x25	; 37
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	80 81       	ld	r24, Z
     19c:	89 83       	std	Y+1, r24	; 0x01
 return(adc_dataH);
     19e:	89 81       	ldd	r24, Y+1	; 0x01
}
     1a0:	0f 90       	pop	r0
     1a2:	cf 91       	pop	r28
     1a4:	df 91       	pop	r29
     1a6:	08 95       	ret

000001a8 <switch_pos>:

//--------------------------------------------------------------------------------
// left and right switch position identification
//--------------------------------------------------------------------------------
unsigned char switch_pos()
{
     1a8:	df 93       	push	r29
     1aa:	cf 93       	push	r28
     1ac:	00 d0       	rcall	.+0      	; 0x1ae <switch_pos+0x6>
     1ae:	cd b7       	in	r28, 0x3d	; 61
     1b0:	de b7       	in	r29, 0x3e	; 62
 unsigned char switchs = 0;
     1b2:	1a 82       	std	Y+2, r1	; 0x02
 unsigned char temp;

//------------------------------------------------------------------------------
 {
  temp = PINB;						      //PB0 right switch
     1b4:	e6 e3       	ldi	r30, 0x36	; 54
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	89 83       	std	Y+1, r24	; 0x01
  temp = temp & 0x01;
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	81 70       	andi	r24, 0x01	; 1
     1c0:	89 83       	std	Y+1, r24	; 0x01
  
  if (temp==0x01)
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	81 30       	cpi	r24, 0x01	; 1
     1c6:	21 f4       	brne	.+8      	; 0x1d0 <switch_pos+0x28>
   {
     switchs = switchs | 0x01;
     1c8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ca:	81 60       	ori	r24, 0x01	; 1
     1cc:	8a 83       	std	Y+2, r24	; 0x02
     1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <switch_pos+0x2e>
   }
  else
   {
	 switchs = switchs & 0xFE;
     1d0:	8a 81       	ldd	r24, Y+2	; 0x02
     1d2:	8e 7f       	andi	r24, 0xFE	; 254
     1d4:	8a 83       	std	Y+2, r24	; 0x02
   }
 } 
//------------------------------------------------------------------------------
 {
  temp = PINB;						      //PB1  left switch
     1d6:	e6 e3       	ldi	r30, 0x36	; 54
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	80 81       	ld	r24, Z
     1dc:	89 83       	std	Y+1, r24	; 0x01
  temp = temp & 0x02;
     1de:	89 81       	ldd	r24, Y+1	; 0x01
     1e0:	82 70       	andi	r24, 0x02	; 2
     1e2:	89 83       	std	Y+1, r24	; 0x01
  
  if (temp==0x02)
     1e4:	89 81       	ldd	r24, Y+1	; 0x01
     1e6:	82 30       	cpi	r24, 0x02	; 2
     1e8:	21 f4       	brne	.+8      	; 0x1f2 <switch_pos+0x4a>
   {
	 switchs = switchs | 0x02;
     1ea:	8a 81       	ldd	r24, Y+2	; 0x02
     1ec:	82 60       	ori	r24, 0x02	; 2
     1ee:	8a 83       	std	Y+2, r24	; 0x02
     1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <switch_pos+0x50>
   }
  else
   {
	 switchs = switchs & 0xFD;
     1f2:	8a 81       	ldd	r24, Y+2	; 0x02
     1f4:	8d 7f       	andi	r24, 0xFD	; 253
     1f6:	8a 83       	std	Y+2, r24	; 0x02
   }
 } 
//------------------------------------------------------------------------------
 return(switchs);                   // return the switches position); 
     1f8:	8a 81       	ldd	r24, Y+2	; 0x02
}
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0
     1fe:	cf 91       	pop	r28
     200:	df 91       	pop	r29
     202:	08 95       	ret

00000204 <__vector_8>:
// Timer1 overflow isr is used to enable the know the battery status at every 10 sec.
// The uart0 is contineously receiving the data packet, which is disabled to know the
// battery status and enabled again after knowing the battery sataus 
//------------------------------------------------------------------------------
SIGNAL(SIG_OVERFLOW1) 
{
     204:	1f 92       	push	r1
     206:	0f 92       	push	r0
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	0f 92       	push	r0
     20c:	11 24       	eor	r1, r1
     20e:	8f 93       	push	r24
     210:	ef 93       	push	r30
     212:	ff 93       	push	r31
     214:	df 93       	push	r29
     216:	cf 93       	push	r28
     218:	cd b7       	in	r28, 0x3d	; 61
     21a:	de b7       	in	r29, 0x3e	; 62
 //TIMER1 has overflowed
 TCNT1H = 0x8F; //reload counter high value
     21c:	ed e4       	ldi	r30, 0x4D	; 77
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	8f e8       	ldi	r24, 0x8F	; 143
     222:	80 83       	st	Z, r24
 TCNT1L = 0x81; //reload counter low value
     224:	ec e4       	ldi	r30, 0x4C	; 76
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	81 e8       	ldi	r24, 0x81	; 129
     22a:	80 83       	st	Z, r24

 count++;
     22c:	80 91 74 01 	lds	r24, 0x0174
     230:	8f 5f       	subi	r24, 0xFF	; 255
     232:	80 93 74 01 	sts	0x0174, r24
 if(count > 10)
     236:	80 91 74 01 	lds	r24, 0x0174
     23a:	8b 30       	cpi	r24, 0x0B	; 11
     23c:	40 f0       	brcs	.+16     	; 0x24e <__vector_8+0x4a>
  {
    flag2 = 1;
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	80 93 75 01 	sts	0x0175, r24
    UCSRB = 0x00; //disable communication when calculating battery volatge for balttery low indication
     244:	ea e2       	ldi	r30, 0x2A	; 42
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	10 82       	st	Z, r1
	count = 0;
     24a:	10 92 74 01 	sts	0x0174, r1
  }
}
     24e:	cf 91       	pop	r28
     250:	df 91       	pop	r29
     252:	ff 91       	pop	r31
     254:	ef 91       	pop	r30
     256:	8f 91       	pop	r24
     258:	0f 90       	pop	r0
     25a:	0f be       	out	0x3f, r0	; 63
     25c:	0f 90       	pop	r0
     25e:	1f 90       	pop	r1
     260:	18 95       	reti

00000262 <__vector_11>:

//--------------------------------------------------------------------------------
// uart isr for receive the command packet and send the 8 byte data packet
//--------------------------------------------------------------------------------
SIGNAL(SIG_UART_RECV) 
{
     262:	1f 92       	push	r1
     264:	0f 92       	push	r0
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	0f 92       	push	r0
     26a:	11 24       	eor	r1, r1
     26c:	2f 93       	push	r18
     26e:	3f 93       	push	r19
     270:	4f 93       	push	r20
     272:	5f 93       	push	r21
     274:	6f 93       	push	r22
     276:	7f 93       	push	r23
     278:	8f 93       	push	r24
     27a:	9f 93       	push	r25
     27c:	af 93       	push	r26
     27e:	bf 93       	push	r27
     280:	ef 93       	push	r30
     282:	ff 93       	push	r31
     284:	df 93       	push	r29
     286:	cf 93       	push	r28
     288:	0f 92       	push	r0
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
 unsigned char ser_data = 0x00;
     28e:	19 82       	std	Y+1, r1	; 0x01
 static unsigned char packet_data_count = 1;   // as packet byte counter

 ser_data = UDR;                         //uart has received a character in UDR
     290:	ec e2       	ldi	r30, 0x2C	; 44
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	80 81       	ld	r24, Z
     296:	89 83       	std	Y+1, r24	; 0x01

 // confirm the packet received
 if(packet_data_count == 4)              // 4th byte of packet
     298:	80 91 60 00 	lds	r24, 0x0060
     29c:	84 30       	cpi	r24, 0x04	; 4
     29e:	69 f4       	brne	.+26     	; 0x2ba <__vector_11+0x58>
   {
     if(ser_data == 0x52)                // is 2nd byte is 'R'
     2a0:	89 81       	ldd	r24, Y+1	; 0x01
     2a2:	82 35       	cpi	r24, 0x52	; 82
     2a4:	39 f4       	brne	.+14     	; 0x2b4 <__vector_11+0x52>
	   {
	     packet_data_count = 5;          // allow for receving 3rd byte 
     2a6:	85 e0       	ldi	r24, 0x05	; 5
     2a8:	80 93 60 00 	sts	0x0060, r24
	     packet_valid = 1;
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	80 93 76 01 	sts	0x0176, r24
     2b2:	03 c0       	rjmp	.+6      	; 0x2ba <__vector_11+0x58>
       }
     else 
	   {
	     packet_data_count = 1;          // allow for new packet to receive i.e 1st byte
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	80 93 60 00 	sts	0x0060, r24
       }   
   }  

 if(packet_data_count == 3)              // 3rd byte of packet
     2ba:	80 91 60 00 	lds	r24, 0x0060
     2be:	83 30       	cpi	r24, 0x03	; 3
     2c0:	51 f4       	brne	.+20     	; 0x2d6 <__vector_11+0x74>
   {
     if(ser_data == 0x58)                // is 2nd byte is 'X'
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	88 35       	cpi	r24, 0x58	; 88
     2c6:	21 f4       	brne	.+8      	; 0x2d0 <__vector_11+0x6e>
	   {
	     packet_data_count = 4;          // allow for receving 3rd byte  
     2c8:	84 e0       	ldi	r24, 0x04	; 4
     2ca:	80 93 60 00 	sts	0x0060, r24
     2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <__vector_11+0x74>
	   }
     else 
	   {
	     packet_data_count = 1;          // allow for new packet to receive i.e 1st byte		 
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	80 93 60 00 	sts	0x0060, r24
	   }                 // allow for receving 4th byte        
   }

 if(packet_data_count == 2)              // 2nd byte of packet
     2d6:	80 91 60 00 	lds	r24, 0x0060
     2da:	82 30       	cpi	r24, 0x02	; 2
     2dc:	51 f4       	brne	.+20     	; 0x2f2 <__vector_11+0x90>
   {
     if(ser_data == 0x45)                // is 2nd byte is 'E'
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	85 34       	cpi	r24, 0x45	; 69
     2e2:	21 f4       	brne	.+8      	; 0x2ec <__vector_11+0x8a>
	   {
	     packet_data_count = 3;          // allow for receving 3rd byte 		 
     2e4:	83 e0       	ldi	r24, 0x03	; 3
     2e6:	80 93 60 00 	sts	0x0060, r24
     2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <__vector_11+0x90>
	   }
     else 
	   {
	     packet_data_count = 1;          // allow for new packet to receive i.e 1st byte		 
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	80 93 60 00 	sts	0x0060, r24
	   }   
   }

 if(packet_data_count == 1)              // 1st byte of packet
     2f2:	80 91 60 00 	lds	r24, 0x0060
     2f6:	81 30       	cpi	r24, 0x01	; 1
     2f8:	31 f4       	brne	.+12     	; 0x306 <__vector_11+0xa4>
   {
     if(ser_data == 0x4E)                // is 1st byte is 'N'
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	8e 34       	cpi	r24, 0x4E	; 78
     2fe:	19 f4       	brne	.+6      	; 0x306 <__vector_11+0xa4>
	   {
	     packet_data_count = 2;          // allow for receving 2nd byte 
     300:	82 e0       	ldi	r24, 0x02	; 2
     302:	80 93 60 00 	sts	0x0060, r24
	   }
   }
  
 if(packet_valid)                        // is complete packet Rx'vd is ok 
     306:	80 91 76 01 	lds	r24, 0x0176
     30a:	88 23       	and	r24, r24
     30c:	09 f4       	brne	.+2      	; 0x310 <__vector_11+0xae>
     30e:	c8 c0       	rjmp	.+400    	; 0x4a0 <__stack+0x41>
  {  
     // Right joystick horizontal postion
     ADMUX = 0x20; //select ADC input 0 
     310:	e7 e2       	ldi	r30, 0x27	; 39
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	80 e2       	ldi	r24, 0x20	; 32
     316:	80 83       	st	Z, r24
     right_joystick_horizontal_position = ADC_conversion();
     318:	28 df       	rcall	.-432    	; 0x16a <ADC_conversion>
     31a:	80 93 6d 01 	sts	0x016D, r24
	 
	 // Right joystick vertical postion
	 ADMUX = 0x21; //select ADC input 1
     31e:	e7 e2       	ldi	r30, 0x27	; 39
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	81 e2       	ldi	r24, 0x21	; 33
     324:	80 83       	st	Z, r24
	 right_joystick_verical_position = ADC_conversion();
     326:	21 df       	rcall	.-446    	; 0x16a <ADC_conversion>
     328:	80 93 6c 01 	sts	0x016C, r24
     
	 // Left joystick vertical postion
	 ADMUX = 0x22; //select ADC input 2
     32c:	e7 e2       	ldi	r30, 0x27	; 39
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	82 e2       	ldi	r24, 0x22	; 34
     332:	80 83       	st	Z, r24
     left_joystick_vertical_position = ADC_conversion();
     334:	1a df       	rcall	.-460    	; 0x16a <ADC_conversion>
     336:	80 93 6a 01 	sts	0x016A, r24
	 
	 // Left joystick horizontal postion
     ADMUX = 0x23; //select ADC input 3
     33a:	e7 e2       	ldi	r30, 0x27	; 39
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	83 e2       	ldi	r24, 0x23	; 35
     340:	80 83       	st	Z, r24
     left_joystick_horizontal_position = ADC_conversion();
     342:	13 df       	rcall	.-474    	; 0x16a <ADC_conversion>
     344:	80 93 6b 01 	sts	0x016B, r24

	 // Accelerometer y axis postion
     ADMUX = 0x24; //select ADC input 4
     348:	e7 e2       	ldi	r30, 0x27	; 39
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	84 e2       	ldi	r24, 0x24	; 36
     34e:	80 83       	st	Z, r24
     Accelero_y_axis_position = ADC_conversion();
     350:	0c df       	rcall	.-488    	; 0x16a <ADC_conversion>
     352:	80 93 6f 01 	sts	0x016F, r24

	 // Accelerometer x axis postion
     ADMUX = 0x25; //select ADC input 5
     356:	e7 e2       	ldi	r30, 0x27	; 39
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	85 e2       	ldi	r24, 0x25	; 37
     35c:	80 83       	st	Z, r24
     Accelero_x_axis_position = ADC_conversion();
     35e:	05 df       	rcall	.-502    	; 0x16a <ADC_conversion>
     360:	80 93 6e 01 	sts	0x016E, r24

	 // Battery Voltage
     ADMUX = 0x26; //select ADC input 6
     364:	e7 e2       	ldi	r30, 0x27	; 39
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	86 e2       	ldi	r24, 0x26	; 38
     36a:	80 83       	st	Z, r24
     battery_voltage = ADC_conversion();
     36c:	fe de       	rcall	.-516    	; 0x16a <ADC_conversion>
     36e:	80 93 70 01 	sts	0x0170, r24

	 // Left and right switches position
	 switchs_position = switch_pos();                                
     372:	1a df       	rcall	.-460    	; 0x1a8 <switch_pos>
     374:	80 93 71 01 	sts	0x0171, r24
	              
    UDR = 0x46;                                    //1-Header 1st Byte as 'F'    
     378:	ec e2       	ldi	r30, 0x2C	; 44
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	86 e4       	ldi	r24, 0x46	; 70
     37e:	80 83       	st	Z, r24
    while(!(UCSRA & (1<<UDRE)));
     380:	eb e2       	ldi	r30, 0x2B	; 43
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	80 81       	ld	r24, Z
     386:	88 2f       	mov	r24, r24
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	80 72       	andi	r24, 0x20	; 32
     38c:	90 70       	andi	r25, 0x00	; 0
     38e:	00 97       	sbiw	r24, 0x00	; 0
     390:	b9 f3       	breq	.-18     	; 0x380 <__vector_11+0x11e>
    UDR = 0x42;                                    //2-Header 2nd Byte as 'B'
     392:	ec e2       	ldi	r30, 0x2C	; 44
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	82 e4       	ldi	r24, 0x42	; 66
     398:	80 83       	st	Z, r24
    while(!(UCSRA & (1<<UDRE)));
     39a:	eb e2       	ldi	r30, 0x2B	; 43
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	80 81       	ld	r24, Z
     3a0:	88 2f       	mov	r24, r24
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	80 72       	andi	r24, 0x20	; 32
     3a6:	90 70       	andi	r25, 0x00	; 0
     3a8:	00 97       	sbiw	r24, 0x00	; 0
     3aa:	b9 f3       	breq	.-18     	; 0x39a <__vector_11+0x138>
    UDR = left_joystick_vertical_position;         //3-Byte1
     3ac:	ec e2       	ldi	r30, 0x2C	; 44
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	80 91 6a 01 	lds	r24, 0x016A
     3b4:	80 83       	st	Z, r24
    while(!(UCSRA & (1<<UDRE)));
     3b6:	eb e2       	ldi	r30, 0x2B	; 43
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	88 2f       	mov	r24, r24
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	80 72       	andi	r24, 0x20	; 32
     3c2:	90 70       	andi	r25, 0x00	; 0
     3c4:	00 97       	sbiw	r24, 0x00	; 0
     3c6:	b9 f3       	breq	.-18     	; 0x3b6 <__vector_11+0x154>
    UDR = left_joystick_horizontal_position;       //4-Byte2
     3c8:	ec e2       	ldi	r30, 0x2C	; 44
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	80 91 6b 01 	lds	r24, 0x016B
     3d0:	80 83       	st	Z, r24
    while(!(UCSRA & (1<<UDRE)));
     3d2:	eb e2       	ldi	r30, 0x2B	; 43
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	80 81       	ld	r24, Z
     3d8:	88 2f       	mov	r24, r24
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	80 72       	andi	r24, 0x20	; 32
     3de:	90 70       	andi	r25, 0x00	; 0
     3e0:	00 97       	sbiw	r24, 0x00	; 0
     3e2:	b9 f3       	breq	.-18     	; 0x3d2 <__vector_11+0x170>
    UDR = right_joystick_verical_position;         //5-Byte3
     3e4:	ec e2       	ldi	r30, 0x2C	; 44
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	80 91 6c 01 	lds	r24, 0x016C
     3ec:	80 83       	st	Z, r24
    while(!(UCSRA & (1<<UDRE)));
     3ee:	eb e2       	ldi	r30, 0x2B	; 43
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	80 81       	ld	r24, Z
     3f4:	88 2f       	mov	r24, r24
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	80 72       	andi	r24, 0x20	; 32
     3fa:	90 70       	andi	r25, 0x00	; 0
     3fc:	00 97       	sbiw	r24, 0x00	; 0
     3fe:	b9 f3       	breq	.-18     	; 0x3ee <__vector_11+0x18c>
    UDR = right_joystick_horizontal_position;      //6-Byte4
     400:	ec e2       	ldi	r30, 0x2C	; 44
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	80 91 6d 01 	lds	r24, 0x016D
     408:	80 83       	st	Z, r24
    while(!(UCSRA & (1<<UDRE)));
     40a:	eb e2       	ldi	r30, 0x2B	; 43
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	80 81       	ld	r24, Z
     410:	88 2f       	mov	r24, r24
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	80 72       	andi	r24, 0x20	; 32
     416:	90 70       	andi	r25, 0x00	; 0
     418:	00 97       	sbiw	r24, 0x00	; 0
     41a:	b9 f3       	breq	.-18     	; 0x40a <__vector_11+0x1a8>
    UDR = Accelero_x_axis_position;                //7-Byte5
     41c:	ec e2       	ldi	r30, 0x2C	; 44
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	80 91 6e 01 	lds	r24, 0x016E
     424:	80 83       	st	Z, r24
    while(!(UCSRA & (1<<UDRE)));
     426:	eb e2       	ldi	r30, 0x2B	; 43
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	80 81       	ld	r24, Z
     42c:	88 2f       	mov	r24, r24
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	80 72       	andi	r24, 0x20	; 32
     432:	90 70       	andi	r25, 0x00	; 0
     434:	00 97       	sbiw	r24, 0x00	; 0
     436:	b9 f3       	breq	.-18     	; 0x426 <__vector_11+0x1c4>
    UDR = Accelero_y_axis_position;                //8-Byte6
     438:	ec e2       	ldi	r30, 0x2C	; 44
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	80 91 6f 01 	lds	r24, 0x016F
     440:	80 83       	st	Z, r24
    while(!(UCSRA & (1<<UDRE)));
     442:	eb e2       	ldi	r30, 0x2B	; 43
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	88 2f       	mov	r24, r24
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	80 72       	andi	r24, 0x20	; 32
     44e:	90 70       	andi	r25, 0x00	; 0
     450:	00 97       	sbiw	r24, 0x00	; 0
     452:	b9 f3       	breq	.-18     	; 0x442 <__vector_11+0x1e0>
    UDR = battery_voltage;                         //9-Byte7
     454:	ec e2       	ldi	r30, 0x2C	; 44
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 91 70 01 	lds	r24, 0x0170
     45c:	80 83       	st	Z, r24
    while(!(UCSRA & (1<<UDRE)));
     45e:	eb e2       	ldi	r30, 0x2B	; 43
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	80 81       	ld	r24, Z
     464:	88 2f       	mov	r24, r24
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	80 72       	andi	r24, 0x20	; 32
     46a:	90 70       	andi	r25, 0x00	; 0
     46c:	00 97       	sbiw	r24, 0x00	; 0
     46e:	b9 f3       	breq	.-18     	; 0x45e <__vector_11+0x1fc>
    UDR = switchs_position;                        //10-Byte8
     470:	ec e2       	ldi	r30, 0x2C	; 44
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 91 71 01 	lds	r24, 0x0171
     478:	80 83       	st	Z, r24
    while(!(UCSRA & (1<<UDRE)));
     47a:	eb e2       	ldi	r30, 0x2B	; 43
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	80 81       	ld	r24, Z
     480:	88 2f       	mov	r24, r24
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	80 72       	andi	r24, 0x20	; 32
     486:	90 70       	andi	r25, 0x00	; 0
     488:	00 97       	sbiw	r24, 0x00	; 0
     48a:	b9 f3       	breq	.-18     	; 0x47a <__stack+0x1b>

 	packet_valid = 0;	
     48c:	10 92 76 01 	sts	0x0176, r1
	packet_data_count = 1;                         // allow for receving New packet
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	80 93 60 00 	sts	0x0060, r24
    communication_proper_count++;
     496:	80 91 73 01 	lds	r24, 0x0173
     49a:	8f 5f       	subi	r24, 0xFF	; 255
     49c:	80 93 73 01 	sts	0x0173, r24
  }
}   //ISR
     4a0:	0f 90       	pop	r0
     4a2:	cf 91       	pop	r28
     4a4:	df 91       	pop	r29
     4a6:	ff 91       	pop	r31
     4a8:	ef 91       	pop	r30
     4aa:	bf 91       	pop	r27
     4ac:	af 91       	pop	r26
     4ae:	9f 91       	pop	r25
     4b0:	8f 91       	pop	r24
     4b2:	7f 91       	pop	r23
     4b4:	6f 91       	pop	r22
     4b6:	5f 91       	pop	r21
     4b8:	4f 91       	pop	r20
     4ba:	3f 91       	pop	r19
     4bc:	2f 91       	pop	r18
     4be:	0f 90       	pop	r0
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	0f 90       	pop	r0
     4c4:	1f 90       	pop	r1
     4c6:	18 95       	reti

000004c8 <init_devices>:

//--------------------------------------------------------------------------------
//call this routine to initialise all peripherals
//--------------------------------------------------------------------------------
void init_devices(void)
{
     4c8:	df 93       	push	r29
     4ca:	cf 93       	push	r28
     4cc:	cd b7       	in	r28, 0x3d	; 61
     4ce:	de b7       	in	r29, 0x3e	; 62
 //stop errant interrupts until set up
 cli();           //disable all interrupts
     4d0:	f8 94       	cli
 
 buzzer_pin_config ();
     4d2:	c5 dd       	rcall	.-1142   	; 0x5e <buzzer_pin_config>
 uart_init();
     4d4:	03 de       	rcall	.-1018   	; 0xdc <uart_init>
 adc_init();
     4d6:	1e de       	rcall	.-964    	; 0x114 <adc_init>
 timer1_init();
     4d8:	2f de       	rcall	.-930    	; 0x138 <timer1_init>

 TIMSK = 0x04;    //timer interrupt sources
     4da:	e9 e5       	ldi	r30, 0x59	; 89
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	84 e0       	ldi	r24, 0x04	; 4
     4e0:	80 83       	st	Z, r24

 sei();           //enable all interrupts
     4e2:	78 94       	sei
}
     4e4:	cf 91       	pop	r28
     4e6:	df 91       	pop	r29
     4e8:	08 95       	ret

000004ea <main>:

//--------------------------------------------------------------------------------
// start the main function here
//--------------------------------------------------------------------------------
int main(void)
{
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	df 93       	push	r29
     4f0:	cf 93       	push	r28
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
     4f6:	c8 55       	subi	r28, 0x58	; 88
     4f8:	d0 40       	sbci	r29, 0x00	; 0
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	0f be       	out	0x3f, r0	; 63
     502:	cd bf       	out	0x3d, r28	; 61
 float battery_low = 0;
     504:	fe 01       	movw	r30, r28
     506:	eb 5a       	subi	r30, 0xAB	; 171
     508:	ff 4f       	sbci	r31, 0xFF	; 255
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	a0 e0       	ldi	r26, 0x00	; 0
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	80 83       	st	Z, r24
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	a2 83       	std	Z+2, r26	; 0x02
     518:	b3 83       	std	Z+3, r27	; 0x03

 init_devices();
     51a:	d6 df       	rcall	.-84     	; 0x4c8 <init_devices>
  
 packet_valid = 0;// initialise valid packet variable to 0
     51c:	10 92 76 01 	sts	0x0176, r1
 
 // initially calculate the battery voltage 
 UCSRB = 0x00; 
     520:	ea e2       	ldi	r30, 0x2A	; 42
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	10 82       	st	Z, r1
 ADMUX = 0x26; //select ADC input 6
     526:	e7 e2       	ldi	r30, 0x27	; 39
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	86 e2       	ldi	r24, 0x26	; 38
     52c:	80 83       	st	Z, r24
 battery_voltage = ADC_conversion(); 
     52e:	1d de       	rcall	.-966    	; 0x16a <ADC_conversion>
     530:	80 93 70 01 	sts	0x0170, r24
 UCSRB = 0x98; 
     534:	ea e2       	ldi	r30, 0x2A	; 42
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	88 e9       	ldi	r24, 0x98	; 152
     53a:	80 83       	st	Z, r24
 flag2 = 0;
     53c:	10 92 75 01 	sts	0x0175, r1

 while(1)
 {
   // flag2 will rise once in 10sec and calculates the Battery voltage
   // and enables the UART communication
   if(flag2 == 1)
     540:	80 91 75 01 	lds	r24, 0x0175
     544:	81 30       	cpi	r24, 0x01	; 1
     546:	69 f4       	brne	.+26     	; 0x562 <main+0x78>
    {  	
	  ADMUX = 0x26;                           //select ADC input 6
     548:	e7 e2       	ldi	r30, 0x27	; 39
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	86 e2       	ldi	r24, 0x26	; 38
     54e:	80 83       	st	Z, r24
      battery_voltage = ADC_conversion();  
     550:	0c de       	rcall	.-1000   	; 0x16a <ADC_conversion>
     552:	80 93 70 01 	sts	0x0170, r24
      UCSRB = 0x98;                           
     556:	ea e2       	ldi	r30, 0x2A	; 42
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	88 e9       	ldi	r24, 0x98	; 152
     55c:	80 83       	st	Z, r24
      flag2 = 0;
     55e:	10 92 75 01 	sts	0x0175, r1
    }

   // if battery voltage is less then battery threshold value ,buzzer beeps
   battery_low = (battery_voltage * 0.041) + 0.7;  // battery voltage caluculation
     562:	80 91 70 01 	lds	r24, 0x0170
     566:	88 2f       	mov	r24, r24
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	aa 27       	eor	r26, r26
     56c:	97 fd       	sbrc	r25, 7
     56e:	a0 95       	com	r26
     570:	ba 2f       	mov	r27, r26
     572:	bc 01       	movw	r22, r24
     574:	cd 01       	movw	r24, r26
     576:	55 d6       	rcall	.+3242   	; 0x1222 <__floatsisf>
     578:	dc 01       	movw	r26, r24
     57a:	cb 01       	movw	r24, r22
     57c:	bc 01       	movw	r22, r24
     57e:	cd 01       	movw	r24, r26
     580:	2e e9       	ldi	r18, 0x9E	; 158
     582:	3f ee       	ldi	r19, 0xEF	; 239
     584:	47 e2       	ldi	r20, 0x27	; 39
     586:	5d e3       	ldi	r21, 0x3D	; 61
     588:	d6 d4       	rcall	.+2476   	; 0xf36 <__mulsf3>
     58a:	dc 01       	movw	r26, r24
     58c:	cb 01       	movw	r24, r22
     58e:	8e 01       	movw	r16, r28
     590:	0b 5a       	subi	r16, 0xAB	; 171
     592:	1f 4f       	sbci	r17, 0xFF	; 255
     594:	bc 01       	movw	r22, r24
     596:	cd 01       	movw	r24, r26
     598:	23 e3       	ldi	r18, 0x33	; 51
     59a:	33 e3       	ldi	r19, 0x33	; 51
     59c:	43 e3       	ldi	r20, 0x33	; 51
     59e:	5f e3       	ldi	r21, 0x3F	; 63
     5a0:	a3 d4       	rcall	.+2374   	; 0xee8 <__addsf3>
     5a2:	dc 01       	movw	r26, r24
     5a4:	cb 01       	movw	r24, r22
     5a6:	f8 01       	movw	r30, r16
     5a8:	80 83       	st	Z, r24
     5aa:	91 83       	std	Z+1, r25	; 0x01
     5ac:	a2 83       	std	Z+2, r26	; 0x02
     5ae:	b3 83       	std	Z+3, r27	; 0x03
   if(battery_low < BATTERY_TRHRESHOLD)
     5b0:	fe 01       	movw	r30, r28
     5b2:	eb 5a       	subi	r30, 0xAB	; 171
     5b4:	ff 4f       	sbci	r31, 0xFF	; 255
     5b6:	60 81       	ld	r22, Z
     5b8:	71 81       	ldd	r23, Z+1	; 0x01
     5ba:	82 81       	ldd	r24, Z+2	; 0x02
     5bc:	93 81       	ldd	r25, Z+3	; 0x03
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	40 e0       	ldi	r20, 0x00	; 0
     5c4:	51 e4       	ldi	r21, 0x41	; 65
     5c6:	02 d6       	rcall	.+3076   	; 0x11cc <__ltsf2>
     5c8:	88 23       	and	r24, r24
     5ca:	0c f0       	brlt	.+2      	; 0x5ce <main+0xe4>
     5cc:	2e c1       	rjmp	.+604    	; 0x82a <main+0x340>
   { buzzer_on();  _delay_ms(200); buzzer_off();_delay_ms(200);}
     5ce:	5c dd       	rcall	.-1352   	; 0x88 <buzzer_on>
     5d0:	fe 01       	movw	r30, r28
     5d2:	ef 5a       	subi	r30, 0xAF	; 175
     5d4:	ff 4f       	sbci	r31, 0xFF	; 255
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	a8 e4       	ldi	r26, 0x48	; 72
     5dc:	b3 e4       	ldi	r27, 0x43	; 67
     5de:	80 83       	st	Z, r24
     5e0:	91 83       	std	Z+1, r25	; 0x01
     5e2:	a2 83       	std	Z+2, r26	; 0x02
     5e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5e6:	8e 01       	movw	r16, r28
     5e8:	03 5b       	subi	r16, 0xB3	; 179
     5ea:	1f 4f       	sbci	r17, 0xFF	; 255
     5ec:	fe 01       	movw	r30, r28
     5ee:	ef 5a       	subi	r30, 0xAF	; 175
     5f0:	ff 4f       	sbci	r31, 0xFF	; 255
     5f2:	60 81       	ld	r22, Z
     5f4:	71 81       	ldd	r23, Z+1	; 0x01
     5f6:	82 81       	ldd	r24, Z+2	; 0x02
     5f8:	93 81       	ldd	r25, Z+3	; 0x03
     5fa:	26 e6       	ldi	r18, 0x66	; 102
     5fc:	36 e6       	ldi	r19, 0x66	; 102
     5fe:	46 ee       	ldi	r20, 0xE6	; 230
     600:	54 e4       	ldi	r21, 0x44	; 68
     602:	99 d4       	rcall	.+2354   	; 0xf36 <__mulsf3>
     604:	dc 01       	movw	r26, r24
     606:	cb 01       	movw	r24, r22
     608:	f8 01       	movw	r30, r16
     60a:	80 83       	st	Z, r24
     60c:	91 83       	std	Z+1, r25	; 0x01
     60e:	a2 83       	std	Z+2, r26	; 0x02
     610:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     612:	fe 01       	movw	r30, r28
     614:	e3 5b       	subi	r30, 0xB3	; 179
     616:	ff 4f       	sbci	r31, 0xFF	; 255
     618:	60 81       	ld	r22, Z
     61a:	71 81       	ldd	r23, Z+1	; 0x01
     61c:	82 81       	ldd	r24, Z+2	; 0x02
     61e:	93 81       	ldd	r25, Z+3	; 0x03
     620:	20 e0       	ldi	r18, 0x00	; 0
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	40 e8       	ldi	r20, 0x80	; 128
     626:	5f e3       	ldi	r21, 0x3F	; 63
     628:	d1 d5       	rcall	.+2978   	; 0x11cc <__ltsf2>
     62a:	88 23       	and	r24, r24
     62c:	44 f4       	brge	.+16     	; 0x63e <main+0x154>
		__ticks = 1;
     62e:	fe 01       	movw	r30, r28
     630:	e5 5b       	subi	r30, 0xB5	; 181
     632:	ff 4f       	sbci	r31, 0xFF	; 255
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	91 83       	std	Z+1, r25	; 0x01
     63a:	80 83       	st	Z, r24
     63c:	60 c0       	rjmp	.+192    	; 0x6fe <main+0x214>
	else if (__tmp > 65535)
     63e:	fe 01       	movw	r30, r28
     640:	e3 5b       	subi	r30, 0xB3	; 179
     642:	ff 4f       	sbci	r31, 0xFF	; 255
     644:	60 81       	ld	r22, Z
     646:	71 81       	ldd	r23, Z+1	; 0x01
     648:	82 81       	ldd	r24, Z+2	; 0x02
     64a:	93 81       	ldd	r25, Z+3	; 0x03
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	3f ef       	ldi	r19, 0xFF	; 255
     650:	4f e7       	ldi	r20, 0x7F	; 127
     652:	57 e4       	ldi	r21, 0x47	; 71
     654:	65 d5       	rcall	.+2762   	; 0x1120 <__gtsf2>
     656:	18 16       	cp	r1, r24
     658:	0c f0       	brlt	.+2      	; 0x65c <main+0x172>
     65a:	41 c0       	rjmp	.+130    	; 0x6de <main+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     65c:	fe 01       	movw	r30, r28
     65e:	ef 5a       	subi	r30, 0xAF	; 175
     660:	ff 4f       	sbci	r31, 0xFF	; 255
     662:	60 81       	ld	r22, Z
     664:	71 81       	ldd	r23, Z+1	; 0x01
     666:	82 81       	ldd	r24, Z+2	; 0x02
     668:	93 81       	ldd	r25, Z+3	; 0x03
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	40 e2       	ldi	r20, 0x20	; 32
     670:	51 e4       	ldi	r21, 0x41	; 65
     672:	61 d4       	rcall	.+2242   	; 0xf36 <__mulsf3>
     674:	dc 01       	movw	r26, r24
     676:	cb 01       	movw	r24, r22
     678:	8e 01       	movw	r16, r28
     67a:	05 5b       	subi	r16, 0xB5	; 181
     67c:	1f 4f       	sbci	r17, 0xFF	; 255
     67e:	bc 01       	movw	r22, r24
     680:	cd 01       	movw	r24, r26
     682:	95 d2       	rcall	.+1322   	; 0xbae <__fixunssfsi>
     684:	dc 01       	movw	r26, r24
     686:	cb 01       	movw	r24, r22
     688:	f8 01       	movw	r30, r16
     68a:	91 83       	std	Z+1, r25	; 0x01
     68c:	80 83       	st	Z, r24
     68e:	1f c0       	rjmp	.+62     	; 0x6ce <main+0x1e4>
     690:	fe 01       	movw	r30, r28
     692:	e7 5b       	subi	r30, 0xB7	; 183
     694:	ff 4f       	sbci	r31, 0xFF	; 255
     696:	88 eb       	ldi	r24, 0xB8	; 184
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	91 83       	std	Z+1, r25	; 0x01
     69c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     69e:	fe 01       	movw	r30, r28
     6a0:	e7 5b       	subi	r30, 0xB7	; 183
     6a2:	ff 4f       	sbci	r31, 0xFF	; 255
     6a4:	80 81       	ld	r24, Z
     6a6:	91 81       	ldd	r25, Z+1	; 0x01
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	f1 f7       	brne	.-4      	; 0x6a8 <main+0x1be>
     6ac:	fe 01       	movw	r30, r28
     6ae:	e7 5b       	subi	r30, 0xB7	; 183
     6b0:	ff 4f       	sbci	r31, 0xFF	; 255
     6b2:	91 83       	std	Z+1, r25	; 0x01
     6b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b6:	de 01       	movw	r26, r28
     6b8:	a5 5b       	subi	r26, 0xB5	; 181
     6ba:	bf 4f       	sbci	r27, 0xFF	; 255
     6bc:	fe 01       	movw	r30, r28
     6be:	e5 5b       	subi	r30, 0xB5	; 181
     6c0:	ff 4f       	sbci	r31, 0xFF	; 255
     6c2:	80 81       	ld	r24, Z
     6c4:	91 81       	ldd	r25, Z+1	; 0x01
     6c6:	01 97       	sbiw	r24, 0x01	; 1
     6c8:	11 96       	adiw	r26, 0x01	; 1
     6ca:	9c 93       	st	X, r25
     6cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6ce:	fe 01       	movw	r30, r28
     6d0:	e5 5b       	subi	r30, 0xB5	; 181
     6d2:	ff 4f       	sbci	r31, 0xFF	; 255
     6d4:	80 81       	ld	r24, Z
     6d6:	91 81       	ldd	r25, Z+1	; 0x01
     6d8:	00 97       	sbiw	r24, 0x00	; 0
     6da:	d1 f6       	brne	.-76     	; 0x690 <main+0x1a6>
     6dc:	26 c0       	rjmp	.+76     	; 0x72a <main+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6de:	8e 01       	movw	r16, r28
     6e0:	05 5b       	subi	r16, 0xB5	; 181
     6e2:	1f 4f       	sbci	r17, 0xFF	; 255
     6e4:	fe 01       	movw	r30, r28
     6e6:	e3 5b       	subi	r30, 0xB3	; 179
     6e8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ea:	60 81       	ld	r22, Z
     6ec:	71 81       	ldd	r23, Z+1	; 0x01
     6ee:	82 81       	ldd	r24, Z+2	; 0x02
     6f0:	93 81       	ldd	r25, Z+3	; 0x03
     6f2:	5d d2       	rcall	.+1210   	; 0xbae <__fixunssfsi>
     6f4:	dc 01       	movw	r26, r24
     6f6:	cb 01       	movw	r24, r22
     6f8:	f8 01       	movw	r30, r16
     6fa:	91 83       	std	Z+1, r25	; 0x01
     6fc:	80 83       	st	Z, r24
     6fe:	de 01       	movw	r26, r28
     700:	a9 5b       	subi	r26, 0xB9	; 185
     702:	bf 4f       	sbci	r27, 0xFF	; 255
     704:	fe 01       	movw	r30, r28
     706:	e5 5b       	subi	r30, 0xB5	; 181
     708:	ff 4f       	sbci	r31, 0xFF	; 255
     70a:	80 81       	ld	r24, Z
     70c:	91 81       	ldd	r25, Z+1	; 0x01
     70e:	8d 93       	st	X+, r24
     710:	9c 93       	st	X, r25
     712:	fe 01       	movw	r30, r28
     714:	e9 5b       	subi	r30, 0xB9	; 185
     716:	ff 4f       	sbci	r31, 0xFF	; 255
     718:	80 81       	ld	r24, Z
     71a:	91 81       	ldd	r25, Z+1	; 0x01
     71c:	01 97       	sbiw	r24, 0x01	; 1
     71e:	f1 f7       	brne	.-4      	; 0x71c <main+0x232>
     720:	fe 01       	movw	r30, r28
     722:	e9 5b       	subi	r30, 0xB9	; 185
     724:	ff 4f       	sbci	r31, 0xFF	; 255
     726:	91 83       	std	Z+1, r25	; 0x01
     728:	80 83       	st	Z, r24
     72a:	c3 dc       	rcall	.-1658   	; 0xb2 <buzzer_off>
     72c:	fe 01       	movw	r30, r28
     72e:	ed 5b       	subi	r30, 0xBD	; 189
     730:	ff 4f       	sbci	r31, 0xFF	; 255
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	a8 e4       	ldi	r26, 0x48	; 72
     738:	b3 e4       	ldi	r27, 0x43	; 67
     73a:	80 83       	st	Z, r24
     73c:	91 83       	std	Z+1, r25	; 0x01
     73e:	a2 83       	std	Z+2, r26	; 0x02
     740:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     742:	8e 01       	movw	r16, r28
     744:	01 5c       	subi	r16, 0xC1	; 193
     746:	1f 4f       	sbci	r17, 0xFF	; 255
     748:	fe 01       	movw	r30, r28
     74a:	ed 5b       	subi	r30, 0xBD	; 189
     74c:	ff 4f       	sbci	r31, 0xFF	; 255
     74e:	60 81       	ld	r22, Z
     750:	71 81       	ldd	r23, Z+1	; 0x01
     752:	82 81       	ldd	r24, Z+2	; 0x02
     754:	93 81       	ldd	r25, Z+3	; 0x03
     756:	26 e6       	ldi	r18, 0x66	; 102
     758:	36 e6       	ldi	r19, 0x66	; 102
     75a:	46 ee       	ldi	r20, 0xE6	; 230
     75c:	54 e4       	ldi	r21, 0x44	; 68
     75e:	eb d3       	rcall	.+2006   	; 0xf36 <__mulsf3>
     760:	dc 01       	movw	r26, r24
     762:	cb 01       	movw	r24, r22
     764:	f8 01       	movw	r30, r16
     766:	80 83       	st	Z, r24
     768:	91 83       	std	Z+1, r25	; 0x01
     76a:	a2 83       	std	Z+2, r26	; 0x02
     76c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     76e:	fe 01       	movw	r30, r28
     770:	ff 96       	adiw	r30, 0x3f	; 63
     772:	60 81       	ld	r22, Z
     774:	71 81       	ldd	r23, Z+1	; 0x01
     776:	82 81       	ldd	r24, Z+2	; 0x02
     778:	93 81       	ldd	r25, Z+3	; 0x03
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	40 e8       	ldi	r20, 0x80	; 128
     780:	5f e3       	ldi	r21, 0x3F	; 63
     782:	24 d5       	rcall	.+2632   	; 0x11cc <__ltsf2>
     784:	88 23       	and	r24, r24
     786:	2c f4       	brge	.+10     	; 0x792 <main+0x2a8>
		__ticks = 1;
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	9e af       	std	Y+62, r25	; 0x3e
     78e:	8d af       	std	Y+61, r24	; 0x3d
     790:	42 c0       	rjmp	.+132    	; 0x816 <main+0x32c>
	else if (__tmp > 65535)
     792:	fe 01       	movw	r30, r28
     794:	ff 96       	adiw	r30, 0x3f	; 63
     796:	60 81       	ld	r22, Z
     798:	71 81       	ldd	r23, Z+1	; 0x01
     79a:	82 81       	ldd	r24, Z+2	; 0x02
     79c:	93 81       	ldd	r25, Z+3	; 0x03
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	3f ef       	ldi	r19, 0xFF	; 255
     7a2:	4f e7       	ldi	r20, 0x7F	; 127
     7a4:	57 e4       	ldi	r21, 0x47	; 71
     7a6:	bc d4       	rcall	.+2424   	; 0x1120 <__gtsf2>
     7a8:	18 16       	cp	r1, r24
     7aa:	54 f5       	brge	.+84     	; 0x800 <main+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7ac:	fe 01       	movw	r30, r28
     7ae:	ed 5b       	subi	r30, 0xBD	; 189
     7b0:	ff 4f       	sbci	r31, 0xFF	; 255
     7b2:	60 81       	ld	r22, Z
     7b4:	71 81       	ldd	r23, Z+1	; 0x01
     7b6:	82 81       	ldd	r24, Z+2	; 0x02
     7b8:	93 81       	ldd	r25, Z+3	; 0x03
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	40 e2       	ldi	r20, 0x20	; 32
     7c0:	51 e4       	ldi	r21, 0x41	; 65
     7c2:	b9 d3       	rcall	.+1906   	; 0xf36 <__mulsf3>
     7c4:	dc 01       	movw	r26, r24
     7c6:	cb 01       	movw	r24, r22
     7c8:	bc 01       	movw	r22, r24
     7ca:	cd 01       	movw	r24, r26
     7cc:	f0 d1       	rcall	.+992    	; 0xbae <__fixunssfsi>
     7ce:	dc 01       	movw	r26, r24
     7d0:	cb 01       	movw	r24, r22
     7d2:	9e af       	std	Y+62, r25	; 0x3e
     7d4:	8d af       	std	Y+61, r24	; 0x3d
     7d6:	0f c0       	rjmp	.+30     	; 0x7f6 <main+0x30c>
     7d8:	88 eb       	ldi	r24, 0xB8	; 184
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	9c af       	std	Y+60, r25	; 0x3c
     7de:	8b af       	std	Y+59, r24	; 0x3b
     7e0:	8b ad       	ldd	r24, Y+59	; 0x3b
     7e2:	9c ad       	ldd	r25, Y+60	; 0x3c
     7e4:	01 97       	sbiw	r24, 0x01	; 1
     7e6:	f1 f7       	brne	.-4      	; 0x7e4 <main+0x2fa>
     7e8:	9c af       	std	Y+60, r25	; 0x3c
     7ea:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7ec:	8d ad       	ldd	r24, Y+61	; 0x3d
     7ee:	9e ad       	ldd	r25, Y+62	; 0x3e
     7f0:	01 97       	sbiw	r24, 0x01	; 1
     7f2:	9e af       	std	Y+62, r25	; 0x3e
     7f4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7f6:	8d ad       	ldd	r24, Y+61	; 0x3d
     7f8:	9e ad       	ldd	r25, Y+62	; 0x3e
     7fa:	00 97       	sbiw	r24, 0x00	; 0
     7fc:	69 f7       	brne	.-38     	; 0x7d8 <main+0x2ee>
     7fe:	15 c0       	rjmp	.+42     	; 0x82a <main+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     800:	fe 01       	movw	r30, r28
     802:	ff 96       	adiw	r30, 0x3f	; 63
     804:	60 81       	ld	r22, Z
     806:	71 81       	ldd	r23, Z+1	; 0x01
     808:	82 81       	ldd	r24, Z+2	; 0x02
     80a:	93 81       	ldd	r25, Z+3	; 0x03
     80c:	d0 d1       	rcall	.+928    	; 0xbae <__fixunssfsi>
     80e:	dc 01       	movw	r26, r24
     810:	cb 01       	movw	r24, r22
     812:	9e af       	std	Y+62, r25	; 0x3e
     814:	8d af       	std	Y+61, r24	; 0x3d
     816:	8d ad       	ldd	r24, Y+61	; 0x3d
     818:	9e ad       	ldd	r25, Y+62	; 0x3e
     81a:	9a af       	std	Y+58, r25	; 0x3a
     81c:	89 af       	std	Y+57, r24	; 0x39
     81e:	89 ad       	ldd	r24, Y+57	; 0x39
     820:	9a ad       	ldd	r25, Y+58	; 0x3a
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <main+0x338>
     826:	9a af       	std	Y+58, r25	; 0x3a
     828:	89 af       	std	Y+57, r24	; 0x39
  
   // following function beeps the buzzer twice after sucessfully reciving 10 packets
   // from the master(FireBird-V Hexapod robot)
   if(flag1 == 0)
     82a:	80 91 72 01 	lds	r24, 0x0172
     82e:	88 23       	and	r24, r24
     830:	09 f0       	breq	.+2      	; 0x834 <main+0x34a>
     832:	86 ce       	rjmp	.-756    	; 0x540 <main+0x56>
   { 
    if(communication_proper_count > 10)
     834:	80 91 73 01 	lds	r24, 0x0173
     838:	8b 30       	cpi	r24, 0x0B	; 11
     83a:	08 f4       	brcc	.+2      	; 0x83e <main+0x354>
     83c:	81 ce       	rjmp	.-766    	; 0x540 <main+0x56>
     { 
	   flag1 = 1;
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	80 93 72 01 	sts	0x0172, r24
	   buzzer_on();  _delay_ms(400); buzzer_off();_delay_ms(400);
     844:	21 dc       	rcall	.-1982   	; 0x88 <buzzer_on>
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	a8 ec       	ldi	r26, 0xC8	; 200
     84c:	b3 e4       	ldi	r27, 0x43	; 67
     84e:	8d ab       	std	Y+53, r24	; 0x35
     850:	9e ab       	std	Y+54, r25	; 0x36
     852:	af ab       	std	Y+55, r26	; 0x37
     854:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     856:	6d a9       	ldd	r22, Y+53	; 0x35
     858:	7e a9       	ldd	r23, Y+54	; 0x36
     85a:	8f a9       	ldd	r24, Y+55	; 0x37
     85c:	98 ad       	ldd	r25, Y+56	; 0x38
     85e:	26 e6       	ldi	r18, 0x66	; 102
     860:	36 e6       	ldi	r19, 0x66	; 102
     862:	46 ee       	ldi	r20, 0xE6	; 230
     864:	54 e4       	ldi	r21, 0x44	; 68
     866:	67 d3       	rcall	.+1742   	; 0xf36 <__mulsf3>
     868:	dc 01       	movw	r26, r24
     86a:	cb 01       	movw	r24, r22
     86c:	89 ab       	std	Y+49, r24	; 0x31
     86e:	9a ab       	std	Y+50, r25	; 0x32
     870:	ab ab       	std	Y+51, r26	; 0x33
     872:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     874:	69 a9       	ldd	r22, Y+49	; 0x31
     876:	7a a9       	ldd	r23, Y+50	; 0x32
     878:	8b a9       	ldd	r24, Y+51	; 0x33
     87a:	9c a9       	ldd	r25, Y+52	; 0x34
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	40 e8       	ldi	r20, 0x80	; 128
     882:	5f e3       	ldi	r21, 0x3F	; 63
     884:	a3 d4       	rcall	.+2374   	; 0x11cc <__ltsf2>
     886:	88 23       	and	r24, r24
     888:	2c f4       	brge	.+10     	; 0x894 <main+0x3aa>
		__ticks = 1;
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	98 ab       	std	Y+48, r25	; 0x30
     890:	8f a7       	std	Y+47, r24	; 0x2f
     892:	3b c0       	rjmp	.+118    	; 0x90a <main+0x420>
	else if (__tmp > 65535)
     894:	69 a9       	ldd	r22, Y+49	; 0x31
     896:	7a a9       	ldd	r23, Y+50	; 0x32
     898:	8b a9       	ldd	r24, Y+51	; 0x33
     89a:	9c a9       	ldd	r25, Y+52	; 0x34
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	3f ef       	ldi	r19, 0xFF	; 255
     8a0:	4f e7       	ldi	r20, 0x7F	; 127
     8a2:	57 e4       	ldi	r21, 0x47	; 71
     8a4:	3d d4       	rcall	.+2170   	; 0x1120 <__gtsf2>
     8a6:	18 16       	cp	r1, r24
     8a8:	3c f5       	brge	.+78     	; 0x8f8 <main+0x40e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8aa:	6d a9       	ldd	r22, Y+53	; 0x35
     8ac:	7e a9       	ldd	r23, Y+54	; 0x36
     8ae:	8f a9       	ldd	r24, Y+55	; 0x37
     8b0:	98 ad       	ldd	r25, Y+56	; 0x38
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 e2       	ldi	r20, 0x20	; 32
     8b8:	51 e4       	ldi	r21, 0x41	; 65
     8ba:	3d d3       	rcall	.+1658   	; 0xf36 <__mulsf3>
     8bc:	dc 01       	movw	r26, r24
     8be:	cb 01       	movw	r24, r22
     8c0:	bc 01       	movw	r22, r24
     8c2:	cd 01       	movw	r24, r26
     8c4:	74 d1       	rcall	.+744    	; 0xbae <__fixunssfsi>
     8c6:	dc 01       	movw	r26, r24
     8c8:	cb 01       	movw	r24, r22
     8ca:	98 ab       	std	Y+48, r25	; 0x30
     8cc:	8f a7       	std	Y+47, r24	; 0x2f
     8ce:	0f c0       	rjmp	.+30     	; 0x8ee <main+0x404>
     8d0:	88 eb       	ldi	r24, 0xB8	; 184
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	9e a7       	std	Y+46, r25	; 0x2e
     8d6:	8d a7       	std	Y+45, r24	; 0x2d
     8d8:	8d a5       	ldd	r24, Y+45	; 0x2d
     8da:	9e a5       	ldd	r25, Y+46	; 0x2e
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <main+0x3f2>
     8e0:	9e a7       	std	Y+46, r25	; 0x2e
     8e2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8e4:	8f a5       	ldd	r24, Y+47	; 0x2f
     8e6:	98 a9       	ldd	r25, Y+48	; 0x30
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	98 ab       	std	Y+48, r25	; 0x30
     8ec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ee:	8f a5       	ldd	r24, Y+47	; 0x2f
     8f0:	98 a9       	ldd	r25, Y+48	; 0x30
     8f2:	00 97       	sbiw	r24, 0x00	; 0
     8f4:	69 f7       	brne	.-38     	; 0x8d0 <main+0x3e6>
     8f6:	13 c0       	rjmp	.+38     	; 0x91e <main+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8f8:	69 a9       	ldd	r22, Y+49	; 0x31
     8fa:	7a a9       	ldd	r23, Y+50	; 0x32
     8fc:	8b a9       	ldd	r24, Y+51	; 0x33
     8fe:	9c a9       	ldd	r25, Y+52	; 0x34
     900:	56 d1       	rcall	.+684    	; 0xbae <__fixunssfsi>
     902:	dc 01       	movw	r26, r24
     904:	cb 01       	movw	r24, r22
     906:	98 ab       	std	Y+48, r25	; 0x30
     908:	8f a7       	std	Y+47, r24	; 0x2f
     90a:	8f a5       	ldd	r24, Y+47	; 0x2f
     90c:	98 a9       	ldd	r25, Y+48	; 0x30
     90e:	9c a7       	std	Y+44, r25	; 0x2c
     910:	8b a7       	std	Y+43, r24	; 0x2b
     912:	8b a5       	ldd	r24, Y+43	; 0x2b
     914:	9c a5       	ldd	r25, Y+44	; 0x2c
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	f1 f7       	brne	.-4      	; 0x916 <main+0x42c>
     91a:	9c a7       	std	Y+44, r25	; 0x2c
     91c:	8b a7       	std	Y+43, r24	; 0x2b
     91e:	c9 db       	rcall	.-2158   	; 0xb2 <buzzer_off>
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a8 ec       	ldi	r26, 0xC8	; 200
     926:	b3 e4       	ldi	r27, 0x43	; 67
     928:	8f a3       	std	Y+39, r24	; 0x27
     92a:	98 a7       	std	Y+40, r25	; 0x28
     92c:	a9 a7       	std	Y+41, r26	; 0x29
     92e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     930:	6f a1       	ldd	r22, Y+39	; 0x27
     932:	78 a5       	ldd	r23, Y+40	; 0x28
     934:	89 a5       	ldd	r24, Y+41	; 0x29
     936:	9a a5       	ldd	r25, Y+42	; 0x2a
     938:	26 e6       	ldi	r18, 0x66	; 102
     93a:	36 e6       	ldi	r19, 0x66	; 102
     93c:	46 ee       	ldi	r20, 0xE6	; 230
     93e:	54 e4       	ldi	r21, 0x44	; 68
     940:	fa d2       	rcall	.+1524   	; 0xf36 <__mulsf3>
     942:	dc 01       	movw	r26, r24
     944:	cb 01       	movw	r24, r22
     946:	8b a3       	std	Y+35, r24	; 0x23
     948:	9c a3       	std	Y+36, r25	; 0x24
     94a:	ad a3       	std	Y+37, r26	; 0x25
     94c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     94e:	6b a1       	ldd	r22, Y+35	; 0x23
     950:	7c a1       	ldd	r23, Y+36	; 0x24
     952:	8d a1       	ldd	r24, Y+37	; 0x25
     954:	9e a1       	ldd	r25, Y+38	; 0x26
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	40 e8       	ldi	r20, 0x80	; 128
     95c:	5f e3       	ldi	r21, 0x3F	; 63
     95e:	36 d4       	rcall	.+2156   	; 0x11cc <__ltsf2>
     960:	88 23       	and	r24, r24
     962:	2c f4       	brge	.+10     	; 0x96e <main+0x484>
		__ticks = 1;
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	9a a3       	std	Y+34, r25	; 0x22
     96a:	89 a3       	std	Y+33, r24	; 0x21
     96c:	3b c0       	rjmp	.+118    	; 0x9e4 <main+0x4fa>
	else if (__tmp > 65535)
     96e:	6b a1       	ldd	r22, Y+35	; 0x23
     970:	7c a1       	ldd	r23, Y+36	; 0x24
     972:	8d a1       	ldd	r24, Y+37	; 0x25
     974:	9e a1       	ldd	r25, Y+38	; 0x26
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	3f ef       	ldi	r19, 0xFF	; 255
     97a:	4f e7       	ldi	r20, 0x7F	; 127
     97c:	57 e4       	ldi	r21, 0x47	; 71
     97e:	d0 d3       	rcall	.+1952   	; 0x1120 <__gtsf2>
     980:	18 16       	cp	r1, r24
     982:	3c f5       	brge	.+78     	; 0x9d2 <main+0x4e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     984:	6f a1       	ldd	r22, Y+39	; 0x27
     986:	78 a5       	ldd	r23, Y+40	; 0x28
     988:	89 a5       	ldd	r24, Y+41	; 0x29
     98a:	9a a5       	ldd	r25, Y+42	; 0x2a
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	40 e2       	ldi	r20, 0x20	; 32
     992:	51 e4       	ldi	r21, 0x41	; 65
     994:	d0 d2       	rcall	.+1440   	; 0xf36 <__mulsf3>
     996:	dc 01       	movw	r26, r24
     998:	cb 01       	movw	r24, r22
     99a:	bc 01       	movw	r22, r24
     99c:	cd 01       	movw	r24, r26
     99e:	07 d1       	rcall	.+526    	; 0xbae <__fixunssfsi>
     9a0:	dc 01       	movw	r26, r24
     9a2:	cb 01       	movw	r24, r22
     9a4:	9a a3       	std	Y+34, r25	; 0x22
     9a6:	89 a3       	std	Y+33, r24	; 0x21
     9a8:	0f c0       	rjmp	.+30     	; 0x9c8 <main+0x4de>
     9aa:	88 eb       	ldi	r24, 0xB8	; 184
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	98 a3       	std	Y+32, r25	; 0x20
     9b0:	8f 8f       	std	Y+31, r24	; 0x1f
     9b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     9b4:	98 a1       	ldd	r25, Y+32	; 0x20
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	f1 f7       	brne	.-4      	; 0x9b6 <main+0x4cc>
     9ba:	98 a3       	std	Y+32, r25	; 0x20
     9bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9be:	89 a1       	ldd	r24, Y+33	; 0x21
     9c0:	9a a1       	ldd	r25, Y+34	; 0x22
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	9a a3       	std	Y+34, r25	; 0x22
     9c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9c8:	89 a1       	ldd	r24, Y+33	; 0x21
     9ca:	9a a1       	ldd	r25, Y+34	; 0x22
     9cc:	00 97       	sbiw	r24, 0x00	; 0
     9ce:	69 f7       	brne	.-38     	; 0x9aa <main+0x4c0>
     9d0:	13 c0       	rjmp	.+38     	; 0x9f8 <main+0x50e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9d2:	6b a1       	ldd	r22, Y+35	; 0x23
     9d4:	7c a1       	ldd	r23, Y+36	; 0x24
     9d6:	8d a1       	ldd	r24, Y+37	; 0x25
     9d8:	9e a1       	ldd	r25, Y+38	; 0x26
     9da:	e9 d0       	rcall	.+466    	; 0xbae <__fixunssfsi>
     9dc:	dc 01       	movw	r26, r24
     9de:	cb 01       	movw	r24, r22
     9e0:	9a a3       	std	Y+34, r25	; 0x22
     9e2:	89 a3       	std	Y+33, r24	; 0x21
     9e4:	89 a1       	ldd	r24, Y+33	; 0x21
     9e6:	9a a1       	ldd	r25, Y+34	; 0x22
     9e8:	9e 8f       	std	Y+30, r25	; 0x1e
     9ea:	8d 8f       	std	Y+29, r24	; 0x1d
     9ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <main+0x506>
     9f4:	9e 8f       	std	Y+30, r25	; 0x1e
     9f6:	8d 8f       	std	Y+29, r24	; 0x1d
	   buzzer_on();  _delay_ms(400); buzzer_off();_delay_ms(400);
     9f8:	47 db       	rcall	.-2418   	; 0x88 <buzzer_on>
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a8 ec       	ldi	r26, 0xC8	; 200
     a00:	b3 e4       	ldi	r27, 0x43	; 67
     a02:	89 8f       	std	Y+25, r24	; 0x19
     a04:	9a 8f       	std	Y+26, r25	; 0x1a
     a06:	ab 8f       	std	Y+27, r26	; 0x1b
     a08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a0a:	69 8d       	ldd	r22, Y+25	; 0x19
     a0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a10:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a12:	26 e6       	ldi	r18, 0x66	; 102
     a14:	36 e6       	ldi	r19, 0x66	; 102
     a16:	46 ee       	ldi	r20, 0xE6	; 230
     a18:	54 e4       	ldi	r21, 0x44	; 68
     a1a:	8d d2       	rcall	.+1306   	; 0xf36 <__mulsf3>
     a1c:	dc 01       	movw	r26, r24
     a1e:	cb 01       	movw	r24, r22
     a20:	8d 8b       	std	Y+21, r24	; 0x15
     a22:	9e 8b       	std	Y+22, r25	; 0x16
     a24:	af 8b       	std	Y+23, r26	; 0x17
     a26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     a28:	6d 89       	ldd	r22, Y+21	; 0x15
     a2a:	7e 89       	ldd	r23, Y+22	; 0x16
     a2c:	8f 89       	ldd	r24, Y+23	; 0x17
     a2e:	98 8d       	ldd	r25, Y+24	; 0x18
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	40 e8       	ldi	r20, 0x80	; 128
     a36:	5f e3       	ldi	r21, 0x3F	; 63
     a38:	c9 d3       	rcall	.+1938   	; 0x11cc <__ltsf2>
     a3a:	88 23       	and	r24, r24
     a3c:	2c f4       	brge	.+10     	; 0xa48 <main+0x55e>
		__ticks = 1;
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	9c 8b       	std	Y+20, r25	; 0x14
     a44:	8b 8b       	std	Y+19, r24	; 0x13
     a46:	3b c0       	rjmp	.+118    	; 0xabe <main+0x5d4>
	else if (__tmp > 65535)
     a48:	6d 89       	ldd	r22, Y+21	; 0x15
     a4a:	7e 89       	ldd	r23, Y+22	; 0x16
     a4c:	8f 89       	ldd	r24, Y+23	; 0x17
     a4e:	98 8d       	ldd	r25, Y+24	; 0x18
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f e7       	ldi	r20, 0x7F	; 127
     a56:	57 e4       	ldi	r21, 0x47	; 71
     a58:	63 d3       	rcall	.+1734   	; 0x1120 <__gtsf2>
     a5a:	18 16       	cp	r1, r24
     a5c:	3c f5       	brge	.+78     	; 0xaac <main+0x5c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a5e:	69 8d       	ldd	r22, Y+25	; 0x19
     a60:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a62:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a64:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	40 e2       	ldi	r20, 0x20	; 32
     a6c:	51 e4       	ldi	r21, 0x41	; 65
     a6e:	63 d2       	rcall	.+1222   	; 0xf36 <__mulsf3>
     a70:	dc 01       	movw	r26, r24
     a72:	cb 01       	movw	r24, r22
     a74:	bc 01       	movw	r22, r24
     a76:	cd 01       	movw	r24, r26
     a78:	9a d0       	rcall	.+308    	; 0xbae <__fixunssfsi>
     a7a:	dc 01       	movw	r26, r24
     a7c:	cb 01       	movw	r24, r22
     a7e:	9c 8b       	std	Y+20, r25	; 0x14
     a80:	8b 8b       	std	Y+19, r24	; 0x13
     a82:	0f c0       	rjmp	.+30     	; 0xaa2 <main+0x5b8>
     a84:	88 eb       	ldi	r24, 0xB8	; 184
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	9a 8b       	std	Y+18, r25	; 0x12
     a8a:	89 8b       	std	Y+17, r24	; 0x11
     a8c:	89 89       	ldd	r24, Y+17	; 0x11
     a8e:	9a 89       	ldd	r25, Y+18	; 0x12
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	f1 f7       	brne	.-4      	; 0xa90 <main+0x5a6>
     a94:	9a 8b       	std	Y+18, r25	; 0x12
     a96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a98:	8b 89       	ldd	r24, Y+19	; 0x13
     a9a:	9c 89       	ldd	r25, Y+20	; 0x14
     a9c:	01 97       	sbiw	r24, 0x01	; 1
     a9e:	9c 8b       	std	Y+20, r25	; 0x14
     aa0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aa2:	8b 89       	ldd	r24, Y+19	; 0x13
     aa4:	9c 89       	ldd	r25, Y+20	; 0x14
     aa6:	00 97       	sbiw	r24, 0x00	; 0
     aa8:	69 f7       	brne	.-38     	; 0xa84 <main+0x59a>
     aaa:	13 c0       	rjmp	.+38     	; 0xad2 <main+0x5e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aac:	6d 89       	ldd	r22, Y+21	; 0x15
     aae:	7e 89       	ldd	r23, Y+22	; 0x16
     ab0:	8f 89       	ldd	r24, Y+23	; 0x17
     ab2:	98 8d       	ldd	r25, Y+24	; 0x18
     ab4:	7c d0       	rcall	.+248    	; 0xbae <__fixunssfsi>
     ab6:	dc 01       	movw	r26, r24
     ab8:	cb 01       	movw	r24, r22
     aba:	9c 8b       	std	Y+20, r25	; 0x14
     abc:	8b 8b       	std	Y+19, r24	; 0x13
     abe:	8b 89       	ldd	r24, Y+19	; 0x13
     ac0:	9c 89       	ldd	r25, Y+20	; 0x14
     ac2:	98 8b       	std	Y+16, r25	; 0x10
     ac4:	8f 87       	std	Y+15, r24	; 0x0f
     ac6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ac8:	98 89       	ldd	r25, Y+16	; 0x10
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	f1 f7       	brne	.-4      	; 0xaca <main+0x5e0>
     ace:	98 8b       	std	Y+16, r25	; 0x10
     ad0:	8f 87       	std	Y+15, r24	; 0x0f
     ad2:	ef da       	rcall	.-2594   	; 0xb2 <buzzer_off>
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	a8 ec       	ldi	r26, 0xC8	; 200
     ada:	b3 e4       	ldi	r27, 0x43	; 67
     adc:	8b 87       	std	Y+11, r24	; 0x0b
     ade:	9c 87       	std	Y+12, r25	; 0x0c
     ae0:	ad 87       	std	Y+13, r26	; 0x0d
     ae2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ae4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ae6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ae8:	8d 85       	ldd	r24, Y+13	; 0x0d
     aea:	9e 85       	ldd	r25, Y+14	; 0x0e
     aec:	26 e6       	ldi	r18, 0x66	; 102
     aee:	36 e6       	ldi	r19, 0x66	; 102
     af0:	46 ee       	ldi	r20, 0xE6	; 230
     af2:	54 e4       	ldi	r21, 0x44	; 68
     af4:	20 d2       	rcall	.+1088   	; 0xf36 <__mulsf3>
     af6:	dc 01       	movw	r26, r24
     af8:	cb 01       	movw	r24, r22
     afa:	8f 83       	std	Y+7, r24	; 0x07
     afc:	98 87       	std	Y+8, r25	; 0x08
     afe:	a9 87       	std	Y+9, r26	; 0x09
     b00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b02:	6f 81       	ldd	r22, Y+7	; 0x07
     b04:	78 85       	ldd	r23, Y+8	; 0x08
     b06:	89 85       	ldd	r24, Y+9	; 0x09
     b08:	9a 85       	ldd	r25, Y+10	; 0x0a
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	40 e8       	ldi	r20, 0x80	; 128
     b10:	5f e3       	ldi	r21, 0x3F	; 63
     b12:	5c d3       	rcall	.+1720   	; 0x11cc <__ltsf2>
     b14:	88 23       	and	r24, r24
     b16:	2c f4       	brge	.+10     	; 0xb22 <main+0x638>
		__ticks = 1;
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	9e 83       	std	Y+6, r25	; 0x06
     b1e:	8d 83       	std	Y+5, r24	; 0x05
     b20:	3b c0       	rjmp	.+118    	; 0xb98 <main+0x6ae>
	else if (__tmp > 65535)
     b22:	6f 81       	ldd	r22, Y+7	; 0x07
     b24:	78 85       	ldd	r23, Y+8	; 0x08
     b26:	89 85       	ldd	r24, Y+9	; 0x09
     b28:	9a 85       	ldd	r25, Y+10	; 0x0a
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	3f ef       	ldi	r19, 0xFF	; 255
     b2e:	4f e7       	ldi	r20, 0x7F	; 127
     b30:	57 e4       	ldi	r21, 0x47	; 71
     b32:	f6 d2       	rcall	.+1516   	; 0x1120 <__gtsf2>
     b34:	18 16       	cp	r1, r24
     b36:	3c f5       	brge	.+78     	; 0xb86 <main+0x69c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b38:	6b 85       	ldd	r22, Y+11	; 0x0b
     b3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	40 e2       	ldi	r20, 0x20	; 32
     b46:	51 e4       	ldi	r21, 0x41	; 65
     b48:	f6 d1       	rcall	.+1004   	; 0xf36 <__mulsf3>
     b4a:	dc 01       	movw	r26, r24
     b4c:	cb 01       	movw	r24, r22
     b4e:	bc 01       	movw	r22, r24
     b50:	cd 01       	movw	r24, r26
     b52:	2d d0       	rcall	.+90     	; 0xbae <__fixunssfsi>
     b54:	dc 01       	movw	r26, r24
     b56:	cb 01       	movw	r24, r22
     b58:	9e 83       	std	Y+6, r25	; 0x06
     b5a:	8d 83       	std	Y+5, r24	; 0x05
     b5c:	0f c0       	rjmp	.+30     	; 0xb7c <main+0x692>
     b5e:	88 eb       	ldi	r24, 0xB8	; 184
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	9c 83       	std	Y+4, r25	; 0x04
     b64:	8b 83       	std	Y+3, r24	; 0x03
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	9c 81       	ldd	r25, Y+4	; 0x04
     b6a:	01 97       	sbiw	r24, 0x01	; 1
     b6c:	f1 f7       	brne	.-4      	; 0xb6a <main+0x680>
     b6e:	9c 83       	std	Y+4, r25	; 0x04
     b70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b72:	8d 81       	ldd	r24, Y+5	; 0x05
     b74:	9e 81       	ldd	r25, Y+6	; 0x06
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	9e 83       	std	Y+6, r25	; 0x06
     b7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b7c:	8d 81       	ldd	r24, Y+5	; 0x05
     b7e:	9e 81       	ldd	r25, Y+6	; 0x06
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	69 f7       	brne	.-38     	; 0xb5e <main+0x674>
     b84:	dd cc       	rjmp	.-1606   	; 0x540 <main+0x56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b86:	6f 81       	ldd	r22, Y+7	; 0x07
     b88:	78 85       	ldd	r23, Y+8	; 0x08
     b8a:	89 85       	ldd	r24, Y+9	; 0x09
     b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b8e:	0f d0       	rcall	.+30     	; 0xbae <__fixunssfsi>
     b90:	dc 01       	movw	r26, r24
     b92:	cb 01       	movw	r24, r22
     b94:	9e 83       	std	Y+6, r25	; 0x06
     b96:	8d 83       	std	Y+5, r24	; 0x05
     b98:	8d 81       	ldd	r24, Y+5	; 0x05
     b9a:	9e 81       	ldd	r25, Y+6	; 0x06
     b9c:	9a 83       	std	Y+2, r25	; 0x02
     b9e:	89 83       	std	Y+1, r24	; 0x01
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	9a 81       	ldd	r25, Y+2	; 0x02
     ba4:	01 97       	sbiw	r24, 0x01	; 1
     ba6:	f1 f7       	brne	.-4      	; 0xba4 <main+0x6ba>
     ba8:	9a 83       	std	Y+2, r25	; 0x02
     baa:	89 83       	std	Y+1, r24	; 0x01
     bac:	c9 cc       	rjmp	.-1646   	; 0x540 <main+0x56>

00000bae <__fixunssfsi>:
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	7b 01       	movw	r14, r22
     bb8:	8c 01       	movw	r16, r24
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	5f e4       	ldi	r21, 0x4F	; 79
     bc2:	d9 d2       	rcall	.+1458   	; 0x1176 <__gesf2>
     bc4:	88 23       	and	r24, r24
     bc6:	7c f0       	brlt	.+30     	; 0xbe6 <__fixunssfsi+0x38>
     bc8:	c8 01       	movw	r24, r16
     bca:	b7 01       	movw	r22, r14
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	5f e4       	ldi	r21, 0x4F	; 79
     bd4:	5e d1       	rcall	.+700    	; 0xe92 <__subsf3>
     bd6:	7f d3       	rcall	.+1790   	; 0x12d6 <__fixsfsi>
     bd8:	9b 01       	movw	r18, r22
     bda:	ac 01       	movw	r20, r24
     bdc:	20 50       	subi	r18, 0x00	; 0
     bde:	30 40       	sbci	r19, 0x00	; 0
     be0:	40 40       	sbci	r20, 0x00	; 0
     be2:	50 48       	sbci	r21, 0x80	; 128
     be4:	05 c0       	rjmp	.+10     	; 0xbf0 <__fixunssfsi+0x42>
     be6:	c8 01       	movw	r24, r16
     be8:	b7 01       	movw	r22, r14
     bea:	75 d3       	rcall	.+1770   	; 0x12d6 <__fixsfsi>
     bec:	9b 01       	movw	r18, r22
     bee:	ac 01       	movw	r20, r24
     bf0:	b9 01       	movw	r22, r18
     bf2:	ca 01       	movw	r24, r20
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <_fpadd_parts>:
     bfe:	a0 e0       	ldi	r26, 0x00	; 0
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e4 e0       	ldi	r30, 0x04	; 4
     c04:	f6 e0       	ldi	r31, 0x06	; 6
     c06:	ad c5       	rjmp	.+2906   	; 0x1762 <__prologue_saves__>
     c08:	dc 01       	movw	r26, r24
     c0a:	2b 01       	movw	r4, r22
     c0c:	fa 01       	movw	r30, r20
     c0e:	9c 91       	ld	r25, X
     c10:	92 30       	cpi	r25, 0x02	; 2
     c12:	08 f4       	brcc	.+2      	; 0xc16 <_fpadd_parts+0x18>
     c14:	39 c1       	rjmp	.+626    	; 0xe88 <_fpadd_parts+0x28a>
     c16:	eb 01       	movw	r28, r22
     c18:	88 81       	ld	r24, Y
     c1a:	82 30       	cpi	r24, 0x02	; 2
     c1c:	08 f4       	brcc	.+2      	; 0xc20 <_fpadd_parts+0x22>
     c1e:	33 c1       	rjmp	.+614    	; 0xe86 <_fpadd_parts+0x288>
     c20:	94 30       	cpi	r25, 0x04	; 4
     c22:	69 f4       	brne	.+26     	; 0xc3e <_fpadd_parts+0x40>
     c24:	84 30       	cpi	r24, 0x04	; 4
     c26:	09 f0       	breq	.+2      	; 0xc2a <_fpadd_parts+0x2c>
     c28:	2f c1       	rjmp	.+606    	; 0xe88 <_fpadd_parts+0x28a>
     c2a:	11 96       	adiw	r26, 0x01	; 1
     c2c:	9c 91       	ld	r25, X
     c2e:	11 97       	sbiw	r26, 0x01	; 1
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	98 17       	cp	r25, r24
     c34:	09 f4       	brne	.+2      	; 0xc38 <_fpadd_parts+0x3a>
     c36:	28 c1       	rjmp	.+592    	; 0xe88 <_fpadd_parts+0x28a>
     c38:	a1 e6       	ldi	r26, 0x61	; 97
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	25 c1       	rjmp	.+586    	; 0xe88 <_fpadd_parts+0x28a>
     c3e:	84 30       	cpi	r24, 0x04	; 4
     c40:	09 f4       	brne	.+2      	; 0xc44 <_fpadd_parts+0x46>
     c42:	21 c1       	rjmp	.+578    	; 0xe86 <_fpadd_parts+0x288>
     c44:	82 30       	cpi	r24, 0x02	; 2
     c46:	a9 f4       	brne	.+42     	; 0xc72 <_fpadd_parts+0x74>
     c48:	92 30       	cpi	r25, 0x02	; 2
     c4a:	09 f0       	breq	.+2      	; 0xc4e <_fpadd_parts+0x50>
     c4c:	1d c1       	rjmp	.+570    	; 0xe88 <_fpadd_parts+0x28a>
     c4e:	9a 01       	movw	r18, r20
     c50:	ad 01       	movw	r20, r26
     c52:	88 e0       	ldi	r24, 0x08	; 8
     c54:	ea 01       	movw	r28, r20
     c56:	09 90       	ld	r0, Y+
     c58:	ae 01       	movw	r20, r28
     c5a:	e9 01       	movw	r28, r18
     c5c:	09 92       	st	Y+, r0
     c5e:	9e 01       	movw	r18, r28
     c60:	81 50       	subi	r24, 0x01	; 1
     c62:	c1 f7       	brne	.-16     	; 0xc54 <_fpadd_parts+0x56>
     c64:	e2 01       	movw	r28, r4
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	11 96       	adiw	r26, 0x01	; 1
     c6a:	9c 91       	ld	r25, X
     c6c:	89 23       	and	r24, r25
     c6e:	81 83       	std	Z+1, r24	; 0x01
     c70:	08 c1       	rjmp	.+528    	; 0xe82 <_fpadd_parts+0x284>
     c72:	92 30       	cpi	r25, 0x02	; 2
     c74:	09 f4       	brne	.+2      	; 0xc78 <_fpadd_parts+0x7a>
     c76:	07 c1       	rjmp	.+526    	; 0xe86 <_fpadd_parts+0x288>
     c78:	12 96       	adiw	r26, 0x02	; 2
     c7a:	2d 90       	ld	r2, X+
     c7c:	3c 90       	ld	r3, X
     c7e:	13 97       	sbiw	r26, 0x03	; 3
     c80:	eb 01       	movw	r28, r22
     c82:	8a 81       	ldd	r24, Y+2	; 0x02
     c84:	9b 81       	ldd	r25, Y+3	; 0x03
     c86:	14 96       	adiw	r26, 0x04	; 4
     c88:	ad 90       	ld	r10, X+
     c8a:	bd 90       	ld	r11, X+
     c8c:	cd 90       	ld	r12, X+
     c8e:	dc 90       	ld	r13, X
     c90:	17 97       	sbiw	r26, 0x07	; 7
     c92:	ec 80       	ldd	r14, Y+4	; 0x04
     c94:	fd 80       	ldd	r15, Y+5	; 0x05
     c96:	0e 81       	ldd	r16, Y+6	; 0x06
     c98:	1f 81       	ldd	r17, Y+7	; 0x07
     c9a:	91 01       	movw	r18, r2
     c9c:	28 1b       	sub	r18, r24
     c9e:	39 0b       	sbc	r19, r25
     ca0:	b9 01       	movw	r22, r18
     ca2:	37 ff       	sbrs	r19, 7
     ca4:	04 c0       	rjmp	.+8      	; 0xcae <_fpadd_parts+0xb0>
     ca6:	66 27       	eor	r22, r22
     ca8:	77 27       	eor	r23, r23
     caa:	62 1b       	sub	r22, r18
     cac:	73 0b       	sbc	r23, r19
     cae:	60 32       	cpi	r22, 0x20	; 32
     cb0:	71 05       	cpc	r23, r1
     cb2:	0c f0       	brlt	.+2      	; 0xcb6 <_fpadd_parts+0xb8>
     cb4:	61 c0       	rjmp	.+194    	; 0xd78 <_fpadd_parts+0x17a>
     cb6:	12 16       	cp	r1, r18
     cb8:	13 06       	cpc	r1, r19
     cba:	6c f5       	brge	.+90     	; 0xd16 <_fpadd_parts+0x118>
     cbc:	37 01       	movw	r6, r14
     cbe:	48 01       	movw	r8, r16
     cc0:	06 2e       	mov	r0, r22
     cc2:	04 c0       	rjmp	.+8      	; 0xccc <_fpadd_parts+0xce>
     cc4:	96 94       	lsr	r9
     cc6:	87 94       	ror	r8
     cc8:	77 94       	ror	r7
     cca:	67 94       	ror	r6
     ccc:	0a 94       	dec	r0
     cce:	d2 f7       	brpl	.-12     	; 0xcc4 <_fpadd_parts+0xc6>
     cd0:	21 e0       	ldi	r18, 0x01	; 1
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	04 c0       	rjmp	.+8      	; 0xce2 <_fpadd_parts+0xe4>
     cda:	22 0f       	add	r18, r18
     cdc:	33 1f       	adc	r19, r19
     cde:	44 1f       	adc	r20, r20
     ce0:	55 1f       	adc	r21, r21
     ce2:	6a 95       	dec	r22
     ce4:	d2 f7       	brpl	.-12     	; 0xcda <_fpadd_parts+0xdc>
     ce6:	21 50       	subi	r18, 0x01	; 1
     ce8:	30 40       	sbci	r19, 0x00	; 0
     cea:	40 40       	sbci	r20, 0x00	; 0
     cec:	50 40       	sbci	r21, 0x00	; 0
     cee:	2e 21       	and	r18, r14
     cf0:	3f 21       	and	r19, r15
     cf2:	40 23       	and	r20, r16
     cf4:	51 23       	and	r21, r17
     cf6:	21 15       	cp	r18, r1
     cf8:	31 05       	cpc	r19, r1
     cfa:	41 05       	cpc	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	21 f0       	breq	.+8      	; 0xd08 <_fpadd_parts+0x10a>
     d00:	21 e0       	ldi	r18, 0x01	; 1
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	50 e0       	ldi	r21, 0x00	; 0
     d08:	79 01       	movw	r14, r18
     d0a:	8a 01       	movw	r16, r20
     d0c:	e6 28       	or	r14, r6
     d0e:	f7 28       	or	r15, r7
     d10:	08 29       	or	r16, r8
     d12:	19 29       	or	r17, r9
     d14:	3c c0       	rjmp	.+120    	; 0xd8e <_fpadd_parts+0x190>
     d16:	23 2b       	or	r18, r19
     d18:	d1 f1       	breq	.+116    	; 0xd8e <_fpadd_parts+0x190>
     d1a:	26 0e       	add	r2, r22
     d1c:	37 1e       	adc	r3, r23
     d1e:	35 01       	movw	r6, r10
     d20:	46 01       	movw	r8, r12
     d22:	06 2e       	mov	r0, r22
     d24:	04 c0       	rjmp	.+8      	; 0xd2e <_fpadd_parts+0x130>
     d26:	96 94       	lsr	r9
     d28:	87 94       	ror	r8
     d2a:	77 94       	ror	r7
     d2c:	67 94       	ror	r6
     d2e:	0a 94       	dec	r0
     d30:	d2 f7       	brpl	.-12     	; 0xd26 <_fpadd_parts+0x128>
     d32:	21 e0       	ldi	r18, 0x01	; 1
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <_fpadd_parts+0x146>
     d3c:	22 0f       	add	r18, r18
     d3e:	33 1f       	adc	r19, r19
     d40:	44 1f       	adc	r20, r20
     d42:	55 1f       	adc	r21, r21
     d44:	6a 95       	dec	r22
     d46:	d2 f7       	brpl	.-12     	; 0xd3c <_fpadd_parts+0x13e>
     d48:	21 50       	subi	r18, 0x01	; 1
     d4a:	30 40       	sbci	r19, 0x00	; 0
     d4c:	40 40       	sbci	r20, 0x00	; 0
     d4e:	50 40       	sbci	r21, 0x00	; 0
     d50:	2a 21       	and	r18, r10
     d52:	3b 21       	and	r19, r11
     d54:	4c 21       	and	r20, r12
     d56:	5d 21       	and	r21, r13
     d58:	21 15       	cp	r18, r1
     d5a:	31 05       	cpc	r19, r1
     d5c:	41 05       	cpc	r20, r1
     d5e:	51 05       	cpc	r21, r1
     d60:	21 f0       	breq	.+8      	; 0xd6a <_fpadd_parts+0x16c>
     d62:	21 e0       	ldi	r18, 0x01	; 1
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	59 01       	movw	r10, r18
     d6c:	6a 01       	movw	r12, r20
     d6e:	a6 28       	or	r10, r6
     d70:	b7 28       	or	r11, r7
     d72:	c8 28       	or	r12, r8
     d74:	d9 28       	or	r13, r9
     d76:	0b c0       	rjmp	.+22     	; 0xd8e <_fpadd_parts+0x190>
     d78:	82 15       	cp	r24, r2
     d7a:	93 05       	cpc	r25, r3
     d7c:	2c f0       	brlt	.+10     	; 0xd88 <_fpadd_parts+0x18a>
     d7e:	1c 01       	movw	r2, r24
     d80:	aa 24       	eor	r10, r10
     d82:	bb 24       	eor	r11, r11
     d84:	65 01       	movw	r12, r10
     d86:	03 c0       	rjmp	.+6      	; 0xd8e <_fpadd_parts+0x190>
     d88:	ee 24       	eor	r14, r14
     d8a:	ff 24       	eor	r15, r15
     d8c:	87 01       	movw	r16, r14
     d8e:	11 96       	adiw	r26, 0x01	; 1
     d90:	9c 91       	ld	r25, X
     d92:	d2 01       	movw	r26, r4
     d94:	11 96       	adiw	r26, 0x01	; 1
     d96:	8c 91       	ld	r24, X
     d98:	98 17       	cp	r25, r24
     d9a:	09 f4       	brne	.+2      	; 0xd9e <_fpadd_parts+0x1a0>
     d9c:	45 c0       	rjmp	.+138    	; 0xe28 <_fpadd_parts+0x22a>
     d9e:	99 23       	and	r25, r25
     da0:	39 f0       	breq	.+14     	; 0xdb0 <_fpadd_parts+0x1b2>
     da2:	a8 01       	movw	r20, r16
     da4:	97 01       	movw	r18, r14
     da6:	2a 19       	sub	r18, r10
     da8:	3b 09       	sbc	r19, r11
     daa:	4c 09       	sbc	r20, r12
     dac:	5d 09       	sbc	r21, r13
     dae:	06 c0       	rjmp	.+12     	; 0xdbc <_fpadd_parts+0x1be>
     db0:	a6 01       	movw	r20, r12
     db2:	95 01       	movw	r18, r10
     db4:	2e 19       	sub	r18, r14
     db6:	3f 09       	sbc	r19, r15
     db8:	40 0b       	sbc	r20, r16
     dba:	51 0b       	sbc	r21, r17
     dbc:	57 fd       	sbrc	r21, 7
     dbe:	08 c0       	rjmp	.+16     	; 0xdd0 <_fpadd_parts+0x1d2>
     dc0:	11 82       	std	Z+1, r1	; 0x01
     dc2:	33 82       	std	Z+3, r3	; 0x03
     dc4:	22 82       	std	Z+2, r2	; 0x02
     dc6:	24 83       	std	Z+4, r18	; 0x04
     dc8:	35 83       	std	Z+5, r19	; 0x05
     dca:	46 83       	std	Z+6, r20	; 0x06
     dcc:	57 83       	std	Z+7, r21	; 0x07
     dce:	1d c0       	rjmp	.+58     	; 0xe0a <_fpadd_parts+0x20c>
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	81 83       	std	Z+1, r24	; 0x01
     dd4:	33 82       	std	Z+3, r3	; 0x03
     dd6:	22 82       	std	Z+2, r2	; 0x02
     dd8:	88 27       	eor	r24, r24
     dda:	99 27       	eor	r25, r25
     ddc:	dc 01       	movw	r26, r24
     dde:	82 1b       	sub	r24, r18
     de0:	93 0b       	sbc	r25, r19
     de2:	a4 0b       	sbc	r26, r20
     de4:	b5 0b       	sbc	r27, r21
     de6:	84 83       	std	Z+4, r24	; 0x04
     de8:	95 83       	std	Z+5, r25	; 0x05
     dea:	a6 83       	std	Z+6, r26	; 0x06
     dec:	b7 83       	std	Z+7, r27	; 0x07
     dee:	0d c0       	rjmp	.+26     	; 0xe0a <_fpadd_parts+0x20c>
     df0:	22 0f       	add	r18, r18
     df2:	33 1f       	adc	r19, r19
     df4:	44 1f       	adc	r20, r20
     df6:	55 1f       	adc	r21, r21
     df8:	24 83       	std	Z+4, r18	; 0x04
     dfa:	35 83       	std	Z+5, r19	; 0x05
     dfc:	46 83       	std	Z+6, r20	; 0x06
     dfe:	57 83       	std	Z+7, r21	; 0x07
     e00:	82 81       	ldd	r24, Z+2	; 0x02
     e02:	93 81       	ldd	r25, Z+3	; 0x03
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	93 83       	std	Z+3, r25	; 0x03
     e08:	82 83       	std	Z+2, r24	; 0x02
     e0a:	24 81       	ldd	r18, Z+4	; 0x04
     e0c:	35 81       	ldd	r19, Z+5	; 0x05
     e0e:	46 81       	ldd	r20, Z+6	; 0x06
     e10:	57 81       	ldd	r21, Z+7	; 0x07
     e12:	da 01       	movw	r26, r20
     e14:	c9 01       	movw	r24, r18
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	a1 09       	sbc	r26, r1
     e1a:	b1 09       	sbc	r27, r1
     e1c:	8f 5f       	subi	r24, 0xFF	; 255
     e1e:	9f 4f       	sbci	r25, 0xFF	; 255
     e20:	af 4f       	sbci	r26, 0xFF	; 255
     e22:	bf 43       	sbci	r27, 0x3F	; 63
     e24:	28 f3       	brcs	.-54     	; 0xdf0 <_fpadd_parts+0x1f2>
     e26:	0b c0       	rjmp	.+22     	; 0xe3e <_fpadd_parts+0x240>
     e28:	91 83       	std	Z+1, r25	; 0x01
     e2a:	33 82       	std	Z+3, r3	; 0x03
     e2c:	22 82       	std	Z+2, r2	; 0x02
     e2e:	ea 0c       	add	r14, r10
     e30:	fb 1c       	adc	r15, r11
     e32:	0c 1d       	adc	r16, r12
     e34:	1d 1d       	adc	r17, r13
     e36:	e4 82       	std	Z+4, r14	; 0x04
     e38:	f5 82       	std	Z+5, r15	; 0x05
     e3a:	06 83       	std	Z+6, r16	; 0x06
     e3c:	17 83       	std	Z+7, r17	; 0x07
     e3e:	83 e0       	ldi	r24, 0x03	; 3
     e40:	80 83       	st	Z, r24
     e42:	24 81       	ldd	r18, Z+4	; 0x04
     e44:	35 81       	ldd	r19, Z+5	; 0x05
     e46:	46 81       	ldd	r20, Z+6	; 0x06
     e48:	57 81       	ldd	r21, Z+7	; 0x07
     e4a:	57 ff       	sbrs	r21, 7
     e4c:	1a c0       	rjmp	.+52     	; 0xe82 <_fpadd_parts+0x284>
     e4e:	c9 01       	movw	r24, r18
     e50:	aa 27       	eor	r26, r26
     e52:	97 fd       	sbrc	r25, 7
     e54:	a0 95       	com	r26
     e56:	ba 2f       	mov	r27, r26
     e58:	81 70       	andi	r24, 0x01	; 1
     e5a:	90 70       	andi	r25, 0x00	; 0
     e5c:	a0 70       	andi	r26, 0x00	; 0
     e5e:	b0 70       	andi	r27, 0x00	; 0
     e60:	56 95       	lsr	r21
     e62:	47 95       	ror	r20
     e64:	37 95       	ror	r19
     e66:	27 95       	ror	r18
     e68:	82 2b       	or	r24, r18
     e6a:	93 2b       	or	r25, r19
     e6c:	a4 2b       	or	r26, r20
     e6e:	b5 2b       	or	r27, r21
     e70:	84 83       	std	Z+4, r24	; 0x04
     e72:	95 83       	std	Z+5, r25	; 0x05
     e74:	a6 83       	std	Z+6, r26	; 0x06
     e76:	b7 83       	std	Z+7, r27	; 0x07
     e78:	82 81       	ldd	r24, Z+2	; 0x02
     e7a:	93 81       	ldd	r25, Z+3	; 0x03
     e7c:	01 96       	adiw	r24, 0x01	; 1
     e7e:	93 83       	std	Z+3, r25	; 0x03
     e80:	82 83       	std	Z+2, r24	; 0x02
     e82:	df 01       	movw	r26, r30
     e84:	01 c0       	rjmp	.+2      	; 0xe88 <_fpadd_parts+0x28a>
     e86:	d2 01       	movw	r26, r4
     e88:	cd 01       	movw	r24, r26
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	e2 e1       	ldi	r30, 0x12	; 18
     e90:	84 c4       	rjmp	.+2312   	; 0x179a <__epilogue_restores__>

00000e92 <__subsf3>:
     e92:	a0 e2       	ldi	r26, 0x20	; 32
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	ee e4       	ldi	r30, 0x4E	; 78
     e98:	f7 e0       	ldi	r31, 0x07	; 7
     e9a:	6f c4       	rjmp	.+2270   	; 0x177a <__prologue_saves__+0x18>
     e9c:	69 83       	std	Y+1, r22	; 0x01
     e9e:	7a 83       	std	Y+2, r23	; 0x02
     ea0:	8b 83       	std	Y+3, r24	; 0x03
     ea2:	9c 83       	std	Y+4, r25	; 0x04
     ea4:	2d 83       	std	Y+5, r18	; 0x05
     ea6:	3e 83       	std	Y+6, r19	; 0x06
     ea8:	4f 83       	std	Y+7, r20	; 0x07
     eaa:	58 87       	std	Y+8, r21	; 0x08
     eac:	e9 e0       	ldi	r30, 0x09	; 9
     eae:	ee 2e       	mov	r14, r30
     eb0:	f1 2c       	mov	r15, r1
     eb2:	ec 0e       	add	r14, r28
     eb4:	fd 1e       	adc	r15, r29
     eb6:	ce 01       	movw	r24, r28
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	b7 01       	movw	r22, r14
     ebc:	81 d3       	rcall	.+1794   	; 0x15c0 <__unpack_f>
     ebe:	8e 01       	movw	r16, r28
     ec0:	0f 5e       	subi	r16, 0xEF	; 239
     ec2:	1f 4f       	sbci	r17, 0xFF	; 255
     ec4:	ce 01       	movw	r24, r28
     ec6:	05 96       	adiw	r24, 0x05	; 5
     ec8:	b8 01       	movw	r22, r16
     eca:	7a d3       	rcall	.+1780   	; 0x15c0 <__unpack_f>
     ecc:	8a 89       	ldd	r24, Y+18	; 0x12
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	89 27       	eor	r24, r25
     ed2:	8a 8b       	std	Y+18, r24	; 0x12
     ed4:	c7 01       	movw	r24, r14
     ed6:	b8 01       	movw	r22, r16
     ed8:	ae 01       	movw	r20, r28
     eda:	47 5e       	subi	r20, 0xE7	; 231
     edc:	5f 4f       	sbci	r21, 0xFF	; 255
     ede:	8f de       	rcall	.-738    	; 0xbfe <_fpadd_parts>
     ee0:	9a d2       	rcall	.+1332   	; 0x1416 <__pack_f>
     ee2:	a0 96       	adiw	r28, 0x20	; 32
     ee4:	e6 e0       	ldi	r30, 0x06	; 6
     ee6:	65 c4       	rjmp	.+2250   	; 0x17b2 <__epilogue_restores__+0x18>

00000ee8 <__addsf3>:
     ee8:	a0 e2       	ldi	r26, 0x20	; 32
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e9 e7       	ldi	r30, 0x79	; 121
     eee:	f7 e0       	ldi	r31, 0x07	; 7
     ef0:	44 c4       	rjmp	.+2184   	; 0x177a <__prologue_saves__+0x18>
     ef2:	69 83       	std	Y+1, r22	; 0x01
     ef4:	7a 83       	std	Y+2, r23	; 0x02
     ef6:	8b 83       	std	Y+3, r24	; 0x03
     ef8:	9c 83       	std	Y+4, r25	; 0x04
     efa:	2d 83       	std	Y+5, r18	; 0x05
     efc:	3e 83       	std	Y+6, r19	; 0x06
     efe:	4f 83       	std	Y+7, r20	; 0x07
     f00:	58 87       	std	Y+8, r21	; 0x08
     f02:	f9 e0       	ldi	r31, 0x09	; 9
     f04:	ef 2e       	mov	r14, r31
     f06:	f1 2c       	mov	r15, r1
     f08:	ec 0e       	add	r14, r28
     f0a:	fd 1e       	adc	r15, r29
     f0c:	ce 01       	movw	r24, r28
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	b7 01       	movw	r22, r14
     f12:	56 d3       	rcall	.+1708   	; 0x15c0 <__unpack_f>
     f14:	8e 01       	movw	r16, r28
     f16:	0f 5e       	subi	r16, 0xEF	; 239
     f18:	1f 4f       	sbci	r17, 0xFF	; 255
     f1a:	ce 01       	movw	r24, r28
     f1c:	05 96       	adiw	r24, 0x05	; 5
     f1e:	b8 01       	movw	r22, r16
     f20:	4f d3       	rcall	.+1694   	; 0x15c0 <__unpack_f>
     f22:	c7 01       	movw	r24, r14
     f24:	b8 01       	movw	r22, r16
     f26:	ae 01       	movw	r20, r28
     f28:	47 5e       	subi	r20, 0xE7	; 231
     f2a:	5f 4f       	sbci	r21, 0xFF	; 255
     f2c:	68 de       	rcall	.-816    	; 0xbfe <_fpadd_parts>
     f2e:	73 d2       	rcall	.+1254   	; 0x1416 <__pack_f>
     f30:	a0 96       	adiw	r28, 0x20	; 32
     f32:	e6 e0       	ldi	r30, 0x06	; 6
     f34:	3e c4       	rjmp	.+2172   	; 0x17b2 <__epilogue_restores__+0x18>

00000f36 <__mulsf3>:
     f36:	a0 e2       	ldi	r26, 0x20	; 32
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e0 ea       	ldi	r30, 0xA0	; 160
     f3c:	f7 e0       	ldi	r31, 0x07	; 7
     f3e:	11 c4       	rjmp	.+2082   	; 0x1762 <__prologue_saves__>
     f40:	69 83       	std	Y+1, r22	; 0x01
     f42:	7a 83       	std	Y+2, r23	; 0x02
     f44:	8b 83       	std	Y+3, r24	; 0x03
     f46:	9c 83       	std	Y+4, r25	; 0x04
     f48:	2d 83       	std	Y+5, r18	; 0x05
     f4a:	3e 83       	std	Y+6, r19	; 0x06
     f4c:	4f 83       	std	Y+7, r20	; 0x07
     f4e:	58 87       	std	Y+8, r21	; 0x08
     f50:	ce 01       	movw	r24, r28
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	be 01       	movw	r22, r28
     f56:	67 5f       	subi	r22, 0xF7	; 247
     f58:	7f 4f       	sbci	r23, 0xFF	; 255
     f5a:	32 d3       	rcall	.+1636   	; 0x15c0 <__unpack_f>
     f5c:	ce 01       	movw	r24, r28
     f5e:	05 96       	adiw	r24, 0x05	; 5
     f60:	be 01       	movw	r22, r28
     f62:	6f 5e       	subi	r22, 0xEF	; 239
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	2c d3       	rcall	.+1624   	; 0x15c0 <__unpack_f>
     f68:	99 85       	ldd	r25, Y+9	; 0x09
     f6a:	92 30       	cpi	r25, 0x02	; 2
     f6c:	88 f0       	brcs	.+34     	; 0xf90 <__mulsf3+0x5a>
     f6e:	89 89       	ldd	r24, Y+17	; 0x11
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	c8 f0       	brcs	.+50     	; 0xfa6 <__mulsf3+0x70>
     f74:	94 30       	cpi	r25, 0x04	; 4
     f76:	19 f4       	brne	.+6      	; 0xf7e <__mulsf3+0x48>
     f78:	82 30       	cpi	r24, 0x02	; 2
     f7a:	51 f4       	brne	.+20     	; 0xf90 <__mulsf3+0x5a>
     f7c:	04 c0       	rjmp	.+8      	; 0xf86 <__mulsf3+0x50>
     f7e:	84 30       	cpi	r24, 0x04	; 4
     f80:	29 f4       	brne	.+10     	; 0xf8c <__mulsf3+0x56>
     f82:	92 30       	cpi	r25, 0x02	; 2
     f84:	81 f4       	brne	.+32     	; 0xfa6 <__mulsf3+0x70>
     f86:	81 e6       	ldi	r24, 0x61	; 97
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	c6 c0       	rjmp	.+396    	; 0x1118 <__mulsf3+0x1e2>
     f8c:	92 30       	cpi	r25, 0x02	; 2
     f8e:	49 f4       	brne	.+18     	; 0xfa2 <__mulsf3+0x6c>
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	9a 85       	ldd	r25, Y+10	; 0x0a
     f94:	8a 89       	ldd	r24, Y+18	; 0x12
     f96:	98 13       	cpse	r25, r24
     f98:	21 e0       	ldi	r18, 0x01	; 1
     f9a:	2a 87       	std	Y+10, r18	; 0x0a
     f9c:	ce 01       	movw	r24, r28
     f9e:	09 96       	adiw	r24, 0x09	; 9
     fa0:	bb c0       	rjmp	.+374    	; 0x1118 <__mulsf3+0x1e2>
     fa2:	82 30       	cpi	r24, 0x02	; 2
     fa4:	49 f4       	brne	.+18     	; 0xfb8 <__mulsf3+0x82>
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
     faa:	8a 89       	ldd	r24, Y+18	; 0x12
     fac:	98 13       	cpse	r25, r24
     fae:	21 e0       	ldi	r18, 0x01	; 1
     fb0:	2a 8b       	std	Y+18, r18	; 0x12
     fb2:	ce 01       	movw	r24, r28
     fb4:	41 96       	adiw	r24, 0x11	; 17
     fb6:	b0 c0       	rjmp	.+352    	; 0x1118 <__mulsf3+0x1e2>
     fb8:	2d 84       	ldd	r2, Y+13	; 0x0d
     fba:	3e 84       	ldd	r3, Y+14	; 0x0e
     fbc:	4f 84       	ldd	r4, Y+15	; 0x0f
     fbe:	58 88       	ldd	r5, Y+16	; 0x10
     fc0:	6d 88       	ldd	r6, Y+21	; 0x15
     fc2:	7e 88       	ldd	r7, Y+22	; 0x16
     fc4:	8f 88       	ldd	r8, Y+23	; 0x17
     fc6:	98 8c       	ldd	r9, Y+24	; 0x18
     fc8:	ee 24       	eor	r14, r14
     fca:	ff 24       	eor	r15, r15
     fcc:	87 01       	movw	r16, r14
     fce:	aa 24       	eor	r10, r10
     fd0:	bb 24       	eor	r11, r11
     fd2:	65 01       	movw	r12, r10
     fd4:	40 e0       	ldi	r20, 0x00	; 0
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	e0 e0       	ldi	r30, 0x00	; 0
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	c1 01       	movw	r24, r2
     fe2:	81 70       	andi	r24, 0x01	; 1
     fe4:	90 70       	andi	r25, 0x00	; 0
     fe6:	89 2b       	or	r24, r25
     fe8:	e9 f0       	breq	.+58     	; 0x1024 <__mulsf3+0xee>
     fea:	e6 0c       	add	r14, r6
     fec:	f7 1c       	adc	r15, r7
     fee:	08 1d       	adc	r16, r8
     ff0:	19 1d       	adc	r17, r9
     ff2:	9a 01       	movw	r18, r20
     ff4:	ab 01       	movw	r20, r22
     ff6:	2a 0d       	add	r18, r10
     ff8:	3b 1d       	adc	r19, r11
     ffa:	4c 1d       	adc	r20, r12
     ffc:	5d 1d       	adc	r21, r13
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	a0 e0       	ldi	r26, 0x00	; 0
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e6 14       	cp	r14, r6
    1008:	f7 04       	cpc	r15, r7
    100a:	08 05       	cpc	r16, r8
    100c:	19 05       	cpc	r17, r9
    100e:	20 f4       	brcc	.+8      	; 0x1018 <__mulsf3+0xe2>
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	a0 e0       	ldi	r26, 0x00	; 0
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	ba 01       	movw	r22, r20
    101a:	a9 01       	movw	r20, r18
    101c:	48 0f       	add	r20, r24
    101e:	59 1f       	adc	r21, r25
    1020:	6a 1f       	adc	r22, r26
    1022:	7b 1f       	adc	r23, r27
    1024:	aa 0c       	add	r10, r10
    1026:	bb 1c       	adc	r11, r11
    1028:	cc 1c       	adc	r12, r12
    102a:	dd 1c       	adc	r13, r13
    102c:	97 fe       	sbrs	r9, 7
    102e:	08 c0       	rjmp	.+16     	; 0x1040 <__mulsf3+0x10a>
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	a0 e0       	ldi	r26, 0x00	; 0
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	a8 2a       	or	r10, r24
    103a:	b9 2a       	or	r11, r25
    103c:	ca 2a       	or	r12, r26
    103e:	db 2a       	or	r13, r27
    1040:	31 96       	adiw	r30, 0x01	; 1
    1042:	e0 32       	cpi	r30, 0x20	; 32
    1044:	f1 05       	cpc	r31, r1
    1046:	49 f0       	breq	.+18     	; 0x105a <__mulsf3+0x124>
    1048:	66 0c       	add	r6, r6
    104a:	77 1c       	adc	r7, r7
    104c:	88 1c       	adc	r8, r8
    104e:	99 1c       	adc	r9, r9
    1050:	56 94       	lsr	r5
    1052:	47 94       	ror	r4
    1054:	37 94       	ror	r3
    1056:	27 94       	ror	r2
    1058:	c3 cf       	rjmp	.-122    	; 0xfe0 <__mulsf3+0xaa>
    105a:	fa 85       	ldd	r31, Y+10	; 0x0a
    105c:	ea 89       	ldd	r30, Y+18	; 0x12
    105e:	2b 89       	ldd	r18, Y+19	; 0x13
    1060:	3c 89       	ldd	r19, Y+20	; 0x14
    1062:	8b 85       	ldd	r24, Y+11	; 0x0b
    1064:	9c 85       	ldd	r25, Y+12	; 0x0c
    1066:	28 0f       	add	r18, r24
    1068:	39 1f       	adc	r19, r25
    106a:	2e 5f       	subi	r18, 0xFE	; 254
    106c:	3f 4f       	sbci	r19, 0xFF	; 255
    106e:	17 c0       	rjmp	.+46     	; 0x109e <__mulsf3+0x168>
    1070:	ca 01       	movw	r24, r20
    1072:	81 70       	andi	r24, 0x01	; 1
    1074:	90 70       	andi	r25, 0x00	; 0
    1076:	89 2b       	or	r24, r25
    1078:	61 f0       	breq	.+24     	; 0x1092 <__mulsf3+0x15c>
    107a:	16 95       	lsr	r17
    107c:	07 95       	ror	r16
    107e:	f7 94       	ror	r15
    1080:	e7 94       	ror	r14
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	a0 e0       	ldi	r26, 0x00	; 0
    1088:	b0 e8       	ldi	r27, 0x80	; 128
    108a:	e8 2a       	or	r14, r24
    108c:	f9 2a       	or	r15, r25
    108e:	0a 2b       	or	r16, r26
    1090:	1b 2b       	or	r17, r27
    1092:	76 95       	lsr	r23
    1094:	67 95       	ror	r22
    1096:	57 95       	ror	r21
    1098:	47 95       	ror	r20
    109a:	2f 5f       	subi	r18, 0xFF	; 255
    109c:	3f 4f       	sbci	r19, 0xFF	; 255
    109e:	77 fd       	sbrc	r23, 7
    10a0:	e7 cf       	rjmp	.-50     	; 0x1070 <__mulsf3+0x13a>
    10a2:	0c c0       	rjmp	.+24     	; 0x10bc <__mulsf3+0x186>
    10a4:	44 0f       	add	r20, r20
    10a6:	55 1f       	adc	r21, r21
    10a8:	66 1f       	adc	r22, r22
    10aa:	77 1f       	adc	r23, r23
    10ac:	17 fd       	sbrc	r17, 7
    10ae:	41 60       	ori	r20, 0x01	; 1
    10b0:	ee 0c       	add	r14, r14
    10b2:	ff 1c       	adc	r15, r15
    10b4:	00 1f       	adc	r16, r16
    10b6:	11 1f       	adc	r17, r17
    10b8:	21 50       	subi	r18, 0x01	; 1
    10ba:	30 40       	sbci	r19, 0x00	; 0
    10bc:	40 30       	cpi	r20, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	59 07       	cpc	r21, r25
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	69 07       	cpc	r22, r25
    10c6:	90 e4       	ldi	r25, 0x40	; 64
    10c8:	79 07       	cpc	r23, r25
    10ca:	60 f3       	brcs	.-40     	; 0x10a4 <__mulsf3+0x16e>
    10cc:	2b 8f       	std	Y+27, r18	; 0x1b
    10ce:	3c 8f       	std	Y+28, r19	; 0x1c
    10d0:	db 01       	movw	r26, r22
    10d2:	ca 01       	movw	r24, r20
    10d4:	8f 77       	andi	r24, 0x7F	; 127
    10d6:	90 70       	andi	r25, 0x00	; 0
    10d8:	a0 70       	andi	r26, 0x00	; 0
    10da:	b0 70       	andi	r27, 0x00	; 0
    10dc:	80 34       	cpi	r24, 0x40	; 64
    10de:	91 05       	cpc	r25, r1
    10e0:	a1 05       	cpc	r26, r1
    10e2:	b1 05       	cpc	r27, r1
    10e4:	61 f4       	brne	.+24     	; 0x10fe <__mulsf3+0x1c8>
    10e6:	47 fd       	sbrc	r20, 7
    10e8:	0a c0       	rjmp	.+20     	; 0x10fe <__mulsf3+0x1c8>
    10ea:	e1 14       	cp	r14, r1
    10ec:	f1 04       	cpc	r15, r1
    10ee:	01 05       	cpc	r16, r1
    10f0:	11 05       	cpc	r17, r1
    10f2:	29 f0       	breq	.+10     	; 0x10fe <__mulsf3+0x1c8>
    10f4:	40 5c       	subi	r20, 0xC0	; 192
    10f6:	5f 4f       	sbci	r21, 0xFF	; 255
    10f8:	6f 4f       	sbci	r22, 0xFF	; 255
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	40 78       	andi	r20, 0x80	; 128
    10fe:	1a 8e       	std	Y+26, r1	; 0x1a
    1100:	fe 17       	cp	r31, r30
    1102:	11 f0       	breq	.+4      	; 0x1108 <__mulsf3+0x1d2>
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	8a 8f       	std	Y+26, r24	; 0x1a
    1108:	4d 8f       	std	Y+29, r20	; 0x1d
    110a:	5e 8f       	std	Y+30, r21	; 0x1e
    110c:	6f 8f       	std	Y+31, r22	; 0x1f
    110e:	78 a3       	std	Y+32, r23	; 0x20
    1110:	83 e0       	ldi	r24, 0x03	; 3
    1112:	89 8f       	std	Y+25, r24	; 0x19
    1114:	ce 01       	movw	r24, r28
    1116:	49 96       	adiw	r24, 0x19	; 25
    1118:	7e d1       	rcall	.+764    	; 0x1416 <__pack_f>
    111a:	a0 96       	adiw	r28, 0x20	; 32
    111c:	e2 e1       	ldi	r30, 0x12	; 18
    111e:	3d c3       	rjmp	.+1658   	; 0x179a <__epilogue_restores__>

00001120 <__gtsf2>:
    1120:	a8 e1       	ldi	r26, 0x18	; 24
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e5 e9       	ldi	r30, 0x95	; 149
    1126:	f8 e0       	ldi	r31, 0x08	; 8
    1128:	28 c3       	rjmp	.+1616   	; 0x177a <__prologue_saves__+0x18>
    112a:	69 83       	std	Y+1, r22	; 0x01
    112c:	7a 83       	std	Y+2, r23	; 0x02
    112e:	8b 83       	std	Y+3, r24	; 0x03
    1130:	9c 83       	std	Y+4, r25	; 0x04
    1132:	2d 83       	std	Y+5, r18	; 0x05
    1134:	3e 83       	std	Y+6, r19	; 0x06
    1136:	4f 83       	std	Y+7, r20	; 0x07
    1138:	58 87       	std	Y+8, r21	; 0x08
    113a:	89 e0       	ldi	r24, 0x09	; 9
    113c:	e8 2e       	mov	r14, r24
    113e:	f1 2c       	mov	r15, r1
    1140:	ec 0e       	add	r14, r28
    1142:	fd 1e       	adc	r15, r29
    1144:	ce 01       	movw	r24, r28
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	b7 01       	movw	r22, r14
    114a:	3a d2       	rcall	.+1140   	; 0x15c0 <__unpack_f>
    114c:	8e 01       	movw	r16, r28
    114e:	0f 5e       	subi	r16, 0xEF	; 239
    1150:	1f 4f       	sbci	r17, 0xFF	; 255
    1152:	ce 01       	movw	r24, r28
    1154:	05 96       	adiw	r24, 0x05	; 5
    1156:	b8 01       	movw	r22, r16
    1158:	33 d2       	rcall	.+1126   	; 0x15c0 <__unpack_f>
    115a:	89 85       	ldd	r24, Y+9	; 0x09
    115c:	82 30       	cpi	r24, 0x02	; 2
    115e:	38 f0       	brcs	.+14     	; 0x116e <__gtsf2+0x4e>
    1160:	89 89       	ldd	r24, Y+17	; 0x11
    1162:	82 30       	cpi	r24, 0x02	; 2
    1164:	20 f0       	brcs	.+8      	; 0x116e <__gtsf2+0x4e>
    1166:	c7 01       	movw	r24, r14
    1168:	b8 01       	movw	r22, r16
    116a:	a2 d2       	rcall	.+1348   	; 0x16b0 <__fpcmp_parts_f>
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <__gtsf2+0x50>
    116e:	8f ef       	ldi	r24, 0xFF	; 255
    1170:	68 96       	adiw	r28, 0x18	; 24
    1172:	e6 e0       	ldi	r30, 0x06	; 6
    1174:	1e c3       	rjmp	.+1596   	; 0x17b2 <__epilogue_restores__+0x18>

00001176 <__gesf2>:
    1176:	a8 e1       	ldi	r26, 0x18	; 24
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e0 ec       	ldi	r30, 0xC0	; 192
    117c:	f8 e0       	ldi	r31, 0x08	; 8
    117e:	fd c2       	rjmp	.+1530   	; 0x177a <__prologue_saves__+0x18>
    1180:	69 83       	std	Y+1, r22	; 0x01
    1182:	7a 83       	std	Y+2, r23	; 0x02
    1184:	8b 83       	std	Y+3, r24	; 0x03
    1186:	9c 83       	std	Y+4, r25	; 0x04
    1188:	2d 83       	std	Y+5, r18	; 0x05
    118a:	3e 83       	std	Y+6, r19	; 0x06
    118c:	4f 83       	std	Y+7, r20	; 0x07
    118e:	58 87       	std	Y+8, r21	; 0x08
    1190:	89 e0       	ldi	r24, 0x09	; 9
    1192:	e8 2e       	mov	r14, r24
    1194:	f1 2c       	mov	r15, r1
    1196:	ec 0e       	add	r14, r28
    1198:	fd 1e       	adc	r15, r29
    119a:	ce 01       	movw	r24, r28
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	b7 01       	movw	r22, r14
    11a0:	0f d2       	rcall	.+1054   	; 0x15c0 <__unpack_f>
    11a2:	8e 01       	movw	r16, r28
    11a4:	0f 5e       	subi	r16, 0xEF	; 239
    11a6:	1f 4f       	sbci	r17, 0xFF	; 255
    11a8:	ce 01       	movw	r24, r28
    11aa:	05 96       	adiw	r24, 0x05	; 5
    11ac:	b8 01       	movw	r22, r16
    11ae:	08 d2       	rcall	.+1040   	; 0x15c0 <__unpack_f>
    11b0:	89 85       	ldd	r24, Y+9	; 0x09
    11b2:	82 30       	cpi	r24, 0x02	; 2
    11b4:	38 f0       	brcs	.+14     	; 0x11c4 <__gesf2+0x4e>
    11b6:	89 89       	ldd	r24, Y+17	; 0x11
    11b8:	82 30       	cpi	r24, 0x02	; 2
    11ba:	20 f0       	brcs	.+8      	; 0x11c4 <__gesf2+0x4e>
    11bc:	c7 01       	movw	r24, r14
    11be:	b8 01       	movw	r22, r16
    11c0:	77 d2       	rcall	.+1262   	; 0x16b0 <__fpcmp_parts_f>
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <__gesf2+0x50>
    11c4:	8f ef       	ldi	r24, 0xFF	; 255
    11c6:	68 96       	adiw	r28, 0x18	; 24
    11c8:	e6 e0       	ldi	r30, 0x06	; 6
    11ca:	f3 c2       	rjmp	.+1510   	; 0x17b2 <__epilogue_restores__+0x18>

000011cc <__ltsf2>:
    11cc:	a8 e1       	ldi	r26, 0x18	; 24
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	eb ee       	ldi	r30, 0xEB	; 235
    11d2:	f8 e0       	ldi	r31, 0x08	; 8
    11d4:	d2 c2       	rjmp	.+1444   	; 0x177a <__prologue_saves__+0x18>
    11d6:	69 83       	std	Y+1, r22	; 0x01
    11d8:	7a 83       	std	Y+2, r23	; 0x02
    11da:	8b 83       	std	Y+3, r24	; 0x03
    11dc:	9c 83       	std	Y+4, r25	; 0x04
    11de:	2d 83       	std	Y+5, r18	; 0x05
    11e0:	3e 83       	std	Y+6, r19	; 0x06
    11e2:	4f 83       	std	Y+7, r20	; 0x07
    11e4:	58 87       	std	Y+8, r21	; 0x08
    11e6:	89 e0       	ldi	r24, 0x09	; 9
    11e8:	e8 2e       	mov	r14, r24
    11ea:	f1 2c       	mov	r15, r1
    11ec:	ec 0e       	add	r14, r28
    11ee:	fd 1e       	adc	r15, r29
    11f0:	ce 01       	movw	r24, r28
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	b7 01       	movw	r22, r14
    11f6:	e4 d1       	rcall	.+968    	; 0x15c0 <__unpack_f>
    11f8:	8e 01       	movw	r16, r28
    11fa:	0f 5e       	subi	r16, 0xEF	; 239
    11fc:	1f 4f       	sbci	r17, 0xFF	; 255
    11fe:	ce 01       	movw	r24, r28
    1200:	05 96       	adiw	r24, 0x05	; 5
    1202:	b8 01       	movw	r22, r16
    1204:	dd d1       	rcall	.+954    	; 0x15c0 <__unpack_f>
    1206:	89 85       	ldd	r24, Y+9	; 0x09
    1208:	82 30       	cpi	r24, 0x02	; 2
    120a:	38 f0       	brcs	.+14     	; 0x121a <__ltsf2+0x4e>
    120c:	89 89       	ldd	r24, Y+17	; 0x11
    120e:	82 30       	cpi	r24, 0x02	; 2
    1210:	20 f0       	brcs	.+8      	; 0x121a <__ltsf2+0x4e>
    1212:	c7 01       	movw	r24, r14
    1214:	b8 01       	movw	r22, r16
    1216:	4c d2       	rcall	.+1176   	; 0x16b0 <__fpcmp_parts_f>
    1218:	01 c0       	rjmp	.+2      	; 0x121c <__ltsf2+0x50>
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	68 96       	adiw	r28, 0x18	; 24
    121e:	e6 e0       	ldi	r30, 0x06	; 6
    1220:	c8 c2       	rjmp	.+1424   	; 0x17b2 <__epilogue_restores__+0x18>

00001222 <__floatsisf>:
    1222:	a8 e0       	ldi	r26, 0x08	; 8
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e6 e1       	ldi	r30, 0x16	; 22
    1228:	f9 e0       	ldi	r31, 0x09	; 9
    122a:	a4 c2       	rjmp	.+1352   	; 0x1774 <__prologue_saves__+0x12>
    122c:	9b 01       	movw	r18, r22
    122e:	ac 01       	movw	r20, r24
    1230:	83 e0       	ldi	r24, 0x03	; 3
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	da 01       	movw	r26, r20
    1236:	c9 01       	movw	r24, r18
    1238:	88 27       	eor	r24, r24
    123a:	b7 fd       	sbrc	r27, 7
    123c:	83 95       	inc	r24
    123e:	99 27       	eor	r25, r25
    1240:	aa 27       	eor	r26, r26
    1242:	bb 27       	eor	r27, r27
    1244:	b8 2e       	mov	r11, r24
    1246:	21 15       	cp	r18, r1
    1248:	31 05       	cpc	r19, r1
    124a:	41 05       	cpc	r20, r1
    124c:	51 05       	cpc	r21, r1
    124e:	19 f4       	brne	.+6      	; 0x1256 <__floatsisf+0x34>
    1250:	82 e0       	ldi	r24, 0x02	; 2
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	39 c0       	rjmp	.+114    	; 0x12c8 <__floatsisf+0xa6>
    1256:	88 23       	and	r24, r24
    1258:	a9 f0       	breq	.+42     	; 0x1284 <__floatsisf+0x62>
    125a:	20 30       	cpi	r18, 0x00	; 0
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	38 07       	cpc	r19, r24
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	48 07       	cpc	r20, r24
    1264:	80 e8       	ldi	r24, 0x80	; 128
    1266:	58 07       	cpc	r21, r24
    1268:	29 f4       	brne	.+10     	; 0x1274 <__floatsisf+0x52>
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	9f ec       	ldi	r25, 0xCF	; 207
    1272:	2e c0       	rjmp	.+92     	; 0x12d0 <__floatsisf+0xae>
    1274:	ee 24       	eor	r14, r14
    1276:	ff 24       	eor	r15, r15
    1278:	87 01       	movw	r16, r14
    127a:	e2 1a       	sub	r14, r18
    127c:	f3 0a       	sbc	r15, r19
    127e:	04 0b       	sbc	r16, r20
    1280:	15 0b       	sbc	r17, r21
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <__floatsisf+0x66>
    1284:	79 01       	movw	r14, r18
    1286:	8a 01       	movw	r16, r20
    1288:	8e e1       	ldi	r24, 0x1E	; 30
    128a:	c8 2e       	mov	r12, r24
    128c:	d1 2c       	mov	r13, r1
    128e:	dc 82       	std	Y+4, r13	; 0x04
    1290:	cb 82       	std	Y+3, r12	; 0x03
    1292:	ed 82       	std	Y+5, r14	; 0x05
    1294:	fe 82       	std	Y+6, r15	; 0x06
    1296:	0f 83       	std	Y+7, r16	; 0x07
    1298:	18 87       	std	Y+8, r17	; 0x08
    129a:	c8 01       	movw	r24, r16
    129c:	b7 01       	movw	r22, r14
    129e:	6c d0       	rcall	.+216    	; 0x1378 <__clzsi2>
    12a0:	01 97       	sbiw	r24, 0x01	; 1
    12a2:	18 16       	cp	r1, r24
    12a4:	19 06       	cpc	r1, r25
    12a6:	84 f4       	brge	.+32     	; 0x12c8 <__floatsisf+0xa6>
    12a8:	08 2e       	mov	r0, r24
    12aa:	04 c0       	rjmp	.+8      	; 0x12b4 <__floatsisf+0x92>
    12ac:	ee 0c       	add	r14, r14
    12ae:	ff 1c       	adc	r15, r15
    12b0:	00 1f       	adc	r16, r16
    12b2:	11 1f       	adc	r17, r17
    12b4:	0a 94       	dec	r0
    12b6:	d2 f7       	brpl	.-12     	; 0x12ac <__floatsisf+0x8a>
    12b8:	ed 82       	std	Y+5, r14	; 0x05
    12ba:	fe 82       	std	Y+6, r15	; 0x06
    12bc:	0f 83       	std	Y+7, r16	; 0x07
    12be:	18 87       	std	Y+8, r17	; 0x08
    12c0:	c8 1a       	sub	r12, r24
    12c2:	d9 0a       	sbc	r13, r25
    12c4:	dc 82       	std	Y+4, r13	; 0x04
    12c6:	cb 82       	std	Y+3, r12	; 0x03
    12c8:	ba 82       	std	Y+2, r11	; 0x02
    12ca:	ce 01       	movw	r24, r28
    12cc:	01 96       	adiw	r24, 0x01	; 1
    12ce:	a3 d0       	rcall	.+326    	; 0x1416 <__pack_f>
    12d0:	28 96       	adiw	r28, 0x08	; 8
    12d2:	e9 e0       	ldi	r30, 0x09	; 9
    12d4:	6b c2       	rjmp	.+1238   	; 0x17ac <__epilogue_restores__+0x12>

000012d6 <__fixsfsi>:
    12d6:	ac e0       	ldi	r26, 0x0C	; 12
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e0 e7       	ldi	r30, 0x70	; 112
    12dc:	f9 e0       	ldi	r31, 0x09	; 9
    12de:	51 c2       	rjmp	.+1186   	; 0x1782 <__prologue_saves__+0x20>
    12e0:	69 83       	std	Y+1, r22	; 0x01
    12e2:	7a 83       	std	Y+2, r23	; 0x02
    12e4:	8b 83       	std	Y+3, r24	; 0x03
    12e6:	9c 83       	std	Y+4, r25	; 0x04
    12e8:	ce 01       	movw	r24, r28
    12ea:	01 96       	adiw	r24, 0x01	; 1
    12ec:	be 01       	movw	r22, r28
    12ee:	6b 5f       	subi	r22, 0xFB	; 251
    12f0:	7f 4f       	sbci	r23, 0xFF	; 255
    12f2:	66 d1       	rcall	.+716    	; 0x15c0 <__unpack_f>
    12f4:	8d 81       	ldd	r24, Y+5	; 0x05
    12f6:	82 30       	cpi	r24, 0x02	; 2
    12f8:	61 f1       	breq	.+88     	; 0x1352 <__fixsfsi+0x7c>
    12fa:	82 30       	cpi	r24, 0x02	; 2
    12fc:	50 f1       	brcs	.+84     	; 0x1352 <__fixsfsi+0x7c>
    12fe:	84 30       	cpi	r24, 0x04	; 4
    1300:	21 f4       	brne	.+8      	; 0x130a <__fixsfsi+0x34>
    1302:	8e 81       	ldd	r24, Y+6	; 0x06
    1304:	88 23       	and	r24, r24
    1306:	51 f1       	breq	.+84     	; 0x135c <__fixsfsi+0x86>
    1308:	2e c0       	rjmp	.+92     	; 0x1366 <__fixsfsi+0x90>
    130a:	2f 81       	ldd	r18, Y+7	; 0x07
    130c:	38 85       	ldd	r19, Y+8	; 0x08
    130e:	37 fd       	sbrc	r19, 7
    1310:	20 c0       	rjmp	.+64     	; 0x1352 <__fixsfsi+0x7c>
    1312:	6e 81       	ldd	r22, Y+6	; 0x06
    1314:	2f 31       	cpi	r18, 0x1F	; 31
    1316:	31 05       	cpc	r19, r1
    1318:	1c f0       	brlt	.+6      	; 0x1320 <__fixsfsi+0x4a>
    131a:	66 23       	and	r22, r22
    131c:	f9 f0       	breq	.+62     	; 0x135c <__fixsfsi+0x86>
    131e:	23 c0       	rjmp	.+70     	; 0x1366 <__fixsfsi+0x90>
    1320:	8e e1       	ldi	r24, 0x1E	; 30
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	82 1b       	sub	r24, r18
    1326:	93 0b       	sbc	r25, r19
    1328:	29 85       	ldd	r18, Y+9	; 0x09
    132a:	3a 85       	ldd	r19, Y+10	; 0x0a
    132c:	4b 85       	ldd	r20, Y+11	; 0x0b
    132e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1330:	04 c0       	rjmp	.+8      	; 0x133a <__fixsfsi+0x64>
    1332:	56 95       	lsr	r21
    1334:	47 95       	ror	r20
    1336:	37 95       	ror	r19
    1338:	27 95       	ror	r18
    133a:	8a 95       	dec	r24
    133c:	d2 f7       	brpl	.-12     	; 0x1332 <__fixsfsi+0x5c>
    133e:	66 23       	and	r22, r22
    1340:	b1 f0       	breq	.+44     	; 0x136e <__fixsfsi+0x98>
    1342:	50 95       	com	r21
    1344:	40 95       	com	r20
    1346:	30 95       	com	r19
    1348:	21 95       	neg	r18
    134a:	3f 4f       	sbci	r19, 0xFF	; 255
    134c:	4f 4f       	sbci	r20, 0xFF	; 255
    134e:	5f 4f       	sbci	r21, 0xFF	; 255
    1350:	0e c0       	rjmp	.+28     	; 0x136e <__fixsfsi+0x98>
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e0       	ldi	r20, 0x00	; 0
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	09 c0       	rjmp	.+18     	; 0x136e <__fixsfsi+0x98>
    135c:	2f ef       	ldi	r18, 0xFF	; 255
    135e:	3f ef       	ldi	r19, 0xFF	; 255
    1360:	4f ef       	ldi	r20, 0xFF	; 255
    1362:	5f e7       	ldi	r21, 0x7F	; 127
    1364:	04 c0       	rjmp	.+8      	; 0x136e <__fixsfsi+0x98>
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 e0       	ldi	r20, 0x00	; 0
    136c:	50 e8       	ldi	r21, 0x80	; 128
    136e:	b9 01       	movw	r22, r18
    1370:	ca 01       	movw	r24, r20
    1372:	2c 96       	adiw	r28, 0x0c	; 12
    1374:	e2 e0       	ldi	r30, 0x02	; 2
    1376:	21 c2       	rjmp	.+1090   	; 0x17ba <__epilogue_restores__+0x20>

00001378 <__clzsi2>:
    1378:	ef 92       	push	r14
    137a:	ff 92       	push	r15
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	7b 01       	movw	r14, r22
    1382:	8c 01       	movw	r16, r24
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	e8 16       	cp	r14, r24
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	f8 06       	cpc	r15, r24
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	08 07       	cpc	r16, r24
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	18 07       	cpc	r17, r24
    1394:	88 f4       	brcc	.+34     	; 0x13b8 <__clzsi2+0x40>
    1396:	8f ef       	ldi	r24, 0xFF	; 255
    1398:	e8 16       	cp	r14, r24
    139a:	f1 04       	cpc	r15, r1
    139c:	01 05       	cpc	r16, r1
    139e:	11 05       	cpc	r17, r1
    13a0:	31 f0       	breq	.+12     	; 0x13ae <__clzsi2+0x36>
    13a2:	28 f0       	brcs	.+10     	; 0x13ae <__clzsi2+0x36>
    13a4:	88 e0       	ldi	r24, 0x08	; 8
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	a0 e0       	ldi	r26, 0x00	; 0
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	17 c0       	rjmp	.+46     	; 0x13dc <__clzsi2+0x64>
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	a0 e0       	ldi	r26, 0x00	; 0
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	12 c0       	rjmp	.+36     	; 0x13dc <__clzsi2+0x64>
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	e8 16       	cp	r14, r24
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	f8 06       	cpc	r15, r24
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	08 07       	cpc	r16, r24
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	18 07       	cpc	r17, r24
    13c8:	28 f0       	brcs	.+10     	; 0x13d4 <__clzsi2+0x5c>
    13ca:	88 e1       	ldi	r24, 0x18	; 24
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	a0 e0       	ldi	r26, 0x00	; 0
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	04 c0       	rjmp	.+8      	; 0x13dc <__clzsi2+0x64>
    13d4:	80 e1       	ldi	r24, 0x10	; 16
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	a0 e0       	ldi	r26, 0x00	; 0
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	20 e2       	ldi	r18, 0x20	; 32
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	28 1b       	sub	r18, r24
    13e6:	39 0b       	sbc	r19, r25
    13e8:	4a 0b       	sbc	r20, r26
    13ea:	5b 0b       	sbc	r21, r27
    13ec:	04 c0       	rjmp	.+8      	; 0x13f6 <__clzsi2+0x7e>
    13ee:	16 95       	lsr	r17
    13f0:	07 95       	ror	r16
    13f2:	f7 94       	ror	r15
    13f4:	e7 94       	ror	r14
    13f6:	8a 95       	dec	r24
    13f8:	d2 f7       	brpl	.-12     	; 0x13ee <__clzsi2+0x76>
    13fa:	f7 01       	movw	r30, r14
    13fc:	e7 59       	subi	r30, 0x97	; 151
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	80 81       	ld	r24, Z
    1402:	28 1b       	sub	r18, r24
    1404:	31 09       	sbc	r19, r1
    1406:	41 09       	sbc	r20, r1
    1408:	51 09       	sbc	r21, r1
    140a:	c9 01       	movw	r24, r18
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	ff 90       	pop	r15
    1412:	ef 90       	pop	r14
    1414:	08 95       	ret

00001416 <__pack_f>:
    1416:	df 92       	push	r13
    1418:	ef 92       	push	r14
    141a:	ff 92       	push	r15
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	fc 01       	movw	r30, r24
    1422:	e4 80       	ldd	r14, Z+4	; 0x04
    1424:	f5 80       	ldd	r15, Z+5	; 0x05
    1426:	06 81       	ldd	r16, Z+6	; 0x06
    1428:	17 81       	ldd	r17, Z+7	; 0x07
    142a:	d1 80       	ldd	r13, Z+1	; 0x01
    142c:	80 81       	ld	r24, Z
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	48 f4       	brcc	.+18     	; 0x1444 <__pack_f+0x2e>
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	a0 e1       	ldi	r26, 0x10	; 16
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e8 2a       	or	r14, r24
    143c:	f9 2a       	or	r15, r25
    143e:	0a 2b       	or	r16, r26
    1440:	1b 2b       	or	r17, r27
    1442:	a5 c0       	rjmp	.+330    	; 0x158e <__pack_f+0x178>
    1444:	84 30       	cpi	r24, 0x04	; 4
    1446:	09 f4       	brne	.+2      	; 0x144a <__pack_f+0x34>
    1448:	9f c0       	rjmp	.+318    	; 0x1588 <__pack_f+0x172>
    144a:	82 30       	cpi	r24, 0x02	; 2
    144c:	21 f4       	brne	.+8      	; 0x1456 <__pack_f+0x40>
    144e:	ee 24       	eor	r14, r14
    1450:	ff 24       	eor	r15, r15
    1452:	87 01       	movw	r16, r14
    1454:	05 c0       	rjmp	.+10     	; 0x1460 <__pack_f+0x4a>
    1456:	e1 14       	cp	r14, r1
    1458:	f1 04       	cpc	r15, r1
    145a:	01 05       	cpc	r16, r1
    145c:	11 05       	cpc	r17, r1
    145e:	19 f4       	brne	.+6      	; 0x1466 <__pack_f+0x50>
    1460:	e0 e0       	ldi	r30, 0x00	; 0
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	96 c0       	rjmp	.+300    	; 0x1592 <__pack_f+0x17c>
    1466:	62 81       	ldd	r22, Z+2	; 0x02
    1468:	73 81       	ldd	r23, Z+3	; 0x03
    146a:	9f ef       	ldi	r25, 0xFF	; 255
    146c:	62 38       	cpi	r22, 0x82	; 130
    146e:	79 07       	cpc	r23, r25
    1470:	0c f0       	brlt	.+2      	; 0x1474 <__pack_f+0x5e>
    1472:	5b c0       	rjmp	.+182    	; 0x152a <__pack_f+0x114>
    1474:	22 e8       	ldi	r18, 0x82	; 130
    1476:	3f ef       	ldi	r19, 0xFF	; 255
    1478:	26 1b       	sub	r18, r22
    147a:	37 0b       	sbc	r19, r23
    147c:	2a 31       	cpi	r18, 0x1A	; 26
    147e:	31 05       	cpc	r19, r1
    1480:	2c f0       	brlt	.+10     	; 0x148c <__pack_f+0x76>
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e0       	ldi	r20, 0x00	; 0
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	2a c0       	rjmp	.+84     	; 0x14e0 <__pack_f+0xca>
    148c:	b8 01       	movw	r22, r16
    148e:	a7 01       	movw	r20, r14
    1490:	02 2e       	mov	r0, r18
    1492:	04 c0       	rjmp	.+8      	; 0x149c <__pack_f+0x86>
    1494:	76 95       	lsr	r23
    1496:	67 95       	ror	r22
    1498:	57 95       	ror	r21
    149a:	47 95       	ror	r20
    149c:	0a 94       	dec	r0
    149e:	d2 f7       	brpl	.-12     	; 0x1494 <__pack_f+0x7e>
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	a0 e0       	ldi	r26, 0x00	; 0
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	04 c0       	rjmp	.+8      	; 0x14b2 <__pack_f+0x9c>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	aa 1f       	adc	r26, r26
    14b0:	bb 1f       	adc	r27, r27
    14b2:	2a 95       	dec	r18
    14b4:	d2 f7       	brpl	.-12     	; 0x14aa <__pack_f+0x94>
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	a1 09       	sbc	r26, r1
    14ba:	b1 09       	sbc	r27, r1
    14bc:	8e 21       	and	r24, r14
    14be:	9f 21       	and	r25, r15
    14c0:	a0 23       	and	r26, r16
    14c2:	b1 23       	and	r27, r17
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	a1 05       	cpc	r26, r1
    14c8:	b1 05       	cpc	r27, r1
    14ca:	21 f0       	breq	.+8      	; 0x14d4 <__pack_f+0xbe>
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	a0 e0       	ldi	r26, 0x00	; 0
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	9a 01       	movw	r18, r20
    14d6:	ab 01       	movw	r20, r22
    14d8:	28 2b       	or	r18, r24
    14da:	39 2b       	or	r19, r25
    14dc:	4a 2b       	or	r20, r26
    14de:	5b 2b       	or	r21, r27
    14e0:	da 01       	movw	r26, r20
    14e2:	c9 01       	movw	r24, r18
    14e4:	8f 77       	andi	r24, 0x7F	; 127
    14e6:	90 70       	andi	r25, 0x00	; 0
    14e8:	a0 70       	andi	r26, 0x00	; 0
    14ea:	b0 70       	andi	r27, 0x00	; 0
    14ec:	80 34       	cpi	r24, 0x40	; 64
    14ee:	91 05       	cpc	r25, r1
    14f0:	a1 05       	cpc	r26, r1
    14f2:	b1 05       	cpc	r27, r1
    14f4:	39 f4       	brne	.+14     	; 0x1504 <__pack_f+0xee>
    14f6:	27 ff       	sbrs	r18, 7
    14f8:	09 c0       	rjmp	.+18     	; 0x150c <__pack_f+0xf6>
    14fa:	20 5c       	subi	r18, 0xC0	; 192
    14fc:	3f 4f       	sbci	r19, 0xFF	; 255
    14fe:	4f 4f       	sbci	r20, 0xFF	; 255
    1500:	5f 4f       	sbci	r21, 0xFF	; 255
    1502:	04 c0       	rjmp	.+8      	; 0x150c <__pack_f+0xf6>
    1504:	21 5c       	subi	r18, 0xC1	; 193
    1506:	3f 4f       	sbci	r19, 0xFF	; 255
    1508:	4f 4f       	sbci	r20, 0xFF	; 255
    150a:	5f 4f       	sbci	r21, 0xFF	; 255
    150c:	e0 e0       	ldi	r30, 0x00	; 0
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	20 30       	cpi	r18, 0x00	; 0
    1512:	a0 e0       	ldi	r26, 0x00	; 0
    1514:	3a 07       	cpc	r19, r26
    1516:	a0 e0       	ldi	r26, 0x00	; 0
    1518:	4a 07       	cpc	r20, r26
    151a:	a0 e4       	ldi	r26, 0x40	; 64
    151c:	5a 07       	cpc	r21, r26
    151e:	10 f0       	brcs	.+4      	; 0x1524 <__pack_f+0x10e>
    1520:	e1 e0       	ldi	r30, 0x01	; 1
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	79 01       	movw	r14, r18
    1526:	8a 01       	movw	r16, r20
    1528:	27 c0       	rjmp	.+78     	; 0x1578 <__pack_f+0x162>
    152a:	60 38       	cpi	r22, 0x80	; 128
    152c:	71 05       	cpc	r23, r1
    152e:	64 f5       	brge	.+88     	; 0x1588 <__pack_f+0x172>
    1530:	fb 01       	movw	r30, r22
    1532:	e1 58       	subi	r30, 0x81	; 129
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	d8 01       	movw	r26, r16
    1538:	c7 01       	movw	r24, r14
    153a:	8f 77       	andi	r24, 0x7F	; 127
    153c:	90 70       	andi	r25, 0x00	; 0
    153e:	a0 70       	andi	r26, 0x00	; 0
    1540:	b0 70       	andi	r27, 0x00	; 0
    1542:	80 34       	cpi	r24, 0x40	; 64
    1544:	91 05       	cpc	r25, r1
    1546:	a1 05       	cpc	r26, r1
    1548:	b1 05       	cpc	r27, r1
    154a:	39 f4       	brne	.+14     	; 0x155a <__pack_f+0x144>
    154c:	e7 fe       	sbrs	r14, 7
    154e:	0d c0       	rjmp	.+26     	; 0x156a <__pack_f+0x154>
    1550:	80 e4       	ldi	r24, 0x40	; 64
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	a0 e0       	ldi	r26, 0x00	; 0
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	04 c0       	rjmp	.+8      	; 0x1562 <__pack_f+0x14c>
    155a:	8f e3       	ldi	r24, 0x3F	; 63
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a0 e0       	ldi	r26, 0x00	; 0
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e8 0e       	add	r14, r24
    1564:	f9 1e       	adc	r15, r25
    1566:	0a 1f       	adc	r16, r26
    1568:	1b 1f       	adc	r17, r27
    156a:	17 ff       	sbrs	r17, 7
    156c:	05 c0       	rjmp	.+10     	; 0x1578 <__pack_f+0x162>
    156e:	16 95       	lsr	r17
    1570:	07 95       	ror	r16
    1572:	f7 94       	ror	r15
    1574:	e7 94       	ror	r14
    1576:	31 96       	adiw	r30, 0x01	; 1
    1578:	87 e0       	ldi	r24, 0x07	; 7
    157a:	16 95       	lsr	r17
    157c:	07 95       	ror	r16
    157e:	f7 94       	ror	r15
    1580:	e7 94       	ror	r14
    1582:	8a 95       	dec	r24
    1584:	d1 f7       	brne	.-12     	; 0x157a <__pack_f+0x164>
    1586:	05 c0       	rjmp	.+10     	; 0x1592 <__pack_f+0x17c>
    1588:	ee 24       	eor	r14, r14
    158a:	ff 24       	eor	r15, r15
    158c:	87 01       	movw	r16, r14
    158e:	ef ef       	ldi	r30, 0xFF	; 255
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	6e 2f       	mov	r22, r30
    1594:	67 95       	ror	r22
    1596:	66 27       	eor	r22, r22
    1598:	67 95       	ror	r22
    159a:	90 2f       	mov	r25, r16
    159c:	9f 77       	andi	r25, 0x7F	; 127
    159e:	d7 94       	ror	r13
    15a0:	dd 24       	eor	r13, r13
    15a2:	d7 94       	ror	r13
    15a4:	8e 2f       	mov	r24, r30
    15a6:	86 95       	lsr	r24
    15a8:	49 2f       	mov	r20, r25
    15aa:	46 2b       	or	r20, r22
    15ac:	58 2f       	mov	r21, r24
    15ae:	5d 29       	or	r21, r13
    15b0:	b7 01       	movw	r22, r14
    15b2:	ca 01       	movw	r24, r20
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	ff 90       	pop	r15
    15ba:	ef 90       	pop	r14
    15bc:	df 90       	pop	r13
    15be:	08 95       	ret

000015c0 <__unpack_f>:
    15c0:	fc 01       	movw	r30, r24
    15c2:	db 01       	movw	r26, r22
    15c4:	40 81       	ld	r20, Z
    15c6:	51 81       	ldd	r21, Z+1	; 0x01
    15c8:	22 81       	ldd	r18, Z+2	; 0x02
    15ca:	62 2f       	mov	r22, r18
    15cc:	6f 77       	andi	r22, 0x7F	; 127
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	22 1f       	adc	r18, r18
    15d2:	22 27       	eor	r18, r18
    15d4:	22 1f       	adc	r18, r18
    15d6:	93 81       	ldd	r25, Z+3	; 0x03
    15d8:	89 2f       	mov	r24, r25
    15da:	88 0f       	add	r24, r24
    15dc:	82 2b       	or	r24, r18
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	99 1f       	adc	r25, r25
    15e4:	99 27       	eor	r25, r25
    15e6:	99 1f       	adc	r25, r25
    15e8:	11 96       	adiw	r26, 0x01	; 1
    15ea:	9c 93       	st	X, r25
    15ec:	11 97       	sbiw	r26, 0x01	; 1
    15ee:	21 15       	cp	r18, r1
    15f0:	31 05       	cpc	r19, r1
    15f2:	a9 f5       	brne	.+106    	; 0x165e <__unpack_f+0x9e>
    15f4:	41 15       	cp	r20, r1
    15f6:	51 05       	cpc	r21, r1
    15f8:	61 05       	cpc	r22, r1
    15fa:	71 05       	cpc	r23, r1
    15fc:	11 f4       	brne	.+4      	; 0x1602 <__unpack_f+0x42>
    15fe:	82 e0       	ldi	r24, 0x02	; 2
    1600:	37 c0       	rjmp	.+110    	; 0x1670 <__unpack_f+0xb0>
    1602:	82 e8       	ldi	r24, 0x82	; 130
    1604:	9f ef       	ldi	r25, 0xFF	; 255
    1606:	13 96       	adiw	r26, 0x03	; 3
    1608:	9c 93       	st	X, r25
    160a:	8e 93       	st	-X, r24
    160c:	12 97       	sbiw	r26, 0x02	; 2
    160e:	9a 01       	movw	r18, r20
    1610:	ab 01       	movw	r20, r22
    1612:	67 e0       	ldi	r22, 0x07	; 7
    1614:	22 0f       	add	r18, r18
    1616:	33 1f       	adc	r19, r19
    1618:	44 1f       	adc	r20, r20
    161a:	55 1f       	adc	r21, r21
    161c:	6a 95       	dec	r22
    161e:	d1 f7       	brne	.-12     	; 0x1614 <__unpack_f+0x54>
    1620:	83 e0       	ldi	r24, 0x03	; 3
    1622:	8c 93       	st	X, r24
    1624:	0d c0       	rjmp	.+26     	; 0x1640 <__unpack_f+0x80>
    1626:	22 0f       	add	r18, r18
    1628:	33 1f       	adc	r19, r19
    162a:	44 1f       	adc	r20, r20
    162c:	55 1f       	adc	r21, r21
    162e:	12 96       	adiw	r26, 0x02	; 2
    1630:	8d 91       	ld	r24, X+
    1632:	9c 91       	ld	r25, X
    1634:	13 97       	sbiw	r26, 0x03	; 3
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	13 96       	adiw	r26, 0x03	; 3
    163a:	9c 93       	st	X, r25
    163c:	8e 93       	st	-X, r24
    163e:	12 97       	sbiw	r26, 0x02	; 2
    1640:	20 30       	cpi	r18, 0x00	; 0
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	38 07       	cpc	r19, r24
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	48 07       	cpc	r20, r24
    164a:	80 e4       	ldi	r24, 0x40	; 64
    164c:	58 07       	cpc	r21, r24
    164e:	58 f3       	brcs	.-42     	; 0x1626 <__unpack_f+0x66>
    1650:	14 96       	adiw	r26, 0x04	; 4
    1652:	2d 93       	st	X+, r18
    1654:	3d 93       	st	X+, r19
    1656:	4d 93       	st	X+, r20
    1658:	5c 93       	st	X, r21
    165a:	17 97       	sbiw	r26, 0x07	; 7
    165c:	08 95       	ret
    165e:	2f 3f       	cpi	r18, 0xFF	; 255
    1660:	31 05       	cpc	r19, r1
    1662:	79 f4       	brne	.+30     	; 0x1682 <__unpack_f+0xc2>
    1664:	41 15       	cp	r20, r1
    1666:	51 05       	cpc	r21, r1
    1668:	61 05       	cpc	r22, r1
    166a:	71 05       	cpc	r23, r1
    166c:	19 f4       	brne	.+6      	; 0x1674 <__unpack_f+0xb4>
    166e:	84 e0       	ldi	r24, 0x04	; 4
    1670:	8c 93       	st	X, r24
    1672:	08 95       	ret
    1674:	64 ff       	sbrs	r22, 4
    1676:	03 c0       	rjmp	.+6      	; 0x167e <__unpack_f+0xbe>
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	8c 93       	st	X, r24
    167c:	12 c0       	rjmp	.+36     	; 0x16a2 <__unpack_f+0xe2>
    167e:	1c 92       	st	X, r1
    1680:	10 c0       	rjmp	.+32     	; 0x16a2 <__unpack_f+0xe2>
    1682:	2f 57       	subi	r18, 0x7F	; 127
    1684:	30 40       	sbci	r19, 0x00	; 0
    1686:	13 96       	adiw	r26, 0x03	; 3
    1688:	3c 93       	st	X, r19
    168a:	2e 93       	st	-X, r18
    168c:	12 97       	sbiw	r26, 0x02	; 2
    168e:	83 e0       	ldi	r24, 0x03	; 3
    1690:	8c 93       	st	X, r24
    1692:	87 e0       	ldi	r24, 0x07	; 7
    1694:	44 0f       	add	r20, r20
    1696:	55 1f       	adc	r21, r21
    1698:	66 1f       	adc	r22, r22
    169a:	77 1f       	adc	r23, r23
    169c:	8a 95       	dec	r24
    169e:	d1 f7       	brne	.-12     	; 0x1694 <__unpack_f+0xd4>
    16a0:	70 64       	ori	r23, 0x40	; 64
    16a2:	14 96       	adiw	r26, 0x04	; 4
    16a4:	4d 93       	st	X+, r20
    16a6:	5d 93       	st	X+, r21
    16a8:	6d 93       	st	X+, r22
    16aa:	7c 93       	st	X, r23
    16ac:	17 97       	sbiw	r26, 0x07	; 7
    16ae:	08 95       	ret

000016b0 <__fpcmp_parts_f>:
    16b0:	1f 93       	push	r17
    16b2:	dc 01       	movw	r26, r24
    16b4:	fb 01       	movw	r30, r22
    16b6:	9c 91       	ld	r25, X
    16b8:	92 30       	cpi	r25, 0x02	; 2
    16ba:	08 f4       	brcc	.+2      	; 0x16be <__fpcmp_parts_f+0xe>
    16bc:	47 c0       	rjmp	.+142    	; 0x174c <__fpcmp_parts_f+0x9c>
    16be:	80 81       	ld	r24, Z
    16c0:	82 30       	cpi	r24, 0x02	; 2
    16c2:	08 f4       	brcc	.+2      	; 0x16c6 <__fpcmp_parts_f+0x16>
    16c4:	43 c0       	rjmp	.+134    	; 0x174c <__fpcmp_parts_f+0x9c>
    16c6:	94 30       	cpi	r25, 0x04	; 4
    16c8:	51 f4       	brne	.+20     	; 0x16de <__fpcmp_parts_f+0x2e>
    16ca:	11 96       	adiw	r26, 0x01	; 1
    16cc:	1c 91       	ld	r17, X
    16ce:	84 30       	cpi	r24, 0x04	; 4
    16d0:	99 f5       	brne	.+102    	; 0x1738 <__fpcmp_parts_f+0x88>
    16d2:	81 81       	ldd	r24, Z+1	; 0x01
    16d4:	68 2f       	mov	r22, r24
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	61 1b       	sub	r22, r17
    16da:	71 09       	sbc	r23, r1
    16dc:	3f c0       	rjmp	.+126    	; 0x175c <__fpcmp_parts_f+0xac>
    16de:	84 30       	cpi	r24, 0x04	; 4
    16e0:	21 f0       	breq	.+8      	; 0x16ea <__fpcmp_parts_f+0x3a>
    16e2:	92 30       	cpi	r25, 0x02	; 2
    16e4:	31 f4       	brne	.+12     	; 0x16f2 <__fpcmp_parts_f+0x42>
    16e6:	82 30       	cpi	r24, 0x02	; 2
    16e8:	b9 f1       	breq	.+110    	; 0x1758 <__fpcmp_parts_f+0xa8>
    16ea:	81 81       	ldd	r24, Z+1	; 0x01
    16ec:	88 23       	and	r24, r24
    16ee:	89 f1       	breq	.+98     	; 0x1752 <__fpcmp_parts_f+0xa2>
    16f0:	2d c0       	rjmp	.+90     	; 0x174c <__fpcmp_parts_f+0x9c>
    16f2:	11 96       	adiw	r26, 0x01	; 1
    16f4:	1c 91       	ld	r17, X
    16f6:	11 97       	sbiw	r26, 0x01	; 1
    16f8:	82 30       	cpi	r24, 0x02	; 2
    16fa:	f1 f0       	breq	.+60     	; 0x1738 <__fpcmp_parts_f+0x88>
    16fc:	81 81       	ldd	r24, Z+1	; 0x01
    16fe:	18 17       	cp	r17, r24
    1700:	d9 f4       	brne	.+54     	; 0x1738 <__fpcmp_parts_f+0x88>
    1702:	12 96       	adiw	r26, 0x02	; 2
    1704:	2d 91       	ld	r18, X+
    1706:	3c 91       	ld	r19, X
    1708:	13 97       	sbiw	r26, 0x03	; 3
    170a:	82 81       	ldd	r24, Z+2	; 0x02
    170c:	93 81       	ldd	r25, Z+3	; 0x03
    170e:	82 17       	cp	r24, r18
    1710:	93 07       	cpc	r25, r19
    1712:	94 f0       	brlt	.+36     	; 0x1738 <__fpcmp_parts_f+0x88>
    1714:	28 17       	cp	r18, r24
    1716:	39 07       	cpc	r19, r25
    1718:	bc f0       	brlt	.+46     	; 0x1748 <__fpcmp_parts_f+0x98>
    171a:	14 96       	adiw	r26, 0x04	; 4
    171c:	8d 91       	ld	r24, X+
    171e:	9d 91       	ld	r25, X+
    1720:	0d 90       	ld	r0, X+
    1722:	bc 91       	ld	r27, X
    1724:	a0 2d       	mov	r26, r0
    1726:	24 81       	ldd	r18, Z+4	; 0x04
    1728:	35 81       	ldd	r19, Z+5	; 0x05
    172a:	46 81       	ldd	r20, Z+6	; 0x06
    172c:	57 81       	ldd	r21, Z+7	; 0x07
    172e:	28 17       	cp	r18, r24
    1730:	39 07       	cpc	r19, r25
    1732:	4a 07       	cpc	r20, r26
    1734:	5b 07       	cpc	r21, r27
    1736:	18 f4       	brcc	.+6      	; 0x173e <__fpcmp_parts_f+0x8e>
    1738:	11 23       	and	r17, r17
    173a:	41 f0       	breq	.+16     	; 0x174c <__fpcmp_parts_f+0x9c>
    173c:	0a c0       	rjmp	.+20     	; 0x1752 <__fpcmp_parts_f+0xa2>
    173e:	82 17       	cp	r24, r18
    1740:	93 07       	cpc	r25, r19
    1742:	a4 07       	cpc	r26, r20
    1744:	b5 07       	cpc	r27, r21
    1746:	40 f4       	brcc	.+16     	; 0x1758 <__fpcmp_parts_f+0xa8>
    1748:	11 23       	and	r17, r17
    174a:	19 f0       	breq	.+6      	; 0x1752 <__fpcmp_parts_f+0xa2>
    174c:	61 e0       	ldi	r22, 0x01	; 1
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	05 c0       	rjmp	.+10     	; 0x175c <__fpcmp_parts_f+0xac>
    1752:	6f ef       	ldi	r22, 0xFF	; 255
    1754:	7f ef       	ldi	r23, 0xFF	; 255
    1756:	02 c0       	rjmp	.+4      	; 0x175c <__fpcmp_parts_f+0xac>
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	cb 01       	movw	r24, r22
    175e:	1f 91       	pop	r17
    1760:	08 95       	ret

00001762 <__prologue_saves__>:
    1762:	2f 92       	push	r2
    1764:	3f 92       	push	r3
    1766:	4f 92       	push	r4
    1768:	5f 92       	push	r5
    176a:	6f 92       	push	r6
    176c:	7f 92       	push	r7
    176e:	8f 92       	push	r8
    1770:	9f 92       	push	r9
    1772:	af 92       	push	r10
    1774:	bf 92       	push	r11
    1776:	cf 92       	push	r12
    1778:	df 92       	push	r13
    177a:	ef 92       	push	r14
    177c:	ff 92       	push	r15
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	ca 1b       	sub	r28, r26
    178c:	db 0b       	sbc	r29, r27
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	09 94       	ijmp

0000179a <__epilogue_restores__>:
    179a:	2a 88       	ldd	r2, Y+18	; 0x12
    179c:	39 88       	ldd	r3, Y+17	; 0x11
    179e:	48 88       	ldd	r4, Y+16	; 0x10
    17a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    17a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    17a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    17a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    17a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    17aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    17ac:	b9 84       	ldd	r11, Y+9	; 0x09
    17ae:	c8 84       	ldd	r12, Y+8	; 0x08
    17b0:	df 80       	ldd	r13, Y+7	; 0x07
    17b2:	ee 80       	ldd	r14, Y+6	; 0x06
    17b4:	fd 80       	ldd	r15, Y+5	; 0x05
    17b6:	0c 81       	ldd	r16, Y+4	; 0x04
    17b8:	1b 81       	ldd	r17, Y+3	; 0x03
    17ba:	aa 81       	ldd	r26, Y+2	; 0x02
    17bc:	b9 81       	ldd	r27, Y+1	; 0x01
    17be:	ce 0f       	add	r28, r30
    17c0:	d1 1d       	adc	r29, r1
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	de bf       	out	0x3e, r29	; 62
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	cd bf       	out	0x3d, r28	; 61
    17cc:	ed 01       	movw	r28, r26
    17ce:	08 95       	ret

000017d0 <_exit>:
    17d0:	f8 94       	cli

000017d2 <__stop_program>:
    17d2:	ff cf       	rjmp	.-2      	; 0x17d2 <__stop_program>
