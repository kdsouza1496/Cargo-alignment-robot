
bin\Debug\final1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800200  000090da  0000918e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000090da  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003a  00800310  00800310  0000929e  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000929e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000001e0  00000000  00000000  000092a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000090a  00000000  00000000  00009481  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004b13  00000000  00000000  00009d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017be  00000000  00000000  0000e89e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000526f  00000000  00000000  0001005c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000750  00000000  00000000  000152cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000956  00000000  00000000  00015a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  00016372  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00016d8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 af 01 	jmp	0x35e	; 0x35e <__vector_5>
      18:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea ed       	ldi	r30, 0xDA	; 218
      fc:	f0 e9       	ldi	r31, 0x90	; 144
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 31       	cpi	r26, 0x10	; 16
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a0 e1       	ldi	r26, 0x10	; 16
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 34       	cpi	r26, 0x4A	; 74
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 bb 12 	call	0x2576	; 0x2576 <main>
     122:	0c 94 6b 48 	jmp	0x90d6	; 0x90d6 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <timer5_init>:
    void left_position_encoder_interrupt_init (void);
    void right_position_encoder_interrupt_init (void);


void timer5_init()
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
     132:	e1 e2       	ldi	r30, 0x21	; 33
     134:	f1 e0       	ldi	r31, 0x01	; 1
     136:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     138:	e5 e2       	ldi	r30, 0x25	; 37
     13a:	f1 e0       	ldi	r31, 0x01	; 1
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     140:	e4 e2       	ldi	r30, 0x24	; 36
     142:	f1 e0       	ldi	r31, 0x01	; 1
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     148:	e9 e2       	ldi	r30, 0x29	; 41
     14a:	f1 e0       	ldi	r31, 0x01	; 1
     14c:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     14e:	e8 e2       	ldi	r30, 0x28	; 40
     150:	f1 e0       	ldi	r31, 0x01	; 1
     152:	8f ef       	ldi	r24, 0xFF	; 255
     154:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     156:	eb e2       	ldi	r30, 0x2B	; 43
     158:	f1 e0       	ldi	r31, 0x01	; 1
     15a:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     15c:	ea e2       	ldi	r30, 0x2A	; 42
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	8f ef       	ldi	r24, 0xFF	; 255
     162:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     164:	ed e2       	ldi	r30, 0x2D	; 45
     166:	f1 e0       	ldi	r31, 0x01	; 1
     168:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     16a:	ec e2       	ldi	r30, 0x2C	; 44
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	8f ef       	ldi	r24, 0xFF	; 255
     170:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     172:	e0 e2       	ldi	r30, 0x20	; 32
     174:	f1 e0       	ldi	r31, 0x01	; 1
     176:	89 ea       	ldi	r24, 0xA9	; 169
     178:	80 83       	st	Z, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     17a:	e1 e2       	ldi	r30, 0x21	; 33
     17c:	f1 e0       	ldi	r31, 0x01	; 1
     17e:	8b e0       	ldi	r24, 0x0B	; 11
     180:	80 83       	st	Z, r24
}
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <velocity>:

void velocity (unsigned char left_motor, unsigned char right_motor)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	0f 92       	push	r0
     18e:	0f 92       	push	r0
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
     194:	89 83       	std	Y+1, r24	; 0x01
     196:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
     198:	e8 e2       	ldi	r30, 0x28	; 40
     19a:	f1 e0       	ldi	r31, 0x01	; 1
     19c:	89 81       	ldd	r24, Y+1	; 0x01
     19e:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
     1a0:	ea e2       	ldi	r30, 0x2A	; 42
     1a2:	f1 e0       	ldi	r31, 0x01	; 1
     1a4:	8a 81       	ldd	r24, Y+2	; 0x02
     1a6:	80 83       	st	Z, r24
}
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
     1ac:	cf 91       	pop	r28
     1ae:	df 91       	pop	r29
     1b0:	08 95       	ret

000001b2 <motion_pin_config>:

void motion_pin_config (void)
{
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F; //set direction of the PORTA 3 to PORTA 0 pins as output
     1ba:	a1 e2       	ldi	r26, 0x21	; 33
     1bc:	b0 e0       	ldi	r27, 0x00	; 0
     1be:	e1 e2       	ldi	r30, 0x21	; 33
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	8f 60       	ori	r24, 0x0F	; 15
     1c6:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0; // set initial value of the PORTA 3 to PORTA 0 pins to logic 0
     1c8:	a2 e2       	ldi	r26, 0x22	; 34
     1ca:	b0 e0       	ldi	r27, 0x00	; 0
     1cc:	e2 e2       	ldi	r30, 0x22	; 34
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	80 81       	ld	r24, Z
     1d2:	80 7f       	andi	r24, 0xF0	; 240
     1d4:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     1d6:	aa e0       	ldi	r26, 0x0A	; 10
     1d8:	b1 e0       	ldi	r27, 0x01	; 1
     1da:	ea e0       	ldi	r30, 0x0A	; 10
     1dc:	f1 e0       	ldi	r31, 0x01	; 1
     1de:	80 81       	ld	r24, Z
     1e0:	88 61       	ori	r24, 0x18	; 24
     1e2:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM
     1e4:	ab e0       	ldi	r26, 0x0B	; 11
     1e6:	b1 e0       	ldi	r27, 0x01	; 1
     1e8:	eb e0       	ldi	r30, 0x0B	; 11
     1ea:	f1 e0       	ldi	r31, 0x01	; 1
     1ec:	80 81       	ld	r24, Z
     1ee:	88 61       	ori	r24, 0x18	; 24
     1f0:	8c 93       	st	X, r24
}
     1f2:	cf 91       	pop	r28
     1f4:	df 91       	pop	r29
     1f6:	08 95       	ret

000001f8 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
     1f8:	df 93       	push	r29
     1fa:	cf 93       	push	r28
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     200:	ad e2       	ldi	r26, 0x2D	; 45
     202:	b0 e0       	ldi	r27, 0x00	; 0
     204:	ed e2       	ldi	r30, 0x2D	; 45
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	8f 7e       	andi	r24, 0xEF	; 239
     20c:	8c 93       	st	X, r24
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     20e:	ae e2       	ldi	r26, 0x2E	; 46
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	ee e2       	ldi	r30, 0x2E	; 46
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	80 61       	ori	r24, 0x10	; 16
     21a:	8c 93       	st	X, r24
}
     21c:	cf 91       	pop	r28
     21e:	df 91       	pop	r29
     220:	08 95       	ret

00000222 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
     222:	df 93       	push	r29
     224:	cf 93       	push	r28
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     22a:	ad e2       	ldi	r26, 0x2D	; 45
     22c:	b0 e0       	ldi	r27, 0x00	; 0
     22e:	ed e2       	ldi	r30, 0x2D	; 45
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	8f 7d       	andi	r24, 0xDF	; 223
     236:	8c 93       	st	X, r24
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     238:	ae e2       	ldi	r26, 0x2E	; 46
     23a:	b0 e0       	ldi	r27, 0x00	; 0
     23c:	ee e2       	ldi	r30, 0x2E	; 46
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	80 62       	ori	r24, 0x20	; 32
     244:	8c 93       	st	X, r24
}
     246:	cf 91       	pop	r28
     248:	df 91       	pop	r29
     24a:	08 95       	ret

0000024c <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
     24c:	df 93       	push	r29
     24e:	cf 93       	push	r28
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
     254:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     256:	aa e6       	ldi	r26, 0x6A	; 106
     258:	b0 e0       	ldi	r27, 0x00	; 0
     25a:	ea e6       	ldi	r30, 0x6A	; 106
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	82 60       	ori	r24, 0x02	; 2
     262:	8c 93       	st	X, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     264:	ad e3       	ldi	r26, 0x3D	; 61
     266:	b0 e0       	ldi	r27, 0x00	; 0
     268:	ed e3       	ldi	r30, 0x3D	; 61
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	80 61       	ori	r24, 0x10	; 16
     270:	8c 93       	st	X, r24
	sei();   // Enables the global interrupt
     272:	78 94       	sei
}
     274:	cf 91       	pop	r28
     276:	df 91       	pop	r29
     278:	08 95       	ret

0000027a <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
     27a:	df 93       	push	r29
     27c:	cf 93       	push	r28
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
     282:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     284:	aa e6       	ldi	r26, 0x6A	; 106
     286:	b0 e0       	ldi	r27, 0x00	; 0
     288:	ea e6       	ldi	r30, 0x6A	; 106
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	88 60       	ori	r24, 0x08	; 8
     290:	8c 93       	st	X, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     292:	ad e3       	ldi	r26, 0x3D	; 61
     294:	b0 e0       	ldi	r27, 0x00	; 0
     296:	ed e3       	ldi	r30, 0x3D	; 61
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	80 81       	ld	r24, Z
     29c:	80 62       	ori	r24, 0x20	; 32
     29e:	8c 93       	st	X, r24
	sei();   // Enables the global interrupt
     2a0:	78 94       	sei
}
     2a2:	cf 91       	pop	r28
     2a4:	df 91       	pop	r29
     2a6:	08 95       	ret

000002a8 <set_motors>:

void set_motors()
{
     2a8:	df 93       	push	r29
     2aa:	cf 93       	push	r28
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
    motion_pin_config();
     2b0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <motion_pin_config>
    left_encoder_pin_config();
     2b4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <left_encoder_pin_config>
    right_encoder_pin_config();
     2b8:	0e 94 11 01 	call	0x222	; 0x222 <right_encoder_pin_config>
    left_position_encoder_interrupt_init();
     2bc:	0e 94 26 01 	call	0x24c	; 0x24c <left_position_encoder_interrupt_init>
    right_position_encoder_interrupt_init();
     2c0:	0e 94 3d 01 	call	0x27a	; 0x27a <right_position_encoder_interrupt_init>
    timer5_init();
     2c4:	0e 94 95 00 	call	0x12a	; 0x12a <timer5_init>
}
     2c8:	cf 91       	pop	r28
     2ca:	df 91       	pop	r29
     2cc:	08 95       	ret

000002ce <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     2ce:	1f 92       	push	r1
     2d0:	0f 92       	push	r0
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	0f 92       	push	r0
     2d6:	11 24       	eor	r1, r1
     2d8:	8f 93       	push	r24
     2da:	9f 93       	push	r25
     2dc:	af 93       	push	r26
     2de:	bf 93       	push	r27
     2e0:	df 93       	push	r29
     2e2:	cf 93       	push	r28
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
	ShaftCountRight++;  //increment right shaft position count
     2e8:	80 91 14 03 	lds	r24, 0x0314
     2ec:	90 91 15 03 	lds	r25, 0x0315
     2f0:	a0 91 16 03 	lds	r26, 0x0316
     2f4:	b0 91 17 03 	lds	r27, 0x0317
     2f8:	01 96       	adiw	r24, 0x01	; 1
     2fa:	a1 1d       	adc	r26, r1
     2fc:	b1 1d       	adc	r27, r1
     2fe:	80 93 14 03 	sts	0x0314, r24
     302:	90 93 15 03 	sts	0x0315, r25
     306:	a0 93 16 03 	sts	0x0316, r26
     30a:	b0 93 17 03 	sts	0x0317, r27

    if(nodeMissEnable == 1)
     30e:	80 91 00 02 	lds	r24, 0x0200
     312:	90 91 01 02 	lds	r25, 0x0201
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	91 05       	cpc	r25, r1
     31a:	49 f4       	brne	.+18     	; 0x32e <__vector_6+0x60>
        nodeMissTracker++;
     31c:	80 91 18 03 	lds	r24, 0x0318
     320:	90 91 19 03 	lds	r25, 0x0319
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	90 93 19 03 	sts	0x0319, r25
     32a:	80 93 18 03 	sts	0x0318, r24

    if(nodeMissTracker > 50)
     32e:	80 91 18 03 	lds	r24, 0x0318
     332:	90 91 19 03 	lds	r25, 0x0319
     336:	83 33       	cpi	r24, 0x33	; 51
     338:	91 05       	cpc	r25, r1
     33a:	34 f0       	brlt	.+12     	; 0x348 <__vector_6+0x7a>
        nodeMissedFlag = 1;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	90 93 1b 03 	sts	0x031B, r25
     344:	80 93 1a 03 	sts	0x031A, r24
}
     348:	cf 91       	pop	r28
     34a:	df 91       	pop	r29
     34c:	bf 91       	pop	r27
     34e:	af 91       	pop	r26
     350:	9f 91       	pop	r25
     352:	8f 91       	pop	r24
     354:	0f 90       	pop	r0
     356:	0f be       	out	0x3f, r0	; 63
     358:	0f 90       	pop	r0
     35a:	1f 90       	pop	r1
     35c:	18 95       	reti

0000035e <__vector_5>:

//ISR for left position encoder
ISR(INT4_vect)
{
     35e:	1f 92       	push	r1
     360:	0f 92       	push	r0
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	0f 92       	push	r0
     366:	11 24       	eor	r1, r1
     368:	8f 93       	push	r24
     36a:	9f 93       	push	r25
     36c:	af 93       	push	r26
     36e:	bf 93       	push	r27
     370:	df 93       	push	r29
     372:	cf 93       	push	r28
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft++;  //increment left shaft position count
     378:	80 91 10 03 	lds	r24, 0x0310
     37c:	90 91 11 03 	lds	r25, 0x0311
     380:	a0 91 12 03 	lds	r26, 0x0312
     384:	b0 91 13 03 	lds	r27, 0x0313
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	a1 1d       	adc	r26, r1
     38c:	b1 1d       	adc	r27, r1
     38e:	80 93 10 03 	sts	0x0310, r24
     392:	90 93 11 03 	sts	0x0311, r25
     396:	a0 93 12 03 	sts	0x0312, r26
     39a:	b0 93 13 03 	sts	0x0313, r27
}
     39e:	cf 91       	pop	r28
     3a0:	df 91       	pop	r29
     3a2:	bf 91       	pop	r27
     3a4:	af 91       	pop	r26
     3a6:	9f 91       	pop	r25
     3a8:	8f 91       	pop	r24
     3aa:	0f 90       	pop	r0
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	0f 90       	pop	r0
     3b0:	1f 90       	pop	r1
     3b2:	18 95       	reti

000003b4 <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
     3b4:	df 93       	push	r29
     3b6:	cf 93       	push	r28
     3b8:	0f 92       	push	r0
     3ba:	0f 92       	push	r0
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
     3c2:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
     3c4:	8a 81       	ldd	r24, Y+2	; 0x02
     3c6:	8f 70       	andi	r24, 0x0F	; 15
     3c8:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 			// reading the PORTA's original status
     3ca:	e2 e2       	ldi	r30, 0x22	; 34
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     3d2:	89 81       	ldd	r24, Y+1	; 0x01
     3d4:	80 7f       	andi	r24, 0xF0	; 240
     3d6:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     3d8:	99 81       	ldd	r25, Y+1	; 0x01
     3da:	8a 81       	ldd	r24, Y+2	; 0x02
     3dc:	89 2b       	or	r24, r25
     3de:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 			// setting the command to the port
     3e0:	e2 e2       	ldi	r30, 0x22	; 34
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	80 83       	st	Z, r24
}
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	cf 91       	pop	r28
     3ee:	df 91       	pop	r29
     3f0:	08 95       	ret

000003f2 <forward>:


void forward (void) //both wheels forward
{
     3f2:	df 93       	push	r29
     3f4:	cf 93       	push	r28
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
    motion_set(0x06);
     3fa:	86 e0       	ldi	r24, 0x06	; 6
     3fc:	0e 94 da 01 	call	0x3b4	; 0x3b4 <motion_set>
}
     400:	cf 91       	pop	r28
     402:	df 91       	pop	r29
     404:	08 95       	ret

00000406 <forward_mm>:

void forward_mm(unsigned int distance)
{
     406:	df 93       	push	r29
     408:	cf 93       	push	r28
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	2a 97       	sbiw	r28, 0x0a	; 10
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	9a 87       	std	Y+10, r25	; 0x0a
     41c:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	a0 e0       	ldi	r26, 0x00	; 0
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	8d 83       	std	Y+5, r24	; 0x05
     428:	9e 83       	std	Y+6, r25	; 0x06
     42a:	af 83       	std	Y+7, r26	; 0x07
     42c:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     42e:	19 82       	std	Y+1, r1	; 0x01
     430:	1a 82       	std	Y+2, r1	; 0x02
     432:	1b 82       	std	Y+3, r1	; 0x03
     434:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = distance / 5.338; // division by resolution to get shaft count
     436:	89 85       	ldd	r24, Y+9	; 0x09
     438:	9a 85       	ldd	r25, Y+10	; 0x0a
     43a:	cc 01       	movw	r24, r24
     43c:	a0 e0       	ldi	r26, 0x00	; 0
     43e:	b0 e0       	ldi	r27, 0x00	; 0
     440:	bc 01       	movw	r22, r24
     442:	cd 01       	movw	r24, r26
     444:	0e 94 9f 45 	call	0x8b3e	; 0x8b3e <__floatunsisf>
     448:	dc 01       	movw	r26, r24
     44a:	cb 01       	movw	r24, r22
     44c:	bc 01       	movw	r22, r24
     44e:	cd 01       	movw	r24, r26
     450:	25 ee       	ldi	r18, 0xE5	; 229
     452:	30 ed       	ldi	r19, 0xD0	; 208
     454:	4a ea       	ldi	r20, 0xAA	; 170
     456:	50 e4       	ldi	r21, 0x40	; 64
     458:	0e 94 b1 43 	call	0x8762	; 0x8762 <__divsf3>
     45c:	dc 01       	movw	r26, r24
     45e:	cb 01       	movw	r24, r22
     460:	8d 83       	std	Y+5, r24	; 0x05
     462:	9e 83       	std	Y+6, r25	; 0x06
     464:	af 83       	std	Y+7, r26	; 0x07
     466:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     468:	6d 81       	ldd	r22, Y+5	; 0x05
     46a:	7e 81       	ldd	r23, Y+6	; 0x06
     46c:	8f 81       	ldd	r24, Y+7	; 0x07
     46e:	98 85       	ldd	r25, Y+8	; 0x08
     470:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	89 83       	std	Y+1, r24	; 0x01
     47a:	9a 83       	std	Y+2, r25	; 0x02
     47c:	ab 83       	std	Y+3, r26	; 0x03
     47e:	bc 83       	std	Y+4, r27	; 0x04

	ShaftCountRight = 0;
     480:	10 92 14 03 	sts	0x0314, r1
     484:	10 92 15 03 	sts	0x0315, r1
     488:	10 92 16 03 	sts	0x0316, r1
     48c:	10 92 17 03 	sts	0x0317, r1
	ShaftCountLeft = 0;
     490:	10 92 10 03 	sts	0x0310, r1
     494:	10 92 11 03 	sts	0x0311, r1
     498:	10 92 12 03 	sts	0x0312, r1
     49c:	10 92 13 03 	sts	0x0313, r1
    forward();
     4a0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>

	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt || ShaftCountLeft > ReqdShaftCountInt)
     4a4:	20 91 14 03 	lds	r18, 0x0314
     4a8:	30 91 15 03 	lds	r19, 0x0315
     4ac:	40 91 16 03 	lds	r20, 0x0316
     4b0:	50 91 17 03 	lds	r21, 0x0317
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	ab 81       	ldd	r26, Y+3	; 0x03
     4ba:	bc 81       	ldd	r27, Y+4	; 0x04
     4bc:	82 17       	cp	r24, r18
     4be:	93 07       	cpc	r25, r19
     4c0:	a4 07       	cpc	r26, r20
     4c2:	b5 07       	cpc	r27, r21
     4c4:	88 f0       	brcs	.+34     	; 0x4e8 <forward_mm+0xe2>
     4c6:	20 91 10 03 	lds	r18, 0x0310
     4ca:	30 91 11 03 	lds	r19, 0x0311
     4ce:	40 91 12 03 	lds	r20, 0x0312
     4d2:	50 91 13 03 	lds	r21, 0x0313
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	9a 81       	ldd	r25, Y+2	; 0x02
     4da:	ab 81       	ldd	r26, Y+3	; 0x03
     4dc:	bc 81       	ldd	r27, Y+4	; 0x04
     4de:	82 17       	cp	r24, r18
     4e0:	93 07       	cpc	r25, r19
     4e2:	a4 07       	cpc	r26, r20
     4e4:	b5 07       	cpc	r27, r21
     4e6:	f0 f6       	brcc	.-68     	; 0x4a4 <forward_mm+0x9e>
		{
			break;
		}
	}
	stop(); //Stop robot
     4e8:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
}
     4ec:	2a 96       	adiw	r28, 0x0a	; 10
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	cd bf       	out	0x3d, r28	; 61
     4f8:	cf 91       	pop	r28
     4fa:	df 91       	pop	r29
     4fc:	08 95       	ret

000004fe <back>:

void back (void) //both wheels backward
{
     4fe:	df 93       	push	r29
     500:	cf 93       	push	r28
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
     506:	89 e0       	ldi	r24, 0x09	; 9
     508:	0e 94 da 01 	call	0x3b4	; 0x3b4 <motion_set>
}
     50c:	cf 91       	pop	r28
     50e:	df 91       	pop	r29
     510:	08 95       	ret

00000512 <back_mm>:

void back_mm (unsigned int distance)
{
     512:	df 93       	push	r29
     514:	cf 93       	push	r28
     516:	cd b7       	in	r28, 0x3d	; 61
     518:	de b7       	in	r29, 0x3e	; 62
     51a:	2a 97       	sbiw	r28, 0x0a	; 10
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	f8 94       	cli
     520:	de bf       	out	0x3e, r29	; 62
     522:	0f be       	out	0x3f, r0	; 63
     524:	cd bf       	out	0x3d, r28	; 61
     526:	9a 87       	std	Y+10, r25	; 0x0a
     528:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	a0 e0       	ldi	r26, 0x00	; 0
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	8d 83       	std	Y+5, r24	; 0x05
     534:	9e 83       	std	Y+6, r25	; 0x06
     536:	af 83       	std	Y+7, r26	; 0x07
     538:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     53a:	19 82       	std	Y+1, r1	; 0x01
     53c:	1a 82       	std	Y+2, r1	; 0x02
     53e:	1b 82       	std	Y+3, r1	; 0x03
     540:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = distance / 5.338; // division by resolution to get shaft count
     542:	89 85       	ldd	r24, Y+9	; 0x09
     544:	9a 85       	ldd	r25, Y+10	; 0x0a
     546:	cc 01       	movw	r24, r24
     548:	a0 e0       	ldi	r26, 0x00	; 0
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	bc 01       	movw	r22, r24
     54e:	cd 01       	movw	r24, r26
     550:	0e 94 9f 45 	call	0x8b3e	; 0x8b3e <__floatunsisf>
     554:	dc 01       	movw	r26, r24
     556:	cb 01       	movw	r24, r22
     558:	bc 01       	movw	r22, r24
     55a:	cd 01       	movw	r24, r26
     55c:	25 ee       	ldi	r18, 0xE5	; 229
     55e:	30 ed       	ldi	r19, 0xD0	; 208
     560:	4a ea       	ldi	r20, 0xAA	; 170
     562:	50 e4       	ldi	r21, 0x40	; 64
     564:	0e 94 b1 43 	call	0x8762	; 0x8762 <__divsf3>
     568:	dc 01       	movw	r26, r24
     56a:	cb 01       	movw	r24, r22
     56c:	8d 83       	std	Y+5, r24	; 0x05
     56e:	9e 83       	std	Y+6, r25	; 0x06
     570:	af 83       	std	Y+7, r26	; 0x07
     572:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     574:	6d 81       	ldd	r22, Y+5	; 0x05
     576:	7e 81       	ldd	r23, Y+6	; 0x06
     578:	8f 81       	ldd	r24, Y+7	; 0x07
     57a:	98 85       	ldd	r25, Y+8	; 0x08
     57c:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	89 83       	std	Y+1, r24	; 0x01
     586:	9a 83       	std	Y+2, r25	; 0x02
     588:	ab 83       	std	Y+3, r26	; 0x03
     58a:	bc 83       	std	Y+4, r27	; 0x04

    //Counting any one of the shaft counts.
	ShaftCountRight = 0;
     58c:	10 92 14 03 	sts	0x0314, r1
     590:	10 92 15 03 	sts	0x0315, r1
     594:	10 92 16 03 	sts	0x0316, r1
     598:	10 92 17 03 	sts	0x0317, r1
	ShaftCountLeft = 0;
     59c:	10 92 10 03 	sts	0x0310, r1
     5a0:	10 92 11 03 	sts	0x0311, r1
     5a4:	10 92 12 03 	sts	0x0312, r1
     5a8:	10 92 13 03 	sts	0x0313, r1
    back();
     5ac:	0e 94 7f 02 	call	0x4fe	; 0x4fe <back>

	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt || ShaftCountLeft > ReqdShaftCountInt)
     5b0:	20 91 14 03 	lds	r18, 0x0314
     5b4:	30 91 15 03 	lds	r19, 0x0315
     5b8:	40 91 16 03 	lds	r20, 0x0316
     5bc:	50 91 17 03 	lds	r21, 0x0317
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	9a 81       	ldd	r25, Y+2	; 0x02
     5c4:	ab 81       	ldd	r26, Y+3	; 0x03
     5c6:	bc 81       	ldd	r27, Y+4	; 0x04
     5c8:	82 17       	cp	r24, r18
     5ca:	93 07       	cpc	r25, r19
     5cc:	a4 07       	cpc	r26, r20
     5ce:	b5 07       	cpc	r27, r21
     5d0:	88 f0       	brcs	.+34     	; 0x5f4 <back_mm+0xe2>
     5d2:	20 91 10 03 	lds	r18, 0x0310
     5d6:	30 91 11 03 	lds	r19, 0x0311
     5da:	40 91 12 03 	lds	r20, 0x0312
     5de:	50 91 13 03 	lds	r21, 0x0313
     5e2:	89 81       	ldd	r24, Y+1	; 0x01
     5e4:	9a 81       	ldd	r25, Y+2	; 0x02
     5e6:	ab 81       	ldd	r26, Y+3	; 0x03
     5e8:	bc 81       	ldd	r27, Y+4	; 0x04
     5ea:	82 17       	cp	r24, r18
     5ec:	93 07       	cpc	r25, r19
     5ee:	a4 07       	cpc	r26, r20
     5f0:	b5 07       	cpc	r27, r21
     5f2:	f0 f6       	brcc	.-68     	; 0x5b0 <back_mm+0x9e>
		{
			break;
		}
	}
	stop(); //Stop robot
     5f4:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
}
     5f8:	2a 96       	adiw	r28, 0x0a	; 10
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	f8 94       	cli
     5fe:	de bf       	out	0x3e, r29	; 62
     600:	0f be       	out	0x3f, r0	; 63
     602:	cd bf       	out	0x3d, r28	; 61
     604:	cf 91       	pop	r28
     606:	df 91       	pop	r29
     608:	08 95       	ret

0000060a <left>:

void left (void) //Left wheel backward, Right wheel forward
{
     60a:	df 93       	push	r29
     60c:	cf 93       	push	r28
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
     612:	85 e0       	ldi	r24, 0x05	; 5
     614:	0e 94 da 01 	call	0x3b4	; 0x3b4 <motion_set>
}
     618:	cf 91       	pop	r28
     61a:	df 91       	pop	r29
     61c:	08 95       	ret

0000061e <left_degrees>:

void left_degrees(unsigned int degrees)
{
     61e:	df 93       	push	r29
     620:	cf 93       	push	r28
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	2c 97       	sbiw	r28, 0x0c	; 12
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	de bf       	out	0x3e, r29	; 62
     62e:	0f be       	out	0x3f, r0	; 63
     630:	cd bf       	out	0x3d, r28	; 61
     632:	9a 87       	std	Y+10, r25	; 0x0a
     634:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	a0 e0       	ldi	r26, 0x00	; 0
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	8d 83       	std	Y+5, r24	; 0x05
     640:	9e 83       	std	Y+6, r25	; 0x06
     642:	af 83       	std	Y+7, r26	; 0x07
     644:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     646:	19 82       	std	Y+1, r1	; 0x01
     648:	1a 82       	std	Y+2, r1	; 0x02
     64a:	1b 82       	std	Y+3, r1	; 0x03
     64c:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees/ 4.090; // division by resolution to get shaft count
     64e:	89 85       	ldd	r24, Y+9	; 0x09
     650:	9a 85       	ldd	r25, Y+10	; 0x0a
     652:	cc 01       	movw	r24, r24
     654:	a0 e0       	ldi	r26, 0x00	; 0
     656:	b0 e0       	ldi	r27, 0x00	; 0
     658:	bc 01       	movw	r22, r24
     65a:	cd 01       	movw	r24, r26
     65c:	0e 94 9f 45 	call	0x8b3e	; 0x8b3e <__floatunsisf>
     660:	dc 01       	movw	r26, r24
     662:	cb 01       	movw	r24, r22
     664:	bc 01       	movw	r22, r24
     666:	cd 01       	movw	r24, r26
     668:	28 e4       	ldi	r18, 0x48	; 72
     66a:	31 ee       	ldi	r19, 0xE1	; 225
     66c:	42 e8       	ldi	r20, 0x82	; 130
     66e:	50 e4       	ldi	r21, 0x40	; 64
     670:	0e 94 b1 43 	call	0x8762	; 0x8762 <__divsf3>
     674:	dc 01       	movw	r26, r24
     676:	cb 01       	movw	r24, r22
     678:	8d 83       	std	Y+5, r24	; 0x05
     67a:	9e 83       	std	Y+6, r25	; 0x06
     67c:	af 83       	std	Y+7, r26	; 0x07
     67e:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     680:	6d 81       	ldd	r22, Y+5	; 0x05
     682:	7e 81       	ldd	r23, Y+6	; 0x06
     684:	8f 81       	ldd	r24, Y+7	; 0x07
     686:	98 85       	ldd	r25, Y+8	; 0x08
     688:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
     68c:	dc 01       	movw	r26, r24
     68e:	cb 01       	movw	r24, r22
     690:	cc 01       	movw	r24, r24
     692:	a0 e0       	ldi	r26, 0x00	; 0
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	89 83       	std	Y+1, r24	; 0x01
     698:	9a 83       	std	Y+2, r25	; 0x02
     69a:	ab 83       	std	Y+3, r26	; 0x03
     69c:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     69e:	10 92 14 03 	sts	0x0314, r1
     6a2:	10 92 15 03 	sts	0x0315, r1
     6a6:	10 92 16 03 	sts	0x0316, r1
     6aa:	10 92 17 03 	sts	0x0317, r1
	ShaftCountLeft = 0;
     6ae:	10 92 10 03 	sts	0x0310, r1
     6b2:	10 92 11 03 	sts	0x0311, r1
     6b6:	10 92 12 03 	sts	0x0312, r1
     6ba:	10 92 13 03 	sts	0x0313, r1

    left();
     6be:	0e 94 05 03 	call	0x60a	; 0x60a <left>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     6c2:	20 91 14 03 	lds	r18, 0x0314
     6c6:	30 91 15 03 	lds	r19, 0x0315
     6ca:	40 91 16 03 	lds	r20, 0x0316
     6ce:	50 91 17 03 	lds	r21, 0x0317
     6d2:	1c 86       	std	Y+12, r1	; 0x0c
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	9a 81       	ldd	r25, Y+2	; 0x02
     6d8:	ab 81       	ldd	r26, Y+3	; 0x03
     6da:	bc 81       	ldd	r27, Y+4	; 0x04
     6dc:	28 17       	cp	r18, r24
     6de:	39 07       	cpc	r19, r25
     6e0:	4a 07       	cpc	r20, r26
     6e2:	5b 07       	cpc	r21, r27
     6e4:	10 f0       	brcs	.+4      	; 0x6ea <left_degrees+0xcc>
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	8c 87       	std	Y+12, r24	; 0x0c
     6ea:	20 91 10 03 	lds	r18, 0x0310
     6ee:	30 91 11 03 	lds	r19, 0x0311
     6f2:	40 91 12 03 	lds	r20, 0x0312
     6f6:	50 91 13 03 	lds	r21, 0x0313
     6fa:	1b 86       	std	Y+11, r1	; 0x0b
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	9a 81       	ldd	r25, Y+2	; 0x02
     700:	ab 81       	ldd	r26, Y+3	; 0x03
     702:	bc 81       	ldd	r27, Y+4	; 0x04
     704:	28 17       	cp	r18, r24
     706:	39 07       	cpc	r19, r25
     708:	4a 07       	cpc	r20, r26
     70a:	5b 07       	cpc	r21, r27
     70c:	10 f0       	brcs	.+4      	; 0x712 <left_degrees+0xf4>
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	9b 87       	std	Y+11, r25	; 0x0b
     712:	8c 85       	ldd	r24, Y+12	; 0x0c
     714:	9b 85       	ldd	r25, Y+11	; 0x0b
     716:	89 2b       	or	r24, r25
     718:	88 23       	and	r24, r24
     71a:	99 f2       	breq	.-90     	; 0x6c2 <left_degrees+0xa4>
		break;
	}
	stop(); //Stop robot
     71c:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
}
     720:	2c 96       	adiw	r28, 0x0c	; 12
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61
     72c:	cf 91       	pop	r28
     72e:	df 91       	pop	r29
     730:	08 95       	ret

00000732 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
     732:	df 93       	push	r29
     734:	cf 93       	push	r28
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
     73a:	8a e0       	ldi	r24, 0x0A	; 10
     73c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <motion_set>
}
     740:	cf 91       	pop	r28
     742:	df 91       	pop	r29
     744:	08 95       	ret

00000746 <right_degrees>:

void right_degrees(unsigned int degrees)
{
     746:	df 93       	push	r29
     748:	cf 93       	push	r28
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	2c 97       	sbiw	r28, 0x0c	; 12
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	de bf       	out	0x3e, r29	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	cd bf       	out	0x3d, r28	; 61
     75a:	9a 87       	std	Y+10, r25	; 0x0a
     75c:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	a0 e0       	ldi	r26, 0x00	; 0
     764:	b0 e0       	ldi	r27, 0x00	; 0
     766:	8d 83       	std	Y+5, r24	; 0x05
     768:	9e 83       	std	Y+6, r25	; 0x06
     76a:	af 83       	std	Y+7, r26	; 0x07
     76c:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     76e:	19 82       	std	Y+1, r1	; 0x01
     770:	1a 82       	std	Y+2, r1	; 0x02
     772:	1b 82       	std	Y+3, r1	; 0x03
     774:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees/ 4.090; // division by resolution to get shaft count
     776:	89 85       	ldd	r24, Y+9	; 0x09
     778:	9a 85       	ldd	r25, Y+10	; 0x0a
     77a:	cc 01       	movw	r24, r24
     77c:	a0 e0       	ldi	r26, 0x00	; 0
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	bc 01       	movw	r22, r24
     782:	cd 01       	movw	r24, r26
     784:	0e 94 9f 45 	call	0x8b3e	; 0x8b3e <__floatunsisf>
     788:	dc 01       	movw	r26, r24
     78a:	cb 01       	movw	r24, r22
     78c:	bc 01       	movw	r22, r24
     78e:	cd 01       	movw	r24, r26
     790:	28 e4       	ldi	r18, 0x48	; 72
     792:	31 ee       	ldi	r19, 0xE1	; 225
     794:	42 e8       	ldi	r20, 0x82	; 130
     796:	50 e4       	ldi	r21, 0x40	; 64
     798:	0e 94 b1 43 	call	0x8762	; 0x8762 <__divsf3>
     79c:	dc 01       	movw	r26, r24
     79e:	cb 01       	movw	r24, r22
     7a0:	8d 83       	std	Y+5, r24	; 0x05
     7a2:	9e 83       	std	Y+6, r25	; 0x06
     7a4:	af 83       	std	Y+7, r26	; 0x07
     7a6:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     7a8:	6d 81       	ldd	r22, Y+5	; 0x05
     7aa:	7e 81       	ldd	r23, Y+6	; 0x06
     7ac:	8f 81       	ldd	r24, Y+7	; 0x07
     7ae:	98 85       	ldd	r25, Y+8	; 0x08
     7b0:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
     7b4:	dc 01       	movw	r26, r24
     7b6:	cb 01       	movw	r24, r22
     7b8:	cc 01       	movw	r24, r24
     7ba:	a0 e0       	ldi	r26, 0x00	; 0
     7bc:	b0 e0       	ldi	r27, 0x00	; 0
     7be:	89 83       	std	Y+1, r24	; 0x01
     7c0:	9a 83       	std	Y+2, r25	; 0x02
     7c2:	ab 83       	std	Y+3, r26	; 0x03
     7c4:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     7c6:	10 92 14 03 	sts	0x0314, r1
     7ca:	10 92 15 03 	sts	0x0315, r1
     7ce:	10 92 16 03 	sts	0x0316, r1
     7d2:	10 92 17 03 	sts	0x0317, r1
	ShaftCountLeft = 0;
     7d6:	10 92 10 03 	sts	0x0310, r1
     7da:	10 92 11 03 	sts	0x0311, r1
     7de:	10 92 12 03 	sts	0x0312, r1
     7e2:	10 92 13 03 	sts	0x0313, r1

    right();
     7e6:	0e 94 99 03 	call	0x732	; 0x732 <right>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     7ea:	20 91 14 03 	lds	r18, 0x0314
     7ee:	30 91 15 03 	lds	r19, 0x0315
     7f2:	40 91 16 03 	lds	r20, 0x0316
     7f6:	50 91 17 03 	lds	r21, 0x0317
     7fa:	1c 86       	std	Y+12, r1	; 0x0c
     7fc:	89 81       	ldd	r24, Y+1	; 0x01
     7fe:	9a 81       	ldd	r25, Y+2	; 0x02
     800:	ab 81       	ldd	r26, Y+3	; 0x03
     802:	bc 81       	ldd	r27, Y+4	; 0x04
     804:	28 17       	cp	r18, r24
     806:	39 07       	cpc	r19, r25
     808:	4a 07       	cpc	r20, r26
     80a:	5b 07       	cpc	r21, r27
     80c:	10 f0       	brcs	.+4      	; 0x812 <right_degrees+0xcc>
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	8c 87       	std	Y+12, r24	; 0x0c
     812:	20 91 10 03 	lds	r18, 0x0310
     816:	30 91 11 03 	lds	r19, 0x0311
     81a:	40 91 12 03 	lds	r20, 0x0312
     81e:	50 91 13 03 	lds	r21, 0x0313
     822:	1b 86       	std	Y+11, r1	; 0x0b
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	9a 81       	ldd	r25, Y+2	; 0x02
     828:	ab 81       	ldd	r26, Y+3	; 0x03
     82a:	bc 81       	ldd	r27, Y+4	; 0x04
     82c:	28 17       	cp	r18, r24
     82e:	39 07       	cpc	r19, r25
     830:	4a 07       	cpc	r20, r26
     832:	5b 07       	cpc	r21, r27
     834:	10 f0       	brcs	.+4      	; 0x83a <right_degrees+0xf4>
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	9b 87       	std	Y+11, r25	; 0x0b
     83a:	8c 85       	ldd	r24, Y+12	; 0x0c
     83c:	9b 85       	ldd	r25, Y+11	; 0x0b
     83e:	89 2b       	or	r24, r25
     840:	88 23       	and	r24, r24
     842:	99 f2       	breq	.-90     	; 0x7ea <right_degrees+0xa4>
		break;
	}
	stop(); //Stop robot
     844:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
}
     848:	2c 96       	adiw	r28, 0x0c	; 12
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	cf 91       	pop	r28
     856:	df 91       	pop	r29
     858:	08 95       	ret

0000085a <soft_left>:


void soft_left (void) //Left wheel stationary, Right wheel forward
{
     85a:	df 93       	push	r29
     85c:	cf 93       	push	r28
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
     862:	84 e0       	ldi	r24, 0x04	; 4
     864:	0e 94 da 01 	call	0x3b4	; 0x3b4 <motion_set>
}
     868:	cf 91       	pop	r28
     86a:	df 91       	pop	r29
     86c:	08 95       	ret

0000086e <soft_left_degrees>:

void soft_left_degrees(unsigned int degrees)
{
     86e:	df 93       	push	r29
     870:	cf 93       	push	r28
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	2c 97       	sbiw	r28, 0x0c	; 12
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	de bf       	out	0x3e, r29	; 62
     87e:	0f be       	out	0x3f, r0	; 63
     880:	cd bf       	out	0x3d, r28	; 61
     882:	9a 87       	std	Y+10, r25	; 0x0a
     884:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	a0 e0       	ldi	r26, 0x00	; 0
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	8d 83       	std	Y+5, r24	; 0x05
     890:	9e 83       	std	Y+6, r25	; 0x06
     892:	af 83       	std	Y+7, r26	; 0x07
     894:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     896:	19 82       	std	Y+1, r1	; 0x01
     898:	1a 82       	std	Y+2, r1	; 0x02
     89a:	1b 82       	std	Y+3, r1	; 0x03
     89c:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees * 2 / 4.090; // division by resolution to get shaft count
     89e:	89 85       	ldd	r24, Y+9	; 0x09
     8a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     8a2:	cc 01       	movw	r24, r24
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	bc 01       	movw	r22, r24
     8aa:	cd 01       	movw	r24, r26
     8ac:	0e 94 9f 45 	call	0x8b3e	; 0x8b3e <__floatunsisf>
     8b0:	9b 01       	movw	r18, r22
     8b2:	ac 01       	movw	r20, r24
     8b4:	ca 01       	movw	r24, r20
     8b6:	b9 01       	movw	r22, r18
     8b8:	0e 94 8a 42 	call	0x8514	; 0x8514 <__addsf3>
     8bc:	dc 01       	movw	r26, r24
     8be:	cb 01       	movw	r24, r22
     8c0:	bc 01       	movw	r22, r24
     8c2:	cd 01       	movw	r24, r26
     8c4:	28 e4       	ldi	r18, 0x48	; 72
     8c6:	31 ee       	ldi	r19, 0xE1	; 225
     8c8:	42 e8       	ldi	r20, 0x82	; 130
     8ca:	50 e4       	ldi	r21, 0x40	; 64
     8cc:	0e 94 b1 43 	call	0x8762	; 0x8762 <__divsf3>
     8d0:	dc 01       	movw	r26, r24
     8d2:	cb 01       	movw	r24, r22
     8d4:	8d 83       	std	Y+5, r24	; 0x05
     8d6:	9e 83       	std	Y+6, r25	; 0x06
     8d8:	af 83       	std	Y+7, r26	; 0x07
     8da:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     8dc:	6d 81       	ldd	r22, Y+5	; 0x05
     8de:	7e 81       	ldd	r23, Y+6	; 0x06
     8e0:	8f 81       	ldd	r24, Y+7	; 0x07
     8e2:	98 85       	ldd	r25, Y+8	; 0x08
     8e4:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
     8e8:	dc 01       	movw	r26, r24
     8ea:	cb 01       	movw	r24, r22
     8ec:	cc 01       	movw	r24, r24
     8ee:	a0 e0       	ldi	r26, 0x00	; 0
     8f0:	b0 e0       	ldi	r27, 0x00	; 0
     8f2:	89 83       	std	Y+1, r24	; 0x01
     8f4:	9a 83       	std	Y+2, r25	; 0x02
     8f6:	ab 83       	std	Y+3, r26	; 0x03
     8f8:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     8fa:	10 92 14 03 	sts	0x0314, r1
     8fe:	10 92 15 03 	sts	0x0315, r1
     902:	10 92 16 03 	sts	0x0316, r1
     906:	10 92 17 03 	sts	0x0317, r1
	ShaftCountLeft = 0;
     90a:	10 92 10 03 	sts	0x0310, r1
     90e:	10 92 11 03 	sts	0x0311, r1
     912:	10 92 12 03 	sts	0x0312, r1
     916:	10 92 13 03 	sts	0x0313, r1

    soft_left();
     91a:	0e 94 2d 04 	call	0x85a	; 0x85a <soft_left>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     91e:	20 91 14 03 	lds	r18, 0x0314
     922:	30 91 15 03 	lds	r19, 0x0315
     926:	40 91 16 03 	lds	r20, 0x0316
     92a:	50 91 17 03 	lds	r21, 0x0317
     92e:	1c 86       	std	Y+12, r1	; 0x0c
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	9a 81       	ldd	r25, Y+2	; 0x02
     934:	ab 81       	ldd	r26, Y+3	; 0x03
     936:	bc 81       	ldd	r27, Y+4	; 0x04
     938:	28 17       	cp	r18, r24
     93a:	39 07       	cpc	r19, r25
     93c:	4a 07       	cpc	r20, r26
     93e:	5b 07       	cpc	r21, r27
     940:	10 f0       	brcs	.+4      	; 0x946 <soft_left_degrees+0xd8>
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	8c 87       	std	Y+12, r24	; 0x0c
     946:	20 91 10 03 	lds	r18, 0x0310
     94a:	30 91 11 03 	lds	r19, 0x0311
     94e:	40 91 12 03 	lds	r20, 0x0312
     952:	50 91 13 03 	lds	r21, 0x0313
     956:	1b 86       	std	Y+11, r1	; 0x0b
     958:	89 81       	ldd	r24, Y+1	; 0x01
     95a:	9a 81       	ldd	r25, Y+2	; 0x02
     95c:	ab 81       	ldd	r26, Y+3	; 0x03
     95e:	bc 81       	ldd	r27, Y+4	; 0x04
     960:	28 17       	cp	r18, r24
     962:	39 07       	cpc	r19, r25
     964:	4a 07       	cpc	r20, r26
     966:	5b 07       	cpc	r21, r27
     968:	10 f0       	brcs	.+4      	; 0x96e <soft_left_degrees+0x100>
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	9b 87       	std	Y+11, r25	; 0x0b
     96e:	8c 85       	ldd	r24, Y+12	; 0x0c
     970:	9b 85       	ldd	r25, Y+11	; 0x0b
     972:	89 2b       	or	r24, r25
     974:	88 23       	and	r24, r24
     976:	99 f2       	breq	.-90     	; 0x91e <soft_left_degrees+0xb0>
		break;
	}
	stop(); //Stop robot
     978:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
}
     97c:	2c 96       	adiw	r28, 0x0c	; 12
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	de bf       	out	0x3e, r29	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	cd bf       	out	0x3d, r28	; 61
     988:	cf 91       	pop	r28
     98a:	df 91       	pop	r29
     98c:	08 95       	ret

0000098e <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
     98e:	df 93       	push	r29
     990:	cf 93       	push	r28
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
     996:	82 e0       	ldi	r24, 0x02	; 2
     998:	0e 94 da 01 	call	0x3b4	; 0x3b4 <motion_set>
}
     99c:	cf 91       	pop	r28
     99e:	df 91       	pop	r29
     9a0:	08 95       	ret

000009a2 <soft_right_degrees>:

void soft_right_degrees(unsigned int degrees)
{
     9a2:	df 93       	push	r29
     9a4:	cf 93       	push	r28
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
     9aa:	2c 97       	sbiw	r28, 0x0c	; 12
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	de bf       	out	0x3e, r29	; 62
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	cd bf       	out	0x3d, r28	; 61
     9b6:	9a 87       	std	Y+10, r25	; 0x0a
     9b8:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	8d 83       	std	Y+5, r24	; 0x05
     9c4:	9e 83       	std	Y+6, r25	; 0x06
     9c6:	af 83       	std	Y+7, r26	; 0x07
     9c8:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     9ca:	19 82       	std	Y+1, r1	; 0x01
     9cc:	1a 82       	std	Y+2, r1	; 0x02
     9ce:	1b 82       	std	Y+3, r1	; 0x03
     9d0:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees * 2 / 4.090; // division by resolution to get shaft count
     9d2:	89 85       	ldd	r24, Y+9	; 0x09
     9d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     9d6:	cc 01       	movw	r24, r24
     9d8:	a0 e0       	ldi	r26, 0x00	; 0
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	bc 01       	movw	r22, r24
     9de:	cd 01       	movw	r24, r26
     9e0:	0e 94 9f 45 	call	0x8b3e	; 0x8b3e <__floatunsisf>
     9e4:	9b 01       	movw	r18, r22
     9e6:	ac 01       	movw	r20, r24
     9e8:	ca 01       	movw	r24, r20
     9ea:	b9 01       	movw	r22, r18
     9ec:	0e 94 8a 42 	call	0x8514	; 0x8514 <__addsf3>
     9f0:	dc 01       	movw	r26, r24
     9f2:	cb 01       	movw	r24, r22
     9f4:	bc 01       	movw	r22, r24
     9f6:	cd 01       	movw	r24, r26
     9f8:	28 e4       	ldi	r18, 0x48	; 72
     9fa:	31 ee       	ldi	r19, 0xE1	; 225
     9fc:	42 e8       	ldi	r20, 0x82	; 130
     9fe:	50 e4       	ldi	r21, 0x40	; 64
     a00:	0e 94 b1 43 	call	0x8762	; 0x8762 <__divsf3>
     a04:	dc 01       	movw	r26, r24
     a06:	cb 01       	movw	r24, r22
     a08:	8d 83       	std	Y+5, r24	; 0x05
     a0a:	9e 83       	std	Y+6, r25	; 0x06
     a0c:	af 83       	std	Y+7, r26	; 0x07
     a0e:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     a10:	6d 81       	ldd	r22, Y+5	; 0x05
     a12:	7e 81       	ldd	r23, Y+6	; 0x06
     a14:	8f 81       	ldd	r24, Y+7	; 0x07
     a16:	98 85       	ldd	r25, Y+8	; 0x08
     a18:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
     a1c:	dc 01       	movw	r26, r24
     a1e:	cb 01       	movw	r24, r22
     a20:	cc 01       	movw	r24, r24
     a22:	a0 e0       	ldi	r26, 0x00	; 0
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	89 83       	std	Y+1, r24	; 0x01
     a28:	9a 83       	std	Y+2, r25	; 0x02
     a2a:	ab 83       	std	Y+3, r26	; 0x03
     a2c:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     a2e:	10 92 14 03 	sts	0x0314, r1
     a32:	10 92 15 03 	sts	0x0315, r1
     a36:	10 92 16 03 	sts	0x0316, r1
     a3a:	10 92 17 03 	sts	0x0317, r1
	ShaftCountLeft = 0;
     a3e:	10 92 10 03 	sts	0x0310, r1
     a42:	10 92 11 03 	sts	0x0311, r1
     a46:	10 92 12 03 	sts	0x0312, r1
     a4a:	10 92 13 03 	sts	0x0313, r1

    soft_right();
     a4e:	0e 94 c7 04 	call	0x98e	; 0x98e <soft_right>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     a52:	20 91 14 03 	lds	r18, 0x0314
     a56:	30 91 15 03 	lds	r19, 0x0315
     a5a:	40 91 16 03 	lds	r20, 0x0316
     a5e:	50 91 17 03 	lds	r21, 0x0317
     a62:	1c 86       	std	Y+12, r1	; 0x0c
     a64:	89 81       	ldd	r24, Y+1	; 0x01
     a66:	9a 81       	ldd	r25, Y+2	; 0x02
     a68:	ab 81       	ldd	r26, Y+3	; 0x03
     a6a:	bc 81       	ldd	r27, Y+4	; 0x04
     a6c:	28 17       	cp	r18, r24
     a6e:	39 07       	cpc	r19, r25
     a70:	4a 07       	cpc	r20, r26
     a72:	5b 07       	cpc	r21, r27
     a74:	10 f0       	brcs	.+4      	; 0xa7a <soft_right_degrees+0xd8>
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	8c 87       	std	Y+12, r24	; 0x0c
     a7a:	20 91 10 03 	lds	r18, 0x0310
     a7e:	30 91 11 03 	lds	r19, 0x0311
     a82:	40 91 12 03 	lds	r20, 0x0312
     a86:	50 91 13 03 	lds	r21, 0x0313
     a8a:	1b 86       	std	Y+11, r1	; 0x0b
     a8c:	89 81       	ldd	r24, Y+1	; 0x01
     a8e:	9a 81       	ldd	r25, Y+2	; 0x02
     a90:	ab 81       	ldd	r26, Y+3	; 0x03
     a92:	bc 81       	ldd	r27, Y+4	; 0x04
     a94:	28 17       	cp	r18, r24
     a96:	39 07       	cpc	r19, r25
     a98:	4a 07       	cpc	r20, r26
     a9a:	5b 07       	cpc	r21, r27
     a9c:	10 f0       	brcs	.+4      	; 0xaa2 <soft_right_degrees+0x100>
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	9b 87       	std	Y+11, r25	; 0x0b
     aa2:	8c 85       	ldd	r24, Y+12	; 0x0c
     aa4:	9b 85       	ldd	r25, Y+11	; 0x0b
     aa6:	89 2b       	or	r24, r25
     aa8:	88 23       	and	r24, r24
     aaa:	99 f2       	breq	.-90     	; 0xa52 <soft_right_degrees+0xb0>
		break;
	}
	stop(); //Stop robot
     aac:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
}
     ab0:	2c 96       	adiw	r28, 0x0c	; 12
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	f8 94       	cli
     ab6:	de bf       	out	0x3e, r29	; 62
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	cd bf       	out	0x3d, r28	; 61
     abc:	cf 91       	pop	r28
     abe:	df 91       	pop	r29
     ac0:	08 95       	ret

00000ac2 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
     ac2:	df 93       	push	r29
     ac4:	cf 93       	push	r28
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	0e 94 da 01 	call	0x3b4	; 0x3b4 <motion_set>
}
     ad0:	cf 91       	pop	r28
     ad2:	df 91       	pop	r29
     ad4:	08 95       	ret

00000ad6 <soft_left_degrees_2>:

void soft_left_degrees_2(unsigned int degrees)
{
     ad6:	df 93       	push	r29
     ad8:	cf 93       	push	r28
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
     ade:	2c 97       	sbiw	r28, 0x0c	; 12
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	f8 94       	cli
     ae4:	de bf       	out	0x3e, r29	; 62
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	cd bf       	out	0x3d, r28	; 61
     aea:	9a 87       	std	Y+10, r25	; 0x0a
     aec:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e0       	ldi	r26, 0x00	; 0
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	8d 83       	std	Y+5, r24	; 0x05
     af8:	9e 83       	std	Y+6, r25	; 0x06
     afa:	af 83       	std	Y+7, r26	; 0x07
     afc:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     afe:	19 82       	std	Y+1, r1	; 0x01
     b00:	1a 82       	std	Y+2, r1	; 0x02
     b02:	1b 82       	std	Y+3, r1	; 0x03
     b04:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees * 2 / 4.090; // division by resolution to get shaft count
     b06:	89 85       	ldd	r24, Y+9	; 0x09
     b08:	9a 85       	ldd	r25, Y+10	; 0x0a
     b0a:	cc 01       	movw	r24, r24
     b0c:	a0 e0       	ldi	r26, 0x00	; 0
     b0e:	b0 e0       	ldi	r27, 0x00	; 0
     b10:	bc 01       	movw	r22, r24
     b12:	cd 01       	movw	r24, r26
     b14:	0e 94 9f 45 	call	0x8b3e	; 0x8b3e <__floatunsisf>
     b18:	9b 01       	movw	r18, r22
     b1a:	ac 01       	movw	r20, r24
     b1c:	ca 01       	movw	r24, r20
     b1e:	b9 01       	movw	r22, r18
     b20:	0e 94 8a 42 	call	0x8514	; 0x8514 <__addsf3>
     b24:	dc 01       	movw	r26, r24
     b26:	cb 01       	movw	r24, r22
     b28:	bc 01       	movw	r22, r24
     b2a:	cd 01       	movw	r24, r26
     b2c:	28 e4       	ldi	r18, 0x48	; 72
     b2e:	31 ee       	ldi	r19, 0xE1	; 225
     b30:	42 e8       	ldi	r20, 0x82	; 130
     b32:	50 e4       	ldi	r21, 0x40	; 64
     b34:	0e 94 b1 43 	call	0x8762	; 0x8762 <__divsf3>
     b38:	dc 01       	movw	r26, r24
     b3a:	cb 01       	movw	r24, r22
     b3c:	8d 83       	std	Y+5, r24	; 0x05
     b3e:	9e 83       	std	Y+6, r25	; 0x06
     b40:	af 83       	std	Y+7, r26	; 0x07
     b42:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     b44:	6d 81       	ldd	r22, Y+5	; 0x05
     b46:	7e 81       	ldd	r23, Y+6	; 0x06
     b48:	8f 81       	ldd	r24, Y+7	; 0x07
     b4a:	98 85       	ldd	r25, Y+8	; 0x08
     b4c:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
     b50:	dc 01       	movw	r26, r24
     b52:	cb 01       	movw	r24, r22
     b54:	cc 01       	movw	r24, r24
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	9a 83       	std	Y+2, r25	; 0x02
     b5e:	ab 83       	std	Y+3, r26	; 0x03
     b60:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     b62:	10 92 14 03 	sts	0x0314, r1
     b66:	10 92 15 03 	sts	0x0315, r1
     b6a:	10 92 16 03 	sts	0x0316, r1
     b6e:	10 92 17 03 	sts	0x0317, r1
	ShaftCountLeft = 0;
     b72:	10 92 10 03 	sts	0x0310, r1
     b76:	10 92 11 03 	sts	0x0311, r1
     b7a:	10 92 12 03 	sts	0x0312, r1
     b7e:	10 92 13 03 	sts	0x0313, r1

    soft_left_2();
     b82:	0e 94 61 05 	call	0xac2	; 0xac2 <soft_left_2>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     b86:	20 91 14 03 	lds	r18, 0x0314
     b8a:	30 91 15 03 	lds	r19, 0x0315
     b8e:	40 91 16 03 	lds	r20, 0x0316
     b92:	50 91 17 03 	lds	r21, 0x0317
     b96:	1c 86       	std	Y+12, r1	; 0x0c
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	9a 81       	ldd	r25, Y+2	; 0x02
     b9c:	ab 81       	ldd	r26, Y+3	; 0x03
     b9e:	bc 81       	ldd	r27, Y+4	; 0x04
     ba0:	28 17       	cp	r18, r24
     ba2:	39 07       	cpc	r19, r25
     ba4:	4a 07       	cpc	r20, r26
     ba6:	5b 07       	cpc	r21, r27
     ba8:	10 f0       	brcs	.+4      	; 0xbae <soft_left_degrees_2+0xd8>
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	8c 87       	std	Y+12, r24	; 0x0c
     bae:	20 91 10 03 	lds	r18, 0x0310
     bb2:	30 91 11 03 	lds	r19, 0x0311
     bb6:	40 91 12 03 	lds	r20, 0x0312
     bba:	50 91 13 03 	lds	r21, 0x0313
     bbe:	1b 86       	std	Y+11, r1	; 0x0b
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	9a 81       	ldd	r25, Y+2	; 0x02
     bc4:	ab 81       	ldd	r26, Y+3	; 0x03
     bc6:	bc 81       	ldd	r27, Y+4	; 0x04
     bc8:	28 17       	cp	r18, r24
     bca:	39 07       	cpc	r19, r25
     bcc:	4a 07       	cpc	r20, r26
     bce:	5b 07       	cpc	r21, r27
     bd0:	10 f0       	brcs	.+4      	; 0xbd6 <soft_left_degrees_2+0x100>
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	9b 87       	std	Y+11, r25	; 0x0b
     bd6:	8c 85       	ldd	r24, Y+12	; 0x0c
     bd8:	9b 85       	ldd	r25, Y+11	; 0x0b
     bda:	89 2b       	or	r24, r25
     bdc:	88 23       	and	r24, r24
     bde:	99 f2       	breq	.-90     	; 0xb86 <soft_left_degrees_2+0xb0>
		break;
	}
	stop(); //Stop robot
     be0:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
}
     be4:	2c 96       	adiw	r28, 0x0c	; 12
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	08 95       	ret

00000bf6 <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
     bfe:	88 e0       	ldi	r24, 0x08	; 8
     c00:	0e 94 da 01 	call	0x3b4	; 0x3b4 <motion_set>
}
     c04:	cf 91       	pop	r28
     c06:	df 91       	pop	r29
     c08:	08 95       	ret

00000c0a <right_degrees_2>:

void right_degrees_2(unsigned int degrees)
{
     c0a:	df 93       	push	r29
     c0c:	cf 93       	push	r28
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	2c 97       	sbiw	r28, 0x0c	; 12
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	cd bf       	out	0x3d, r28	; 61
     c1e:	9a 87       	std	Y+10, r25	; 0x0a
     c20:	89 87       	std	Y+9, r24	; 0x09
    float ReqdShaftCount = 0;
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a0 e0       	ldi	r26, 0x00	; 0
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	8d 83       	std	Y+5, r24	; 0x05
     c2c:	9e 83       	std	Y+6, r25	; 0x06
     c2e:	af 83       	std	Y+7, r26	; 0x07
     c30:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
     c32:	19 82       	std	Y+1, r1	; 0x01
     c34:	1a 82       	std	Y+2, r1	; 0x02
     c36:	1b 82       	std	Y+3, r1	; 0x03
     c38:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) degrees * 2 / 4.090; // division by resolution to get shaft count
     c3a:	89 85       	ldd	r24, Y+9	; 0x09
     c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3e:	cc 01       	movw	r24, r24
     c40:	a0 e0       	ldi	r26, 0x00	; 0
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	bc 01       	movw	r22, r24
     c46:	cd 01       	movw	r24, r26
     c48:	0e 94 9f 45 	call	0x8b3e	; 0x8b3e <__floatunsisf>
     c4c:	9b 01       	movw	r18, r22
     c4e:	ac 01       	movw	r20, r24
     c50:	ca 01       	movw	r24, r20
     c52:	b9 01       	movw	r22, r18
     c54:	0e 94 8a 42 	call	0x8514	; 0x8514 <__addsf3>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	bc 01       	movw	r22, r24
     c5e:	cd 01       	movw	r24, r26
     c60:	28 e4       	ldi	r18, 0x48	; 72
     c62:	31 ee       	ldi	r19, 0xE1	; 225
     c64:	42 e8       	ldi	r20, 0x82	; 130
     c66:	50 e4       	ldi	r21, 0x40	; 64
     c68:	0e 94 b1 43 	call	0x8762	; 0x8762 <__divsf3>
     c6c:	dc 01       	movw	r26, r24
     c6e:	cb 01       	movw	r24, r22
     c70:	8d 83       	std	Y+5, r24	; 0x05
     c72:	9e 83       	std	Y+6, r25	; 0x06
     c74:	af 83       	std	Y+7, r26	; 0x07
     c76:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     c78:	6d 81       	ldd	r22, Y+5	; 0x05
     c7a:	7e 81       	ldd	r23, Y+6	; 0x06
     c7c:	8f 81       	ldd	r24, Y+7	; 0x07
     c7e:	98 85       	ldd	r25, Y+8	; 0x08
     c80:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
     c84:	dc 01       	movw	r26, r24
     c86:	cb 01       	movw	r24, r22
     c88:	cc 01       	movw	r24, r24
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	89 83       	std	Y+1, r24	; 0x01
     c90:	9a 83       	std	Y+2, r25	; 0x02
     c92:	ab 83       	std	Y+3, r26	; 0x03
     c94:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
     c96:	10 92 14 03 	sts	0x0314, r1
     c9a:	10 92 15 03 	sts	0x0315, r1
     c9e:	10 92 16 03 	sts	0x0316, r1
     ca2:	10 92 17 03 	sts	0x0317, r1
	ShaftCountLeft = 0;
     ca6:	10 92 10 03 	sts	0x0310, r1
     caa:	10 92 11 03 	sts	0x0311, r1
     cae:	10 92 12 03 	sts	0x0312, r1
     cb2:	10 92 13 03 	sts	0x0313, r1

    soft_right_2();
     cb6:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <soft_right_2>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     cba:	20 91 14 03 	lds	r18, 0x0314
     cbe:	30 91 15 03 	lds	r19, 0x0315
     cc2:	40 91 16 03 	lds	r20, 0x0316
     cc6:	50 91 17 03 	lds	r21, 0x0317
     cca:	1c 86       	std	Y+12, r1	; 0x0c
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	9a 81       	ldd	r25, Y+2	; 0x02
     cd0:	ab 81       	ldd	r26, Y+3	; 0x03
     cd2:	bc 81       	ldd	r27, Y+4	; 0x04
     cd4:	28 17       	cp	r18, r24
     cd6:	39 07       	cpc	r19, r25
     cd8:	4a 07       	cpc	r20, r26
     cda:	5b 07       	cpc	r21, r27
     cdc:	10 f0       	brcs	.+4      	; 0xce2 <right_degrees_2+0xd8>
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	8c 87       	std	Y+12, r24	; 0x0c
     ce2:	20 91 10 03 	lds	r18, 0x0310
     ce6:	30 91 11 03 	lds	r19, 0x0311
     cea:	40 91 12 03 	lds	r20, 0x0312
     cee:	50 91 13 03 	lds	r21, 0x0313
     cf2:	1b 86       	std	Y+11, r1	; 0x0b
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	ab 81       	ldd	r26, Y+3	; 0x03
     cfa:	bc 81       	ldd	r27, Y+4	; 0x04
     cfc:	28 17       	cp	r18, r24
     cfe:	39 07       	cpc	r19, r25
     d00:	4a 07       	cpc	r20, r26
     d02:	5b 07       	cpc	r21, r27
     d04:	10 f0       	brcs	.+4      	; 0xd0a <right_degrees_2+0x100>
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	9b 87       	std	Y+11, r25	; 0x0b
     d0a:	8c 85       	ldd	r24, Y+12	; 0x0c
     d0c:	9b 85       	ldd	r25, Y+11	; 0x0b
     d0e:	89 2b       	or	r24, r25
     d10:	88 23       	and	r24, r24
     d12:	99 f2       	breq	.-90     	; 0xcba <right_degrees_2+0xb0>
		break;
	}
	stop(); //Stop robot
     d14:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
}
     d18:	2c 96       	adiw	r28, 0x0c	; 12
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <stop>:

void stop (void) //hard stop
{
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	0e 94 da 01 	call	0x3b4	; 0x3b4 <motion_set>
}
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <adc_pin_config>:
Available functions in the library, (Total : 2)
****************************************************************/
unsigned char ADC_Conversion(unsigned char);

void adc_pin_config()
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
    DDRF = 0x00;    //All ADC Channels on port F set as inputs
     d46:	e0 e3       	ldi	r30, 0x30	; 48
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	10 82       	st	Z, r1
    DDRK = 0x00;    //All ADC Channels on port K set as inputs.
     d4c:	e7 e0       	ldi	r30, 0x07	; 7
     d4e:	f1 e0       	ldi	r31, 0x01	; 1
     d50:	10 82       	st	Z, r1
    PORTF = 0x00;   //All ADC pins on port F pulled low.
     d52:	e1 e3       	ldi	r30, 0x31	; 49
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	10 82       	st	Z, r1
    PORTK = 0x00;   //All ADC pins on port K pulled low.
     d58:	e8 e0       	ldi	r30, 0x08	; 8
     d5a:	f1 e0       	ldi	r31, 0x01	; 1
     d5c:	10 82       	st	Z, r1
}
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <set_ADC>:

void set_ADC()
{
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
    adc_pin_config();
     d6c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <adc_pin_config>

	ADCSRA = 0x00;
     d70:	ea e7       	ldi	r30, 0x7A	; 122
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     d76:	eb e7       	ldi	r30, 0x7B	; 123
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     d7c:	ec e7       	ldi	r30, 0x7C	; 124
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 e2       	ldi	r24, 0x20	; 32
     d82:	80 83       	st	Z, r24
	ACSR = 0x80;        //Disable analog comparator.
     d84:	e0 e5       	ldi	r30, 0x50	; 80
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 e8       	ldi	r24, 0x80	; 128
     d8a:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0 ( Prescalar 64)
     d8c:	ea e7       	ldi	r30, 0x7A	; 122
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	86 e8       	ldi	r24, 0x86	; 134
     d92:	80 83       	st	Z, r24
}
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <ADC_Conversion>:

//Function For ADC Conversion
//Value of ch can be 1-15 for single ended input.
//ADC resolution 8 bit.
unsigned char ADC_Conversion(unsigned char Ch)
{
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	0f 92       	push	r0
     da0:	0f 92       	push	r0
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;

	if(Ch>7)
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	88 30       	cpi	r24, 0x08	; 8
     dac:	20 f0       	brcs	.+8      	; 0xdb6 <ADC_Conversion+0x1c>
        ADCSRB = 0x08;
     dae:	eb e7       	ldi	r30, 0x7B	; 123
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	88 e0       	ldi	r24, 0x08	; 8
     db4:	80 83       	st	Z, r24

	Ch = Ch & 0x07;
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	87 70       	andi	r24, 0x07	; 7
     dba:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;
     dbc:	ec e7       	ldi	r30, 0x7C	; 124
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	80 62       	ori	r24, 0x20	; 32
     dc4:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     dc6:	aa e7       	ldi	r26, 0x7A	; 122
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	ea e7       	ldi	r30, 0x7A	; 122
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	80 64       	ori	r24, 0x40	; 64
     dd2:	8c 93       	st	X, r24

	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     dd4:	ea e7       	ldi	r30, 0x7A	; 122
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	88 2f       	mov	r24, r24
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	80 71       	andi	r24, 0x10	; 16
     de0:	90 70       	andi	r25, 0x00	; 0
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	b9 f3       	breq	.-18     	; 0xdd4 <ADC_Conversion+0x3a>

	a=ADCH;
     de6:	e9 e7       	ldi	r30, 0x79	; 121
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10;       //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     dee:	aa e7       	ldi	r26, 0x7A	; 122
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	ea e7       	ldi	r30, 0x7A	; 122
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	80 61       	ori	r24, 0x10	; 16
     dfa:	8c 93       	st	X, r24
	ADCSRB = 0x00;
     dfc:	eb e7       	ldi	r30, 0x7B	; 123
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	10 82       	st	Z, r1
	return a;
     e02:	89 81       	ldd	r24, Y+1	; 0x01
}
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <set_lcd>:
unsigned int hundred;
unsigned int thousand;
unsigned int million;

void set_lcd()
{
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
    lcd_port_config();
     e16:	0e 94 12 07 	call	0xe24	; 0xe24 <lcd_port_config>
    lcd_init();
     e1a:	0e 94 26 0c 	call	0x184c	; 0x184c <lcd_init>
}
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <lcd_port_config>:

void lcd_port_config (void)
{
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     e2c:	a7 e2       	ldi	r26, 0x27	; 39
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e7 e2       	ldi	r30, 0x27	; 39
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	87 6f       	ori	r24, 0xF7	; 247
     e38:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     e3a:	a8 e2       	ldi	r26, 0x28	; 40
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e8 e2       	ldi	r30, 0x28	; 40
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	80 78       	andi	r24, 0x80	; 128
     e46:	8c 93       	st	X, r24
}
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <lcd_set_4bit>:

//Function to Reset LCD
void lcd_set_4bit()
{
     e4e:	0f 93       	push	r16
     e50:	1f 93       	push	r17
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	c0 57       	subi	r28, 0x70	; 112
     e5c:	d0 40       	sbci	r29, 0x00	; 0
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	fe 01       	movw	r30, r28
     e6a:	e3 59       	subi	r30, 0x93	; 147
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	a0 e8       	ldi	r26, 0x80	; 128
     e74:	bf e3       	ldi	r27, 0x3F	; 63
     e76:	80 83       	st	Z, r24
     e78:	91 83       	std	Z+1, r25	; 0x01
     e7a:	a2 83       	std	Z+2, r26	; 0x02
     e7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7e:	8e 01       	movw	r16, r28
     e80:	07 59       	subi	r16, 0x97	; 151
     e82:	1f 4f       	sbci	r17, 0xFF	; 255
     e84:	fe 01       	movw	r30, r28
     e86:	e3 59       	subi	r30, 0x93	; 147
     e88:	ff 4f       	sbci	r31, 0xFF	; 255
     e8a:	60 81       	ld	r22, Z
     e8c:	71 81       	ldd	r23, Z+1	; 0x01
     e8e:	82 81       	ldd	r24, Z+2	; 0x02
     e90:	93 81       	ldd	r25, Z+3	; 0x03
     e92:	26 e6       	ldi	r18, 0x66	; 102
     e94:	36 e6       	ldi	r19, 0x66	; 102
     e96:	46 e6       	ldi	r20, 0x66	; 102
     e98:	55 e4       	ldi	r21, 0x45	; 69
     e9a:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	f8 01       	movw	r30, r16
     ea4:	80 83       	st	Z, r24
     ea6:	91 83       	std	Z+1, r25	; 0x01
     ea8:	a2 83       	std	Z+2, r26	; 0x02
     eaa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     eac:	fe 01       	movw	r30, r28
     eae:	e7 59       	subi	r30, 0x97	; 151
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	60 81       	ld	r22, Z
     eb4:	71 81       	ldd	r23, Z+1	; 0x01
     eb6:	82 81       	ldd	r24, Z+2	; 0x02
     eb8:	93 81       	ldd	r25, Z+3	; 0x03
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	40 e8       	ldi	r20, 0x80	; 128
     ec0:	5f e3       	ldi	r21, 0x3F	; 63
     ec2:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
     ec6:	88 23       	and	r24, r24
     ec8:	44 f4       	brge	.+16     	; 0xeda <lcd_set_4bit+0x8c>
		__ticks = 1;
     eca:	fe 01       	movw	r30, r28
     ecc:	e9 59       	subi	r30, 0x99	; 153
     ece:	ff 4f       	sbci	r31, 0xFF	; 255
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	91 83       	std	Z+1, r25	; 0x01
     ed6:	80 83       	st	Z, r24
     ed8:	64 c0       	rjmp	.+200    	; 0xfa2 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     eda:	fe 01       	movw	r30, r28
     edc:	e7 59       	subi	r30, 0x97	; 151
     ede:	ff 4f       	sbci	r31, 0xFF	; 255
     ee0:	60 81       	ld	r22, Z
     ee2:	71 81       	ldd	r23, Z+1	; 0x01
     ee4:	82 81       	ldd	r24, Z+2	; 0x02
     ee6:	93 81       	ldd	r25, Z+3	; 0x03
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	3f ef       	ldi	r19, 0xFF	; 255
     eec:	4f e7       	ldi	r20, 0x7F	; 127
     eee:	57 e4       	ldi	r21, 0x47	; 71
     ef0:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
     ef4:	18 16       	cp	r1, r24
     ef6:	0c f0       	brlt	.+2      	; 0xefa <lcd_set_4bit+0xac>
     ef8:	43 c0       	rjmp	.+134    	; 0xf80 <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     efa:	fe 01       	movw	r30, r28
     efc:	e3 59       	subi	r30, 0x93	; 147
     efe:	ff 4f       	sbci	r31, 0xFF	; 255
     f00:	60 81       	ld	r22, Z
     f02:	71 81       	ldd	r23, Z+1	; 0x01
     f04:	82 81       	ldd	r24, Z+2	; 0x02
     f06:	93 81       	ldd	r25, Z+3	; 0x03
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e2       	ldi	r20, 0x20	; 32
     f0e:	51 e4       	ldi	r21, 0x41	; 65
     f10:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	8e 01       	movw	r16, r28
     f1a:	09 59       	subi	r16, 0x99	; 153
     f1c:	1f 4f       	sbci	r17, 0xFF	; 255
     f1e:	bc 01       	movw	r22, r24
     f20:	cd 01       	movw	r24, r26
     f22:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	f8 01       	movw	r30, r16
     f2c:	91 83       	std	Z+1, r25	; 0x01
     f2e:	80 83       	st	Z, r24
     f30:	1f c0       	rjmp	.+62     	; 0xf70 <lcd_set_4bit+0x122>
     f32:	fe 01       	movw	r30, r28
     f34:	eb 59       	subi	r30, 0x9B	; 155
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	80 e7       	ldi	r24, 0x70	; 112
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	91 83       	std	Z+1, r25	; 0x01
     f3e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f40:	fe 01       	movw	r30, r28
     f42:	eb 59       	subi	r30, 0x9B	; 155
     f44:	ff 4f       	sbci	r31, 0xFF	; 255
     f46:	80 81       	ld	r24, Z
     f48:	91 81       	ldd	r25, Z+1	; 0x01
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	f1 f7       	brne	.-4      	; 0xf4a <lcd_set_4bit+0xfc>
     f4e:	fe 01       	movw	r30, r28
     f50:	eb 59       	subi	r30, 0x9B	; 155
     f52:	ff 4f       	sbci	r31, 0xFF	; 255
     f54:	91 83       	std	Z+1, r25	; 0x01
     f56:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f58:	de 01       	movw	r26, r28
     f5a:	a9 59       	subi	r26, 0x99	; 153
     f5c:	bf 4f       	sbci	r27, 0xFF	; 255
     f5e:	fe 01       	movw	r30, r28
     f60:	e9 59       	subi	r30, 0x99	; 153
     f62:	ff 4f       	sbci	r31, 0xFF	; 255
     f64:	80 81       	ld	r24, Z
     f66:	91 81       	ldd	r25, Z+1	; 0x01
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	11 96       	adiw	r26, 0x01	; 1
     f6c:	9c 93       	st	X, r25
     f6e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f70:	fe 01       	movw	r30, r28
     f72:	e9 59       	subi	r30, 0x99	; 153
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	80 81       	ld	r24, Z
     f78:	91 81       	ldd	r25, Z+1	; 0x01
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	d1 f6       	brne	.-76     	; 0xf32 <lcd_set_4bit+0xe4>
     f7e:	27 c0       	rjmp	.+78     	; 0xfce <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f80:	8e 01       	movw	r16, r28
     f82:	09 59       	subi	r16, 0x99	; 153
     f84:	1f 4f       	sbci	r17, 0xFF	; 255
     f86:	fe 01       	movw	r30, r28
     f88:	e7 59       	subi	r30, 0x97	; 151
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	60 81       	ld	r22, Z
     f8e:	71 81       	ldd	r23, Z+1	; 0x01
     f90:	82 81       	ldd	r24, Z+2	; 0x02
     f92:	93 81       	ldd	r25, Z+3	; 0x03
     f94:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	f8 01       	movw	r30, r16
     f9e:	91 83       	std	Z+1, r25	; 0x01
     fa0:	80 83       	st	Z, r24
     fa2:	de 01       	movw	r26, r28
     fa4:	ad 59       	subi	r26, 0x9D	; 157
     fa6:	bf 4f       	sbci	r27, 0xFF	; 255
     fa8:	fe 01       	movw	r30, r28
     faa:	e9 59       	subi	r30, 0x99	; 153
     fac:	ff 4f       	sbci	r31, 0xFF	; 255
     fae:	80 81       	ld	r24, Z
     fb0:	91 81       	ldd	r25, Z+1	; 0x01
     fb2:	8d 93       	st	X+, r24
     fb4:	9c 93       	st	X, r25
     fb6:	fe 01       	movw	r30, r28
     fb8:	ed 59       	subi	r30, 0x9D	; 157
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	80 81       	ld	r24, Z
     fbe:	91 81       	ldd	r25, Z+1	; 0x01
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <lcd_set_4bit+0x172>
     fc4:	fe 01       	movw	r30, r28
     fc6:	ed 59       	subi	r30, 0x9D	; 157
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	91 83       	std	Z+1, r25	; 0x01
     fcc:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     fce:	a8 e2       	ldi	r26, 0x28	; 40
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e8 e2       	ldi	r30, 0x28	; 40
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	8e 7f       	andi	r24, 0xFE	; 254
     fda:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     fdc:	a8 e2       	ldi	r26, 0x28	; 40
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e8 e2       	ldi	r30, 0x28	; 40
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8d 7f       	andi	r24, 0xFD	; 253
     fe8:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     fea:	e8 e2       	ldi	r30, 0x28	; 40
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 e3       	ldi	r24, 0x30	; 48
     ff0:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     ff2:	a8 e2       	ldi	r26, 0x28	; 40
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e8 e2       	ldi	r30, 0x28	; 40
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	84 60       	ori	r24, 0x04	; 4
     ffe:	8c 93       	st	X, r24
    1000:	fe 01       	movw	r30, r28
    1002:	e1 5a       	subi	r30, 0xA1	; 161
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a0 ea       	ldi	r26, 0xA0	; 160
    100c:	b0 e4       	ldi	r27, 0x40	; 64
    100e:	80 83       	st	Z, r24
    1010:	91 83       	std	Z+1, r25	; 0x01
    1012:	a2 83       	std	Z+2, r26	; 0x02
    1014:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1016:	8e 01       	movw	r16, r28
    1018:	05 5a       	subi	r16, 0xA5	; 165
    101a:	1f 4f       	sbci	r17, 0xFF	; 255
    101c:	fe 01       	movw	r30, r28
    101e:	e1 5a       	subi	r30, 0xA1	; 161
    1020:	ff 4f       	sbci	r31, 0xFF	; 255
    1022:	60 81       	ld	r22, Z
    1024:	71 81       	ldd	r23, Z+1	; 0x01
    1026:	82 81       	ldd	r24, Z+2	; 0x02
    1028:	93 81       	ldd	r25, Z+3	; 0x03
    102a:	26 e6       	ldi	r18, 0x66	; 102
    102c:	36 e6       	ldi	r19, 0x66	; 102
    102e:	46 e6       	ldi	r20, 0x66	; 102
    1030:	55 e4       	ldi	r21, 0x45	; 69
    1032:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	f8 01       	movw	r30, r16
    103c:	80 83       	st	Z, r24
    103e:	91 83       	std	Z+1, r25	; 0x01
    1040:	a2 83       	std	Z+2, r26	; 0x02
    1042:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1044:	fe 01       	movw	r30, r28
    1046:	e5 5a       	subi	r30, 0xA5	; 165
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	60 81       	ld	r22, Z
    104c:	71 81       	ldd	r23, Z+1	; 0x01
    104e:	82 81       	ldd	r24, Z+2	; 0x02
    1050:	93 81       	ldd	r25, Z+3	; 0x03
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e8       	ldi	r20, 0x80	; 128
    1058:	5f e3       	ldi	r21, 0x3F	; 63
    105a:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    105e:	88 23       	and	r24, r24
    1060:	44 f4       	brge	.+16     	; 0x1072 <lcd_set_4bit+0x224>
		__ticks = 1;
    1062:	fe 01       	movw	r30, r28
    1064:	e7 5a       	subi	r30, 0xA7	; 167
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	91 83       	std	Z+1, r25	; 0x01
    106e:	80 83       	st	Z, r24
    1070:	64 c0       	rjmp	.+200    	; 0x113a <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
    1072:	fe 01       	movw	r30, r28
    1074:	e5 5a       	subi	r30, 0xA5	; 165
    1076:	ff 4f       	sbci	r31, 0xFF	; 255
    1078:	60 81       	ld	r22, Z
    107a:	71 81       	ldd	r23, Z+1	; 0x01
    107c:	82 81       	ldd	r24, Z+2	; 0x02
    107e:	93 81       	ldd	r25, Z+3	; 0x03
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	3f ef       	ldi	r19, 0xFF	; 255
    1084:	4f e7       	ldi	r20, 0x7F	; 127
    1086:	57 e4       	ldi	r21, 0x47	; 71
    1088:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    108c:	18 16       	cp	r1, r24
    108e:	0c f0       	brlt	.+2      	; 0x1092 <lcd_set_4bit+0x244>
    1090:	43 c0       	rjmp	.+134    	; 0x1118 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1092:	fe 01       	movw	r30, r28
    1094:	e1 5a       	subi	r30, 0xA1	; 161
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	60 81       	ld	r22, Z
    109a:	71 81       	ldd	r23, Z+1	; 0x01
    109c:	82 81       	ldd	r24, Z+2	; 0x02
    109e:	93 81       	ldd	r25, Z+3	; 0x03
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e2       	ldi	r20, 0x20	; 32
    10a6:	51 e4       	ldi	r21, 0x41	; 65
    10a8:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	8e 01       	movw	r16, r28
    10b2:	07 5a       	subi	r16, 0xA7	; 167
    10b4:	1f 4f       	sbci	r17, 0xFF	; 255
    10b6:	bc 01       	movw	r22, r24
    10b8:	cd 01       	movw	r24, r26
    10ba:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	f8 01       	movw	r30, r16
    10c4:	91 83       	std	Z+1, r25	; 0x01
    10c6:	80 83       	st	Z, r24
    10c8:	1f c0       	rjmp	.+62     	; 0x1108 <lcd_set_4bit+0x2ba>
    10ca:	fe 01       	movw	r30, r28
    10cc:	e9 5a       	subi	r30, 0xA9	; 169
    10ce:	ff 4f       	sbci	r31, 0xFF	; 255
    10d0:	80 e7       	ldi	r24, 0x70	; 112
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	91 83       	std	Z+1, r25	; 0x01
    10d6:	80 83       	st	Z, r24
    10d8:	fe 01       	movw	r30, r28
    10da:	e9 5a       	subi	r30, 0xA9	; 169
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	80 81       	ld	r24, Z
    10e0:	91 81       	ldd	r25, Z+1	; 0x01
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	f1 f7       	brne	.-4      	; 0x10e2 <lcd_set_4bit+0x294>
    10e6:	fe 01       	movw	r30, r28
    10e8:	e9 5a       	subi	r30, 0xA9	; 169
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	91 83       	std	Z+1, r25	; 0x01
    10ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f0:	de 01       	movw	r26, r28
    10f2:	a7 5a       	subi	r26, 0xA7	; 167
    10f4:	bf 4f       	sbci	r27, 0xFF	; 255
    10f6:	fe 01       	movw	r30, r28
    10f8:	e7 5a       	subi	r30, 0xA7	; 167
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	80 81       	ld	r24, Z
    10fe:	91 81       	ldd	r25, Z+1	; 0x01
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	11 96       	adiw	r26, 0x01	; 1
    1104:	9c 93       	st	X, r25
    1106:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1108:	fe 01       	movw	r30, r28
    110a:	e7 5a       	subi	r30, 0xA7	; 167
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	80 81       	ld	r24, Z
    1110:	91 81       	ldd	r25, Z+1	; 0x01
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	d1 f6       	brne	.-76     	; 0x10ca <lcd_set_4bit+0x27c>
    1116:	27 c0       	rjmp	.+78     	; 0x1166 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1118:	8e 01       	movw	r16, r28
    111a:	07 5a       	subi	r16, 0xA7	; 167
    111c:	1f 4f       	sbci	r17, 0xFF	; 255
    111e:	fe 01       	movw	r30, r28
    1120:	e5 5a       	subi	r30, 0xA5	; 165
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	60 81       	ld	r22, Z
    1126:	71 81       	ldd	r23, Z+1	; 0x01
    1128:	82 81       	ldd	r24, Z+2	; 0x02
    112a:	93 81       	ldd	r25, Z+3	; 0x03
    112c:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	f8 01       	movw	r30, r16
    1136:	91 83       	std	Z+1, r25	; 0x01
    1138:	80 83       	st	Z, r24
    113a:	de 01       	movw	r26, r28
    113c:	ab 5a       	subi	r26, 0xAB	; 171
    113e:	bf 4f       	sbci	r27, 0xFF	; 255
    1140:	fe 01       	movw	r30, r28
    1142:	e7 5a       	subi	r30, 0xA7	; 167
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	80 81       	ld	r24, Z
    1148:	91 81       	ldd	r25, Z+1	; 0x01
    114a:	8d 93       	st	X+, r24
    114c:	9c 93       	st	X, r25
    114e:	fe 01       	movw	r30, r28
    1150:	eb 5a       	subi	r30, 0xAB	; 171
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	80 81       	ld	r24, Z
    1156:	91 81       	ldd	r25, Z+1	; 0x01
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <lcd_set_4bit+0x30a>
    115c:	fe 01       	movw	r30, r28
    115e:	eb 5a       	subi	r30, 0xAB	; 171
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	91 83       	std	Z+1, r25	; 0x01
    1164:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1166:	a8 e2       	ldi	r26, 0x28	; 40
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e8 e2       	ldi	r30, 0x28	; 40
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	8b 7f       	andi	r24, 0xFB	; 251
    1172:	8c 93       	st	X, r24
    1174:	fe 01       	movw	r30, r28
    1176:	ef 5a       	subi	r30, 0xAF	; 175
    1178:	ff 4f       	sbci	r31, 0xFF	; 255
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	a0 e8       	ldi	r26, 0x80	; 128
    1180:	bf e3       	ldi	r27, 0x3F	; 63
    1182:	80 83       	st	Z, r24
    1184:	91 83       	std	Z+1, r25	; 0x01
    1186:	a2 83       	std	Z+2, r26	; 0x02
    1188:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118a:	8e 01       	movw	r16, r28
    118c:	03 5b       	subi	r16, 0xB3	; 179
    118e:	1f 4f       	sbci	r17, 0xFF	; 255
    1190:	fe 01       	movw	r30, r28
    1192:	ef 5a       	subi	r30, 0xAF	; 175
    1194:	ff 4f       	sbci	r31, 0xFF	; 255
    1196:	60 81       	ld	r22, Z
    1198:	71 81       	ldd	r23, Z+1	; 0x01
    119a:	82 81       	ldd	r24, Z+2	; 0x02
    119c:	93 81       	ldd	r25, Z+3	; 0x03
    119e:	26 e6       	ldi	r18, 0x66	; 102
    11a0:	36 e6       	ldi	r19, 0x66	; 102
    11a2:	46 e6       	ldi	r20, 0x66	; 102
    11a4:	55 e4       	ldi	r21, 0x45	; 69
    11a6:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	f8 01       	movw	r30, r16
    11b0:	80 83       	st	Z, r24
    11b2:	91 83       	std	Z+1, r25	; 0x01
    11b4:	a2 83       	std	Z+2, r26	; 0x02
    11b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11b8:	fe 01       	movw	r30, r28
    11ba:	e3 5b       	subi	r30, 0xB3	; 179
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	60 81       	ld	r22, Z
    11c0:	71 81       	ldd	r23, Z+1	; 0x01
    11c2:	82 81       	ldd	r24, Z+2	; 0x02
    11c4:	93 81       	ldd	r25, Z+3	; 0x03
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	40 e8       	ldi	r20, 0x80	; 128
    11cc:	5f e3       	ldi	r21, 0x3F	; 63
    11ce:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    11d2:	88 23       	and	r24, r24
    11d4:	44 f4       	brge	.+16     	; 0x11e6 <lcd_set_4bit+0x398>
		__ticks = 1;
    11d6:	fe 01       	movw	r30, r28
    11d8:	e5 5b       	subi	r30, 0xB5	; 181
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	91 83       	std	Z+1, r25	; 0x01
    11e2:	80 83       	st	Z, r24
    11e4:	64 c0       	rjmp	.+200    	; 0x12ae <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
    11e6:	fe 01       	movw	r30, r28
    11e8:	e3 5b       	subi	r30, 0xB3	; 179
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	60 81       	ld	r22, Z
    11ee:	71 81       	ldd	r23, Z+1	; 0x01
    11f0:	82 81       	ldd	r24, Z+2	; 0x02
    11f2:	93 81       	ldd	r25, Z+3	; 0x03
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	3f ef       	ldi	r19, 0xFF	; 255
    11f8:	4f e7       	ldi	r20, 0x7F	; 127
    11fa:	57 e4       	ldi	r21, 0x47	; 71
    11fc:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    1200:	18 16       	cp	r1, r24
    1202:	0c f0       	brlt	.+2      	; 0x1206 <lcd_set_4bit+0x3b8>
    1204:	43 c0       	rjmp	.+134    	; 0x128c <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1206:	fe 01       	movw	r30, r28
    1208:	ef 5a       	subi	r30, 0xAF	; 175
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	60 81       	ld	r22, Z
    120e:	71 81       	ldd	r23, Z+1	; 0x01
    1210:	82 81       	ldd	r24, Z+2	; 0x02
    1212:	93 81       	ldd	r25, Z+3	; 0x03
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e2       	ldi	r20, 0x20	; 32
    121a:	51 e4       	ldi	r21, 0x41	; 65
    121c:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	8e 01       	movw	r16, r28
    1226:	05 5b       	subi	r16, 0xB5	; 181
    1228:	1f 4f       	sbci	r17, 0xFF	; 255
    122a:	bc 01       	movw	r22, r24
    122c:	cd 01       	movw	r24, r26
    122e:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	f8 01       	movw	r30, r16
    1238:	91 83       	std	Z+1, r25	; 0x01
    123a:	80 83       	st	Z, r24
    123c:	1f c0       	rjmp	.+62     	; 0x127c <lcd_set_4bit+0x42e>
    123e:	fe 01       	movw	r30, r28
    1240:	e7 5b       	subi	r30, 0xB7	; 183
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	80 e7       	ldi	r24, 0x70	; 112
    1246:	91 e0       	ldi	r25, 0x01	; 1
    1248:	91 83       	std	Z+1, r25	; 0x01
    124a:	80 83       	st	Z, r24
    124c:	fe 01       	movw	r30, r28
    124e:	e7 5b       	subi	r30, 0xB7	; 183
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	80 81       	ld	r24, Z
    1254:	91 81       	ldd	r25, Z+1	; 0x01
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	f1 f7       	brne	.-4      	; 0x1256 <lcd_set_4bit+0x408>
    125a:	fe 01       	movw	r30, r28
    125c:	e7 5b       	subi	r30, 0xB7	; 183
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	91 83       	std	Z+1, r25	; 0x01
    1262:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1264:	de 01       	movw	r26, r28
    1266:	a5 5b       	subi	r26, 0xB5	; 181
    1268:	bf 4f       	sbci	r27, 0xFF	; 255
    126a:	fe 01       	movw	r30, r28
    126c:	e5 5b       	subi	r30, 0xB5	; 181
    126e:	ff 4f       	sbci	r31, 0xFF	; 255
    1270:	80 81       	ld	r24, Z
    1272:	91 81       	ldd	r25, Z+1	; 0x01
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	11 96       	adiw	r26, 0x01	; 1
    1278:	9c 93       	st	X, r25
    127a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    127c:	fe 01       	movw	r30, r28
    127e:	e5 5b       	subi	r30, 0xB5	; 181
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	80 81       	ld	r24, Z
    1284:	91 81       	ldd	r25, Z+1	; 0x01
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	d1 f6       	brne	.-76     	; 0x123e <lcd_set_4bit+0x3f0>
    128a:	27 c0       	rjmp	.+78     	; 0x12da <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    128c:	8e 01       	movw	r16, r28
    128e:	05 5b       	subi	r16, 0xB5	; 181
    1290:	1f 4f       	sbci	r17, 0xFF	; 255
    1292:	fe 01       	movw	r30, r28
    1294:	e3 5b       	subi	r30, 0xB3	; 179
    1296:	ff 4f       	sbci	r31, 0xFF	; 255
    1298:	60 81       	ld	r22, Z
    129a:	71 81       	ldd	r23, Z+1	; 0x01
    129c:	82 81       	ldd	r24, Z+2	; 0x02
    129e:	93 81       	ldd	r25, Z+3	; 0x03
    12a0:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	f8 01       	movw	r30, r16
    12aa:	91 83       	std	Z+1, r25	; 0x01
    12ac:	80 83       	st	Z, r24
    12ae:	de 01       	movw	r26, r28
    12b0:	a9 5b       	subi	r26, 0xB9	; 185
    12b2:	bf 4f       	sbci	r27, 0xFF	; 255
    12b4:	fe 01       	movw	r30, r28
    12b6:	e5 5b       	subi	r30, 0xB5	; 181
    12b8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ba:	80 81       	ld	r24, Z
    12bc:	91 81       	ldd	r25, Z+1	; 0x01
    12be:	8d 93       	st	X+, r24
    12c0:	9c 93       	st	X, r25
    12c2:	fe 01       	movw	r30, r28
    12c4:	e9 5b       	subi	r30, 0xB9	; 185
    12c6:	ff 4f       	sbci	r31, 0xFF	; 255
    12c8:	80 81       	ld	r24, Z
    12ca:	91 81       	ldd	r25, Z+1	; 0x01
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	f1 f7       	brne	.-4      	; 0x12cc <lcd_set_4bit+0x47e>
    12d0:	fe 01       	movw	r30, r28
    12d2:	e9 5b       	subi	r30, 0xB9	; 185
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	91 83       	std	Z+1, r25	; 0x01
    12d8:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    12da:	a8 e2       	ldi	r26, 0x28	; 40
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e8 e2       	ldi	r30, 0x28	; 40
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8e 7f       	andi	r24, 0xFE	; 254
    12e6:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    12e8:	a8 e2       	ldi	r26, 0x28	; 40
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e8 e2       	ldi	r30, 0x28	; 40
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	8d 7f       	andi	r24, 0xFD	; 253
    12f4:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
    12f6:	e8 e2       	ldi	r30, 0x28	; 40
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 e3       	ldi	r24, 0x30	; 48
    12fc:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    12fe:	a8 e2       	ldi	r26, 0x28	; 40
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e8 e2       	ldi	r30, 0x28	; 40
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	84 60       	ori	r24, 0x04	; 4
    130a:	8c 93       	st	X, r24
    130c:	fe 01       	movw	r30, r28
    130e:	ed 5b       	subi	r30, 0xBD	; 189
    1310:	ff 4f       	sbci	r31, 0xFF	; 255
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	a0 ea       	ldi	r26, 0xA0	; 160
    1318:	b0 e4       	ldi	r27, 0x40	; 64
    131a:	80 83       	st	Z, r24
    131c:	91 83       	std	Z+1, r25	; 0x01
    131e:	a2 83       	std	Z+2, r26	; 0x02
    1320:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1322:	8e 01       	movw	r16, r28
    1324:	01 5c       	subi	r16, 0xC1	; 193
    1326:	1f 4f       	sbci	r17, 0xFF	; 255
    1328:	fe 01       	movw	r30, r28
    132a:	ed 5b       	subi	r30, 0xBD	; 189
    132c:	ff 4f       	sbci	r31, 0xFF	; 255
    132e:	60 81       	ld	r22, Z
    1330:	71 81       	ldd	r23, Z+1	; 0x01
    1332:	82 81       	ldd	r24, Z+2	; 0x02
    1334:	93 81       	ldd	r25, Z+3	; 0x03
    1336:	26 e6       	ldi	r18, 0x66	; 102
    1338:	36 e6       	ldi	r19, 0x66	; 102
    133a:	46 e6       	ldi	r20, 0x66	; 102
    133c:	55 e4       	ldi	r21, 0x45	; 69
    133e:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	f8 01       	movw	r30, r16
    1348:	80 83       	st	Z, r24
    134a:	91 83       	std	Z+1, r25	; 0x01
    134c:	a2 83       	std	Z+2, r26	; 0x02
    134e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1350:	fe 01       	movw	r30, r28
    1352:	ff 96       	adiw	r30, 0x3f	; 63
    1354:	60 81       	ld	r22, Z
    1356:	71 81       	ldd	r23, Z+1	; 0x01
    1358:	82 81       	ldd	r24, Z+2	; 0x02
    135a:	93 81       	ldd	r25, Z+3	; 0x03
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	40 e8       	ldi	r20, 0x80	; 128
    1362:	5f e3       	ldi	r21, 0x3F	; 63
    1364:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    1368:	88 23       	and	r24, r24
    136a:	2c f4       	brge	.+10     	; 0x1376 <lcd_set_4bit+0x528>
		__ticks = 1;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	9e af       	std	Y+62, r25	; 0x3e
    1372:	8d af       	std	Y+61, r24	; 0x3d
    1374:	46 c0       	rjmp	.+140    	; 0x1402 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
    1376:	fe 01       	movw	r30, r28
    1378:	ff 96       	adiw	r30, 0x3f	; 63
    137a:	60 81       	ld	r22, Z
    137c:	71 81       	ldd	r23, Z+1	; 0x01
    137e:	82 81       	ldd	r24, Z+2	; 0x02
    1380:	93 81       	ldd	r25, Z+3	; 0x03
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	3f ef       	ldi	r19, 0xFF	; 255
    1386:	4f e7       	ldi	r20, 0x7F	; 127
    1388:	57 e4       	ldi	r21, 0x47	; 71
    138a:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    138e:	18 16       	cp	r1, r24
    1390:	64 f5       	brge	.+88     	; 0x13ea <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1392:	fe 01       	movw	r30, r28
    1394:	ed 5b       	subi	r30, 0xBD	; 189
    1396:	ff 4f       	sbci	r31, 0xFF	; 255
    1398:	60 81       	ld	r22, Z
    139a:	71 81       	ldd	r23, Z+1	; 0x01
    139c:	82 81       	ldd	r24, Z+2	; 0x02
    139e:	93 81       	ldd	r25, Z+3	; 0x03
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e2       	ldi	r20, 0x20	; 32
    13a6:	51 e4       	ldi	r21, 0x41	; 65
    13a8:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	bc 01       	movw	r22, r24
    13b2:	cd 01       	movw	r24, r26
    13b4:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	9e af       	std	Y+62, r25	; 0x3e
    13be:	8d af       	std	Y+61, r24	; 0x3d
    13c0:	0f c0       	rjmp	.+30     	; 0x13e0 <lcd_set_4bit+0x592>
    13c2:	80 e7       	ldi	r24, 0x70	; 112
    13c4:	91 e0       	ldi	r25, 0x01	; 1
    13c6:	9c af       	std	Y+60, r25	; 0x3c
    13c8:	8b af       	std	Y+59, r24	; 0x3b
    13ca:	8b ad       	ldd	r24, Y+59	; 0x3b
    13cc:	9c ad       	ldd	r25, Y+60	; 0x3c
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <lcd_set_4bit+0x580>
    13d2:	9c af       	std	Y+60, r25	; 0x3c
    13d4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    13d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    13da:	01 97       	sbiw	r24, 0x01	; 1
    13dc:	9e af       	std	Y+62, r25	; 0x3e
    13de:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    13e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	69 f7       	brne	.-38     	; 0x13c2 <lcd_set_4bit+0x574>
    13e8:	16 c0       	rjmp	.+44     	; 0x1416 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ea:	fe 01       	movw	r30, r28
    13ec:	ff 96       	adiw	r30, 0x3f	; 63
    13ee:	60 81       	ld	r22, Z
    13f0:	71 81       	ldd	r23, Z+1	; 0x01
    13f2:	82 81       	ldd	r24, Z+2	; 0x02
    13f4:	93 81       	ldd	r25, Z+3	; 0x03
    13f6:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	9e af       	std	Y+62, r25	; 0x3e
    1400:	8d af       	std	Y+61, r24	; 0x3d
    1402:	8d ad       	ldd	r24, Y+61	; 0x3d
    1404:	9e ad       	ldd	r25, Y+62	; 0x3e
    1406:	9a af       	std	Y+58, r25	; 0x3a
    1408:	89 af       	std	Y+57, r24	; 0x39
    140a:	89 ad       	ldd	r24, Y+57	; 0x39
    140c:	9a ad       	ldd	r25, Y+58	; 0x3a
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	f1 f7       	brne	.-4      	; 0x140e <lcd_set_4bit+0x5c0>
    1412:	9a af       	std	Y+58, r25	; 0x3a
    1414:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1416:	a8 e2       	ldi	r26, 0x28	; 40
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e8 e2       	ldi	r30, 0x28	; 40
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	8b 7f       	andi	r24, 0xFB	; 251
    1422:	8c 93       	st	X, r24
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	a0 e8       	ldi	r26, 0x80	; 128
    142a:	bf e3       	ldi	r27, 0x3F	; 63
    142c:	8d ab       	std	Y+53, r24	; 0x35
    142e:	9e ab       	std	Y+54, r25	; 0x36
    1430:	af ab       	std	Y+55, r26	; 0x37
    1432:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1434:	6d a9       	ldd	r22, Y+53	; 0x35
    1436:	7e a9       	ldd	r23, Y+54	; 0x36
    1438:	8f a9       	ldd	r24, Y+55	; 0x37
    143a:	98 ad       	ldd	r25, Y+56	; 0x38
    143c:	26 e6       	ldi	r18, 0x66	; 102
    143e:	36 e6       	ldi	r19, 0x66	; 102
    1440:	46 e6       	ldi	r20, 0x66	; 102
    1442:	55 e4       	ldi	r21, 0x45	; 69
    1444:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	89 ab       	std	Y+49, r24	; 0x31
    144e:	9a ab       	std	Y+50, r25	; 0x32
    1450:	ab ab       	std	Y+51, r26	; 0x33
    1452:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1454:	69 a9       	ldd	r22, Y+49	; 0x31
    1456:	7a a9       	ldd	r23, Y+50	; 0x32
    1458:	8b a9       	ldd	r24, Y+51	; 0x33
    145a:	9c a9       	ldd	r25, Y+52	; 0x34
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e8       	ldi	r20, 0x80	; 128
    1462:	5f e3       	ldi	r21, 0x3F	; 63
    1464:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    1468:	88 23       	and	r24, r24
    146a:	2c f4       	brge	.+10     	; 0x1476 <lcd_set_4bit+0x628>
		__ticks = 1;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	98 ab       	std	Y+48, r25	; 0x30
    1472:	8f a7       	std	Y+47, r24	; 0x2f
    1474:	3f c0       	rjmp	.+126    	; 0x14f4 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
    1476:	69 a9       	ldd	r22, Y+49	; 0x31
    1478:	7a a9       	ldd	r23, Y+50	; 0x32
    147a:	8b a9       	ldd	r24, Y+51	; 0x33
    147c:	9c a9       	ldd	r25, Y+52	; 0x34
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	3f ef       	ldi	r19, 0xFF	; 255
    1482:	4f e7       	ldi	r20, 0x7F	; 127
    1484:	57 e4       	ldi	r21, 0x47	; 71
    1486:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    148a:	18 16       	cp	r1, r24
    148c:	4c f5       	brge	.+82     	; 0x14e0 <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148e:	6d a9       	ldd	r22, Y+53	; 0x35
    1490:	7e a9       	ldd	r23, Y+54	; 0x36
    1492:	8f a9       	ldd	r24, Y+55	; 0x37
    1494:	98 ad       	ldd	r25, Y+56	; 0x38
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e2       	ldi	r20, 0x20	; 32
    149c:	51 e4       	ldi	r21, 0x41	; 65
    149e:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	98 ab       	std	Y+48, r25	; 0x30
    14b4:	8f a7       	std	Y+47, r24	; 0x2f
    14b6:	0f c0       	rjmp	.+30     	; 0x14d6 <lcd_set_4bit+0x688>
    14b8:	80 e7       	ldi	r24, 0x70	; 112
    14ba:	91 e0       	ldi	r25, 0x01	; 1
    14bc:	9e a7       	std	Y+46, r25	; 0x2e
    14be:	8d a7       	std	Y+45, r24	; 0x2d
    14c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    14c2:	9e a5       	ldd	r25, Y+46	; 0x2e
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <lcd_set_4bit+0x676>
    14c8:	9e a7       	std	Y+46, r25	; 0x2e
    14ca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ce:	98 a9       	ldd	r25, Y+48	; 0x30
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	98 ab       	std	Y+48, r25	; 0x30
    14d4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    14d8:	98 a9       	ldd	r25, Y+48	; 0x30
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	69 f7       	brne	.-38     	; 0x14b8 <lcd_set_4bit+0x66a>
    14de:	14 c0       	rjmp	.+40     	; 0x1508 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e0:	69 a9       	ldd	r22, Y+49	; 0x31
    14e2:	7a a9       	ldd	r23, Y+50	; 0x32
    14e4:	8b a9       	ldd	r24, Y+51	; 0x33
    14e6:	9c a9       	ldd	r25, Y+52	; 0x34
    14e8:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	98 ab       	std	Y+48, r25	; 0x30
    14f2:	8f a7       	std	Y+47, r24	; 0x2f
    14f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    14f6:	98 a9       	ldd	r25, Y+48	; 0x30
    14f8:	9c a7       	std	Y+44, r25	; 0x2c
    14fa:	8b a7       	std	Y+43, r24	; 0x2b
    14fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    14fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <lcd_set_4bit+0x6b2>
    1504:	9c a7       	std	Y+44, r25	; 0x2c
    1506:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    1508:	a8 e2       	ldi	r26, 0x28	; 40
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e8 e2       	ldi	r30, 0x28	; 40
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	8e 7f       	andi	r24, 0xFE	; 254
    1514:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    1516:	a8 e2       	ldi	r26, 0x28	; 40
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e8 e2       	ldi	r30, 0x28	; 40
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	8d 7f       	andi	r24, 0xFD	; 253
    1522:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
    1524:	e8 e2       	ldi	r30, 0x28	; 40
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 e3       	ldi	r24, 0x30	; 48
    152a:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    152c:	a8 e2       	ldi	r26, 0x28	; 40
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e8 e2       	ldi	r30, 0x28	; 40
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	84 60       	ori	r24, 0x04	; 4
    1538:	8c 93       	st	X, r24
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	a0 ea       	ldi	r26, 0xA0	; 160
    1540:	b0 e4       	ldi	r27, 0x40	; 64
    1542:	8f a3       	std	Y+39, r24	; 0x27
    1544:	98 a7       	std	Y+40, r25	; 0x28
    1546:	a9 a7       	std	Y+41, r26	; 0x29
    1548:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    154a:	6f a1       	ldd	r22, Y+39	; 0x27
    154c:	78 a5       	ldd	r23, Y+40	; 0x28
    154e:	89 a5       	ldd	r24, Y+41	; 0x29
    1550:	9a a5       	ldd	r25, Y+42	; 0x2a
    1552:	26 e6       	ldi	r18, 0x66	; 102
    1554:	36 e6       	ldi	r19, 0x66	; 102
    1556:	46 e6       	ldi	r20, 0x66	; 102
    1558:	55 e4       	ldi	r21, 0x45	; 69
    155a:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	8b a3       	std	Y+35, r24	; 0x23
    1564:	9c a3       	std	Y+36, r25	; 0x24
    1566:	ad a3       	std	Y+37, r26	; 0x25
    1568:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    156a:	6b a1       	ldd	r22, Y+35	; 0x23
    156c:	7c a1       	ldd	r23, Y+36	; 0x24
    156e:	8d a1       	ldd	r24, Y+37	; 0x25
    1570:	9e a1       	ldd	r25, Y+38	; 0x26
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	40 e8       	ldi	r20, 0x80	; 128
    1578:	5f e3       	ldi	r21, 0x3F	; 63
    157a:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    157e:	88 23       	and	r24, r24
    1580:	2c f4       	brge	.+10     	; 0x158c <lcd_set_4bit+0x73e>
		__ticks = 1;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	9a a3       	std	Y+34, r25	; 0x22
    1588:	89 a3       	std	Y+33, r24	; 0x21
    158a:	3f c0       	rjmp	.+126    	; 0x160a <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
    158c:	6b a1       	ldd	r22, Y+35	; 0x23
    158e:	7c a1       	ldd	r23, Y+36	; 0x24
    1590:	8d a1       	ldd	r24, Y+37	; 0x25
    1592:	9e a1       	ldd	r25, Y+38	; 0x26
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	3f ef       	ldi	r19, 0xFF	; 255
    1598:	4f e7       	ldi	r20, 0x7F	; 127
    159a:	57 e4       	ldi	r21, 0x47	; 71
    159c:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    15a0:	18 16       	cp	r1, r24
    15a2:	4c f5       	brge	.+82     	; 0x15f6 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a4:	6f a1       	ldd	r22, Y+39	; 0x27
    15a6:	78 a5       	ldd	r23, Y+40	; 0x28
    15a8:	89 a5       	ldd	r24, Y+41	; 0x29
    15aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e2       	ldi	r20, 0x20	; 32
    15b2:	51 e4       	ldi	r21, 0x41	; 65
    15b4:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	bc 01       	movw	r22, r24
    15be:	cd 01       	movw	r24, r26
    15c0:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	9a a3       	std	Y+34, r25	; 0x22
    15ca:	89 a3       	std	Y+33, r24	; 0x21
    15cc:	0f c0       	rjmp	.+30     	; 0x15ec <lcd_set_4bit+0x79e>
    15ce:	80 e7       	ldi	r24, 0x70	; 112
    15d0:	91 e0       	ldi	r25, 0x01	; 1
    15d2:	98 a3       	std	Y+32, r25	; 0x20
    15d4:	8f 8f       	std	Y+31, r24	; 0x1f
    15d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15d8:	98 a1       	ldd	r25, Y+32	; 0x20
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <lcd_set_4bit+0x78c>
    15de:	98 a3       	std	Y+32, r25	; 0x20
    15e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e2:	89 a1       	ldd	r24, Y+33	; 0x21
    15e4:	9a a1       	ldd	r25, Y+34	; 0x22
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	9a a3       	std	Y+34, r25	; 0x22
    15ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ec:	89 a1       	ldd	r24, Y+33	; 0x21
    15ee:	9a a1       	ldd	r25, Y+34	; 0x22
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	69 f7       	brne	.-38     	; 0x15ce <lcd_set_4bit+0x780>
    15f4:	14 c0       	rjmp	.+40     	; 0x161e <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f6:	6b a1       	ldd	r22, Y+35	; 0x23
    15f8:	7c a1       	ldd	r23, Y+36	; 0x24
    15fa:	8d a1       	ldd	r24, Y+37	; 0x25
    15fc:	9e a1       	ldd	r25, Y+38	; 0x26
    15fe:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	9a a3       	std	Y+34, r25	; 0x22
    1608:	89 a3       	std	Y+33, r24	; 0x21
    160a:	89 a1       	ldd	r24, Y+33	; 0x21
    160c:	9a a1       	ldd	r25, Y+34	; 0x22
    160e:	9e 8f       	std	Y+30, r25	; 0x1e
    1610:	8d 8f       	std	Y+29, r24	; 0x1d
    1612:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1614:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	f1 f7       	brne	.-4      	; 0x1616 <lcd_set_4bit+0x7c8>
    161a:	9e 8f       	std	Y+30, r25	; 0x1e
    161c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    161e:	a8 e2       	ldi	r26, 0x28	; 40
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e8 e2       	ldi	r30, 0x28	; 40
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	8b 7f       	andi	r24, 0xFB	; 251
    162a:	8c 93       	st	X, r24
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	a0 e8       	ldi	r26, 0x80	; 128
    1632:	bf e3       	ldi	r27, 0x3F	; 63
    1634:	89 8f       	std	Y+25, r24	; 0x19
    1636:	9a 8f       	std	Y+26, r25	; 0x1a
    1638:	ab 8f       	std	Y+27, r26	; 0x1b
    163a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163c:	69 8d       	ldd	r22, Y+25	; 0x19
    163e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1640:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1642:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1644:	26 e6       	ldi	r18, 0x66	; 102
    1646:	36 e6       	ldi	r19, 0x66	; 102
    1648:	46 e6       	ldi	r20, 0x66	; 102
    164a:	55 e4       	ldi	r21, 0x45	; 69
    164c:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	8d 8b       	std	Y+21, r24	; 0x15
    1656:	9e 8b       	std	Y+22, r25	; 0x16
    1658:	af 8b       	std	Y+23, r26	; 0x17
    165a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    165c:	6d 89       	ldd	r22, Y+21	; 0x15
    165e:	7e 89       	ldd	r23, Y+22	; 0x16
    1660:	8f 89       	ldd	r24, Y+23	; 0x17
    1662:	98 8d       	ldd	r25, Y+24	; 0x18
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e8       	ldi	r20, 0x80	; 128
    166a:	5f e3       	ldi	r21, 0x3F	; 63
    166c:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    1670:	88 23       	and	r24, r24
    1672:	2c f4       	brge	.+10     	; 0x167e <lcd_set_4bit+0x830>
		__ticks = 1;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	9c 8b       	std	Y+20, r25	; 0x14
    167a:	8b 8b       	std	Y+19, r24	; 0x13
    167c:	3f c0       	rjmp	.+126    	; 0x16fc <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
    167e:	6d 89       	ldd	r22, Y+21	; 0x15
    1680:	7e 89       	ldd	r23, Y+22	; 0x16
    1682:	8f 89       	ldd	r24, Y+23	; 0x17
    1684:	98 8d       	ldd	r25, Y+24	; 0x18
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	3f ef       	ldi	r19, 0xFF	; 255
    168a:	4f e7       	ldi	r20, 0x7F	; 127
    168c:	57 e4       	ldi	r21, 0x47	; 71
    168e:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    1692:	18 16       	cp	r1, r24
    1694:	4c f5       	brge	.+82     	; 0x16e8 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1696:	69 8d       	ldd	r22, Y+25	; 0x19
    1698:	7a 8d       	ldd	r23, Y+26	; 0x1a
    169a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    169c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e2       	ldi	r20, 0x20	; 32
    16a4:	51 e4       	ldi	r21, 0x41	; 65
    16a6:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	bc 01       	movw	r22, r24
    16b0:	cd 01       	movw	r24, r26
    16b2:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	9c 8b       	std	Y+20, r25	; 0x14
    16bc:	8b 8b       	std	Y+19, r24	; 0x13
    16be:	0f c0       	rjmp	.+30     	; 0x16de <lcd_set_4bit+0x890>
    16c0:	80 e7       	ldi	r24, 0x70	; 112
    16c2:	91 e0       	ldi	r25, 0x01	; 1
    16c4:	9a 8b       	std	Y+18, r25	; 0x12
    16c6:	89 8b       	std	Y+17, r24	; 0x11
    16c8:	89 89       	ldd	r24, Y+17	; 0x11
    16ca:	9a 89       	ldd	r25, Y+18	; 0x12
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <lcd_set_4bit+0x87e>
    16d0:	9a 8b       	std	Y+18, r25	; 0x12
    16d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d4:	8b 89       	ldd	r24, Y+19	; 0x13
    16d6:	9c 89       	ldd	r25, Y+20	; 0x14
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	9c 8b       	std	Y+20, r25	; 0x14
    16dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16de:	8b 89       	ldd	r24, Y+19	; 0x13
    16e0:	9c 89       	ldd	r25, Y+20	; 0x14
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	69 f7       	brne	.-38     	; 0x16c0 <lcd_set_4bit+0x872>
    16e6:	14 c0       	rjmp	.+40     	; 0x1710 <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e8:	6d 89       	ldd	r22, Y+21	; 0x15
    16ea:	7e 89       	ldd	r23, Y+22	; 0x16
    16ec:	8f 89       	ldd	r24, Y+23	; 0x17
    16ee:	98 8d       	ldd	r25, Y+24	; 0x18
    16f0:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	9c 8b       	std	Y+20, r25	; 0x14
    16fa:	8b 8b       	std	Y+19, r24	; 0x13
    16fc:	8b 89       	ldd	r24, Y+19	; 0x13
    16fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1700:	98 8b       	std	Y+16, r25	; 0x10
    1702:	8f 87       	std	Y+15, r24	; 0x0f
    1704:	8f 85       	ldd	r24, Y+15	; 0x0f
    1706:	98 89       	ldd	r25, Y+16	; 0x10
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <lcd_set_4bit+0x8ba>
    170c:	98 8b       	std	Y+16, r25	; 0x10
    170e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    1710:	a8 e2       	ldi	r26, 0x28	; 40
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e8 e2       	ldi	r30, 0x28	; 40
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	8e 7f       	andi	r24, 0xFE	; 254
    171c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    171e:	a8 e2       	ldi	r26, 0x28	; 40
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e8 e2       	ldi	r30, 0x28	; 40
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	8d 7f       	andi	r24, 0xFD	; 253
    172a:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
    172c:	e8 e2       	ldi	r30, 0x28	; 40
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 e2       	ldi	r24, 0x20	; 32
    1732:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    1734:	a8 e2       	ldi	r26, 0x28	; 40
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e8 e2       	ldi	r30, 0x28	; 40
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	84 60       	ori	r24, 0x04	; 4
    1740:	8c 93       	st	X, r24
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	a0 ea       	ldi	r26, 0xA0	; 160
    1748:	b0 e4       	ldi	r27, 0x40	; 64
    174a:	8b 87       	std	Y+11, r24	; 0x0b
    174c:	9c 87       	std	Y+12, r25	; 0x0c
    174e:	ad 87       	std	Y+13, r26	; 0x0d
    1750:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1752:	6b 85       	ldd	r22, Y+11	; 0x0b
    1754:	7c 85       	ldd	r23, Y+12	; 0x0c
    1756:	8d 85       	ldd	r24, Y+13	; 0x0d
    1758:	9e 85       	ldd	r25, Y+14	; 0x0e
    175a:	26 e6       	ldi	r18, 0x66	; 102
    175c:	36 e6       	ldi	r19, 0x66	; 102
    175e:	46 e6       	ldi	r20, 0x66	; 102
    1760:	55 e4       	ldi	r21, 0x45	; 69
    1762:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	8f 83       	std	Y+7, r24	; 0x07
    176c:	98 87       	std	Y+8, r25	; 0x08
    176e:	a9 87       	std	Y+9, r26	; 0x09
    1770:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1772:	6f 81       	ldd	r22, Y+7	; 0x07
    1774:	78 85       	ldd	r23, Y+8	; 0x08
    1776:	89 85       	ldd	r24, Y+9	; 0x09
    1778:	9a 85       	ldd	r25, Y+10	; 0x0a
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e8       	ldi	r20, 0x80	; 128
    1780:	5f e3       	ldi	r21, 0x3F	; 63
    1782:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    1786:	88 23       	and	r24, r24
    1788:	2c f4       	brge	.+10     	; 0x1794 <lcd_set_4bit+0x946>
		__ticks = 1;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	9e 83       	std	Y+6, r25	; 0x06
    1790:	8d 83       	std	Y+5, r24	; 0x05
    1792:	3f c0       	rjmp	.+126    	; 0x1812 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
    1794:	6f 81       	ldd	r22, Y+7	; 0x07
    1796:	78 85       	ldd	r23, Y+8	; 0x08
    1798:	89 85       	ldd	r24, Y+9	; 0x09
    179a:	9a 85       	ldd	r25, Y+10	; 0x0a
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	3f ef       	ldi	r19, 0xFF	; 255
    17a0:	4f e7       	ldi	r20, 0x7F	; 127
    17a2:	57 e4       	ldi	r21, 0x47	; 71
    17a4:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    17a8:	18 16       	cp	r1, r24
    17aa:	4c f5       	brge	.+82     	; 0x17fe <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e2       	ldi	r20, 0x20	; 32
    17ba:	51 e4       	ldi	r21, 0x41	; 65
    17bc:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	bc 01       	movw	r22, r24
    17c6:	cd 01       	movw	r24, r26
    17c8:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	9e 83       	std	Y+6, r25	; 0x06
    17d2:	8d 83       	std	Y+5, r24	; 0x05
    17d4:	0f c0       	rjmp	.+30     	; 0x17f4 <lcd_set_4bit+0x9a6>
    17d6:	80 e7       	ldi	r24, 0x70	; 112
    17d8:	91 e0       	ldi	r25, 0x01	; 1
    17da:	9c 83       	std	Y+4, r25	; 0x04
    17dc:	8b 83       	std	Y+3, r24	; 0x03
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	f1 f7       	brne	.-4      	; 0x17e2 <lcd_set_4bit+0x994>
    17e6:	9c 83       	std	Y+4, r25	; 0x04
    17e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ea:	8d 81       	ldd	r24, Y+5	; 0x05
    17ec:	9e 81       	ldd	r25, Y+6	; 0x06
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f4:	8d 81       	ldd	r24, Y+5	; 0x05
    17f6:	9e 81       	ldd	r25, Y+6	; 0x06
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	69 f7       	brne	.-38     	; 0x17d6 <lcd_set_4bit+0x988>
    17fc:	14 c0       	rjmp	.+40     	; 0x1826 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1800:	78 85       	ldd	r23, Y+8	; 0x08
    1802:	89 85       	ldd	r24, Y+9	; 0x09
    1804:	9a 85       	ldd	r25, Y+10	; 0x0a
    1806:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	9e 83       	std	Y+6, r25	; 0x06
    1810:	8d 83       	std	Y+5, r24	; 0x05
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	9e 81       	ldd	r25, Y+6	; 0x06
    1816:	9a 83       	std	Y+2, r25	; 0x02
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	9a 81       	ldd	r25, Y+2	; 0x02
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	f1 f7       	brne	.-4      	; 0x181e <lcd_set_4bit+0x9d0>
    1822:	9a 83       	std	Y+2, r25	; 0x02
    1824:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1826:	a8 e2       	ldi	r26, 0x28	; 40
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e8 e2       	ldi	r30, 0x28	; 40
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	8b 7f       	andi	r24, 0xFB	; 251
    1832:	8c 93       	st	X, r24


}
    1834:	c0 59       	subi	r28, 0x90	; 144
    1836:	df 4f       	sbci	r29, 0xFF	; 255
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	08 95       	ret

0000184c <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	2e 97       	sbiw	r28, 0x0e	; 14
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
	lcd_set_4bit();
    1860:	0e 94 27 07 	call	0xe4e	; 0xe4e <lcd_set_4bit>
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	a0 e8       	ldi	r26, 0x80	; 128
    186a:	bf e3       	ldi	r27, 0x3F	; 63
    186c:	8b 87       	std	Y+11, r24	; 0x0b
    186e:	9c 87       	std	Y+12, r25	; 0x0c
    1870:	ad 87       	std	Y+13, r26	; 0x0d
    1872:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1874:	6b 85       	ldd	r22, Y+11	; 0x0b
    1876:	7c 85       	ldd	r23, Y+12	; 0x0c
    1878:	8d 85       	ldd	r24, Y+13	; 0x0d
    187a:	9e 85       	ldd	r25, Y+14	; 0x0e
    187c:	26 e6       	ldi	r18, 0x66	; 102
    187e:	36 e6       	ldi	r19, 0x66	; 102
    1880:	46 e6       	ldi	r20, 0x66	; 102
    1882:	55 e4       	ldi	r21, 0x45	; 69
    1884:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	8f 83       	std	Y+7, r24	; 0x07
    188e:	98 87       	std	Y+8, r25	; 0x08
    1890:	a9 87       	std	Y+9, r26	; 0x09
    1892:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1894:	6f 81       	ldd	r22, Y+7	; 0x07
    1896:	78 85       	ldd	r23, Y+8	; 0x08
    1898:	89 85       	ldd	r24, Y+9	; 0x09
    189a:	9a 85       	ldd	r25, Y+10	; 0x0a
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	40 e8       	ldi	r20, 0x80	; 128
    18a2:	5f e3       	ldi	r21, 0x3F	; 63
    18a4:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    18a8:	88 23       	and	r24, r24
    18aa:	2c f4       	brge	.+10     	; 0x18b6 <lcd_init+0x6a>
		__ticks = 1;
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	9e 83       	std	Y+6, r25	; 0x06
    18b2:	8d 83       	std	Y+5, r24	; 0x05
    18b4:	3f c0       	rjmp	.+126    	; 0x1934 <lcd_init+0xe8>
	else if (__tmp > 65535)
    18b6:	6f 81       	ldd	r22, Y+7	; 0x07
    18b8:	78 85       	ldd	r23, Y+8	; 0x08
    18ba:	89 85       	ldd	r24, Y+9	; 0x09
    18bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	3f ef       	ldi	r19, 0xFF	; 255
    18c2:	4f e7       	ldi	r20, 0x7F	; 127
    18c4:	57 e4       	ldi	r21, 0x47	; 71
    18c6:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    18ca:	18 16       	cp	r1, r24
    18cc:	4c f5       	brge	.+82     	; 0x1920 <lcd_init+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e2       	ldi	r20, 0x20	; 32
    18dc:	51 e4       	ldi	r21, 0x41	; 65
    18de:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	bc 01       	movw	r22, r24
    18e8:	cd 01       	movw	r24, r26
    18ea:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	9e 83       	std	Y+6, r25	; 0x06
    18f4:	8d 83       	std	Y+5, r24	; 0x05
    18f6:	0f c0       	rjmp	.+30     	; 0x1916 <lcd_init+0xca>
    18f8:	80 e7       	ldi	r24, 0x70	; 112
    18fa:	91 e0       	ldi	r25, 0x01	; 1
    18fc:	9c 83       	std	Y+4, r25	; 0x04
    18fe:	8b 83       	std	Y+3, r24	; 0x03
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	9c 81       	ldd	r25, Y+4	; 0x04
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	f1 f7       	brne	.-4      	; 0x1904 <lcd_init+0xb8>
    1908:	9c 83       	std	Y+4, r25	; 0x04
    190a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190c:	8d 81       	ldd	r24, Y+5	; 0x05
    190e:	9e 81       	ldd	r25, Y+6	; 0x06
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	9e 83       	std	Y+6, r25	; 0x06
    1914:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1916:	8d 81       	ldd	r24, Y+5	; 0x05
    1918:	9e 81       	ldd	r25, Y+6	; 0x06
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	69 f7       	brne	.-38     	; 0x18f8 <lcd_init+0xac>
    191e:	14 c0       	rjmp	.+40     	; 0x1948 <lcd_init+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1920:	6f 81       	ldd	r22, Y+7	; 0x07
    1922:	78 85       	ldd	r23, Y+8	; 0x08
    1924:	89 85       	ldd	r24, Y+9	; 0x09
    1926:	9a 85       	ldd	r25, Y+10	; 0x0a
    1928:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	9e 83       	std	Y+6, r25	; 0x06
    1932:	8d 83       	std	Y+5, r24	; 0x05
    1934:	8d 81       	ldd	r24, Y+5	; 0x05
    1936:	9e 81       	ldd	r25, Y+6	; 0x06
    1938:	9a 83       	std	Y+2, r25	; 0x02
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	9a 81       	ldd	r25, Y+2	; 0x02
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	f1 f7       	brne	.-4      	; 0x1940 <lcd_init+0xf4>
    1944:	9a 83       	std	Y+2, r25	; 0x02
    1946:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
    1948:	88 e2       	ldi	r24, 0x28	; 40
    194a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <lcd_wr_command>
	lcd_wr_command(0x01);
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	0e 94 bc 0c 	call	0x1978	; 0x1978 <lcd_wr_command>
	lcd_wr_command(0x06);
    1954:	86 e0       	ldi	r24, 0x06	; 6
    1956:	0e 94 bc 0c 	call	0x1978	; 0x1978 <lcd_wr_command>
	lcd_wr_command(0x0E);
    195a:	8e e0       	ldi	r24, 0x0E	; 14
    195c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <lcd_wr_command>
	lcd_wr_command(0x80);
    1960:	80 e8       	ldi	r24, 0x80	; 128
    1962:	0e 94 bc 0c 	call	0x1978	; 0x1978 <lcd_wr_command>

}
    1966:	2e 96       	adiw	r28, 0x0e	; 14
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <lcd_wr_command>:


//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	6e 97       	sbiw	r28, 0x1e	; 30
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
    198e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1990:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
    1992:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1994:	80 7f       	andi	r24, 0xF0	; 240
    1996:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    1998:	a8 e2       	ldi	r26, 0x28	; 40
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e8 e2       	ldi	r30, 0x28	; 40
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	8f 70       	andi	r24, 0x0F	; 15
    19a4:	8c 93       	st	X, r24
	lcd_port |= temp;
    19a6:	a8 e2       	ldi	r26, 0x28	; 40
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e8 e2       	ldi	r30, 0x28	; 40
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	90 81       	ld	r25, Z
    19b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19b2:	89 2b       	or	r24, r25
    19b4:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    19b6:	a8 e2       	ldi	r26, 0x28	; 40
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e8 e2       	ldi	r30, 0x28	; 40
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	8e 7f       	andi	r24, 0xFE	; 254
    19c2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    19c4:	a8 e2       	ldi	r26, 0x28	; 40
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e8 e2       	ldi	r30, 0x28	; 40
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	8d 7f       	andi	r24, 0xFD	; 253
    19d0:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    19d2:	a8 e2       	ldi	r26, 0x28	; 40
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e8 e2       	ldi	r30, 0x28	; 40
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	84 60       	ori	r24, 0x04	; 4
    19de:	8c 93       	st	X, r24
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	a0 ea       	ldi	r26, 0xA0	; 160
    19e6:	b0 e4       	ldi	r27, 0x40	; 64
    19e8:	89 8f       	std	Y+25, r24	; 0x19
    19ea:	9a 8f       	std	Y+26, r25	; 0x1a
    19ec:	ab 8f       	std	Y+27, r26	; 0x1b
    19ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f0:	69 8d       	ldd	r22, Y+25	; 0x19
    19f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19f8:	26 e6       	ldi	r18, 0x66	; 102
    19fa:	36 e6       	ldi	r19, 0x66	; 102
    19fc:	46 e6       	ldi	r20, 0x66	; 102
    19fe:	55 e4       	ldi	r21, 0x45	; 69
    1a00:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	8d 8b       	std	Y+21, r24	; 0x15
    1a0a:	9e 8b       	std	Y+22, r25	; 0x16
    1a0c:	af 8b       	std	Y+23, r26	; 0x17
    1a0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a10:	6d 89       	ldd	r22, Y+21	; 0x15
    1a12:	7e 89       	ldd	r23, Y+22	; 0x16
    1a14:	8f 89       	ldd	r24, Y+23	; 0x17
    1a16:	98 8d       	ldd	r25, Y+24	; 0x18
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	40 e8       	ldi	r20, 0x80	; 128
    1a1e:	5f e3       	ldi	r21, 0x3F	; 63
    1a20:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    1a24:	88 23       	and	r24, r24
    1a26:	2c f4       	brge	.+10     	; 0x1a32 <lcd_wr_command+0xba>
		__ticks = 1;
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	9c 8b       	std	Y+20, r25	; 0x14
    1a2e:	8b 8b       	std	Y+19, r24	; 0x13
    1a30:	3f c0       	rjmp	.+126    	; 0x1ab0 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
    1a32:	6d 89       	ldd	r22, Y+21	; 0x15
    1a34:	7e 89       	ldd	r23, Y+22	; 0x16
    1a36:	8f 89       	ldd	r24, Y+23	; 0x17
    1a38:	98 8d       	ldd	r25, Y+24	; 0x18
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	3f ef       	ldi	r19, 0xFF	; 255
    1a3e:	4f e7       	ldi	r20, 0x7F	; 127
    1a40:	57 e4       	ldi	r21, 0x47	; 71
    1a42:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    1a46:	18 16       	cp	r1, r24
    1a48:	4c f5       	brge	.+82     	; 0x1a9c <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e2       	ldi	r20, 0x20	; 32
    1a58:	51 e4       	ldi	r21, 0x41	; 65
    1a5a:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	bc 01       	movw	r22, r24
    1a64:	cd 01       	movw	r24, r26
    1a66:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	9c 8b       	std	Y+20, r25	; 0x14
    1a70:	8b 8b       	std	Y+19, r24	; 0x13
    1a72:	0f c0       	rjmp	.+30     	; 0x1a92 <lcd_wr_command+0x11a>
    1a74:	80 e7       	ldi	r24, 0x70	; 112
    1a76:	91 e0       	ldi	r25, 0x01	; 1
    1a78:	9a 8b       	std	Y+18, r25	; 0x12
    1a7a:	89 8b       	std	Y+17, r24	; 0x11
    1a7c:	89 89       	ldd	r24, Y+17	; 0x11
    1a7e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	f1 f7       	brne	.-4      	; 0x1a80 <lcd_wr_command+0x108>
    1a84:	9a 8b       	std	Y+18, r25	; 0x12
    1a86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a88:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	9c 8b       	std	Y+20, r25	; 0x14
    1a90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a92:	8b 89       	ldd	r24, Y+19	; 0x13
    1a94:	9c 89       	ldd	r25, Y+20	; 0x14
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	69 f7       	brne	.-38     	; 0x1a74 <lcd_wr_command+0xfc>
    1a9a:	14 c0       	rjmp	.+40     	; 0x1ac4 <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa0:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa2:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa4:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	9c 8b       	std	Y+20, r25	; 0x14
    1aae:	8b 8b       	std	Y+19, r24	; 0x13
    1ab0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab4:	98 8b       	std	Y+16, r25	; 0x10
    1ab6:	8f 87       	std	Y+15, r24	; 0x0f
    1ab8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aba:	98 89       	ldd	r25, Y+16	; 0x10
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	f1 f7       	brne	.-4      	; 0x1abc <lcd_wr_command+0x144>
    1ac0:	98 8b       	std	Y+16, r25	; 0x10
    1ac2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1ac4:	a8 e2       	ldi	r26, 0x28	; 40
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e8 e2       	ldi	r30, 0x28	; 40
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	8b 7f       	andi	r24, 0xFB	; 251
    1ad0:	8c 93       	st	X, r24

	cmd = cmd & 0x0F;
    1ad2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ad4:	8f 70       	andi	r24, 0x0F	; 15
    1ad6:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    1ad8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ada:	82 95       	swap	r24
    1adc:	80 7f       	andi	r24, 0xF0	; 240
    1ade:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1ae0:	a8 e2       	ldi	r26, 0x28	; 40
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e8 e2       	ldi	r30, 0x28	; 40
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	8f 70       	andi	r24, 0x0F	; 15
    1aec:	8c 93       	st	X, r24
	lcd_port |= cmd;
    1aee:	a8 e2       	ldi	r26, 0x28	; 40
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	e8 e2       	ldi	r30, 0x28	; 40
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	90 81       	ld	r25, Z
    1af8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1afa:	89 2b       	or	r24, r25
    1afc:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    1afe:	a8 e2       	ldi	r26, 0x28	; 40
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e8 e2       	ldi	r30, 0x28	; 40
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	8e 7f       	andi	r24, 0xFE	; 254
    1b0a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1b0c:	a8 e2       	ldi	r26, 0x28	; 40
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e8 e2       	ldi	r30, 0x28	; 40
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	8d 7f       	andi	r24, 0xFD	; 253
    1b18:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1b1a:	a8 e2       	ldi	r26, 0x28	; 40
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e8 e2       	ldi	r30, 0x28	; 40
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	84 60       	ori	r24, 0x04	; 4
    1b26:	8c 93       	st	X, r24
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	a0 ea       	ldi	r26, 0xA0	; 160
    1b2e:	b0 e4       	ldi	r27, 0x40	; 64
    1b30:	8b 87       	std	Y+11, r24	; 0x0b
    1b32:	9c 87       	std	Y+12, r25	; 0x0c
    1b34:	ad 87       	std	Y+13, r26	; 0x0d
    1b36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b40:	26 e6       	ldi	r18, 0x66	; 102
    1b42:	36 e6       	ldi	r19, 0x66	; 102
    1b44:	46 e6       	ldi	r20, 0x66	; 102
    1b46:	55 e4       	ldi	r21, 0x45	; 69
    1b48:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	8f 83       	std	Y+7, r24	; 0x07
    1b52:	98 87       	std	Y+8, r25	; 0x08
    1b54:	a9 87       	std	Y+9, r26	; 0x09
    1b56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b58:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5a:	78 85       	ldd	r23, Y+8	; 0x08
    1b5c:	89 85       	ldd	r24, Y+9	; 0x09
    1b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e8       	ldi	r20, 0x80	; 128
    1b66:	5f e3       	ldi	r21, 0x3F	; 63
    1b68:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    1b6c:	88 23       	and	r24, r24
    1b6e:	2c f4       	brge	.+10     	; 0x1b7a <lcd_wr_command+0x202>
		__ticks = 1;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	9e 83       	std	Y+6, r25	; 0x06
    1b76:	8d 83       	std	Y+5, r24	; 0x05
    1b78:	3f c0       	rjmp	.+126    	; 0x1bf8 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
    1b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7c:	78 85       	ldd	r23, Y+8	; 0x08
    1b7e:	89 85       	ldd	r24, Y+9	; 0x09
    1b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	3f ef       	ldi	r19, 0xFF	; 255
    1b86:	4f e7       	ldi	r20, 0x7F	; 127
    1b88:	57 e4       	ldi	r21, 0x47	; 71
    1b8a:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    1b8e:	18 16       	cp	r1, r24
    1b90:	4c f5       	brge	.+82     	; 0x1be4 <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e2       	ldi	r20, 0x20	; 32
    1ba0:	51 e4       	ldi	r21, 0x41	; 65
    1ba2:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	bc 01       	movw	r22, r24
    1bac:	cd 01       	movw	r24, r26
    1bae:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	9e 83       	std	Y+6, r25	; 0x06
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
    1bba:	0f c0       	rjmp	.+30     	; 0x1bda <lcd_wr_command+0x262>
    1bbc:	80 e7       	ldi	r24, 0x70	; 112
    1bbe:	91 e0       	ldi	r25, 0x01	; 1
    1bc0:	9c 83       	std	Y+4, r25	; 0x04
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <lcd_wr_command+0x250>
    1bcc:	9c 83       	std	Y+4, r25	; 0x04
    1bce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	9e 83       	std	Y+6, r25	; 0x06
    1bd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bda:	8d 81       	ldd	r24, Y+5	; 0x05
    1bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	69 f7       	brne	.-38     	; 0x1bbc <lcd_wr_command+0x244>
    1be2:	14 c0       	rjmp	.+40     	; 0x1c0c <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be4:	6f 81       	ldd	r22, Y+7	; 0x07
    1be6:	78 85       	ldd	r23, Y+8	; 0x08
    1be8:	89 85       	ldd	r24, Y+9	; 0x09
    1bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bec:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	9e 83       	std	Y+6, r25	; 0x06
    1bf6:	8d 83       	std	Y+5, r24	; 0x05
    1bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfc:	9a 83       	std	Y+2, r25	; 0x02
    1bfe:	89 83       	std	Y+1, r24	; 0x01
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	9a 81       	ldd	r25, Y+2	; 0x02
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <lcd_wr_command+0x28c>
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1c0c:	a8 e2       	ldi	r26, 0x28	; 40
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e8 e2       	ldi	r30, 0x28	; 40
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	8b 7f       	andi	r24, 0xFB	; 251
    1c18:	8c 93       	st	X, r24
}
    1c1a:	6e 96       	adiw	r28, 0x1e	; 30
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	6e 97       	sbiw	r28, 0x1e	; 30
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    1c42:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c44:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
    1c46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c48:	80 7f       	andi	r24, 0xF0	; 240
    1c4a:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    1c4c:	a8 e2       	ldi	r26, 0x28	; 40
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e8 e2       	ldi	r30, 0x28	; 40
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	8f 70       	andi	r24, 0x0F	; 15
    1c58:	8c 93       	st	X, r24
	lcd_port |= temp;
    1c5a:	a8 e2       	ldi	r26, 0x28	; 40
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	e8 e2       	ldi	r30, 0x28	; 40
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	98 2f       	mov	r25, r24
    1c66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c68:	89 2b       	or	r24, r25
    1c6a:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    1c6c:	a8 e2       	ldi	r26, 0x28	; 40
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e8 e2       	ldi	r30, 0x28	; 40
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	81 60       	ori	r24, 0x01	; 1
    1c78:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1c7a:	a8 e2       	ldi	r26, 0x28	; 40
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e8 e2       	ldi	r30, 0x28	; 40
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	8d 7f       	andi	r24, 0xFD	; 253
    1c86:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1c88:	a8 e2       	ldi	r26, 0x28	; 40
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e8 e2       	ldi	r30, 0x28	; 40
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	84 60       	ori	r24, 0x04	; 4
    1c94:	8c 93       	st	X, r24
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	a0 ea       	ldi	r26, 0xA0	; 160
    1c9c:	b0 e4       	ldi	r27, 0x40	; 64
    1c9e:	89 8f       	std	Y+25, r24	; 0x19
    1ca0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ca2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ca4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1caa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cae:	26 e6       	ldi	r18, 0x66	; 102
    1cb0:	36 e6       	ldi	r19, 0x66	; 102
    1cb2:	46 e6       	ldi	r20, 0x66	; 102
    1cb4:	55 e4       	ldi	r21, 0x45	; 69
    1cb6:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	8d 8b       	std	Y+21, r24	; 0x15
    1cc0:	9e 8b       	std	Y+22, r25	; 0x16
    1cc2:	af 8b       	std	Y+23, r26	; 0x17
    1cc4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cc6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cca:	8f 89       	ldd	r24, Y+23	; 0x17
    1ccc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e8       	ldi	r20, 0x80	; 128
    1cd4:	5f e3       	ldi	r21, 0x3F	; 63
    1cd6:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    1cda:	88 23       	and	r24, r24
    1cdc:	2c f4       	brge	.+10     	; 0x1ce8 <lcd_wr_char+0xbc>
		__ticks = 1;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	9c 8b       	std	Y+20, r25	; 0x14
    1ce4:	8b 8b       	std	Y+19, r24	; 0x13
    1ce6:	3f c0       	rjmp	.+126    	; 0x1d66 <lcd_wr_char+0x13a>
	else if (__tmp > 65535)
    1ce8:	6d 89       	ldd	r22, Y+21	; 0x15
    1cea:	7e 89       	ldd	r23, Y+22	; 0x16
    1cec:	8f 89       	ldd	r24, Y+23	; 0x17
    1cee:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	3f ef       	ldi	r19, 0xFF	; 255
    1cf4:	4f e7       	ldi	r20, 0x7F	; 127
    1cf6:	57 e4       	ldi	r21, 0x47	; 71
    1cf8:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    1cfc:	18 16       	cp	r1, r24
    1cfe:	4c f5       	brge	.+82     	; 0x1d52 <lcd_wr_char+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d00:	69 8d       	ldd	r22, Y+25	; 0x19
    1d02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e2       	ldi	r20, 0x20	; 32
    1d0e:	51 e4       	ldi	r21, 0x41	; 65
    1d10:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	bc 01       	movw	r22, r24
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9c 8b       	std	Y+20, r25	; 0x14
    1d26:	8b 8b       	std	Y+19, r24	; 0x13
    1d28:	0f c0       	rjmp	.+30     	; 0x1d48 <lcd_wr_char+0x11c>
    1d2a:	80 e7       	ldi	r24, 0x70	; 112
    1d2c:	91 e0       	ldi	r25, 0x01	; 1
    1d2e:	9a 8b       	std	Y+18, r25	; 0x12
    1d30:	89 8b       	std	Y+17, r24	; 0x11
    1d32:	89 89       	ldd	r24, Y+17	; 0x11
    1d34:	9a 89       	ldd	r25, Y+18	; 0x12
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <lcd_wr_char+0x10a>
    1d3a:	9a 8b       	std	Y+18, r25	; 0x12
    1d3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d40:	9c 89       	ldd	r25, Y+20	; 0x14
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	9c 8b       	std	Y+20, r25	; 0x14
    1d46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d48:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	69 f7       	brne	.-38     	; 0x1d2a <lcd_wr_char+0xfe>
    1d50:	14 c0       	rjmp	.+40     	; 0x1d7a <lcd_wr_char+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d52:	6d 89       	ldd	r22, Y+21	; 0x15
    1d54:	7e 89       	ldd	r23, Y+22	; 0x16
    1d56:	8f 89       	ldd	r24, Y+23	; 0x17
    1d58:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5a:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9c 8b       	std	Y+20, r25	; 0x14
    1d64:	8b 8b       	std	Y+19, r24	; 0x13
    1d66:	8b 89       	ldd	r24, Y+19	; 0x13
    1d68:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6a:	98 8b       	std	Y+16, r25	; 0x10
    1d6c:	8f 87       	std	Y+15, r24	; 0x0f
    1d6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d70:	98 89       	ldd	r25, Y+16	; 0x10
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <lcd_wr_char+0x146>
    1d76:	98 8b       	std	Y+16, r25	; 0x10
    1d78:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1d7a:	a8 e2       	ldi	r26, 0x28	; 40
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e8 e2       	ldi	r30, 0x28	; 40
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	8b 7f       	andi	r24, 0xFB	; 251
    1d86:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    1d88:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d8a:	8f 70       	andi	r24, 0x0F	; 15
    1d8c:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1d8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d90:	99 27       	eor	r25, r25
    1d92:	87 fd       	sbrc	r24, 7
    1d94:	90 95       	com	r25
    1d96:	82 95       	swap	r24
    1d98:	92 95       	swap	r25
    1d9a:	90 7f       	andi	r25, 0xF0	; 240
    1d9c:	98 27       	eor	r25, r24
    1d9e:	80 7f       	andi	r24, 0xF0	; 240
    1da0:	98 27       	eor	r25, r24
    1da2:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1da4:	a8 e2       	ldi	r26, 0x28	; 40
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e8 e2       	ldi	r30, 0x28	; 40
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	8f 70       	andi	r24, 0x0F	; 15
    1db0:	8c 93       	st	X, r24
	lcd_port |= letter;
    1db2:	a8 e2       	ldi	r26, 0x28	; 40
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e8 e2       	ldi	r30, 0x28	; 40
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	98 2f       	mov	r25, r24
    1dbe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dc0:	89 2b       	or	r24, r25
    1dc2:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    1dc4:	a8 e2       	ldi	r26, 0x28	; 40
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e8 e2       	ldi	r30, 0x28	; 40
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	81 60       	ori	r24, 0x01	; 1
    1dd0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1dd2:	a8 e2       	ldi	r26, 0x28	; 40
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e8 e2       	ldi	r30, 0x28	; 40
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	8d 7f       	andi	r24, 0xFD	; 253
    1dde:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1de0:	a8 e2       	ldi	r26, 0x28	; 40
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e8 e2       	ldi	r30, 0x28	; 40
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	84 60       	ori	r24, 0x04	; 4
    1dec:	8c 93       	st	X, r24
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	a0 ea       	ldi	r26, 0xA0	; 160
    1df4:	b0 e4       	ldi	r27, 0x40	; 64
    1df6:	8b 87       	std	Y+11, r24	; 0x0b
    1df8:	9c 87       	std	Y+12, r25	; 0x0c
    1dfa:	ad 87       	std	Y+13, r26	; 0x0d
    1dfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e06:	26 e6       	ldi	r18, 0x66	; 102
    1e08:	36 e6       	ldi	r19, 0x66	; 102
    1e0a:	46 e6       	ldi	r20, 0x66	; 102
    1e0c:	55 e4       	ldi	r21, 0x45	; 69
    1e0e:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	8f 83       	std	Y+7, r24	; 0x07
    1e18:	98 87       	std	Y+8, r25	; 0x08
    1e1a:	a9 87       	std	Y+9, r26	; 0x09
    1e1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e20:	78 85       	ldd	r23, Y+8	; 0x08
    1e22:	89 85       	ldd	r24, Y+9	; 0x09
    1e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e8       	ldi	r20, 0x80	; 128
    1e2c:	5f e3       	ldi	r21, 0x3F	; 63
    1e2e:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    1e32:	88 23       	and	r24, r24
    1e34:	2c f4       	brge	.+10     	; 0x1e40 <lcd_wr_char+0x214>
		__ticks = 1;
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	9e 83       	std	Y+6, r25	; 0x06
    1e3c:	8d 83       	std	Y+5, r24	; 0x05
    1e3e:	3f c0       	rjmp	.+126    	; 0x1ebe <lcd_wr_char+0x292>
	else if (__tmp > 65535)
    1e40:	6f 81       	ldd	r22, Y+7	; 0x07
    1e42:	78 85       	ldd	r23, Y+8	; 0x08
    1e44:	89 85       	ldd	r24, Y+9	; 0x09
    1e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	3f ef       	ldi	r19, 0xFF	; 255
    1e4c:	4f e7       	ldi	r20, 0x7F	; 127
    1e4e:	57 e4       	ldi	r21, 0x47	; 71
    1e50:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    1e54:	18 16       	cp	r1, r24
    1e56:	4c f5       	brge	.+82     	; 0x1eaa <lcd_wr_char+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e2       	ldi	r20, 0x20	; 32
    1e66:	51 e4       	ldi	r21, 0x41	; 65
    1e68:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	bc 01       	movw	r22, r24
    1e72:	cd 01       	movw	r24, r26
    1e74:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	9e 83       	std	Y+6, r25	; 0x06
    1e7e:	8d 83       	std	Y+5, r24	; 0x05
    1e80:	0f c0       	rjmp	.+30     	; 0x1ea0 <lcd_wr_char+0x274>
    1e82:	80 e7       	ldi	r24, 0x70	; 112
    1e84:	91 e0       	ldi	r25, 0x01	; 1
    1e86:	9c 83       	std	Y+4, r25	; 0x04
    1e88:	8b 83       	std	Y+3, r24	; 0x03
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	f1 f7       	brne	.-4      	; 0x1e8e <lcd_wr_char+0x262>
    1e92:	9c 83       	std	Y+4, r25	; 0x04
    1e94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e96:	8d 81       	ldd	r24, Y+5	; 0x05
    1e98:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	9e 83       	std	Y+6, r25	; 0x06
    1e9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea4:	00 97       	sbiw	r24, 0x00	; 0
    1ea6:	69 f7       	brne	.-38     	; 0x1e82 <lcd_wr_char+0x256>
    1ea8:	14 c0       	rjmp	.+40     	; 0x1ed2 <lcd_wr_char+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1eac:	78 85       	ldd	r23, Y+8	; 0x08
    1eae:	89 85       	ldd	r24, Y+9	; 0x09
    1eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb2:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
    1ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec2:	9a 83       	std	Y+2, r25	; 0x02
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	f1 f7       	brne	.-4      	; 0x1eca <lcd_wr_char+0x29e>
    1ece:	9a 83       	std	Y+2, r25	; 0x02
    1ed0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1ed2:	a8 e2       	ldi	r26, 0x28	; 40
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e8 e2       	ldi	r30, 0x28	; 40
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	8b 7f       	andi	r24, 0xFB	; 251
    1ede:	8c 93       	st	X, r24
}
    1ee0:	6e 96       	adiw	r28, 0x1e	; 30
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	cd bf       	out	0x3d, r28	; 61
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1efa:	80 e8       	ldi	r24, 0x80	; 128
    1efc:	0e 94 bc 0c 	call	0x1978	; 0x1978 <lcd_wr_command>
}
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	0f 92       	push	r0
    1f0c:	0f 92       	push	r0
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	9a 83       	std	Y+2, r25	; 0x02
    1f14:	89 83       	std	Y+1, r24	; 0x01
    1f16:	0a c0       	rjmp	.+20     	; 0x1f2c <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1f18:	e9 81       	ldd	r30, Y+1	; 0x01
    1f1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f1c:	80 81       	ld	r24, Z
    1f1e:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <lcd_wr_char>
		str++;
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	9a 81       	ldd	r25, Y+2	; 0x02
    1f26:	01 96       	adiw	r24, 0x01	; 1
    1f28:	9a 83       	std	Y+2, r25	; 0x02
    1f2a:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    1f2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f30:	80 81       	ld	r24, Z
    1f32:	88 23       	and	r24, r24
    1f34:	89 f7       	brne	.-30     	; 0x1f18 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	00 d0       	rcall	.+0      	; 0x1f46 <lcd_cursor+0x6>
    1f46:	0f 92       	push	r0
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	89 83       	std	Y+1, r24	; 0x01
    1f4e:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	28 2f       	mov	r18, r24
    1f54:	33 27       	eor	r19, r19
    1f56:	27 fd       	sbrc	r18, 7
    1f58:	30 95       	com	r19
    1f5a:	3c 83       	std	Y+4, r19	; 0x04
    1f5c:	2b 83       	std	Y+3, r18	; 0x03
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	9c 81       	ldd	r25, Y+4	; 0x04
    1f62:	82 30       	cpi	r24, 0x02	; 2
    1f64:	91 05       	cpc	r25, r1
    1f66:	d9 f0       	breq	.+54     	; 0x1f9e <lcd_cursor+0x5e>
    1f68:	2b 81       	ldd	r18, Y+3	; 0x03
    1f6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f6c:	23 30       	cpi	r18, 0x03	; 3
    1f6e:	31 05       	cpc	r19, r1
    1f70:	34 f4       	brge	.+12     	; 0x1f7e <lcd_cursor+0x3e>
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	9c 81       	ldd	r25, Y+4	; 0x04
    1f76:	81 30       	cpi	r24, 0x01	; 1
    1f78:	91 05       	cpc	r25, r1
    1f7a:	61 f0       	breq	.+24     	; 0x1f94 <lcd_cursor+0x54>
    1f7c:	1e c0       	rjmp	.+60     	; 0x1fba <lcd_cursor+0x7a>
    1f7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f80:	3c 81       	ldd	r19, Y+4	; 0x04
    1f82:	23 30       	cpi	r18, 0x03	; 3
    1f84:	31 05       	cpc	r19, r1
    1f86:	81 f0       	breq	.+32     	; 0x1fa8 <lcd_cursor+0x68>
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	84 30       	cpi	r24, 0x04	; 4
    1f8e:	91 05       	cpc	r25, r1
    1f90:	81 f0       	breq	.+32     	; 0x1fb2 <lcd_cursor+0x72>
    1f92:	13 c0       	rjmp	.+38     	; 0x1fba <lcd_cursor+0x7a>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	81 58       	subi	r24, 0x81	; 129
    1f98:	0e 94 bc 0c 	call	0x1978	; 0x1978 <lcd_wr_command>
    1f9c:	0e c0       	rjmp	.+28     	; 0x1fba <lcd_cursor+0x7a>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	81 54       	subi	r24, 0x41	; 65
    1fa2:	0e 94 bc 0c 	call	0x1978	; 0x1978 <lcd_wr_command>
    1fa6:	09 c0       	rjmp	.+18     	; 0x1fba <lcd_cursor+0x7a>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	8d 56       	subi	r24, 0x6D	; 109
    1fac:	0e 94 bc 0c 	call	0x1978	; 0x1978 <lcd_wr_command>
    1fb0:	04 c0       	rjmp	.+8      	; 0x1fba <lcd_cursor+0x7a>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	8d 52       	subi	r24, 0x2D	; 45
    1fb6:	0e 94 bc 0c 	call	0x1978	; 0x1978 <lcd_wr_command>
		default: break;
	}
}
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	08 95       	ret

00001fc8 <lcd_print>:

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	27 97       	sbiw	r28, 0x07	; 7
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	8a 83       	std	Y+2, r24	; 0x02
    1fde:	6b 83       	std	Y+3, r22	; 0x03
    1fe0:	5d 83       	std	Y+5, r21	; 0x05
    1fe2:	4c 83       	std	Y+4, r20	; 0x04
    1fe4:	3f 83       	std	Y+7, r19	; 0x07
    1fe6:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    1fe8:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	88 23       	and	r24, r24
    1fee:	19 f0       	breq	.+6      	; 0x1ff6 <lcd_print+0x2e>
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	88 23       	and	r24, r24
    1ff4:	19 f4       	brne	.+6      	; 0x1ffc <lcd_print+0x34>
	{
		lcd_home();
    1ff6:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <lcd_home>
    1ffa:	04 c0       	rjmp	.+8      	; 0x2004 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	6b 81       	ldd	r22, Y+3	; 0x03
    2000:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    2004:	8e 81       	ldd	r24, Y+6	; 0x06
    2006:	9f 81       	ldd	r25, Y+7	; 0x07
    2008:	85 30       	cpi	r24, 0x05	; 5
    200a:	91 05       	cpc	r25, r1
    200c:	19 f0       	breq	.+6      	; 0x2014 <lcd_print+0x4c>
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	81 30       	cpi	r24, 0x01	; 1
    2012:	a9 f4       	brne	.+42     	; 0x203e <lcd_print+0x76>
	{
		million=value/10000+48;
    2014:	8c 81       	ldd	r24, Y+4	; 0x04
    2016:	9d 81       	ldd	r25, Y+5	; 0x05
    2018:	20 e1       	ldi	r18, 0x10	; 16
    201a:	37 e2       	ldi	r19, 0x27	; 39
    201c:	b9 01       	movw	r22, r18
    201e:	0e 94 0d 48 	call	0x901a	; 0x901a <__udivmodhi4>
    2022:	cb 01       	movw	r24, r22
    2024:	c0 96       	adiw	r24, 0x30	; 48
    2026:	90 93 21 03 	sts	0x0321, r25
    202a:	80 93 20 03 	sts	0x0320, r24
		lcd_wr_char(million);
    202e:	80 91 20 03 	lds	r24, 0x0320
    2032:	90 91 21 03 	lds	r25, 0x0321
    2036:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <lcd_wr_char>
		flag=1;
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    203e:	8e 81       	ldd	r24, Y+6	; 0x06
    2040:	9f 81       	ldd	r25, Y+7	; 0x07
    2042:	84 30       	cpi	r24, 0x04	; 4
    2044:	91 05       	cpc	r25, r1
    2046:	19 f0       	breq	.+6      	; 0x204e <lcd_print+0x86>
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	81 30       	cpi	r24, 0x01	; 1
    204c:	11 f5       	brne	.+68     	; 0x2092 <lcd_print+0xca>
	{
		temp = value/1000;
    204e:	8c 81       	ldd	r24, Y+4	; 0x04
    2050:	9d 81       	ldd	r25, Y+5	; 0x05
    2052:	28 ee       	ldi	r18, 0xE8	; 232
    2054:	33 e0       	ldi	r19, 0x03	; 3
    2056:	b9 01       	movw	r22, r18
    2058:	0e 94 0d 48 	call	0x901a	; 0x901a <__udivmodhi4>
    205c:	cb 01       	movw	r24, r22
    205e:	90 93 23 03 	sts	0x0323, r25
    2062:	80 93 22 03 	sts	0x0322, r24
		thousand = temp%10 + 48;
    2066:	80 91 22 03 	lds	r24, 0x0322
    206a:	90 91 23 03 	lds	r25, 0x0323
    206e:	2a e0       	ldi	r18, 0x0A	; 10
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	b9 01       	movw	r22, r18
    2074:	0e 94 0d 48 	call	0x901a	; 0x901a <__udivmodhi4>
    2078:	c0 96       	adiw	r24, 0x30	; 48
    207a:	90 93 45 03 	sts	0x0345, r25
    207e:	80 93 44 03 	sts	0x0344, r24
		lcd_wr_char(thousand);
    2082:	80 91 44 03 	lds	r24, 0x0344
    2086:	90 91 45 03 	lds	r25, 0x0345
    208a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <lcd_wr_char>
		flag=1;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    2092:	8e 81       	ldd	r24, Y+6	; 0x06
    2094:	9f 81       	ldd	r25, Y+7	; 0x07
    2096:	83 30       	cpi	r24, 0x03	; 3
    2098:	91 05       	cpc	r25, r1
    209a:	19 f0       	breq	.+6      	; 0x20a2 <lcd_print+0xda>
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	81 30       	cpi	r24, 0x01	; 1
    20a0:	11 f5       	brne	.+68     	; 0x20e6 <lcd_print+0x11e>
	{
		temp = value/100;
    20a2:	8c 81       	ldd	r24, Y+4	; 0x04
    20a4:	9d 81       	ldd	r25, Y+5	; 0x05
    20a6:	24 e6       	ldi	r18, 0x64	; 100
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	b9 01       	movw	r22, r18
    20ac:	0e 94 0d 48 	call	0x901a	; 0x901a <__udivmodhi4>
    20b0:	cb 01       	movw	r24, r22
    20b2:	90 93 23 03 	sts	0x0323, r25
    20b6:	80 93 22 03 	sts	0x0322, r24
		hundred = temp%10 + 48;
    20ba:	80 91 22 03 	lds	r24, 0x0322
    20be:	90 91 23 03 	lds	r25, 0x0323
    20c2:	2a e0       	ldi	r18, 0x0A	; 10
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	b9 01       	movw	r22, r18
    20c8:	0e 94 0d 48 	call	0x901a	; 0x901a <__udivmodhi4>
    20cc:	c0 96       	adiw	r24, 0x30	; 48
    20ce:	90 93 33 03 	sts	0x0333, r25
    20d2:	80 93 32 03 	sts	0x0332, r24
		lcd_wr_char(hundred);
    20d6:	80 91 32 03 	lds	r24, 0x0332
    20da:	90 91 33 03 	lds	r25, 0x0333
    20de:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <lcd_wr_char>
		flag=1;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    20e6:	8e 81       	ldd	r24, Y+6	; 0x06
    20e8:	9f 81       	ldd	r25, Y+7	; 0x07
    20ea:	82 30       	cpi	r24, 0x02	; 2
    20ec:	91 05       	cpc	r25, r1
    20ee:	19 f0       	breq	.+6      	; 0x20f6 <lcd_print+0x12e>
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	81 30       	cpi	r24, 0x01	; 1
    20f4:	11 f5       	brne	.+68     	; 0x213a <lcd_print+0x172>
	{
		temp = value/10;
    20f6:	8c 81       	ldd	r24, Y+4	; 0x04
    20f8:	9d 81       	ldd	r25, Y+5	; 0x05
    20fa:	2a e0       	ldi	r18, 0x0A	; 10
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	b9 01       	movw	r22, r18
    2100:	0e 94 0d 48 	call	0x901a	; 0x901a <__udivmodhi4>
    2104:	cb 01       	movw	r24, r22
    2106:	90 93 23 03 	sts	0x0323, r25
    210a:	80 93 22 03 	sts	0x0322, r24
		tens = temp%10 + 48;
    210e:	80 91 22 03 	lds	r24, 0x0322
    2112:	90 91 23 03 	lds	r25, 0x0323
    2116:	2a e0       	ldi	r18, 0x0A	; 10
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	b9 01       	movw	r22, r18
    211c:	0e 94 0d 48 	call	0x901a	; 0x901a <__udivmodhi4>
    2120:	c0 96       	adiw	r24, 0x30	; 48
    2122:	90 93 2d 03 	sts	0x032D, r25
    2126:	80 93 2c 03 	sts	0x032C, r24
		lcd_wr_char(tens);
    212a:	80 91 2c 03 	lds	r24, 0x032C
    212e:	90 91 2d 03 	lds	r25, 0x032D
    2132:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <lcd_wr_char>
		flag=1;
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    213a:	8e 81       	ldd	r24, Y+6	; 0x06
    213c:	9f 81       	ldd	r25, Y+7	; 0x07
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	91 05       	cpc	r25, r1
    2142:	19 f0       	breq	.+6      	; 0x214a <lcd_print+0x182>
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	81 30       	cpi	r24, 0x01	; 1
    2148:	91 f4       	brne	.+36     	; 0x216e <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    214a:	8c 81       	ldd	r24, Y+4	; 0x04
    214c:	9d 81       	ldd	r25, Y+5	; 0x05
    214e:	2a e0       	ldi	r18, 0x0A	; 10
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	b9 01       	movw	r22, r18
    2154:	0e 94 0d 48 	call	0x901a	; 0x901a <__udivmodhi4>
    2158:	c0 96       	adiw	r24, 0x30	; 48
    215a:	90 93 43 03 	sts	0x0343, r25
    215e:	80 93 42 03 	sts	0x0342, r24
		lcd_wr_char(unit);
    2162:	80 91 42 03 	lds	r24, 0x0342
    2166:	90 91 43 03 	lds	r25, 0x0343
    216a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <lcd_wr_char>
	}
	if(digits>5)
    216e:	8e 81       	ldd	r24, Y+6	; 0x06
    2170:	9f 81       	ldd	r25, Y+7	; 0x07
    2172:	86 30       	cpi	r24, 0x06	; 6
    2174:	91 05       	cpc	r25, r1
    2176:	1c f0       	brlt	.+6      	; 0x217e <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    2178:	85 e4       	ldi	r24, 0x45	; 69
    217a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <lcd_wr_char>
	}

}
    217e:	27 96       	adiw	r28, 0x07	; 7
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <servo1_pin_config>:
void set_servo(void);
void faceRight();

//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    2198:	a4 e2       	ldi	r26, 0x24	; 36
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e4 e2       	ldi	r30, 0x24	; 36
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	80 62       	ori	r24, 0x20	; 32
    21a4:	8c 93       	st	X, r24
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    21a6:	a5 e2       	ldi	r26, 0x25	; 37
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e5 e2       	ldi	r30, 0x25	; 37
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	80 62       	ori	r24, 0x20	; 32
    21b2:	8c 93       	st	X, r24
}
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	08 95       	ret

000021ba <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
    21c2:	a4 e2       	ldi	r26, 0x24	; 36
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e4 e2       	ldi	r30, 0x24	; 36
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	80 64       	ori	r24, 0x40	; 64
    21ce:	8c 93       	st	X, r24
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    21d0:	a5 e2       	ldi	r26, 0x25	; 37
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e5 e2       	ldi	r30, 0x25	; 37
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	80 64       	ori	r24, 0x40	; 64
    21dc:	8c 93       	st	X, r24
}
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
    21ec:	a4 e2       	ldi	r26, 0x24	; 36
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	e4 e2       	ldi	r30, 0x24	; 36
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	80 68       	ori	r24, 0x80	; 128
    21f8:	8c 93       	st	X, r24
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
    21fa:	a5 e2       	ldi	r26, 0x25	; 37
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e5 e2       	ldi	r30, 0x25	; 37
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	80 68       	ori	r24, 0x80	; 128
    2206:	8c 93       	st	X, r24
}
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <port_init>:

//Initialize the ports
void port_init(void)
{
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
 servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
    2216:	0e 94 c8 10 	call	0x2190	; 0x2190 <servo1_pin_config>
 servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation
    221a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <servo2_pin_config>
 servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation
    221e:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <servo3_pin_config>
}
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz
void timer1_init(void)
{
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
    2230:	e1 e8       	ldi	r30, 0x81	; 129
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    2236:	e5 e8       	ldi	r30, 0x85	; 133
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	8c ef       	ldi	r24, 0xFC	; 252
    223c:	80 83       	st	Z, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
    223e:	e4 e8       	ldi	r30, 0x84	; 132
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	80 83       	st	Z, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
    2246:	e9 e8       	ldi	r30, 0x89	; 137
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	83 e0       	ldi	r24, 0x03	; 3
    224c:	80 83       	st	Z, r24
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
    224e:	e8 e8       	ldi	r30, 0x88	; 136
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	8f ef       	ldi	r24, 0xFF	; 255
    2254:	80 83       	st	Z, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
    2256:	eb e8       	ldi	r30, 0x8B	; 139
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	83 e0       	ldi	r24, 0x03	; 3
    225c:	80 83       	st	Z, r24
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
    225e:	ea e8       	ldi	r30, 0x8A	; 138
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	8f ef       	ldi	r24, 0xFF	; 255
    2264:	80 83       	st	Z, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
    2266:	ed e8       	ldi	r30, 0x8D	; 141
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	83 e0       	ldi	r24, 0x03	; 3
    226c:	80 83       	st	Z, r24
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
    226e:	ec e8       	ldi	r30, 0x8C	; 140
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	8f ef       	ldi	r24, 0xFF	; 255
    2274:	80 83       	st	Z, r24
 ICR1H  = 0x03;
    2276:	e7 e8       	ldi	r30, 0x87	; 135
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	83 e0       	ldi	r24, 0x03	; 3
    227c:	80 83       	st	Z, r24
 ICR1L  = 0xFF;
    227e:	e6 e8       	ldi	r30, 0x86	; 134
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	8f ef       	ldi	r24, 0xFF	; 255
    2284:	80 83       	st	Z, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    2286:	e0 e8       	ldi	r30, 0x80	; 128
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	8b ea       	ldi	r24, 0xAB	; 171
    228c:	80 83       	st	Z, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
    228e:	e2 e8       	ldi	r30, 0x82	; 130
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    2294:	e1 e8       	ldi	r30, 0x81	; 129
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	8c e0       	ldi	r24, 0x0C	; 12
    229a:	80 83       	st	Z, r24
}
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <set_servo>:


//Function to initialize all the peripherals
void set_servo(void)
{
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
 cli(); //disable all interrupts
    22aa:	f8 94       	cli
 port_init();
    22ac:	0e 94 07 11 	call	0x220e	; 0x220e <port_init>
 timer1_init();
    22b0:	0e 94 14 11 	call	0x2228	; 0x2228 <timer1_init>
 sei(); //re-enable interrupts
    22b4:	78 94       	sei
}
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	08 95       	ret

000022bc <servo_1>:


//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
    22bc:	0f 93       	push	r16
    22be:	1f 93       	push	r17
    22c0:	df 93       	push	r29
    22c2:	cf 93       	push	r28
    22c4:	00 d0       	rcall	.+0      	; 0x22c6 <servo_1+0xa>
    22c6:	0f 92       	push	r0
    22c8:	0f 92       	push	r0
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	8d 83       	std	Y+5, r24	; 0x05
 float PositionPanServo = 0;
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	a0 e0       	ldi	r26, 0x00	; 0
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	9a 83       	std	Y+2, r25	; 0x02
    22dc:	ab 83       	std	Y+3, r26	; 0x03
    22de:	bc 83       	std	Y+4, r27	; 0x04
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
    22e0:	8d 81       	ldd	r24, Y+5	; 0x05
    22e2:	88 2f       	mov	r24, r24
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	a0 e0       	ldi	r26, 0x00	; 0
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	bc 01       	movw	r22, r24
    22ec:	cd 01       	movw	r24, r26
    22ee:	0e 94 9f 45 	call	0x8b3e	; 0x8b3e <__floatunsisf>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	bc 01       	movw	r22, r24
    22f8:	cd 01       	movw	r24, r26
    22fa:	2b e7       	ldi	r18, 0x7B	; 123
    22fc:	34 e1       	ldi	r19, 0x14	; 20
    22fe:	4e ee       	ldi	r20, 0xEE	; 238
    2300:	5f e3       	ldi	r21, 0x3F	; 63
    2302:	0e 94 b1 43 	call	0x8762	; 0x8762 <__divsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	bc 01       	movw	r22, r24
    230c:	cd 01       	movw	r24, r26
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	4c e0       	ldi	r20, 0x0C	; 12
    2314:	52 e4       	ldi	r21, 0x42	; 66
    2316:	0e 94 8a 42 	call	0x8514	; 0x8514 <__addsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	89 83       	std	Y+1, r24	; 0x01
    2320:	9a 83       	std	Y+2, r25	; 0x02
    2322:	ab 83       	std	Y+3, r26	; 0x03
    2324:	bc 83       	std	Y+4, r27	; 0x04
 OCR1AH = 0x00;
    2326:	e9 e8       	ldi	r30, 0x89	; 137
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	10 82       	st	Z, r1
 OCR1AL = (unsigned char) PositionPanServo;
    232c:	08 e8       	ldi	r16, 0x88	; 136
    232e:	10 e0       	ldi	r17, 0x00	; 0
    2330:	69 81       	ldd	r22, Y+1	; 0x01
    2332:	7a 81       	ldd	r23, Y+2	; 0x02
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	9c 81       	ldd	r25, Y+4	; 0x04
    2338:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	f8 01       	movw	r30, r16
    2342:	80 83       	st	Z, r24
}
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	1f 91       	pop	r17
    2354:	0f 91       	pop	r16
    2356:	08 95       	ret

00002358 <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
    2358:	0f 93       	push	r16
    235a:	1f 93       	push	r17
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	00 d0       	rcall	.+0      	; 0x2362 <servo_2+0xa>
    2362:	0f 92       	push	r0
    2364:	0f 92       	push	r0
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	8d 83       	std	Y+5, r24	; 0x05
 float PositionTiltServo = 0;
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	a0 e0       	ldi	r26, 0x00	; 0
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	89 83       	std	Y+1, r24	; 0x01
    2376:	9a 83       	std	Y+2, r25	; 0x02
    2378:	ab 83       	std	Y+3, r26	; 0x03
    237a:	bc 83       	std	Y+4, r27	; 0x04
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
    237c:	8d 81       	ldd	r24, Y+5	; 0x05
    237e:	88 2f       	mov	r24, r24
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	a0 e0       	ldi	r26, 0x00	; 0
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	bc 01       	movw	r22, r24
    2388:	cd 01       	movw	r24, r26
    238a:	0e 94 9f 45 	call	0x8b3e	; 0x8b3e <__floatunsisf>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	bc 01       	movw	r22, r24
    2394:	cd 01       	movw	r24, r26
    2396:	2b e7       	ldi	r18, 0x7B	; 123
    2398:	34 e1       	ldi	r19, 0x14	; 20
    239a:	4e ee       	ldi	r20, 0xEE	; 238
    239c:	5f e3       	ldi	r21, 0x3F	; 63
    239e:	0e 94 b1 43 	call	0x8762	; 0x8762 <__divsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	4c e0       	ldi	r20, 0x0C	; 12
    23b0:	52 e4       	ldi	r21, 0x42	; 66
    23b2:	0e 94 8a 42 	call	0x8514	; 0x8514 <__addsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	9a 83       	std	Y+2, r25	; 0x02
    23be:	ab 83       	std	Y+3, r26	; 0x03
    23c0:	bc 83       	std	Y+4, r27	; 0x04
 OCR1BH = 0x00;
    23c2:	eb e8       	ldi	r30, 0x8B	; 139
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
    23c8:	0a e8       	ldi	r16, 0x8A	; 138
    23ca:	10 e0       	ldi	r17, 0x00	; 0
    23cc:	69 81       	ldd	r22, Y+1	; 0x01
    23ce:	7a 81       	ldd	r23, Y+2	; 0x02
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	9c 81       	ldd	r25, Y+4	; 0x04
    23d4:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	f8 01       	movw	r30, r16
    23de:	80 83       	st	Z, r24
}
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	1f 91       	pop	r17
    23f0:	0f 91       	pop	r16
    23f2:	08 95       	ret

000023f4 <servo_3>:

//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
    23f4:	0f 93       	push	r16
    23f6:	1f 93       	push	r17
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	00 d0       	rcall	.+0      	; 0x23fe <servo_3+0xa>
    23fe:	0f 92       	push	r0
    2400:	0f 92       	push	r0
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	8d 83       	std	Y+5, r24	; 0x05
 float PositionServo = 0;
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	a0 e0       	ldi	r26, 0x00	; 0
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	89 83       	std	Y+1, r24	; 0x01
    2412:	9a 83       	std	Y+2, r25	; 0x02
    2414:	ab 83       	std	Y+3, r26	; 0x03
    2416:	bc 83       	std	Y+4, r27	; 0x04
 PositionServo = ((float)degrees / 1.86) + 35.0;
    2418:	8d 81       	ldd	r24, Y+5	; 0x05
    241a:	88 2f       	mov	r24, r24
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	a0 e0       	ldi	r26, 0x00	; 0
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	bc 01       	movw	r22, r24
    2424:	cd 01       	movw	r24, r26
    2426:	0e 94 9f 45 	call	0x8b3e	; 0x8b3e <__floatunsisf>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	bc 01       	movw	r22, r24
    2430:	cd 01       	movw	r24, r26
    2432:	2b e7       	ldi	r18, 0x7B	; 123
    2434:	34 e1       	ldi	r19, 0x14	; 20
    2436:	4e ee       	ldi	r20, 0xEE	; 238
    2438:	5f e3       	ldi	r21, 0x3F	; 63
    243a:	0e 94 b1 43 	call	0x8762	; 0x8762 <__divsf3>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	bc 01       	movw	r22, r24
    2444:	cd 01       	movw	r24, r26
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	4c e0       	ldi	r20, 0x0C	; 12
    244c:	52 e4       	ldi	r21, 0x42	; 66
    244e:	0e 94 8a 42 	call	0x8514	; 0x8514 <__addsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	89 83       	std	Y+1, r24	; 0x01
    2458:	9a 83       	std	Y+2, r25	; 0x02
    245a:	ab 83       	std	Y+3, r26	; 0x03
    245c:	bc 83       	std	Y+4, r27	; 0x04
 OCR1CH = 0x00;
    245e:	ed e8       	ldi	r30, 0x8D	; 141
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	10 82       	st	Z, r1
 OCR1CL = (unsigned char) PositionServo;
    2464:	0c e8       	ldi	r16, 0x8C	; 140
    2466:	10 e0       	ldi	r17, 0x00	; 0
    2468:	69 81       	ldd	r22, Y+1	; 0x01
    246a:	7a 81       	ldd	r23, Y+2	; 0x02
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	9c 81       	ldd	r25, Y+4	; 0x04
    2470:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	f8 01       	movw	r30, r16
    247a:	80 83       	st	Z, r24
}
    247c:	0f 90       	pop	r0
    247e:	0f 90       	pop	r0
    2480:	0f 90       	pop	r0
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	1f 91       	pop	r17
    248c:	0f 91       	pop	r16
    248e:	08 95       	ret

00002490 <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle
//and make them free by giving 100% duty cycle at the PWM. This function can be used to
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
 OCR1AH = 0x03;
    2498:	e9 e8       	ldi	r30, 0x89	; 137
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	83 e0       	ldi	r24, 0x03	; 3
    249e:	80 83       	st	Z, r24
 OCR1AL = 0xFF; //Servo 1 off
    24a0:	e8 e8       	ldi	r30, 0x88	; 136
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	8f ef       	ldi	r24, 0xFF	; 255
    24a6:	80 83       	st	Z, r24
}
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
 OCR1BH = 0x03;
    24b6:	eb e8       	ldi	r30, 0x8B	; 139
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	83 e0       	ldi	r24, 0x03	; 3
    24bc:	80 83       	st	Z, r24
 OCR1BL = 0xFF; //Servo 2 off
    24be:	ea e8       	ldi	r30, 0x8A	; 138
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	8f ef       	ldi	r24, 0xFF	; 255
    24c4:	80 83       	st	Z, r24
}
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	08 95       	ret

000024cc <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
 OCR1CH = 0x03;
    24d4:	ed e8       	ldi	r30, 0x8D	; 141
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	83 e0       	ldi	r24, 0x03	; 3
    24da:	80 83       	st	Z, r24
 OCR1CL = 0xFF; //Servo 3 off
    24dc:	ec e8       	ldi	r30, 0x8C	; 140
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	8f ef       	ldi	r24, 0xFF	; 255
    24e2:	80 83       	st	Z, r24
}
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <faceFront>:

void faceFront()
{
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    servo_3(180);
    24f2:	84 eb       	ldi	r24, 0xB4	; 180
    24f4:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <servo_3>
}
    24f8:	cf 91       	pop	r28
    24fa:	df 91       	pop	r29
    24fc:	08 95       	ret

000024fe <faceBack>:

void faceBack()
{
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
     servo_3(2);
    2506:	82 e0       	ldi	r24, 0x02	; 2
    2508:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <servo_3>
}
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <faceRight>:

void faceRight()
{
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
    servo_3(90);
    251a:	8a e5       	ldi	r24, 0x5A	; 90
    251c:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <servo_3>
}
    2520:	cf 91       	pop	r28
    2522:	df 91       	pop	r29
    2524:	08 95       	ret

00002526 <grip>:


void grip()
{
    2526:	df 93       	push	r29
    2528:	cf 93       	push	r28
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    servo_1(55);
    252e:	87 e3       	ldi	r24, 0x37	; 55
    2530:	0e 94 5e 11 	call	0x22bc	; 0x22bc <servo_1>
}
    2534:	cf 91       	pop	r28
    2536:	df 91       	pop	r29
    2538:	08 95       	ret

0000253a <ungrip>:

void ungrip()
{
    253a:	df 93       	push	r29
    253c:	cf 93       	push	r28
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
    servo_1(170);
    2542:	8a ea       	ldi	r24, 0xAA	; 170
    2544:	0e 94 5e 11 	call	0x22bc	; 0x22bc <servo_1>
}
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <ungrip_2>:

void ungrip_2()
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    servo_1(90);
    2556:	8a e5       	ldi	r24, 0x5A	; 90
    2558:	0e 94 5e 11 	call	0x22bc	; 0x22bc <servo_1>
}
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <grip_2>:

void grip_2()
{
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    servo_1(30);
    256a:	8e e1       	ldi	r24, 0x1E	; 30
    256c:	0e 94 5e 11 	call	0x22bc	; 0x22bc <servo_1>
}
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	08 95       	ret

00002576 <main>:
int d1Completed, d2Completed;
int a[6];
int i;

int main(void)
{
    2576:	0f 93       	push	r16
    2578:	1f 93       	push	r17
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	c6 59       	subi	r28, 0x96	; 150
    2584:	d0 40       	sbci	r29, 0x00	; 0
    2586:	0f b6       	in	r0, 0x3f	; 63
    2588:	f8 94       	cli
    258a:	de bf       	out	0x3e, r29	; 62
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	cd bf       	out	0x3d, r28	; 61
    int error = 0, lastError = 0;
    2590:	fe 01       	movw	r30, r28
    2592:	ef 57       	subi	r30, 0x7F	; 127
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	11 82       	std	Z+1, r1	; 0x01
    2598:	10 82       	st	Z, r1
    259a:	fe 01       	movw	r30, r28
    259c:	e1 58       	subi	r30, 0x81	; 129
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	11 82       	std	Z+1, r1	; 0x01
    25a2:	10 82       	st	Z, r1


    cli();
    25a4:	f8 94       	cli
    set_lcd();
    25a6:	0e 94 07 07 	call	0xe0e	; 0xe0e <set_lcd>
    set_motors();
    25aa:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_motors>
    set_ADC();
    25ae:	0e 94 b2 06 	call	0xd64	; 0xd64 <set_ADC>
    set_servo();
    25b2:	0e 94 51 11 	call	0x22a2	; 0x22a2 <set_servo>
    sei();
    25b6:	78 94       	sei

    faceFront();
    25b8:	0e 94 75 12 	call	0x24ea	; 0x24ea <faceFront>
    //_delay_ms(1000);

    ungrip();
    25bc:	0e 94 9d 12 	call	0x253a	; 0x253a <ungrip>
    25c0:	fe 01       	movw	r30, r28
    25c2:	e5 58       	subi	r30, 0x85	; 133
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	aa ef       	ldi	r26, 0xFA	; 250
    25cc:	b3 e4       	ldi	r27, 0x43	; 67
    25ce:	80 83       	st	Z, r24
    25d0:	91 83       	std	Z+1, r25	; 0x01
    25d2:	a2 83       	std	Z+2, r26	; 0x02
    25d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d6:	8e 01       	movw	r16, r28
    25d8:	09 58       	subi	r16, 0x89	; 137
    25da:	1f 4f       	sbci	r17, 0xFF	; 255
    25dc:	fe 01       	movw	r30, r28
    25de:	e5 58       	subi	r30, 0x85	; 133
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	60 81       	ld	r22, Z
    25e4:	71 81       	ldd	r23, Z+1	; 0x01
    25e6:	82 81       	ldd	r24, Z+2	; 0x02
    25e8:	93 81       	ldd	r25, Z+3	; 0x03
    25ea:	26 e6       	ldi	r18, 0x66	; 102
    25ec:	36 e6       	ldi	r19, 0x66	; 102
    25ee:	46 e6       	ldi	r20, 0x66	; 102
    25f0:	55 e4       	ldi	r21, 0x45	; 69
    25f2:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	f8 01       	movw	r30, r16
    25fc:	80 83       	st	Z, r24
    25fe:	91 83       	std	Z+1, r25	; 0x01
    2600:	a2 83       	std	Z+2, r26	; 0x02
    2602:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2604:	fe 01       	movw	r30, r28
    2606:	e9 58       	subi	r30, 0x89	; 137
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	60 81       	ld	r22, Z
    260c:	71 81       	ldd	r23, Z+1	; 0x01
    260e:	82 81       	ldd	r24, Z+2	; 0x02
    2610:	93 81       	ldd	r25, Z+3	; 0x03
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	40 e8       	ldi	r20, 0x80	; 128
    2618:	5f e3       	ldi	r21, 0x3F	; 63
    261a:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    261e:	88 23       	and	r24, r24
    2620:	44 f4       	brge	.+16     	; 0x2632 <main+0xbc>
		__ticks = 1;
    2622:	fe 01       	movw	r30, r28
    2624:	eb 58       	subi	r30, 0x8B	; 139
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	91 83       	std	Z+1, r25	; 0x01
    262e:	80 83       	st	Z, r24
    2630:	64 c0       	rjmp	.+200    	; 0x26fa <main+0x184>
	else if (__tmp > 65535)
    2632:	fe 01       	movw	r30, r28
    2634:	e9 58       	subi	r30, 0x89	; 137
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	60 81       	ld	r22, Z
    263a:	71 81       	ldd	r23, Z+1	; 0x01
    263c:	82 81       	ldd	r24, Z+2	; 0x02
    263e:	93 81       	ldd	r25, Z+3	; 0x03
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	3f ef       	ldi	r19, 0xFF	; 255
    2644:	4f e7       	ldi	r20, 0x7F	; 127
    2646:	57 e4       	ldi	r21, 0x47	; 71
    2648:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    264c:	18 16       	cp	r1, r24
    264e:	0c f0       	brlt	.+2      	; 0x2652 <main+0xdc>
    2650:	43 c0       	rjmp	.+134    	; 0x26d8 <main+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2652:	fe 01       	movw	r30, r28
    2654:	e5 58       	subi	r30, 0x85	; 133
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	60 81       	ld	r22, Z
    265a:	71 81       	ldd	r23, Z+1	; 0x01
    265c:	82 81       	ldd	r24, Z+2	; 0x02
    265e:	93 81       	ldd	r25, Z+3	; 0x03
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e2       	ldi	r20, 0x20	; 32
    2666:	51 e4       	ldi	r21, 0x41	; 65
    2668:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	8e 01       	movw	r16, r28
    2672:	0b 58       	subi	r16, 0x8B	; 139
    2674:	1f 4f       	sbci	r17, 0xFF	; 255
    2676:	bc 01       	movw	r22, r24
    2678:	cd 01       	movw	r24, r26
    267a:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	f8 01       	movw	r30, r16
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	80 83       	st	Z, r24
    2688:	1f c0       	rjmp	.+62     	; 0x26c8 <main+0x152>
    268a:	fe 01       	movw	r30, r28
    268c:	ed 58       	subi	r30, 0x8D	; 141
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	80 e7       	ldi	r24, 0x70	; 112
    2692:	91 e0       	ldi	r25, 0x01	; 1
    2694:	91 83       	std	Z+1, r25	; 0x01
    2696:	80 83       	st	Z, r24
    2698:	fe 01       	movw	r30, r28
    269a:	ed 58       	subi	r30, 0x8D	; 141
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	80 81       	ld	r24, Z
    26a0:	91 81       	ldd	r25, Z+1	; 0x01
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	f1 f7       	brne	.-4      	; 0x26a2 <main+0x12c>
    26a6:	fe 01       	movw	r30, r28
    26a8:	ed 58       	subi	r30, 0x8D	; 141
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b0:	de 01       	movw	r26, r28
    26b2:	ab 58       	subi	r26, 0x8B	; 139
    26b4:	bf 4f       	sbci	r27, 0xFF	; 255
    26b6:	fe 01       	movw	r30, r28
    26b8:	eb 58       	subi	r30, 0x8B	; 139
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	80 81       	ld	r24, Z
    26be:	91 81       	ldd	r25, Z+1	; 0x01
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	11 96       	adiw	r26, 0x01	; 1
    26c4:	9c 93       	st	X, r25
    26c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c8:	fe 01       	movw	r30, r28
    26ca:	eb 58       	subi	r30, 0x8B	; 139
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	80 81       	ld	r24, Z
    26d0:	91 81       	ldd	r25, Z+1	; 0x01
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	d1 f6       	brne	.-76     	; 0x268a <main+0x114>
    26d6:	27 c0       	rjmp	.+78     	; 0x2726 <main+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d8:	8e 01       	movw	r16, r28
    26da:	0b 58       	subi	r16, 0x8B	; 139
    26dc:	1f 4f       	sbci	r17, 0xFF	; 255
    26de:	fe 01       	movw	r30, r28
    26e0:	e9 58       	subi	r30, 0x89	; 137
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	60 81       	ld	r22, Z
    26e6:	71 81       	ldd	r23, Z+1	; 0x01
    26e8:	82 81       	ldd	r24, Z+2	; 0x02
    26ea:	93 81       	ldd	r25, Z+3	; 0x03
    26ec:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	f8 01       	movw	r30, r16
    26f6:	91 83       	std	Z+1, r25	; 0x01
    26f8:	80 83       	st	Z, r24
    26fa:	de 01       	movw	r26, r28
    26fc:	af 58       	subi	r26, 0x8F	; 143
    26fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2700:	fe 01       	movw	r30, r28
    2702:	eb 58       	subi	r30, 0x8B	; 139
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	80 81       	ld	r24, Z
    2708:	91 81       	ldd	r25, Z+1	; 0x01
    270a:	8d 93       	st	X+, r24
    270c:	9c 93       	st	X, r25
    270e:	fe 01       	movw	r30, r28
    2710:	ef 58       	subi	r30, 0x8F	; 143
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	80 81       	ld	r24, Z
    2716:	91 81       	ldd	r25, Z+1	; 0x01
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <main+0x1a2>
    271c:	fe 01       	movw	r30, r28
    271e:	ef 58       	subi	r30, 0x8F	; 143
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	91 83       	std	Z+1, r25	; 0x01
    2724:	80 83       	st	Z, r24
    _delay_ms(500);

    DDRJ = 0xFF;
    2726:	e4 e0       	ldi	r30, 0x04	; 4
    2728:	f1 e0       	ldi	r31, 0x01	; 1
    272a:	8f ef       	ldi	r24, 0xFF	; 255
    272c:	80 83       	st	Z, r24
    DDRL |= (1 << 6);   //External buzzer.
    272e:	aa e0       	ldi	r26, 0x0A	; 10
    2730:	b1 e0       	ldi	r27, 0x01	; 1
    2732:	ea e0       	ldi	r30, 0x0A	; 10
    2734:	f1 e0       	ldi	r31, 0x01	; 1
    2736:	80 81       	ld	r24, Z
    2738:	80 64       	ori	r24, 0x40	; 64
    273a:	8c 93       	st	X, r24

    //D1 starts from here.
    /*********D1 initializations****************/
    state = 0;
    273c:	10 92 25 03 	sts	0x0325, r1
    2740:	10 92 24 03 	sts	0x0324, r1
    row = 6;
    2744:	86 e0       	ldi	r24, 0x06	; 6
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	90 93 49 03 	sts	0x0349, r25
    274c:	80 93 48 03 	sts	0x0348, r24
    errorFlag = 0;
    2750:	10 92 27 03 	sts	0x0327, r1
    2754:	10 92 26 03 	sts	0x0326, r1
    d1Completed = 0;
    2758:	10 92 1d 03 	sts	0x031D, r1
    275c:	10 92 1c 03 	sts	0x031C, r1

    velocity(forwardLeftSpeed, forwardRightSpeed);
    2760:	84 eb       	ldi	r24, 0xB4	; 180
    2762:	64 eb       	ldi	r22, 0xB4	; 180
    2764:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    line_follow_mm(30);
    2768:	8e e1       	ldi	r24, 0x1E	; 30
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <line_follow_mm>
    skipNodes(1);
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <skipNodes>

    line_follow_mm(30);
    2778:	8e e1       	ldi	r24, 0x1E	; 30
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <line_follow_mm>

    forward();
    2780:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    2784:	e8 c4       	rjmp	.+2512   	; 0x3156 <main+0xbe0>
    while(!d1Completed)
    {
        error = getError();
    2786:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <getError>
    278a:	fe 01       	movw	r30, r28
    278c:	ef 57       	subi	r30, 0x7F	; 127
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	91 83       	std	Z+1, r25	; 0x01
    2792:	80 83       	st	Z, r24

        if(error == 0)
    2794:	fe 01       	movw	r30, r28
    2796:	ef 57       	subi	r30, 0x7F	; 127
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	80 81       	ld	r24, Z
    279c:	91 81       	ldd	r25, Z+1	; 0x01
    279e:	00 97       	sbiw	r24, 0x00	; 0
    27a0:	69 f4       	brne	.+26     	; 0x27bc <main+0x246>
        {
            leftSpeed = forwardLeftSpeed;
    27a2:	84 eb       	ldi	r24, 0xB4	; 180
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	90 93 1f 03 	sts	0x031F, r25
    27aa:	80 93 1e 03 	sts	0x031E, r24
            rightSpeed = forwardRightSpeed;
    27ae:	84 eb       	ldi	r24, 0xB4	; 180
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	90 93 31 03 	sts	0x0331, r25
    27b6:	80 93 30 03 	sts	0x0330, r24
    27ba:	fb c3       	rjmp	.+2038   	; 0x2fb2 <main+0xa3c>
        }

        else if(error == 1)
    27bc:	fe 01       	movw	r30, r28
    27be:	ef 57       	subi	r30, 0x7F	; 127
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 81       	ld	r24, Z
    27c4:	91 81       	ldd	r25, Z+1	; 0x01
    27c6:	81 30       	cpi	r24, 0x01	; 1
    27c8:	91 05       	cpc	r25, r1
    27ca:	69 f4       	brne	.+26     	; 0x27e6 <main+0x270>
        {
            leftSpeed = forwardLeftSpeed + 20;
    27cc:	88 ec       	ldi	r24, 0xC8	; 200
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	90 93 1f 03 	sts	0x031F, r25
    27d4:	80 93 1e 03 	sts	0x031E, r24
            rightSpeed = forwardRightSpeed - 20;
    27d8:	80 ea       	ldi	r24, 0xA0	; 160
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	90 93 31 03 	sts	0x0331, r25
    27e0:	80 93 30 03 	sts	0x0330, r24
    27e4:	e6 c3       	rjmp	.+1996   	; 0x2fb2 <main+0xa3c>
        }

        else if(error == -1)
    27e6:	fe 01       	movw	r30, r28
    27e8:	ef 57       	subi	r30, 0x7F	; 127
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	80 81       	ld	r24, Z
    27ee:	91 81       	ldd	r25, Z+1	; 0x01
    27f0:	ff ef       	ldi	r31, 0xFF	; 255
    27f2:	8f 3f       	cpi	r24, 0xFF	; 255
    27f4:	9f 07       	cpc	r25, r31
    27f6:	69 f4       	brne	.+26     	; 0x2812 <main+0x29c>
        {
            leftSpeed = forwardLeftSpeed - 20;
    27f8:	80 ea       	ldi	r24, 0xA0	; 160
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	90 93 1f 03 	sts	0x031F, r25
    2800:	80 93 1e 03 	sts	0x031E, r24
            rightSpeed = forwardRightSpeed + 20;
    2804:	88 ec       	ldi	r24, 0xC8	; 200
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	90 93 31 03 	sts	0x0331, r25
    280c:	80 93 30 03 	sts	0x0330, r24
    2810:	d0 c3       	rjmp	.+1952   	; 0x2fb2 <main+0xa3c>
        }

        else if(error == 100)
    2812:	fe 01       	movw	r30, r28
    2814:	ef 57       	subi	r30, 0x7F	; 127
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	80 81       	ld	r24, Z
    281a:	91 81       	ldd	r25, Z+1	; 0x01
    281c:	84 36       	cpi	r24, 0x64	; 100
    281e:	91 05       	cpc	r25, r1
    2820:	09 f0       	breq	.+2      	; 0x2824 <main+0x2ae>
    2822:	c5 c3       	rjmp	.+1930   	; 0x2fae <main+0xa38>
        {
            if(lastError != error)
    2824:	fe 01       	movw	r30, r28
    2826:	e1 58       	subi	r30, 0x81	; 129
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	de 01       	movw	r26, r28
    282c:	af 57       	subi	r26, 0x7F	; 127
    282e:	bf 4f       	sbci	r27, 0xFF	; 255
    2830:	20 81       	ld	r18, Z
    2832:	31 81       	ldd	r19, Z+1	; 0x01
    2834:	8d 91       	ld	r24, X+
    2836:	9c 91       	ld	r25, X
    2838:	11 97       	sbiw	r26, 0x01	; 1
    283a:	28 17       	cp	r18, r24
    283c:	39 07       	cpc	r19, r25
    283e:	09 f4       	brne	.+2      	; 0x2842 <main+0x2cc>
    2840:	b8 c3       	rjmp	.+1904   	; 0x2fb2 <main+0xa3c>
            {
                nodeMissTracker = 0;
    2842:	10 92 19 03 	sts	0x0319, r1
    2846:	10 92 18 03 	sts	0x0318, r1

                switch(state)
    284a:	80 91 24 03 	lds	r24, 0x0324
    284e:	90 91 25 03 	lds	r25, 0x0325
    2852:	cb 56       	subi	r28, 0x6B	; 107
    2854:	df 4f       	sbci	r29, 0xFF	; 255
    2856:	99 83       	std	Y+1, r25	; 0x01
    2858:	88 83       	st	Y, r24
    285a:	c5 59       	subi	r28, 0x95	; 149
    285c:	d0 40       	sbci	r29, 0x00	; 0
    285e:	cb 56       	subi	r28, 0x6B	; 107
    2860:	df 4f       	sbci	r29, 0xFF	; 255
    2862:	e8 81       	ld	r30, Y
    2864:	f9 81       	ldd	r31, Y+1	; 0x01
    2866:	c5 59       	subi	r28, 0x95	; 149
    2868:	d0 40       	sbci	r29, 0x00	; 0
    286a:	e4 30       	cpi	r30, 0x04	; 4
    286c:	f1 05       	cpc	r31, r1
    286e:	09 f4       	brne	.+2      	; 0x2872 <main+0x2fc>
    2870:	c6 c2       	rjmp	.+1420   	; 0x2dfe <main+0x888>
    2872:	cb 56       	subi	r28, 0x6B	; 107
    2874:	df 4f       	sbci	r29, 0xFF	; 255
    2876:	88 81       	ld	r24, Y
    2878:	99 81       	ldd	r25, Y+1	; 0x01
    287a:	c5 59       	subi	r28, 0x95	; 149
    287c:	d0 40       	sbci	r29, 0x00	; 0
    287e:	85 30       	cpi	r24, 0x05	; 5
    2880:	91 05       	cpc	r25, r1
    2882:	94 f5       	brge	.+100    	; 0x28e8 <main+0x372>
    2884:	cb 56       	subi	r28, 0x6B	; 107
    2886:	df 4f       	sbci	r29, 0xFF	; 255
    2888:	e8 81       	ld	r30, Y
    288a:	f9 81       	ldd	r31, Y+1	; 0x01
    288c:	c5 59       	subi	r28, 0x95	; 149
    288e:	d0 40       	sbci	r29, 0x00	; 0
    2890:	e1 30       	cpi	r30, 0x01	; 1
    2892:	f1 05       	cpc	r31, r1
    2894:	09 f4       	brne	.+2      	; 0x2898 <main+0x322>
    2896:	84 c2       	rjmp	.+1288   	; 0x2da0 <main+0x82a>
    2898:	cb 56       	subi	r28, 0x6B	; 107
    289a:	df 4f       	sbci	r29, 0xFF	; 255
    289c:	88 81       	ld	r24, Y
    289e:	99 81       	ldd	r25, Y+1	; 0x01
    28a0:	c5 59       	subi	r28, 0x95	; 149
    28a2:	d0 40       	sbci	r29, 0x00	; 0
    28a4:	82 30       	cpi	r24, 0x02	; 2
    28a6:	91 05       	cpc	r25, r1
    28a8:	54 f4       	brge	.+20     	; 0x28be <main+0x348>
    28aa:	cb 56       	subi	r28, 0x6B	; 107
    28ac:	df 4f       	sbci	r29, 0xFF	; 255
    28ae:	e8 81       	ld	r30, Y
    28b0:	f9 81       	ldd	r31, Y+1	; 0x01
    28b2:	c5 59       	subi	r28, 0x95	; 149
    28b4:	d0 40       	sbci	r29, 0x00	; 0
    28b6:	30 97       	sbiw	r30, 0x00	; 0
    28b8:	09 f4       	brne	.+2      	; 0x28bc <main+0x346>
    28ba:	3f c0       	rjmp	.+126    	; 0x293a <main+0x3c4>
    28bc:	4b c3       	rjmp	.+1686   	; 0x2f54 <main+0x9de>
    28be:	cb 56       	subi	r28, 0x6B	; 107
    28c0:	df 4f       	sbci	r29, 0xFF	; 255
    28c2:	88 81       	ld	r24, Y
    28c4:	99 81       	ldd	r25, Y+1	; 0x01
    28c6:	c5 59       	subi	r28, 0x95	; 149
    28c8:	d0 40       	sbci	r29, 0x00	; 0
    28ca:	82 30       	cpi	r24, 0x02	; 2
    28cc:	91 05       	cpc	r25, r1
    28ce:	09 f4       	brne	.+2      	; 0x28d2 <main+0x35c>
    28d0:	7a c2       	rjmp	.+1268   	; 0x2dc6 <main+0x850>
    28d2:	cb 56       	subi	r28, 0x6B	; 107
    28d4:	df 4f       	sbci	r29, 0xFF	; 255
    28d6:	e8 81       	ld	r30, Y
    28d8:	f9 81       	ldd	r31, Y+1	; 0x01
    28da:	c5 59       	subi	r28, 0x95	; 149
    28dc:	d0 40       	sbci	r29, 0x00	; 0
    28de:	e3 30       	cpi	r30, 0x03	; 3
    28e0:	f1 05       	cpc	r31, r1
    28e2:	09 f4       	brne	.+2      	; 0x28e6 <main+0x370>
    28e4:	7e c2       	rjmp	.+1276   	; 0x2de2 <main+0x86c>
    28e6:	36 c3       	rjmp	.+1644   	; 0x2f54 <main+0x9de>
    28e8:	cb 56       	subi	r28, 0x6B	; 107
    28ea:	df 4f       	sbci	r29, 0xFF	; 255
    28ec:	88 81       	ld	r24, Y
    28ee:	99 81       	ldd	r25, Y+1	; 0x01
    28f0:	c5 59       	subi	r28, 0x95	; 149
    28f2:	d0 40       	sbci	r29, 0x00	; 0
    28f4:	86 30       	cpi	r24, 0x06	; 6
    28f6:	91 05       	cpc	r25, r1
    28f8:	09 f4       	brne	.+2      	; 0x28fc <main+0x386>
    28fa:	ee c2       	rjmp	.+1500   	; 0x2ed8 <main+0x962>
    28fc:	cb 56       	subi	r28, 0x6B	; 107
    28fe:	df 4f       	sbci	r29, 0xFF	; 255
    2900:	e8 81       	ld	r30, Y
    2902:	f9 81       	ldd	r31, Y+1	; 0x01
    2904:	c5 59       	subi	r28, 0x95	; 149
    2906:	d0 40       	sbci	r29, 0x00	; 0
    2908:	e6 30       	cpi	r30, 0x06	; 6
    290a:	f1 05       	cpc	r31, r1
    290c:	0c f4       	brge	.+2      	; 0x2910 <main+0x39a>
    290e:	d1 c2       	rjmp	.+1442   	; 0x2eb2 <main+0x93c>
    2910:	cb 56       	subi	r28, 0x6B	; 107
    2912:	df 4f       	sbci	r29, 0xFF	; 255
    2914:	88 81       	ld	r24, Y
    2916:	99 81       	ldd	r25, Y+1	; 0x01
    2918:	c5 59       	subi	r28, 0x95	; 149
    291a:	d0 40       	sbci	r29, 0x00	; 0
    291c:	87 30       	cpi	r24, 0x07	; 7
    291e:	91 05       	cpc	r25, r1
    2920:	09 f4       	brne	.+2      	; 0x2924 <main+0x3ae>
    2922:	e8 c2       	rjmp	.+1488   	; 0x2ef4 <main+0x97e>
    2924:	cb 56       	subi	r28, 0x6B	; 107
    2926:	df 4f       	sbci	r29, 0xFF	; 255
    2928:	e8 81       	ld	r30, Y
    292a:	f9 81       	ldd	r31, Y+1	; 0x01
    292c:	c5 59       	subi	r28, 0x95	; 149
    292e:	d0 40       	sbci	r29, 0x00	; 0
    2930:	e8 30       	cpi	r30, 0x08	; 8
    2932:	f1 05       	cpc	r31, r1
    2934:	09 f4       	brne	.+2      	; 0x2938 <main+0x3c2>
    2936:	ec c2       	rjmp	.+1496   	; 0x2f10 <main+0x99a>
    2938:	0d c3       	rjmp	.+1562   	; 0x2f54 <main+0x9de>
                {
                       case 0 : if(row == 0)
    293a:	80 91 48 03 	lds	r24, 0x0348
    293e:	90 91 49 03 	lds	r25, 0x0349
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	09 f0       	breq	.+2      	; 0x2948 <main+0x3d2>
    2946:	d6 c0       	rjmp	.+428    	; 0x2af4 <main+0x57e>
                                {
                                    //errorFlag = 0;
                                    arenaRight();
    2948:	0e 94 3e 23 	call	0x467c	; 0x467c <arenaRight>
                                    grip_2();
    294c:	0e 94 b1 12 	call	0x2562	; 0x2562 <grip_2>
    2950:	fe 01       	movw	r30, r28
    2952:	e3 59       	subi	r30, 0x93	; 147
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	aa ef       	ldi	r26, 0xFA	; 250
    295c:	b3 e4       	ldi	r27, 0x43	; 67
    295e:	80 83       	st	Z, r24
    2960:	91 83       	std	Z+1, r25	; 0x01
    2962:	a2 83       	std	Z+2, r26	; 0x02
    2964:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2966:	8e 01       	movw	r16, r28
    2968:	07 59       	subi	r16, 0x97	; 151
    296a:	1f 4f       	sbci	r17, 0xFF	; 255
    296c:	fe 01       	movw	r30, r28
    296e:	e3 59       	subi	r30, 0x93	; 147
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	60 81       	ld	r22, Z
    2974:	71 81       	ldd	r23, Z+1	; 0x01
    2976:	82 81       	ldd	r24, Z+2	; 0x02
    2978:	93 81       	ldd	r25, Z+3	; 0x03
    297a:	26 e6       	ldi	r18, 0x66	; 102
    297c:	36 e6       	ldi	r19, 0x66	; 102
    297e:	46 e6       	ldi	r20, 0x66	; 102
    2980:	55 e4       	ldi	r21, 0x45	; 69
    2982:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	f8 01       	movw	r30, r16
    298c:	80 83       	st	Z, r24
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	a2 83       	std	Z+2, r26	; 0x02
    2992:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2994:	fe 01       	movw	r30, r28
    2996:	e7 59       	subi	r30, 0x97	; 151
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	60 81       	ld	r22, Z
    299c:	71 81       	ldd	r23, Z+1	; 0x01
    299e:	82 81       	ldd	r24, Z+2	; 0x02
    29a0:	93 81       	ldd	r25, Z+3	; 0x03
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	40 e8       	ldi	r20, 0x80	; 128
    29a8:	5f e3       	ldi	r21, 0x3F	; 63
    29aa:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    29ae:	88 23       	and	r24, r24
    29b0:	44 f4       	brge	.+16     	; 0x29c2 <main+0x44c>
		__ticks = 1;
    29b2:	fe 01       	movw	r30, r28
    29b4:	e9 59       	subi	r30, 0x99	; 153
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	91 83       	std	Z+1, r25	; 0x01
    29be:	80 83       	st	Z, r24
    29c0:	64 c0       	rjmp	.+200    	; 0x2a8a <main+0x514>
	else if (__tmp > 65535)
    29c2:	fe 01       	movw	r30, r28
    29c4:	e7 59       	subi	r30, 0x97	; 151
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	60 81       	ld	r22, Z
    29ca:	71 81       	ldd	r23, Z+1	; 0x01
    29cc:	82 81       	ldd	r24, Z+2	; 0x02
    29ce:	93 81       	ldd	r25, Z+3	; 0x03
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	3f ef       	ldi	r19, 0xFF	; 255
    29d4:	4f e7       	ldi	r20, 0x7F	; 127
    29d6:	57 e4       	ldi	r21, 0x47	; 71
    29d8:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    29dc:	18 16       	cp	r1, r24
    29de:	0c f0       	brlt	.+2      	; 0x29e2 <main+0x46c>
    29e0:	43 c0       	rjmp	.+134    	; 0x2a68 <main+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e2:	fe 01       	movw	r30, r28
    29e4:	e3 59       	subi	r30, 0x93	; 147
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	60 81       	ld	r22, Z
    29ea:	71 81       	ldd	r23, Z+1	; 0x01
    29ec:	82 81       	ldd	r24, Z+2	; 0x02
    29ee:	93 81       	ldd	r25, Z+3	; 0x03
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e2       	ldi	r20, 0x20	; 32
    29f6:	51 e4       	ldi	r21, 0x41	; 65
    29f8:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	8e 01       	movw	r16, r28
    2a02:	09 59       	subi	r16, 0x99	; 153
    2a04:	1f 4f       	sbci	r17, 0xFF	; 255
    2a06:	bc 01       	movw	r22, r24
    2a08:	cd 01       	movw	r24, r26
    2a0a:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	f8 01       	movw	r30, r16
    2a14:	91 83       	std	Z+1, r25	; 0x01
    2a16:	80 83       	st	Z, r24
    2a18:	1f c0       	rjmp	.+62     	; 0x2a58 <main+0x4e2>
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	eb 59       	subi	r30, 0x9B	; 155
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	80 e7       	ldi	r24, 0x70	; 112
    2a22:	91 e0       	ldi	r25, 0x01	; 1
    2a24:	91 83       	std	Z+1, r25	; 0x01
    2a26:	80 83       	st	Z, r24
    2a28:	fe 01       	movw	r30, r28
    2a2a:	eb 59       	subi	r30, 0x9B	; 155
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	80 81       	ld	r24, Z
    2a30:	91 81       	ldd	r25, Z+1	; 0x01
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	f1 f7       	brne	.-4      	; 0x2a32 <main+0x4bc>
    2a36:	fe 01       	movw	r30, r28
    2a38:	eb 59       	subi	r30, 0x9B	; 155
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	91 83       	std	Z+1, r25	; 0x01
    2a3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a40:	de 01       	movw	r26, r28
    2a42:	a9 59       	subi	r26, 0x99	; 153
    2a44:	bf 4f       	sbci	r27, 0xFF	; 255
    2a46:	fe 01       	movw	r30, r28
    2a48:	e9 59       	subi	r30, 0x99	; 153
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	80 81       	ld	r24, Z
    2a4e:	91 81       	ldd	r25, Z+1	; 0x01
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	11 96       	adiw	r26, 0x01	; 1
    2a54:	9c 93       	st	X, r25
    2a56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a58:	fe 01       	movw	r30, r28
    2a5a:	e9 59       	subi	r30, 0x99	; 153
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	80 81       	ld	r24, Z
    2a60:	91 81       	ldd	r25, Z+1	; 0x01
    2a62:	00 97       	sbiw	r24, 0x00	; 0
    2a64:	d1 f6       	brne	.-76     	; 0x2a1a <main+0x4a4>
    2a66:	27 c0       	rjmp	.+78     	; 0x2ab6 <main+0x540>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a68:	8e 01       	movw	r16, r28
    2a6a:	09 59       	subi	r16, 0x99	; 153
    2a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6e:	fe 01       	movw	r30, r28
    2a70:	e7 59       	subi	r30, 0x97	; 151
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	60 81       	ld	r22, Z
    2a76:	71 81       	ldd	r23, Z+1	; 0x01
    2a78:	82 81       	ldd	r24, Z+2	; 0x02
    2a7a:	93 81       	ldd	r25, Z+3	; 0x03
    2a7c:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	f8 01       	movw	r30, r16
    2a86:	91 83       	std	Z+1, r25	; 0x01
    2a88:	80 83       	st	Z, r24
    2a8a:	de 01       	movw	r26, r28
    2a8c:	ad 59       	subi	r26, 0x9D	; 157
    2a8e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a90:	fe 01       	movw	r30, r28
    2a92:	e9 59       	subi	r30, 0x99	; 153
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	80 81       	ld	r24, Z
    2a98:	91 81       	ldd	r25, Z+1	; 0x01
    2a9a:	8d 93       	st	X+, r24
    2a9c:	9c 93       	st	X, r25
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	ed 59       	subi	r30, 0x9D	; 157
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	80 81       	ld	r24, Z
    2aa6:	91 81       	ldd	r25, Z+1	; 0x01
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	f1 f7       	brne	.-4      	; 0x2aa8 <main+0x532>
    2aac:	fe 01       	movw	r30, r28
    2aae:	ed 59       	subi	r30, 0x9D	; 157
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	91 83       	std	Z+1, r25	; 0x01
    2ab4:	80 83       	st	Z, r24
                                    _delay_ms(500);

                                    errorFlag = 0;
    2ab6:	10 92 27 03 	sts	0x0327, r1
    2aba:	10 92 26 03 	sts	0x0326, r1

                                    nodeMissedFlag = 0;
    2abe:	10 92 1b 03 	sts	0x031B, r1
    2ac2:	10 92 1a 03 	sts	0x031A, r1
                                    nodeMissTracker = 0;
    2ac6:	10 92 19 03 	sts	0x0319, r1
    2aca:	10 92 18 03 	sts	0x0318, r1

                                    line_follow_mm(20);
    2ace:	84 e1       	ldi	r24, 0x14	; 20
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <line_follow_mm>
                                    skipNodes(2);
    2ad6:	82 e0       	ldi	r24, 0x02	; 2
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <skipNodes>
                                    stop();
    2ade:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>

                                    buzzer_2();
    2ae2:	0e 94 bb 3f 	call	0x7f76	; 0x7f76 <buzzer_2>

                                    d1Completed = 1;
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	90 93 1d 03 	sts	0x031D, r25
    2aee:	80 93 1c 03 	sts	0x031C, r24
    2af2:	53 c1       	rjmp	.+678    	; 0x2d9a <main+0x824>
                                }

                                else if(row == 2)
    2af4:	80 91 48 03 	lds	r24, 0x0348
    2af8:	90 91 49 03 	lds	r25, 0x0349
    2afc:	82 30       	cpi	r24, 0x02	; 2
    2afe:	91 05       	cpc	r25, r1
    2b00:	09 f0       	breq	.+2      	; 0x2b04 <main+0x58e>
    2b02:	46 c0       	rjmp	.+140    	; 0x2b90 <main+0x61a>
                                {
                                    arenaRight();
    2b04:	0e 94 3e 23 	call	0x467c	; 0x467c <arenaRight>

                                    switch(checkForCube())
    2b08:	0e 94 26 2c 	call	0x584c	; 0x584c <checkForCube>
    2b0c:	cd 56       	subi	r28, 0x6D	; 109
    2b0e:	df 4f       	sbci	r29, 0xFF	; 255
    2b10:	99 83       	std	Y+1, r25	; 0x01
    2b12:	88 83       	st	Y, r24
    2b14:	c3 59       	subi	r28, 0x93	; 147
    2b16:	d0 40       	sbci	r29, 0x00	; 0
    2b18:	cd 56       	subi	r28, 0x6D	; 109
    2b1a:	df 4f       	sbci	r29, 0xFF	; 255
    2b1c:	88 81       	ld	r24, Y
    2b1e:	99 81       	ldd	r25, Y+1	; 0x01
    2b20:	c3 59       	subi	r28, 0x93	; 147
    2b22:	d0 40       	sbci	r29, 0x00	; 0
    2b24:	81 30       	cpi	r24, 0x01	; 1
    2b26:	91 05       	cpc	r25, r1
    2b28:	91 f0       	breq	.+36     	; 0x2b4e <main+0x5d8>
    2b2a:	cd 56       	subi	r28, 0x6D	; 109
    2b2c:	df 4f       	sbci	r29, 0xFF	; 255
    2b2e:	e8 81       	ld	r30, Y
    2b30:	f9 81       	ldd	r31, Y+1	; 0x01
    2b32:	c3 59       	subi	r28, 0x93	; 147
    2b34:	d0 40       	sbci	r29, 0x00	; 0
    2b36:	e2 30       	cpi	r30, 0x02	; 2
    2b38:	f1 05       	cpc	r31, r1
    2b3a:	d1 f0       	breq	.+52     	; 0x2b70 <main+0x5fa>
    2b3c:	cd 56       	subi	r28, 0x6D	; 109
    2b3e:	df 4f       	sbci	r29, 0xFF	; 255
    2b40:	88 81       	ld	r24, Y
    2b42:	99 81       	ldd	r25, Y+1	; 0x01
    2b44:	c3 59       	subi	r28, 0x93	; 147
    2b46:	d0 40       	sbci	r29, 0x00	; 0
    2b48:	00 97       	sbiw	r24, 0x00	; 0
    2b4a:	c9 f0       	breq	.+50     	; 0x2b7e <main+0x608>
    2b4c:	26 c1       	rjmp	.+588    	; 0x2d9a <main+0x824>
                                    {
                                        case 1 :state = 4;
    2b4e:	84 e0       	ldi	r24, 0x04	; 4
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	90 93 25 03 	sts	0x0325, r25
    2b56:	80 93 24 03 	sts	0x0324, r24
                                                buzzerBeep_1(); arenaLeft_2(); state = 9; break;
    2b5a:	0e 94 4c 38 	call	0x7098	; 0x7098 <buzzerBeep_1>
    2b5e:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <arenaLeft_2>
    2b62:	89 e0       	ldi	r24, 0x09	; 9
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	90 93 25 03 	sts	0x0325, r25
    2b6a:	80 93 24 03 	sts	0x0324, r24
    2b6e:	15 c1       	rjmp	.+554    	; 0x2d9a <main+0x824>

                                                //case 2 : buzzerBeep(); arenaLeft_2(); state = 9; break;
                                        case 2 : state = 5; break;
    2b70:	85 e0       	ldi	r24, 0x05	; 5
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	90 93 25 03 	sts	0x0325, r25
    2b78:	80 93 24 03 	sts	0x0324, r24
    2b7c:	0e c1       	rjmp	.+540    	; 0x2d9a <main+0x824>
                                                //case 0 : break;
                                        case 0 : arenaLeft_2(); state = 9; break;
    2b7e:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <arenaLeft_2>
    2b82:	89 e0       	ldi	r24, 0x09	; 9
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	90 93 25 03 	sts	0x0325, r25
    2b8a:	80 93 24 03 	sts	0x0324, r24
    2b8e:	05 c1       	rjmp	.+522    	; 0x2d9a <main+0x824>
                                    }
                                }

                                else
                                {
                                    arenaLeft();
    2b90:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <arenaLeft>
                                    switch(checkForCube())
    2b94:	0e 94 26 2c 	call	0x584c	; 0x584c <checkForCube>
    2b98:	cf 56       	subi	r28, 0x6F	; 111
    2b9a:	df 4f       	sbci	r29, 0xFF	; 255
    2b9c:	99 83       	std	Y+1, r25	; 0x01
    2b9e:	88 83       	st	Y, r24
    2ba0:	c1 59       	subi	r28, 0x91	; 145
    2ba2:	d0 40       	sbci	r29, 0x00	; 0
    2ba4:	cf 56       	subi	r28, 0x6F	; 111
    2ba6:	df 4f       	sbci	r29, 0xFF	; 255
    2ba8:	e8 81       	ld	r30, Y
    2baa:	f9 81       	ldd	r31, Y+1	; 0x01
    2bac:	c1 59       	subi	r28, 0x91	; 145
    2bae:	d0 40       	sbci	r29, 0x00	; 0
    2bb0:	e1 30       	cpi	r30, 0x01	; 1
    2bb2:	f1 05       	cpc	r31, r1
    2bb4:	a1 f0       	breq	.+40     	; 0x2bde <main+0x668>
    2bb6:	cf 56       	subi	r28, 0x6F	; 111
    2bb8:	df 4f       	sbci	r29, 0xFF	; 255
    2bba:	88 81       	ld	r24, Y
    2bbc:	99 81       	ldd	r25, Y+1	; 0x01
    2bbe:	c1 59       	subi	r28, 0x91	; 145
    2bc0:	d0 40       	sbci	r29, 0x00	; 0
    2bc2:	82 30       	cpi	r24, 0x02	; 2
    2bc4:	91 05       	cpc	r25, r1
    2bc6:	09 f4       	brne	.+2      	; 0x2bca <main+0x654>
    2bc8:	74 c0       	rjmp	.+232    	; 0x2cb2 <main+0x73c>
    2bca:	cf 56       	subi	r28, 0x6F	; 111
    2bcc:	df 4f       	sbci	r29, 0xFF	; 255
    2bce:	e8 81       	ld	r30, Y
    2bd0:	f9 81       	ldd	r31, Y+1	; 0x01
    2bd2:	c1 59       	subi	r28, 0x91	; 145
    2bd4:	d0 40       	sbci	r29, 0x00	; 0
    2bd6:	30 97       	sbiw	r30, 0x00	; 0
    2bd8:	09 f4       	brne	.+2      	; 0x2bdc <main+0x666>
    2bda:	72 c0       	rjmp	.+228    	; 0x2cc0 <main+0x74a>
    2bdc:	de c0       	rjmp	.+444    	; 0x2d9a <main+0x824>
                                    {
                                        case 1 :

                                                buzzerBeep_1();
    2bde:	0e 94 4c 38 	call	0x7098	; 0x7098 <buzzerBeep_1>
                                                arenaUturn();
    2be2:	0e 94 c4 29 	call	0x5388	; 0x5388 <arenaUturn>
                                                state = 4;
    2be6:	84 e0       	ldi	r24, 0x04	; 4
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	90 93 25 03 	sts	0x0325, r25
    2bee:	80 93 24 03 	sts	0x0324, r24

                                                switch(checkForCube())
    2bf2:	0e 94 26 2c 	call	0x584c	; 0x584c <checkForCube>
    2bf6:	c1 57       	subi	r28, 0x71	; 113
    2bf8:	df 4f       	sbci	r29, 0xFF	; 255
    2bfa:	99 83       	std	Y+1, r25	; 0x01
    2bfc:	88 83       	st	Y, r24
    2bfe:	cf 58       	subi	r28, 0x8F	; 143
    2c00:	d0 40       	sbci	r29, 0x00	; 0
    2c02:	c1 57       	subi	r28, 0x71	; 113
    2c04:	df 4f       	sbci	r29, 0xFF	; 255
    2c06:	88 81       	ld	r24, Y
    2c08:	99 81       	ldd	r25, Y+1	; 0x01
    2c0a:	cf 58       	subi	r28, 0x8F	; 143
    2c0c:	d0 40       	sbci	r29, 0x00	; 0
    2c0e:	81 30       	cpi	r24, 0x01	; 1
    2c10:	91 05       	cpc	r25, r1
    2c12:	91 f0       	breq	.+36     	; 0x2c38 <main+0x6c2>
    2c14:	c1 57       	subi	r28, 0x71	; 113
    2c16:	df 4f       	sbci	r29, 0xFF	; 255
    2c18:	e8 81       	ld	r30, Y
    2c1a:	f9 81       	ldd	r31, Y+1	; 0x01
    2c1c:	cf 58       	subi	r28, 0x8F	; 143
    2c1e:	d0 40       	sbci	r29, 0x00	; 0
    2c20:	e2 30       	cpi	r30, 0x02	; 2
    2c22:	f1 05       	cpc	r31, r1
    2c24:	31 f1       	breq	.+76     	; 0x2c72 <main+0x6fc>
    2c26:	c1 57       	subi	r28, 0x71	; 113
    2c28:	df 4f       	sbci	r29, 0xFF	; 255
    2c2a:	88 81       	ld	r24, Y
    2c2c:	99 81       	ldd	r25, Y+1	; 0x01
    2c2e:	cf 58       	subi	r28, 0x8F	; 143
    2c30:	d0 40       	sbci	r29, 0x00	; 0
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	29 f1       	breq	.+74     	; 0x2c80 <main+0x70a>
    2c36:	b1 c0       	rjmp	.+354    	; 0x2d9a <main+0x824>
                                                {
                                                    case 1 :
                                                             if(row == 1)
    2c38:	80 91 48 03 	lds	r24, 0x0348
    2c3c:	90 91 49 03 	lds	r25, 0x0349
    2c40:	81 30       	cpi	r24, 0x01	; 1
    2c42:	91 05       	cpc	r25, r1
    2c44:	59 f4       	brne	.+22     	; 0x2c5c <main+0x6e6>
                                                             {

                                                                buzzerBeep_1();
    2c46:	0e 94 4c 38 	call	0x7098	; 0x7098 <buzzerBeep_1>

                                                                arenaRight_2(); state = 9; break;
    2c4a:	0e 94 ed 24 	call	0x49da	; 0x49da <arenaRight_2>
    2c4e:	89 e0       	ldi	r24, 0x09	; 9
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	90 93 25 03 	sts	0x0325, r25
    2c56:	80 93 24 03 	sts	0x0324, r24
    2c5a:	9f c0       	rjmp	.+318    	; 0x2d9a <main+0x824>
                                                             }
                                                             else
                                                             {
                                                                buzzerBeep_1(); arenaLeft_2(); state = 9; break;
    2c5c:	0e 94 4c 38 	call	0x7098	; 0x7098 <buzzerBeep_1>
    2c60:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <arenaLeft_2>
    2c64:	89 e0       	ldi	r24, 0x09	; 9
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	90 93 25 03 	sts	0x0325, r25
    2c6c:	80 93 24 03 	sts	0x0324, r24
    2c70:	94 c0       	rjmp	.+296    	; 0x2d9a <main+0x824>
                                                             }
                                                //case 2 : buzzerBeep(); arenaLeft_2(); state = 9; break;
                                                    case 2 : state = 5; break;
    2c72:	85 e0       	ldi	r24, 0x05	; 5
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	90 93 25 03 	sts	0x0325, r25
    2c7a:	80 93 24 03 	sts	0x0324, r24
    2c7e:	8d c0       	rjmp	.+282    	; 0x2d9a <main+0x824>
                                                //case 0 : break;
                                                    case 0 : if(row == 1)
    2c80:	80 91 48 03 	lds	r24, 0x0348
    2c84:	90 91 49 03 	lds	r25, 0x0349
    2c88:	81 30       	cpi	r24, 0x01	; 1
    2c8a:	91 05       	cpc	r25, r1
    2c8c:	49 f4       	brne	.+18     	; 0x2ca0 <main+0x72a>
                                                             {
                                                                arenaRight_2(); state = 9; break;
    2c8e:	0e 94 ed 24 	call	0x49da	; 0x49da <arenaRight_2>
    2c92:	89 e0       	ldi	r24, 0x09	; 9
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	90 93 25 03 	sts	0x0325, r25
    2c9a:	80 93 24 03 	sts	0x0324, r24
    2c9e:	7d c0       	rjmp	.+250    	; 0x2d9a <main+0x824>
                                                             }
                                                             else
                                                             {
                                                                arenaLeft_2(); state = 9; break;
    2ca0:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <arenaLeft_2>
    2ca4:	89 e0       	ldi	r24, 0x09	; 9
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	90 93 25 03 	sts	0x0325, r25
    2cac:	80 93 24 03 	sts	0x0324, r24
    2cb0:	74 c0       	rjmp	.+232    	; 0x2d9a <main+0x824>
                                                             }

                                                    }
                                                    break;

                                    case 2 : state = 1; break;
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	90 93 25 03 	sts	0x0325, r25
    2cba:	80 93 24 03 	sts	0x0324, r24
    2cbe:	6d c0       	rjmp	.+218    	; 0x2d9a <main+0x824>

                                    case 0 : state = 4;
    2cc0:	84 e0       	ldi	r24, 0x04	; 4
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	90 93 25 03 	sts	0x0325, r25
    2cc8:	80 93 24 03 	sts	0x0324, r24
                                             arenaUturn();
    2ccc:	0e 94 c4 29 	call	0x5388	; 0x5388 <arenaUturn>


                                             switch(checkForCube())
    2cd0:	0e 94 26 2c 	call	0x584c	; 0x584c <checkForCube>
    2cd4:	c3 57       	subi	r28, 0x73	; 115
    2cd6:	df 4f       	sbci	r29, 0xFF	; 255
    2cd8:	99 83       	std	Y+1, r25	; 0x01
    2cda:	88 83       	st	Y, r24
    2cdc:	cd 58       	subi	r28, 0x8D	; 141
    2cde:	d0 40       	sbci	r29, 0x00	; 0
    2ce0:	c3 57       	subi	r28, 0x73	; 115
    2ce2:	df 4f       	sbci	r29, 0xFF	; 255
    2ce4:	e8 81       	ld	r30, Y
    2ce6:	f9 81       	ldd	r31, Y+1	; 0x01
    2ce8:	cd 58       	subi	r28, 0x8D	; 141
    2cea:	d0 40       	sbci	r29, 0x00	; 0
    2cec:	e1 30       	cpi	r30, 0x01	; 1
    2cee:	f1 05       	cpc	r31, r1
    2cf0:	91 f0       	breq	.+36     	; 0x2d16 <main+0x7a0>
    2cf2:	c3 57       	subi	r28, 0x73	; 115
    2cf4:	df 4f       	sbci	r29, 0xFF	; 255
    2cf6:	88 81       	ld	r24, Y
    2cf8:	99 81       	ldd	r25, Y+1	; 0x01
    2cfa:	cd 58       	subi	r28, 0x8D	; 141
    2cfc:	d0 40       	sbci	r29, 0x00	; 0
    2cfe:	82 30       	cpi	r24, 0x02	; 2
    2d00:	91 05       	cpc	r25, r1
    2d02:	61 f1       	breq	.+88     	; 0x2d5c <main+0x7e6>
    2d04:	c3 57       	subi	r28, 0x73	; 115
    2d06:	df 4f       	sbci	r29, 0xFF	; 255
    2d08:	e8 81       	ld	r30, Y
    2d0a:	f9 81       	ldd	r31, Y+1	; 0x01
    2d0c:	cd 58       	subi	r28, 0x8D	; 141
    2d0e:	d0 40       	sbci	r29, 0x00	; 0
    2d10:	30 97       	sbiw	r30, 0x00	; 0
    2d12:	59 f1       	breq	.+86     	; 0x2d6a <main+0x7f4>
    2d14:	42 c0       	rjmp	.+132    	; 0x2d9a <main+0x824>
                                             {
                                                case 1 : line_follow_mm(6);
    2d16:	86 e0       	ldi	r24, 0x06	; 6
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <line_follow_mm>
                                                         stop();
    2d1e:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
                                                         if(row == 1)
    2d22:	80 91 48 03 	lds	r24, 0x0348
    2d26:	90 91 49 03 	lds	r25, 0x0349
    2d2a:	81 30       	cpi	r24, 0x01	; 1
    2d2c:	91 05       	cpc	r25, r1
    2d2e:	59 f4       	brne	.+22     	; 0x2d46 <main+0x7d0>
                                                         {
                                                             buzzerBeep_1(); arenaRight_2(); state = 9; break;
    2d30:	0e 94 4c 38 	call	0x7098	; 0x7098 <buzzerBeep_1>
    2d34:	0e 94 ed 24 	call	0x49da	; 0x49da <arenaRight_2>
    2d38:	89 e0       	ldi	r24, 0x09	; 9
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	90 93 25 03 	sts	0x0325, r25
    2d40:	80 93 24 03 	sts	0x0324, r24
    2d44:	2a c0       	rjmp	.+84     	; 0x2d9a <main+0x824>
                                                         }
                                                        else
                                                        {

                                                            buzzerBeep_1();
    2d46:	0e 94 4c 38 	call	0x7098	; 0x7098 <buzzerBeep_1>

                                                            arenaLeft_2(); state = 9; break;
    2d4a:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <arenaLeft_2>
    2d4e:	89 e0       	ldi	r24, 0x09	; 9
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	90 93 25 03 	sts	0x0325, r25
    2d56:	80 93 24 03 	sts	0x0324, r24
    2d5a:	1f c0       	rjmp	.+62     	; 0x2d9a <main+0x824>
                                                        }
                                                //case 2 : buzzerBeep(); arenaLeft_2(); state = 9; break;
                                                case 2 : state = 5; break;
    2d5c:	85 e0       	ldi	r24, 0x05	; 5
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	90 93 25 03 	sts	0x0325, r25
    2d64:	80 93 24 03 	sts	0x0324, r24
    2d68:	18 c0       	rjmp	.+48     	; 0x2d9a <main+0x824>
                                                //case 0 : break;
                                                case 0 : if(row == 1)
    2d6a:	80 91 48 03 	lds	r24, 0x0348
    2d6e:	90 91 49 03 	lds	r25, 0x0349
    2d72:	81 30       	cpi	r24, 0x01	; 1
    2d74:	91 05       	cpc	r25, r1
    2d76:	49 f4       	brne	.+18     	; 0x2d8a <main+0x814>
                                                         {
                                                             arenaRight_2(); state = 9; break;
    2d78:	0e 94 ed 24 	call	0x49da	; 0x49da <arenaRight_2>
    2d7c:	89 e0       	ldi	r24, 0x09	; 9
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	90 93 25 03 	sts	0x0325, r25
    2d84:	80 93 24 03 	sts	0x0324, r24
    2d88:	08 c0       	rjmp	.+16     	; 0x2d9a <main+0x824>
                                                         }
                                                         else
                                                         {
                                                             arenaLeft_2(); state = 9; break;
    2d8a:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <arenaLeft_2>
    2d8e:	89 e0       	ldi	r24, 0x09	; 9
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	90 93 25 03 	sts	0x0325, r25
    2d96:	80 93 24 03 	sts	0x0324, r24
                                                }
                                                break;
                                    }

                                }
                                forward();
    2d9a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    2d9e:	da c0       	rjmp	.+436    	; 0x2f54 <main+0x9de>
                                break;

                        //case 1 : arenaStraight(); forward(); state++; break;

                        case 1 : line_follow_mm(66);
    2da0:	82 e4       	ldi	r24, 0x42	; 66
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <line_follow_mm>
                                 stop();
    2da8:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>

                                 buzzerBeep_1();
    2dac:	0e 94 4c 38 	call	0x7098	; 0x7098 <buzzerBeep_1>
                                 arenaUturn();
    2db0:	0e 94 c4 29 	call	0x5388	; 0x5388 <arenaUturn>
                                 state = 4;
    2db4:	84 e0       	ldi	r24, 0x04	; 4
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	90 93 25 03 	sts	0x0325, r25
    2dbc:	80 93 24 03 	sts	0x0324, r24
                                     case 0 : arenaUturn();
                                              state = 4;
                                              break;
                                 }
*/
                                 forward();
    2dc0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    2dc4:	c7 c0       	rjmp	.+398    	; 0x2f54 <main+0x9de>
                                 break;


                        case 2 : arenaUturn();forward(); state++; break;
    2dc6:	0e 94 c4 29 	call	0x5388	; 0x5388 <arenaUturn>
    2dca:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    2dce:	80 91 24 03 	lds	r24, 0x0324
    2dd2:	90 91 25 03 	lds	r25, 0x0325
    2dd6:	01 96       	adiw	r24, 0x01	; 1
    2dd8:	90 93 25 03 	sts	0x0325, r25
    2ddc:	80 93 24 03 	sts	0x0324, r24
    2de0:	b9 c0       	rjmp	.+370    	; 0x2f54 <main+0x9de>

                        case 3 : arenaStraight(); forward(); state++; break;
    2de2:	0e 94 65 2b 	call	0x56ca	; 0x56ca <arenaStraight>
    2de6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    2dea:	80 91 24 03 	lds	r24, 0x0324
    2dee:	90 91 25 03 	lds	r25, 0x0325
    2df2:	01 96       	adiw	r24, 0x01	; 1
    2df4:	90 93 25 03 	sts	0x0325, r25
    2df8:	80 93 24 03 	sts	0x0324, r24
    2dfc:	ab c0       	rjmp	.+342    	; 0x2f54 <main+0x9de>

                        case 4 :


                                 line_follow_mm(60);
    2dfe:	8c e3       	ldi	r24, 0x3C	; 60
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <line_follow_mm>
                                 stop();
    2e06:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
                                // findLine();
                                //    stop();

                                 switch(checkForCube())
    2e0a:	0e 94 26 2c 	call	0x584c	; 0x584c <checkForCube>
    2e0e:	c5 57       	subi	r28, 0x75	; 117
    2e10:	df 4f       	sbci	r29, 0xFF	; 255
    2e12:	99 83       	std	Y+1, r25	; 0x01
    2e14:	88 83       	st	Y, r24
    2e16:	cb 58       	subi	r28, 0x8B	; 139
    2e18:	d0 40       	sbci	r29, 0x00	; 0
    2e1a:	c5 57       	subi	r28, 0x75	; 117
    2e1c:	df 4f       	sbci	r29, 0xFF	; 255
    2e1e:	88 81       	ld	r24, Y
    2e20:	99 81       	ldd	r25, Y+1	; 0x01
    2e22:	cb 58       	subi	r28, 0x8B	; 139
    2e24:	d0 40       	sbci	r29, 0x00	; 0
    2e26:	81 30       	cpi	r24, 0x01	; 1
    2e28:	91 05       	cpc	r25, r1
    2e2a:	91 f0       	breq	.+36     	; 0x2e50 <main+0x8da>
    2e2c:	c5 57       	subi	r28, 0x75	; 117
    2e2e:	df 4f       	sbci	r29, 0xFF	; 255
    2e30:	e8 81       	ld	r30, Y
    2e32:	f9 81       	ldd	r31, Y+1	; 0x01
    2e34:	cb 58       	subi	r28, 0x8B	; 139
    2e36:	d0 40       	sbci	r29, 0x00	; 0
    2e38:	e2 30       	cpi	r30, 0x02	; 2
    2e3a:	f1 05       	cpc	r31, r1
    2e3c:	f1 f0       	breq	.+60     	; 0x2e7a <main+0x904>
    2e3e:	c5 57       	subi	r28, 0x75	; 117
    2e40:	df 4f       	sbci	r29, 0xFF	; 255
    2e42:	88 81       	ld	r24, Y
    2e44:	99 81       	ldd	r25, Y+1	; 0x01
    2e46:	cb 58       	subi	r28, 0x8B	; 139
    2e48:	d0 40       	sbci	r29, 0x00	; 0
    2e4a:	00 97       	sbiw	r24, 0x00	; 0
    2e4c:	e9 f0       	breq	.+58     	; 0x2e88 <main+0x912>
    2e4e:	2e c0       	rjmp	.+92     	; 0x2eac <main+0x936>
                                 {
                                     case 1 : buzzerBeep_1();
    2e50:	0e 94 4c 38 	call	0x7098	; 0x7098 <buzzerBeep_1>
                                              if(row == 1)
    2e54:	80 91 48 03 	lds	r24, 0x0348
    2e58:	90 91 49 03 	lds	r25, 0x0349
    2e5c:	81 30       	cpi	r24, 0x01	; 1
    2e5e:	91 05       	cpc	r25, r1
    2e60:	19 f4       	brne	.+6      	; 0x2e68 <main+0x8f2>
                                                arenaRight_2();
    2e62:	0e 94 ed 24 	call	0x49da	; 0x49da <arenaRight_2>
    2e66:	02 c0       	rjmp	.+4      	; 0x2e6c <main+0x8f6>
                                              else
                                                arenaLeft_2();
    2e68:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <arenaLeft_2>

                                              state = 9; break;
    2e6c:	89 e0       	ldi	r24, 0x09	; 9
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	90 93 25 03 	sts	0x0325, r25
    2e74:	80 93 24 03 	sts	0x0324, r24
    2e78:	19 c0       	rjmp	.+50     	; 0x2eac <main+0x936>

                                     //case 2 : buzzerBeep(); arenaLeft(); state = 9; break;

                                     case 2 : state = 5; break;
    2e7a:	85 e0       	ldi	r24, 0x05	; 5
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	90 93 25 03 	sts	0x0325, r25
    2e82:	80 93 24 03 	sts	0x0324, r24
    2e86:	12 c0       	rjmp	.+36     	; 0x2eac <main+0x936>

                                     case 0 : if(row == 1)
    2e88:	80 91 48 03 	lds	r24, 0x0348
    2e8c:	90 91 49 03 	lds	r25, 0x0349
    2e90:	81 30       	cpi	r24, 0x01	; 1
    2e92:	91 05       	cpc	r25, r1
    2e94:	19 f4       	brne	.+6      	; 0x2e9c <main+0x926>
                                                arenaRight_2();
    2e96:	0e 94 ed 24 	call	0x49da	; 0x49da <arenaRight_2>
    2e9a:	02 c0       	rjmp	.+4      	; 0x2ea0 <main+0x92a>
                                              else
                                                arenaLeft_2();
    2e9c:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <arenaLeft_2>

                                              state = 9; break;
    2ea0:	89 e0       	ldi	r24, 0x09	; 9
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	90 93 25 03 	sts	0x0325, r25
    2ea8:	80 93 24 03 	sts	0x0324, r24

                                 }

                                 forward();
    2eac:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    2eb0:	51 c0       	rjmp	.+162    	; 0x2f54 <main+0x9de>
                                 break;

                        case 5 : //arenaStraight();
                                 line_follow_mm(76);
    2eb2:	8c e4       	ldi	r24, 0x4C	; 76
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <line_follow_mm>
                                 stop();
    2eba:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
                                     case 0 : arenaUturn();
                                              state = 8;
                                              break;
                                 }
*/
                                 buzzerBeep_1();
    2ebe:	0e 94 4c 38 	call	0x7098	; 0x7098 <buzzerBeep_1>
                                 arenaUturn();
    2ec2:	0e 94 c4 29 	call	0x5388	; 0x5388 <arenaUturn>
                                 state = 8;
    2ec6:	88 e0       	ldi	r24, 0x08	; 8
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	90 93 25 03 	sts	0x0325, r25
    2ece:	80 93 24 03 	sts	0x0324, r24
                                 forward();
    2ed2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    2ed6:	3e c0       	rjmp	.+124    	; 0x2f54 <main+0x9de>
                                 break;

                        case 6 : arenaUturn(); forward(); state++; break;
    2ed8:	0e 94 c4 29 	call	0x5388	; 0x5388 <arenaUturn>
    2edc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    2ee0:	80 91 24 03 	lds	r24, 0x0324
    2ee4:	90 91 25 03 	lds	r25, 0x0325
    2ee8:	01 96       	adiw	r24, 0x01	; 1
    2eea:	90 93 25 03 	sts	0x0325, r25
    2eee:	80 93 24 03 	sts	0x0324, r24
    2ef2:	30 c0       	rjmp	.+96     	; 0x2f54 <main+0x9de>

                        case 7 : arenaStraight(); forward();state++; break;
    2ef4:	0e 94 65 2b 	call	0x56ca	; 0x56ca <arenaStraight>
    2ef8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    2efc:	80 91 24 03 	lds	r24, 0x0324
    2f00:	90 91 25 03 	lds	r25, 0x0325
    2f04:	01 96       	adiw	r24, 0x01	; 1
    2f06:	90 93 25 03 	sts	0x0325, r25
    2f0a:	80 93 24 03 	sts	0x0324, r24
    2f0e:	22 c0       	rjmp	.+68     	; 0x2f54 <main+0x9de>

                        case 8 : if(row == 1)
    2f10:	80 91 48 03 	lds	r24, 0x0348
    2f14:	90 91 49 03 	lds	r25, 0x0349
    2f18:	81 30       	cpi	r24, 0x01	; 1
    2f1a:	91 05       	cpc	r25, r1
    2f1c:	71 f4       	brne	.+28     	; 0x2f3a <main+0x9c4>
                                 {
                                     arenaLeft(); forward(); state++;
    2f1e:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <arenaLeft>
    2f22:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    2f26:	80 91 24 03 	lds	r24, 0x0324
    2f2a:	90 91 25 03 	lds	r25, 0x0325
    2f2e:	01 96       	adiw	r24, 0x01	; 1
    2f30:	90 93 25 03 	sts	0x0325, r25
    2f34:	80 93 24 03 	sts	0x0324, r24
    2f38:	0d c0       	rjmp	.+26     	; 0x2f54 <main+0x9de>
                                 }
                                 else
                                 {
                                     arenaRight(); forward();  state++;
    2f3a:	0e 94 3e 23 	call	0x467c	; 0x467c <arenaRight>
    2f3e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    2f42:	80 91 24 03 	lds	r24, 0x0324
    2f46:	90 91 25 03 	lds	r25, 0x0325
    2f4a:	01 96       	adiw	r24, 0x01	; 1
    2f4c:	90 93 25 03 	sts	0x0325, r25
    2f50:	80 93 24 03 	sts	0x0324, r24
                                 break;

                }


                if(state == 9)
    2f54:	80 91 24 03 	lds	r24, 0x0324
    2f58:	90 91 25 03 	lds	r25, 0x0325
    2f5c:	89 30       	cpi	r24, 0x09	; 9
    2f5e:	91 05       	cpc	r25, r1
    2f60:	41 f5       	brne	.+80     	; 0x2fb2 <main+0xa3c>
                {
                    state = 0;
    2f62:	10 92 25 03 	sts	0x0325, r1
    2f66:	10 92 24 03 	sts	0x0324, r1

                    row--;
    2f6a:	80 91 48 03 	lds	r24, 0x0348
    2f6e:	90 91 49 03 	lds	r25, 0x0349
    2f72:	01 97       	sbiw	r24, 0x01	; 1
    2f74:	90 93 49 03 	sts	0x0349, r25
    2f78:	80 93 48 03 	sts	0x0348, r24
                    velocity(forwardLeftSpeed, forwardRightSpeed);
    2f7c:	84 eb       	ldi	r24, 0xB4	; 180
    2f7e:	64 eb       	ldi	r22, 0xB4	; 180
    2f80:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
                    forward();
    2f84:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>


                    if(row == 1)
    2f88:	80 91 48 03 	lds	r24, 0x0348
    2f8c:	90 91 49 03 	lds	r25, 0x0349
    2f90:	81 30       	cpi	r24, 0x01	; 1
    2f92:	91 05       	cpc	r25, r1
    2f94:	39 f4       	brne	.+14     	; 0x2fa4 <main+0xa2e>
                        errorFlag = 1;
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	90 93 27 03 	sts	0x0327, r25
    2f9e:	80 93 26 03 	sts	0x0326, r24
    2fa2:	07 c0       	rjmp	.+14     	; 0x2fb2 <main+0xa3c>

                    else
                        errorFlag = 0;
    2fa4:	10 92 27 03 	sts	0x0327, r1
    2fa8:	10 92 26 03 	sts	0x0326, r1
    2fac:	02 c0       	rjmp	.+4      	; 0x2fb2 <main+0xa3c>

            }
        }

        else
            findLine();
    2fae:	0e 94 57 32 	call	0x64ae	; 0x64ae <findLine>

        lastError = error;
    2fb2:	de 01       	movw	r26, r28
    2fb4:	a1 58       	subi	r26, 0x81	; 129
    2fb6:	bf 4f       	sbci	r27, 0xFF	; 255
    2fb8:	fe 01       	movw	r30, r28
    2fba:	ef 57       	subi	r30, 0x7F	; 127
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	80 81       	ld	r24, Z
    2fc0:	91 81       	ldd	r25, Z+1	; 0x01
    2fc2:	11 96       	adiw	r26, 0x01	; 1
    2fc4:	9c 93       	st	X, r25
    2fc6:	8e 93       	st	-X, r24

        //This flag is set in the Interrupt service routine associated by the right optical encoder when the bot has skipped a node.
        if(nodeMissedFlag == 1)
    2fc8:	80 91 1a 03 	lds	r24, 0x031A
    2fcc:	90 91 1b 03 	lds	r25, 0x031B
    2fd0:	81 30       	cpi	r24, 0x01	; 1
    2fd2:	91 05       	cpc	r25, r1
    2fd4:	09 f0       	breq	.+2      	; 0x2fd8 <main+0xa62>
    2fd6:	bf c0       	rjmp	.+382    	; 0x3156 <main+0xbe0>
        {
            stop();
    2fd8:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    2fdc:	fe 01       	movw	r30, r28
    2fde:	e1 5a       	subi	r30, 0xA1	; 161
    2fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	a8 ec       	ldi	r26, 0xC8	; 200
    2fe8:	b2 e4       	ldi	r27, 0x42	; 66
    2fea:	80 83       	st	Z, r24
    2fec:	91 83       	std	Z+1, r25	; 0x01
    2fee:	a2 83       	std	Z+2, r26	; 0x02
    2ff0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff2:	8e 01       	movw	r16, r28
    2ff4:	05 5a       	subi	r16, 0xA5	; 165
    2ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	e1 5a       	subi	r30, 0xA1	; 161
    2ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffe:	60 81       	ld	r22, Z
    3000:	71 81       	ldd	r23, Z+1	; 0x01
    3002:	82 81       	ldd	r24, Z+2	; 0x02
    3004:	93 81       	ldd	r25, Z+3	; 0x03
    3006:	26 e6       	ldi	r18, 0x66	; 102
    3008:	36 e6       	ldi	r19, 0x66	; 102
    300a:	46 e6       	ldi	r20, 0x66	; 102
    300c:	55 e4       	ldi	r21, 0x45	; 69
    300e:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	f8 01       	movw	r30, r16
    3018:	80 83       	st	Z, r24
    301a:	91 83       	std	Z+1, r25	; 0x01
    301c:	a2 83       	std	Z+2, r26	; 0x02
    301e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3020:	fe 01       	movw	r30, r28
    3022:	e5 5a       	subi	r30, 0xA5	; 165
    3024:	ff 4f       	sbci	r31, 0xFF	; 255
    3026:	60 81       	ld	r22, Z
    3028:	71 81       	ldd	r23, Z+1	; 0x01
    302a:	82 81       	ldd	r24, Z+2	; 0x02
    302c:	93 81       	ldd	r25, Z+3	; 0x03
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	40 e8       	ldi	r20, 0x80	; 128
    3034:	5f e3       	ldi	r21, 0x3F	; 63
    3036:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    303a:	88 23       	and	r24, r24
    303c:	44 f4       	brge	.+16     	; 0x304e <main+0xad8>
		__ticks = 1;
    303e:	fe 01       	movw	r30, r28
    3040:	e7 5a       	subi	r30, 0xA7	; 167
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	91 83       	std	Z+1, r25	; 0x01
    304a:	80 83       	st	Z, r24
    304c:	64 c0       	rjmp	.+200    	; 0x3116 <main+0xba0>
	else if (__tmp > 65535)
    304e:	fe 01       	movw	r30, r28
    3050:	e5 5a       	subi	r30, 0xA5	; 165
    3052:	ff 4f       	sbci	r31, 0xFF	; 255
    3054:	60 81       	ld	r22, Z
    3056:	71 81       	ldd	r23, Z+1	; 0x01
    3058:	82 81       	ldd	r24, Z+2	; 0x02
    305a:	93 81       	ldd	r25, Z+3	; 0x03
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	3f ef       	ldi	r19, 0xFF	; 255
    3060:	4f e7       	ldi	r20, 0x7F	; 127
    3062:	57 e4       	ldi	r21, 0x47	; 71
    3064:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    3068:	18 16       	cp	r1, r24
    306a:	0c f0       	brlt	.+2      	; 0x306e <main+0xaf8>
    306c:	43 c0       	rjmp	.+134    	; 0x30f4 <main+0xb7e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306e:	fe 01       	movw	r30, r28
    3070:	e1 5a       	subi	r30, 0xA1	; 161
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	60 81       	ld	r22, Z
    3076:	71 81       	ldd	r23, Z+1	; 0x01
    3078:	82 81       	ldd	r24, Z+2	; 0x02
    307a:	93 81       	ldd	r25, Z+3	; 0x03
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	40 e2       	ldi	r20, 0x20	; 32
    3082:	51 e4       	ldi	r21, 0x41	; 65
    3084:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	8e 01       	movw	r16, r28
    308e:	07 5a       	subi	r16, 0xA7	; 167
    3090:	1f 4f       	sbci	r17, 0xFF	; 255
    3092:	bc 01       	movw	r22, r24
    3094:	cd 01       	movw	r24, r26
    3096:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	f8 01       	movw	r30, r16
    30a0:	91 83       	std	Z+1, r25	; 0x01
    30a2:	80 83       	st	Z, r24
    30a4:	1f c0       	rjmp	.+62     	; 0x30e4 <main+0xb6e>
    30a6:	fe 01       	movw	r30, r28
    30a8:	e9 5a       	subi	r30, 0xA9	; 169
    30aa:	ff 4f       	sbci	r31, 0xFF	; 255
    30ac:	80 e7       	ldi	r24, 0x70	; 112
    30ae:	91 e0       	ldi	r25, 0x01	; 1
    30b0:	91 83       	std	Z+1, r25	; 0x01
    30b2:	80 83       	st	Z, r24
    30b4:	fe 01       	movw	r30, r28
    30b6:	e9 5a       	subi	r30, 0xA9	; 169
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	80 81       	ld	r24, Z
    30bc:	91 81       	ldd	r25, Z+1	; 0x01
    30be:	01 97       	sbiw	r24, 0x01	; 1
    30c0:	f1 f7       	brne	.-4      	; 0x30be <main+0xb48>
    30c2:	fe 01       	movw	r30, r28
    30c4:	e9 5a       	subi	r30, 0xA9	; 169
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	91 83       	std	Z+1, r25	; 0x01
    30ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30cc:	de 01       	movw	r26, r28
    30ce:	a7 5a       	subi	r26, 0xA7	; 167
    30d0:	bf 4f       	sbci	r27, 0xFF	; 255
    30d2:	fe 01       	movw	r30, r28
    30d4:	e7 5a       	subi	r30, 0xA7	; 167
    30d6:	ff 4f       	sbci	r31, 0xFF	; 255
    30d8:	80 81       	ld	r24, Z
    30da:	91 81       	ldd	r25, Z+1	; 0x01
    30dc:	01 97       	sbiw	r24, 0x01	; 1
    30de:	11 96       	adiw	r26, 0x01	; 1
    30e0:	9c 93       	st	X, r25
    30e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e4:	fe 01       	movw	r30, r28
    30e6:	e7 5a       	subi	r30, 0xA7	; 167
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	80 81       	ld	r24, Z
    30ec:	91 81       	ldd	r25, Z+1	; 0x01
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	d1 f6       	brne	.-76     	; 0x30a6 <main+0xb30>
    30f2:	27 c0       	rjmp	.+78     	; 0x3142 <main+0xbcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f4:	8e 01       	movw	r16, r28
    30f6:	07 5a       	subi	r16, 0xA7	; 167
    30f8:	1f 4f       	sbci	r17, 0xFF	; 255
    30fa:	fe 01       	movw	r30, r28
    30fc:	e5 5a       	subi	r30, 0xA5	; 165
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	60 81       	ld	r22, Z
    3102:	71 81       	ldd	r23, Z+1	; 0x01
    3104:	82 81       	ldd	r24, Z+2	; 0x02
    3106:	93 81       	ldd	r25, Z+3	; 0x03
    3108:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	f8 01       	movw	r30, r16
    3112:	91 83       	std	Z+1, r25	; 0x01
    3114:	80 83       	st	Z, r24
    3116:	de 01       	movw	r26, r28
    3118:	ab 5a       	subi	r26, 0xAB	; 171
    311a:	bf 4f       	sbci	r27, 0xFF	; 255
    311c:	fe 01       	movw	r30, r28
    311e:	e7 5a       	subi	r30, 0xA7	; 167
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	80 81       	ld	r24, Z
    3124:	91 81       	ldd	r25, Z+1	; 0x01
    3126:	8d 93       	st	X+, r24
    3128:	9c 93       	st	X, r25
    312a:	fe 01       	movw	r30, r28
    312c:	eb 5a       	subi	r30, 0xAB	; 171
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	80 81       	ld	r24, Z
    3132:	91 81       	ldd	r25, Z+1	; 0x01
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	f1 f7       	brne	.-4      	; 0x3134 <main+0xbbe>
    3138:	fe 01       	movw	r30, r28
    313a:	eb 5a       	subi	r30, 0xAB	; 171
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	91 83       	std	Z+1, r25	; 0x01
    3140:	80 83       	st	Z, r24
            _delay_ms(100);

            lineFollowBack();
    3142:	0e 94 e2 33 	call	0x67c4	; 0x67c4 <lineFollowBack>
            nodeMissedFlag = 0;
    3146:	10 92 1b 03 	sts	0x031B, r1
    314a:	10 92 1a 03 	sts	0x031A, r1
            nodeMissTracker = 0;
    314e:	10 92 19 03 	sts	0x0319, r1
    3152:	10 92 18 03 	sts	0x0318, r1
    skipNodes(1);

    line_follow_mm(30);

    forward();
    while(!d1Completed)
    3156:	80 91 1c 03 	lds	r24, 0x031C
    315a:	90 91 1d 03 	lds	r25, 0x031D
    315e:	00 97       	sbiw	r24, 0x00	; 0
    3160:	09 f4       	brne	.+2      	; 0x3164 <main+0xbee>
    3162:	11 cb       	rjmp	.-2526   	; 0x2786 <main+0x210>
    }


    /********************D1 ends here*************************/

    lcd_print(1, 1, row, 1);
    3164:	80 91 48 03 	lds	r24, 0x0348
    3168:	90 91 49 03 	lds	r25, 0x0349
    316c:	9c 01       	movw	r18, r24
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	61 e0       	ldi	r22, 0x01	; 1
    3172:	a9 01       	movw	r20, r18
    3174:	21 e0       	ldi	r18, 0x01	; 1
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcd_print>

    row = wallFollow();
    317c:	0e 94 f4 3c 	call	0x79e8	; 0x79e8 <wallFollow>
    3180:	90 93 49 03 	sts	0x0349, r25
    3184:	80 93 48 03 	sts	0x0348, r24

    stop();
    3188:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    buzzer_2();
    318c:	0e 94 bb 3f 	call	0x7f76	; 0x7f76 <buzzer_2>

    /***************************D2 Initialization****************/

    ungrip();
    3190:	0e 94 9d 12 	call	0x253a	; 0x253a <ungrip>
    3194:	fe 01       	movw	r30, r28
    3196:	ef 5a       	subi	r30, 0xAF	; 175
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	aa ef       	ldi	r26, 0xFA	; 250
    31a0:	b3 e4       	ldi	r27, 0x43	; 67
    31a2:	80 83       	st	Z, r24
    31a4:	91 83       	std	Z+1, r25	; 0x01
    31a6:	a2 83       	std	Z+2, r26	; 0x02
    31a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31aa:	8e 01       	movw	r16, r28
    31ac:	03 5b       	subi	r16, 0xB3	; 179
    31ae:	1f 4f       	sbci	r17, 0xFF	; 255
    31b0:	fe 01       	movw	r30, r28
    31b2:	ef 5a       	subi	r30, 0xAF	; 175
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	60 81       	ld	r22, Z
    31b8:	71 81       	ldd	r23, Z+1	; 0x01
    31ba:	82 81       	ldd	r24, Z+2	; 0x02
    31bc:	93 81       	ldd	r25, Z+3	; 0x03
    31be:	26 e6       	ldi	r18, 0x66	; 102
    31c0:	36 e6       	ldi	r19, 0x66	; 102
    31c2:	46 e6       	ldi	r20, 0x66	; 102
    31c4:	55 e4       	ldi	r21, 0x45	; 69
    31c6:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	f8 01       	movw	r30, r16
    31d0:	80 83       	st	Z, r24
    31d2:	91 83       	std	Z+1, r25	; 0x01
    31d4:	a2 83       	std	Z+2, r26	; 0x02
    31d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31d8:	fe 01       	movw	r30, r28
    31da:	e3 5b       	subi	r30, 0xB3	; 179
    31dc:	ff 4f       	sbci	r31, 0xFF	; 255
    31de:	60 81       	ld	r22, Z
    31e0:	71 81       	ldd	r23, Z+1	; 0x01
    31e2:	82 81       	ldd	r24, Z+2	; 0x02
    31e4:	93 81       	ldd	r25, Z+3	; 0x03
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	40 e8       	ldi	r20, 0x80	; 128
    31ec:	5f e3       	ldi	r21, 0x3F	; 63
    31ee:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    31f2:	88 23       	and	r24, r24
    31f4:	44 f4       	brge	.+16     	; 0x3206 <main+0xc90>
		__ticks = 1;
    31f6:	fe 01       	movw	r30, r28
    31f8:	e5 5b       	subi	r30, 0xB5	; 181
    31fa:	ff 4f       	sbci	r31, 0xFF	; 255
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	91 83       	std	Z+1, r25	; 0x01
    3202:	80 83       	st	Z, r24
    3204:	64 c0       	rjmp	.+200    	; 0x32ce <main+0xd58>
	else if (__tmp > 65535)
    3206:	fe 01       	movw	r30, r28
    3208:	e3 5b       	subi	r30, 0xB3	; 179
    320a:	ff 4f       	sbci	r31, 0xFF	; 255
    320c:	60 81       	ld	r22, Z
    320e:	71 81       	ldd	r23, Z+1	; 0x01
    3210:	82 81       	ldd	r24, Z+2	; 0x02
    3212:	93 81       	ldd	r25, Z+3	; 0x03
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	3f ef       	ldi	r19, 0xFF	; 255
    3218:	4f e7       	ldi	r20, 0x7F	; 127
    321a:	57 e4       	ldi	r21, 0x47	; 71
    321c:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    3220:	18 16       	cp	r1, r24
    3222:	0c f0       	brlt	.+2      	; 0x3226 <main+0xcb0>
    3224:	43 c0       	rjmp	.+134    	; 0x32ac <main+0xd36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3226:	fe 01       	movw	r30, r28
    3228:	ef 5a       	subi	r30, 0xAF	; 175
    322a:	ff 4f       	sbci	r31, 0xFF	; 255
    322c:	60 81       	ld	r22, Z
    322e:	71 81       	ldd	r23, Z+1	; 0x01
    3230:	82 81       	ldd	r24, Z+2	; 0x02
    3232:	93 81       	ldd	r25, Z+3	; 0x03
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	40 e2       	ldi	r20, 0x20	; 32
    323a:	51 e4       	ldi	r21, 0x41	; 65
    323c:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	8e 01       	movw	r16, r28
    3246:	05 5b       	subi	r16, 0xB5	; 181
    3248:	1f 4f       	sbci	r17, 0xFF	; 255
    324a:	bc 01       	movw	r22, r24
    324c:	cd 01       	movw	r24, r26
    324e:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	f8 01       	movw	r30, r16
    3258:	91 83       	std	Z+1, r25	; 0x01
    325a:	80 83       	st	Z, r24
    325c:	1f c0       	rjmp	.+62     	; 0x329c <main+0xd26>
    325e:	fe 01       	movw	r30, r28
    3260:	e7 5b       	subi	r30, 0xB7	; 183
    3262:	ff 4f       	sbci	r31, 0xFF	; 255
    3264:	80 e7       	ldi	r24, 0x70	; 112
    3266:	91 e0       	ldi	r25, 0x01	; 1
    3268:	91 83       	std	Z+1, r25	; 0x01
    326a:	80 83       	st	Z, r24
    326c:	fe 01       	movw	r30, r28
    326e:	e7 5b       	subi	r30, 0xB7	; 183
    3270:	ff 4f       	sbci	r31, 0xFF	; 255
    3272:	80 81       	ld	r24, Z
    3274:	91 81       	ldd	r25, Z+1	; 0x01
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	f1 f7       	brne	.-4      	; 0x3276 <main+0xd00>
    327a:	fe 01       	movw	r30, r28
    327c:	e7 5b       	subi	r30, 0xB7	; 183
    327e:	ff 4f       	sbci	r31, 0xFF	; 255
    3280:	91 83       	std	Z+1, r25	; 0x01
    3282:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3284:	de 01       	movw	r26, r28
    3286:	a5 5b       	subi	r26, 0xB5	; 181
    3288:	bf 4f       	sbci	r27, 0xFF	; 255
    328a:	fe 01       	movw	r30, r28
    328c:	e5 5b       	subi	r30, 0xB5	; 181
    328e:	ff 4f       	sbci	r31, 0xFF	; 255
    3290:	80 81       	ld	r24, Z
    3292:	91 81       	ldd	r25, Z+1	; 0x01
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	11 96       	adiw	r26, 0x01	; 1
    3298:	9c 93       	st	X, r25
    329a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329c:	fe 01       	movw	r30, r28
    329e:	e5 5b       	subi	r30, 0xB5	; 181
    32a0:	ff 4f       	sbci	r31, 0xFF	; 255
    32a2:	80 81       	ld	r24, Z
    32a4:	91 81       	ldd	r25, Z+1	; 0x01
    32a6:	00 97       	sbiw	r24, 0x00	; 0
    32a8:	d1 f6       	brne	.-76     	; 0x325e <main+0xce8>
    32aa:	27 c0       	rjmp	.+78     	; 0x32fa <main+0xd84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ac:	8e 01       	movw	r16, r28
    32ae:	05 5b       	subi	r16, 0xB5	; 181
    32b0:	1f 4f       	sbci	r17, 0xFF	; 255
    32b2:	fe 01       	movw	r30, r28
    32b4:	e3 5b       	subi	r30, 0xB3	; 179
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	60 81       	ld	r22, Z
    32ba:	71 81       	ldd	r23, Z+1	; 0x01
    32bc:	82 81       	ldd	r24, Z+2	; 0x02
    32be:	93 81       	ldd	r25, Z+3	; 0x03
    32c0:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	f8 01       	movw	r30, r16
    32ca:	91 83       	std	Z+1, r25	; 0x01
    32cc:	80 83       	st	Z, r24
    32ce:	de 01       	movw	r26, r28
    32d0:	a9 5b       	subi	r26, 0xB9	; 185
    32d2:	bf 4f       	sbci	r27, 0xFF	; 255
    32d4:	fe 01       	movw	r30, r28
    32d6:	e5 5b       	subi	r30, 0xB5	; 181
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	80 81       	ld	r24, Z
    32dc:	91 81       	ldd	r25, Z+1	; 0x01
    32de:	8d 93       	st	X+, r24
    32e0:	9c 93       	st	X, r25
    32e2:	fe 01       	movw	r30, r28
    32e4:	e9 5b       	subi	r30, 0xB9	; 185
    32e6:	ff 4f       	sbci	r31, 0xFF	; 255
    32e8:	80 81       	ld	r24, Z
    32ea:	91 81       	ldd	r25, Z+1	; 0x01
    32ec:	01 97       	sbiw	r24, 0x01	; 1
    32ee:	f1 f7       	brne	.-4      	; 0x32ec <main+0xd76>
    32f0:	fe 01       	movw	r30, r28
    32f2:	e9 5b       	subi	r30, 0xB9	; 185
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	91 83       	std	Z+1, r25	; 0x01
    32f8:	80 83       	st	Z, r24
    _delay_ms(500);

    lcd_init();
    32fa:	0e 94 26 0c 	call	0x184c	; 0x184c <lcd_init>
    lcd_print(1, 1, row, 1);
    32fe:	80 91 48 03 	lds	r24, 0x0348
    3302:	90 91 49 03 	lds	r25, 0x0349
    3306:	9c 01       	movw	r18, r24
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	61 e0       	ldi	r22, 0x01	; 1
    330c:	a9 01       	movw	r20, r18
    330e:	21 e0       	ldi	r18, 0x01	; 1
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcd_print>


    error = 0;
    3316:	fe 01       	movw	r30, r28
    3318:	ef 57       	subi	r30, 0x7F	; 127
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	11 82       	std	Z+1, r1	; 0x01
    331e:	10 82       	st	Z, r1
    lastError = 0;
    3320:	fe 01       	movw	r30, r28
    3322:	e1 58       	subi	r30, 0x81	; 129
    3324:	ff 4f       	sbci	r31, 0xFF	; 255
    3326:	11 82       	std	Z+1, r1	; 0x01
    3328:	10 82       	st	Z, r1
    d2Completed = 0;
    332a:	10 92 47 03 	sts	0x0347, r1
    332e:	10 92 46 03 	sts	0x0346, r1
    errorFlag = 0;
    3332:	10 92 27 03 	sts	0x0327, r1
    3336:	10 92 26 03 	sts	0x0326, r1

    nodeMissedFlag = 0;
    333a:	10 92 1b 03 	sts	0x031B, r1
    333e:	10 92 1a 03 	sts	0x031A, r1
    nodeMissTracker = 0;
    3342:	10 92 19 03 	sts	0x0319, r1
    3346:	10 92 18 03 	sts	0x0318, r1

    if(row < 6)
    334a:	80 91 48 03 	lds	r24, 0x0348
    334e:	90 91 49 03 	lds	r25, 0x0349
    3352:	86 30       	cpi	r24, 0x06	; 6
    3354:	91 05       	cpc	r25, r1
    3356:	fc f4       	brge	.+62     	; 0x3396 <main+0xe20>
    {
        arenaLeft();
    3358:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <arenaLeft>
        line_follow_mm(20);
    335c:	84 e1       	ldi	r24, 0x14	; 20
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <line_follow_mm>
        skipNodes(6 - row);
    3364:	20 91 48 03 	lds	r18, 0x0348
    3368:	30 91 49 03 	lds	r19, 0x0349
    336c:	86 e0       	ldi	r24, 0x06	; 6
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	82 1b       	sub	r24, r18
    3372:	93 0b       	sbc	r25, r19
    3374:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <skipNodes>
        arenaRight();
    3378:	0e 94 3e 23 	call	0x467c	; 0x467c <arenaRight>
        state = 1;
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	90 93 25 03 	sts	0x0325, r25
    3384:	80 93 24 03 	sts	0x0324, r24
        row = 6;
    3388:	86 e0       	ldi	r24, 0x06	; 6
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	90 93 49 03 	sts	0x0349, r25
    3390:	80 93 48 03 	sts	0x0348, r24
    3394:	06 c0       	rjmp	.+12     	; 0x33a2 <main+0xe2c>
    }

    else
    {
        line_follow_mm(70);
    3396:	86 e4       	ldi	r24, 0x46	; 70
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <line_follow_mm>
        stop();
    339e:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    }

    switch(checkForCube())
    33a2:	0e 94 26 2c 	call	0x584c	; 0x584c <checkForCube>
    33a6:	c7 57       	subi	r28, 0x77	; 119
    33a8:	df 4f       	sbci	r29, 0xFF	; 255
    33aa:	99 83       	std	Y+1, r25	; 0x01
    33ac:	88 83       	st	Y, r24
    33ae:	c9 58       	subi	r28, 0x89	; 137
    33b0:	d0 40       	sbci	r29, 0x00	; 0
    33b2:	c7 57       	subi	r28, 0x77	; 119
    33b4:	df 4f       	sbci	r29, 0xFF	; 255
    33b6:	88 81       	ld	r24, Y
    33b8:	99 81       	ldd	r25, Y+1	; 0x01
    33ba:	c9 58       	subi	r28, 0x89	; 137
    33bc:	d0 40       	sbci	r29, 0x00	; 0
    33be:	81 30       	cpi	r24, 0x01	; 1
    33c0:	91 05       	cpc	r25, r1
    33c2:	91 f0       	breq	.+36     	; 0x33e8 <main+0xe72>
    33c4:	c7 57       	subi	r28, 0x77	; 119
    33c6:	df 4f       	sbci	r29, 0xFF	; 255
    33c8:	e8 81       	ld	r30, Y
    33ca:	f9 81       	ldd	r31, Y+1	; 0x01
    33cc:	c9 58       	subi	r28, 0x89	; 137
    33ce:	d0 40       	sbci	r29, 0x00	; 0
    33d0:	e2 30       	cpi	r30, 0x02	; 2
    33d2:	f1 05       	cpc	r31, r1
    33d4:	41 f1       	breq	.+80     	; 0x3426 <main+0xeb0>
    33d6:	c7 57       	subi	r28, 0x77	; 119
    33d8:	df 4f       	sbci	r29, 0xFF	; 255
    33da:	88 81       	ld	r24, Y
    33dc:	99 81       	ldd	r25, Y+1	; 0x01
    33de:	c9 58       	subi	r28, 0x89	; 137
    33e0:	d0 40       	sbci	r29, 0x00	; 0
    33e2:	00 97       	sbiw	r24, 0x00	; 0
    33e4:	49 f1       	breq	.+82     	; 0x3438 <main+0xec2>
    33e6:	99 c4       	rjmp	.+2354   	; 0x3d1a <main+0x17a4>
    {
        case 1 : buzzerBeep_2(); arenaRight_2(); state = 0; row = 5; a[row - 1] = 1; forward(); break;
    33e8:	0e 94 6e 2e 	call	0x5cdc	; 0x5cdc <buzzerBeep_2>
    33ec:	0e 94 ed 24 	call	0x49da	; 0x49da <arenaRight_2>
    33f0:	10 92 25 03 	sts	0x0325, r1
    33f4:	10 92 24 03 	sts	0x0324, r1
    33f8:	85 e0       	ldi	r24, 0x05	; 5
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	90 93 49 03 	sts	0x0349, r25
    3400:	80 93 48 03 	sts	0x0348, r24
    3404:	80 91 48 03 	lds	r24, 0x0348
    3408:	90 91 49 03 	lds	r25, 0x0349
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	88 0f       	add	r24, r24
    3410:	99 1f       	adc	r25, r25
    3412:	fc 01       	movw	r30, r24
    3414:	ec 5c       	subi	r30, 0xCC	; 204
    3416:	fc 4f       	sbci	r31, 0xFC	; 252
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	91 83       	std	Z+1, r25	; 0x01
    341e:	80 83       	st	Z, r24
    3420:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    3424:	7a c4       	rjmp	.+2292   	; 0x3d1a <main+0x17a4>
        case 2 : state = 1; forward(); break;
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	90 93 25 03 	sts	0x0325, r25
    342e:	80 93 24 03 	sts	0x0324, r24
    3432:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    3436:	71 c4       	rjmp	.+2274   	; 0x3d1a <main+0x17a4>
        case 0 : state = 1; forward(); break;
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	90 93 25 03 	sts	0x0325, r25
    3440:	80 93 24 03 	sts	0x0324, r24
    3444:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    3448:	68 c4       	rjmp	.+2256   	; 0x3d1a <main+0x17a4>
    }

    while(!d2Completed)
    {
        error = getError();
    344a:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <getError>
    344e:	fe 01       	movw	r30, r28
    3450:	ef 57       	subi	r30, 0x7F	; 127
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	91 83       	std	Z+1, r25	; 0x01
    3456:	80 83       	st	Z, r24

        if(error == 0)
    3458:	fe 01       	movw	r30, r28
    345a:	ef 57       	subi	r30, 0x7F	; 127
    345c:	ff 4f       	sbci	r31, 0xFF	; 255
    345e:	80 81       	ld	r24, Z
    3460:	91 81       	ldd	r25, Z+1	; 0x01
    3462:	00 97       	sbiw	r24, 0x00	; 0
    3464:	69 f4       	brne	.+26     	; 0x3480 <main+0xf0a>
        {
            leftSpeed = forwardLeftSpeed;
    3466:	84 eb       	ldi	r24, 0xB4	; 180
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	90 93 1f 03 	sts	0x031F, r25
    346e:	80 93 1e 03 	sts	0x031E, r24
            rightSpeed = forwardRightSpeed;
    3472:	84 eb       	ldi	r24, 0xB4	; 180
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	90 93 31 03 	sts	0x0331, r25
    347a:	80 93 30 03 	sts	0x0330, r24
    347e:	bc c3       	rjmp	.+1912   	; 0x3bf8 <main+0x1682>
        }

        else if(error == 1)
    3480:	fe 01       	movw	r30, r28
    3482:	ef 57       	subi	r30, 0x7F	; 127
    3484:	ff 4f       	sbci	r31, 0xFF	; 255
    3486:	80 81       	ld	r24, Z
    3488:	91 81       	ldd	r25, Z+1	; 0x01
    348a:	81 30       	cpi	r24, 0x01	; 1
    348c:	91 05       	cpc	r25, r1
    348e:	69 f4       	brne	.+26     	; 0x34aa <main+0xf34>
        {
            leftSpeed = forwardLeftSpeed + 20;
    3490:	88 ec       	ldi	r24, 0xC8	; 200
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	90 93 1f 03 	sts	0x031F, r25
    3498:	80 93 1e 03 	sts	0x031E, r24
            rightSpeed = forwardRightSpeed - 20;
    349c:	80 ea       	ldi	r24, 0xA0	; 160
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	90 93 31 03 	sts	0x0331, r25
    34a4:	80 93 30 03 	sts	0x0330, r24
    34a8:	a7 c3       	rjmp	.+1870   	; 0x3bf8 <main+0x1682>
        }

        else if(error == -1)
    34aa:	fe 01       	movw	r30, r28
    34ac:	ef 57       	subi	r30, 0x7F	; 127
    34ae:	ff 4f       	sbci	r31, 0xFF	; 255
    34b0:	80 81       	ld	r24, Z
    34b2:	91 81       	ldd	r25, Z+1	; 0x01
    34b4:	ef ef       	ldi	r30, 0xFF	; 255
    34b6:	8f 3f       	cpi	r24, 0xFF	; 255
    34b8:	9e 07       	cpc	r25, r30
    34ba:	69 f4       	brne	.+26     	; 0x34d6 <main+0xf60>
        {
            leftSpeed = forwardLeftSpeed - 20;
    34bc:	80 ea       	ldi	r24, 0xA0	; 160
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	90 93 1f 03 	sts	0x031F, r25
    34c4:	80 93 1e 03 	sts	0x031E, r24
            rightSpeed = forwardRightSpeed + 20;
    34c8:	88 ec       	ldi	r24, 0xC8	; 200
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	90 93 31 03 	sts	0x0331, r25
    34d0:	80 93 30 03 	sts	0x0330, r24
    34d4:	91 c3       	rjmp	.+1826   	; 0x3bf8 <main+0x1682>
        }

        else if(error == 100)
    34d6:	fe 01       	movw	r30, r28
    34d8:	ef 57       	subi	r30, 0x7F	; 127
    34da:	ff 4f       	sbci	r31, 0xFF	; 255
    34dc:	80 81       	ld	r24, Z
    34de:	91 81       	ldd	r25, Z+1	; 0x01
    34e0:	84 36       	cpi	r24, 0x64	; 100
    34e2:	91 05       	cpc	r25, r1
    34e4:	09 f0       	breq	.+2      	; 0x34e8 <main+0xf72>
    34e6:	86 c3       	rjmp	.+1804   	; 0x3bf4 <main+0x167e>
        {
            if(error != lastError)
    34e8:	fe 01       	movw	r30, r28
    34ea:	ef 57       	subi	r30, 0x7F	; 127
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	de 01       	movw	r26, r28
    34f0:	a1 58       	subi	r26, 0x81	; 129
    34f2:	bf 4f       	sbci	r27, 0xFF	; 255
    34f4:	20 81       	ld	r18, Z
    34f6:	31 81       	ldd	r19, Z+1	; 0x01
    34f8:	8d 91       	ld	r24, X+
    34fa:	9c 91       	ld	r25, X
    34fc:	11 97       	sbiw	r26, 0x01	; 1
    34fe:	28 17       	cp	r18, r24
    3500:	39 07       	cpc	r19, r25
    3502:	09 f4       	brne	.+2      	; 0x3506 <main+0xf90>
    3504:	79 c3       	rjmp	.+1778   	; 0x3bf8 <main+0x1682>
            {
                nodeMissTracker = 0;
    3506:	10 92 19 03 	sts	0x0319, r1
    350a:	10 92 18 03 	sts	0x0318, r1

                switch(state)
    350e:	80 91 24 03 	lds	r24, 0x0324
    3512:	90 91 25 03 	lds	r25, 0x0325
    3516:	c9 57       	subi	r28, 0x79	; 121
    3518:	df 4f       	sbci	r29, 0xFF	; 255
    351a:	99 83       	std	Y+1, r25	; 0x01
    351c:	88 83       	st	Y, r24
    351e:	c7 58       	subi	r28, 0x87	; 135
    3520:	d0 40       	sbci	r29, 0x00	; 0
    3522:	c9 57       	subi	r28, 0x79	; 121
    3524:	df 4f       	sbci	r29, 0xFF	; 255
    3526:	e8 81       	ld	r30, Y
    3528:	f9 81       	ldd	r31, Y+1	; 0x01
    352a:	c7 58       	subi	r28, 0x87	; 135
    352c:	d0 40       	sbci	r29, 0x00	; 0
    352e:	e2 30       	cpi	r30, 0x02	; 2
    3530:	f1 05       	cpc	r31, r1
    3532:	09 f4       	brne	.+2      	; 0x3536 <main+0xfc0>
    3534:	02 c2       	rjmp	.+1028   	; 0x393a <main+0x13c4>
    3536:	c9 57       	subi	r28, 0x79	; 121
    3538:	df 4f       	sbci	r29, 0xFF	; 255
    353a:	88 81       	ld	r24, Y
    353c:	99 81       	ldd	r25, Y+1	; 0x01
    353e:	c7 58       	subi	r28, 0x87	; 135
    3540:	d0 40       	sbci	r29, 0x00	; 0
    3542:	83 30       	cpi	r24, 0x03	; 3
    3544:	91 05       	cpc	r25, r1
    3546:	9c f4       	brge	.+38     	; 0x356e <main+0xff8>
    3548:	c9 57       	subi	r28, 0x79	; 121
    354a:	df 4f       	sbci	r29, 0xFF	; 255
    354c:	e8 81       	ld	r30, Y
    354e:	f9 81       	ldd	r31, Y+1	; 0x01
    3550:	c7 58       	subi	r28, 0x87	; 135
    3552:	d0 40       	sbci	r29, 0x00	; 0
    3554:	30 97       	sbiw	r30, 0x00	; 0
    3556:	01 f1       	breq	.+64     	; 0x3598 <main+0x1022>
    3558:	c9 57       	subi	r28, 0x79	; 121
    355a:	df 4f       	sbci	r29, 0xFF	; 255
    355c:	88 81       	ld	r24, Y
    355e:	99 81       	ldd	r25, Y+1	; 0x01
    3560:	c7 58       	subi	r28, 0x87	; 135
    3562:	d0 40       	sbci	r29, 0x00	; 0
    3564:	81 30       	cpi	r24, 0x01	; 1
    3566:	91 05       	cpc	r25, r1
    3568:	09 f4       	brne	.+2      	; 0x356c <main+0xff6>
    356a:	72 c0       	rjmp	.+228    	; 0x3650 <main+0x10da>
    356c:	0c c3       	rjmp	.+1560   	; 0x3b86 <main+0x1610>
    356e:	c9 57       	subi	r28, 0x79	; 121
    3570:	df 4f       	sbci	r29, 0xFF	; 255
    3572:	e8 81       	ld	r30, Y
    3574:	f9 81       	ldd	r31, Y+1	; 0x01
    3576:	c7 58       	subi	r28, 0x87	; 135
    3578:	d0 40       	sbci	r29, 0x00	; 0
    357a:	e3 30       	cpi	r30, 0x03	; 3
    357c:	f1 05       	cpc	r31, r1
    357e:	09 f4       	brne	.+2      	; 0x3582 <main+0x100c>
    3580:	73 c2       	rjmp	.+1254   	; 0x3a68 <main+0x14f2>
    3582:	c9 57       	subi	r28, 0x79	; 121
    3584:	df 4f       	sbci	r29, 0xFF	; 255
    3586:	88 81       	ld	r24, Y
    3588:	99 81       	ldd	r25, Y+1	; 0x01
    358a:	c7 58       	subi	r28, 0x87	; 135
    358c:	d0 40       	sbci	r29, 0x00	; 0
    358e:	84 30       	cpi	r24, 0x04	; 4
    3590:	91 05       	cpc	r25, r1
    3592:	09 f4       	brne	.+2      	; 0x3596 <main+0x1020>
    3594:	70 c2       	rjmp	.+1248   	; 0x3a76 <main+0x1500>
    3596:	f7 c2       	rjmp	.+1518   	; 0x3b86 <main+0x1610>
                {
                    case 0 : arenaLeft();
    3598:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <arenaLeft>
                             switch(checkForCube())
    359c:	0e 94 26 2c 	call	0x584c	; 0x584c <checkForCube>
    35a0:	cb 57       	subi	r28, 0x7B	; 123
    35a2:	df 4f       	sbci	r29, 0xFF	; 255
    35a4:	99 83       	std	Y+1, r25	; 0x01
    35a6:	88 83       	st	Y, r24
    35a8:	c5 58       	subi	r28, 0x85	; 133
    35aa:	d0 40       	sbci	r29, 0x00	; 0
    35ac:	cb 57       	subi	r28, 0x7B	; 123
    35ae:	df 4f       	sbci	r29, 0xFF	; 255
    35b0:	e8 81       	ld	r30, Y
    35b2:	f9 81       	ldd	r31, Y+1	; 0x01
    35b4:	c5 58       	subi	r28, 0x85	; 133
    35b6:	d0 40       	sbci	r29, 0x00	; 0
    35b8:	e1 30       	cpi	r30, 0x01	; 1
    35ba:	f1 05       	cpc	r31, r1
    35bc:	91 f0       	breq	.+36     	; 0x35e2 <main+0x106c>
    35be:	cb 57       	subi	r28, 0x7B	; 123
    35c0:	df 4f       	sbci	r29, 0xFF	; 255
    35c2:	88 81       	ld	r24, Y
    35c4:	99 81       	ldd	r25, Y+1	; 0x01
    35c6:	c5 58       	subi	r28, 0x85	; 133
    35c8:	d0 40       	sbci	r29, 0x00	; 0
    35ca:	82 30       	cpi	r24, 0x02	; 2
    35cc:	91 05       	cpc	r25, r1
    35ce:	71 f1       	breq	.+92     	; 0x362c <main+0x10b6>
    35d0:	cb 57       	subi	r28, 0x7B	; 123
    35d2:	df 4f       	sbci	r29, 0xFF	; 255
    35d4:	e8 81       	ld	r30, Y
    35d6:	f9 81       	ldd	r31, Y+1	; 0x01
    35d8:	c5 58       	subi	r28, 0x85	; 133
    35da:	d0 40       	sbci	r29, 0x00	; 0
    35dc:	30 97       	sbiw	r30, 0x00	; 0
    35de:	79 f1       	breq	.+94     	; 0x363e <main+0x10c8>
    35e0:	d2 c2       	rjmp	.+1444   	; 0x3b86 <main+0x1610>
                             {
                                 case 1 :
                                          buzzerBeep_2(); state = 5;
    35e2:	0e 94 6e 2e 	call	0x5cdc	; 0x5cdc <buzzerBeep_2>
    35e6:	85 e0       	ldi	r24, 0x05	; 5
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	90 93 25 03 	sts	0x0325, r25
    35ee:	80 93 24 03 	sts	0x0324, r24
                                          if(row == 1)
    35f2:	80 91 48 03 	lds	r24, 0x0348
    35f6:	90 91 49 03 	lds	r25, 0x0349
    35fa:	81 30       	cpi	r24, 0x01	; 1
    35fc:	91 05       	cpc	r25, r1
    35fe:	19 f4       	brne	.+6      	; 0x3606 <main+0x1090>
                                            arenaLeft_2();
    3600:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <arenaLeft_2>
    3604:	02 c0       	rjmp	.+4      	; 0x360a <main+0x1094>
                                          else
                                            arenaRight_2();
    3606:	0e 94 ed 24 	call	0x49da	; 0x49da <arenaRight_2>
                                          /*if(armTurned == 1)
                                          {
                                              grip(); _delay_ms(1000); faceFront(); _delay_ms(1000); ungrip();_delay_ms(1000);
                                              armTurned = 0;
                                          }*/
                                          forward();
    360a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
                                          a[row - 1] = 1;
    360e:	80 91 48 03 	lds	r24, 0x0348
    3612:	90 91 49 03 	lds	r25, 0x0349
    3616:	01 97       	sbiw	r24, 0x01	; 1
    3618:	88 0f       	add	r24, r24
    361a:	99 1f       	adc	r25, r25
    361c:	fc 01       	movw	r30, r24
    361e:	ec 5c       	subi	r30, 0xCC	; 204
    3620:	fc 4f       	sbci	r31, 0xFC	; 252
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	91 83       	std	Z+1, r25	; 0x01
    3628:	80 83       	st	Z, r24
    362a:	ad c2       	rjmp	.+1370   	; 0x3b86 <main+0x1610>
                                          break;

                                 case 2 : state = 1; forward(); break;
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	90 93 25 03 	sts	0x0325, r25
    3634:	80 93 24 03 	sts	0x0324, r24
    3638:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    363c:	a4 c2       	rjmp	.+1352   	; 0x3b86 <main+0x1610>
                                 case 0 : state = 1; forward(); break;
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	90 93 25 03 	sts	0x0325, r25
    3646:	80 93 24 03 	sts	0x0324, r24
    364a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    364e:	9b c2       	rjmp	.+1334   	; 0x3b86 <main+0x1610>
                             }
                             break;

                    case 1 : line_follow_mm(75);
    3650:	8b e4       	ldi	r24, 0x4B	; 75
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <line_follow_mm>
                             stop();
    3658:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
                             switch(checkForCube())
    365c:	0e 94 26 2c 	call	0x584c	; 0x584c <checkForCube>
    3660:	cd 57       	subi	r28, 0x7D	; 125
    3662:	df 4f       	sbci	r29, 0xFF	; 255
    3664:	99 83       	std	Y+1, r25	; 0x01
    3666:	88 83       	st	Y, r24
    3668:	c3 58       	subi	r28, 0x83	; 131
    366a:	d0 40       	sbci	r29, 0x00	; 0
    366c:	cd 57       	subi	r28, 0x7D	; 125
    366e:	df 4f       	sbci	r29, 0xFF	; 255
    3670:	88 81       	ld	r24, Y
    3672:	99 81       	ldd	r25, Y+1	; 0x01
    3674:	c3 58       	subi	r28, 0x83	; 131
    3676:	d0 40       	sbci	r29, 0x00	; 0
    3678:	81 30       	cpi	r24, 0x01	; 1
    367a:	91 05       	cpc	r25, r1
    367c:	a1 f0       	breq	.+40     	; 0x36a6 <main+0x1130>
    367e:	cd 57       	subi	r28, 0x7D	; 125
    3680:	df 4f       	sbci	r29, 0xFF	; 255
    3682:	e8 81       	ld	r30, Y
    3684:	f9 81       	ldd	r31, Y+1	; 0x01
    3686:	c3 58       	subi	r28, 0x83	; 131
    3688:	d0 40       	sbci	r29, 0x00	; 0
    368a:	e2 30       	cpi	r30, 0x02	; 2
    368c:	f1 05       	cpc	r31, r1
    368e:	09 f4       	brne	.+2      	; 0x3692 <main+0x111c>
    3690:	ae c0       	rjmp	.+348    	; 0x37ee <main+0x1278>
    3692:	cd 57       	subi	r28, 0x7D	; 125
    3694:	df 4f       	sbci	r29, 0xFF	; 255
    3696:	88 81       	ld	r24, Y
    3698:	99 81       	ldd	r25, Y+1	; 0x01
    369a:	c3 58       	subi	r28, 0x83	; 131
    369c:	d0 40       	sbci	r29, 0x00	; 0
    369e:	00 97       	sbiw	r24, 0x00	; 0
    36a0:	09 f4       	brne	.+2      	; 0x36a4 <main+0x112e>
    36a2:	ae c0       	rjmp	.+348    	; 0x3800 <main+0x128a>
    36a4:	70 c2       	rjmp	.+1248   	; 0x3b86 <main+0x1610>
                             {
                                 case 1 :
                                          buzzerBeep_2(); state = 4; arenaUturn();
    36a6:	0e 94 6e 2e 	call	0x5cdc	; 0x5cdc <buzzerBeep_2>
    36aa:	84 e0       	ldi	r24, 0x04	; 4
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	90 93 25 03 	sts	0x0325, r25
    36b2:	80 93 24 03 	sts	0x0324, r24
    36b6:	0e 94 c4 29 	call	0x5388	; 0x5388 <arenaUturn>
                                          stop(); grip_2(); _delay_ms(500);
    36ba:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    36be:	0e 94 b1 12 	call	0x2562	; 0x2562 <grip_2>
    36c2:	fe 01       	movw	r30, r28
    36c4:	ed 5b       	subi	r30, 0xBD	; 189
    36c6:	ff 4f       	sbci	r31, 0xFF	; 255
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	aa ef       	ldi	r26, 0xFA	; 250
    36ce:	b3 e4       	ldi	r27, 0x43	; 67
    36d0:	80 83       	st	Z, r24
    36d2:	91 83       	std	Z+1, r25	; 0x01
    36d4:	a2 83       	std	Z+2, r26	; 0x02
    36d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d8:	8e 01       	movw	r16, r28
    36da:	01 5c       	subi	r16, 0xC1	; 193
    36dc:	1f 4f       	sbci	r17, 0xFF	; 255
    36de:	fe 01       	movw	r30, r28
    36e0:	ed 5b       	subi	r30, 0xBD	; 189
    36e2:	ff 4f       	sbci	r31, 0xFF	; 255
    36e4:	60 81       	ld	r22, Z
    36e6:	71 81       	ldd	r23, Z+1	; 0x01
    36e8:	82 81       	ldd	r24, Z+2	; 0x02
    36ea:	93 81       	ldd	r25, Z+3	; 0x03
    36ec:	26 e6       	ldi	r18, 0x66	; 102
    36ee:	36 e6       	ldi	r19, 0x66	; 102
    36f0:	46 e6       	ldi	r20, 0x66	; 102
    36f2:	55 e4       	ldi	r21, 0x45	; 69
    36f4:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    36f8:	dc 01       	movw	r26, r24
    36fa:	cb 01       	movw	r24, r22
    36fc:	f8 01       	movw	r30, r16
    36fe:	80 83       	st	Z, r24
    3700:	91 83       	std	Z+1, r25	; 0x01
    3702:	a2 83       	std	Z+2, r26	; 0x02
    3704:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3706:	fe 01       	movw	r30, r28
    3708:	ff 96       	adiw	r30, 0x3f	; 63
    370a:	60 81       	ld	r22, Z
    370c:	71 81       	ldd	r23, Z+1	; 0x01
    370e:	82 81       	ldd	r24, Z+2	; 0x02
    3710:	93 81       	ldd	r25, Z+3	; 0x03
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	40 e8       	ldi	r20, 0x80	; 128
    3718:	5f e3       	ldi	r21, 0x3F	; 63
    371a:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    371e:	88 23       	and	r24, r24
    3720:	2c f4       	brge	.+10     	; 0x372c <main+0x11b6>
		__ticks = 1;
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	9e af       	std	Y+62, r25	; 0x3e
    3728:	8d af       	std	Y+61, r24	; 0x3d
    372a:	46 c0       	rjmp	.+140    	; 0x37b8 <main+0x1242>
	else if (__tmp > 65535)
    372c:	fe 01       	movw	r30, r28
    372e:	ff 96       	adiw	r30, 0x3f	; 63
    3730:	60 81       	ld	r22, Z
    3732:	71 81       	ldd	r23, Z+1	; 0x01
    3734:	82 81       	ldd	r24, Z+2	; 0x02
    3736:	93 81       	ldd	r25, Z+3	; 0x03
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	3f ef       	ldi	r19, 0xFF	; 255
    373c:	4f e7       	ldi	r20, 0x7F	; 127
    373e:	57 e4       	ldi	r21, 0x47	; 71
    3740:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    3744:	18 16       	cp	r1, r24
    3746:	64 f5       	brge	.+88     	; 0x37a0 <main+0x122a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3748:	fe 01       	movw	r30, r28
    374a:	ed 5b       	subi	r30, 0xBD	; 189
    374c:	ff 4f       	sbci	r31, 0xFF	; 255
    374e:	60 81       	ld	r22, Z
    3750:	71 81       	ldd	r23, Z+1	; 0x01
    3752:	82 81       	ldd	r24, Z+2	; 0x02
    3754:	93 81       	ldd	r25, Z+3	; 0x03
    3756:	20 e0       	ldi	r18, 0x00	; 0
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	40 e2       	ldi	r20, 0x20	; 32
    375c:	51 e4       	ldi	r21, 0x41	; 65
    375e:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    3762:	dc 01       	movw	r26, r24
    3764:	cb 01       	movw	r24, r22
    3766:	bc 01       	movw	r22, r24
    3768:	cd 01       	movw	r24, r26
    376a:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    376e:	dc 01       	movw	r26, r24
    3770:	cb 01       	movw	r24, r22
    3772:	9e af       	std	Y+62, r25	; 0x3e
    3774:	8d af       	std	Y+61, r24	; 0x3d
    3776:	0f c0       	rjmp	.+30     	; 0x3796 <main+0x1220>
    3778:	80 e7       	ldi	r24, 0x70	; 112
    377a:	91 e0       	ldi	r25, 0x01	; 1
    377c:	9c af       	std	Y+60, r25	; 0x3c
    377e:	8b af       	std	Y+59, r24	; 0x3b
    3780:	8b ad       	ldd	r24, Y+59	; 0x3b
    3782:	9c ad       	ldd	r25, Y+60	; 0x3c
    3784:	01 97       	sbiw	r24, 0x01	; 1
    3786:	f1 f7       	brne	.-4      	; 0x3784 <main+0x120e>
    3788:	9c af       	std	Y+60, r25	; 0x3c
    378a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    378c:	8d ad       	ldd	r24, Y+61	; 0x3d
    378e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3790:	01 97       	sbiw	r24, 0x01	; 1
    3792:	9e af       	std	Y+62, r25	; 0x3e
    3794:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3796:	8d ad       	ldd	r24, Y+61	; 0x3d
    3798:	9e ad       	ldd	r25, Y+62	; 0x3e
    379a:	00 97       	sbiw	r24, 0x00	; 0
    379c:	69 f7       	brne	.-38     	; 0x3778 <main+0x1202>
    379e:	16 c0       	rjmp	.+44     	; 0x37cc <main+0x1256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a0:	fe 01       	movw	r30, r28
    37a2:	ff 96       	adiw	r30, 0x3f	; 63
    37a4:	60 81       	ld	r22, Z
    37a6:	71 81       	ldd	r23, Z+1	; 0x01
    37a8:	82 81       	ldd	r24, Z+2	; 0x02
    37aa:	93 81       	ldd	r25, Z+3	; 0x03
    37ac:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    37b0:	dc 01       	movw	r26, r24
    37b2:	cb 01       	movw	r24, r22
    37b4:	9e af       	std	Y+62, r25	; 0x3e
    37b6:	8d af       	std	Y+61, r24	; 0x3d
    37b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    37ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    37bc:	9a af       	std	Y+58, r25	; 0x3a
    37be:	89 af       	std	Y+57, r24	; 0x39
    37c0:	89 ad       	ldd	r24, Y+57	; 0x39
    37c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    37c4:	01 97       	sbiw	r24, 0x01	; 1
    37c6:	f1 f7       	brne	.-4      	; 0x37c4 <main+0x124e>
    37c8:	9a af       	std	Y+58, r25	; 0x3a
    37ca:	89 af       	std	Y+57, r24	; 0x39
                                          a[row - 1] = 2;
    37cc:	80 91 48 03 	lds	r24, 0x0348
    37d0:	90 91 49 03 	lds	r25, 0x0349
    37d4:	01 97       	sbiw	r24, 0x01	; 1
    37d6:	88 0f       	add	r24, r24
    37d8:	99 1f       	adc	r25, r25
    37da:	fc 01       	movw	r30, r24
    37dc:	ec 5c       	subi	r30, 0xCC	; 204
    37de:	fc 4f       	sbci	r31, 0xFC	; 252
    37e0:	82 e0       	ldi	r24, 0x02	; 2
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	91 83       	std	Z+1, r25	; 0x01
    37e6:	80 83       	st	Z, r24
                                          forward();
    37e8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    37ec:	cc c1       	rjmp	.+920    	; 0x3b86 <main+0x1610>
                                          break;

                                 case 2 : state = 2; forward(); break;
    37ee:	82 e0       	ldi	r24, 0x02	; 2
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	90 93 25 03 	sts	0x0325, r25
    37f6:	80 93 24 03 	sts	0x0324, r24
    37fa:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    37fe:	c3 c1       	rjmp	.+902    	; 0x3b86 <main+0x1610>
                                 case 0 : if(row == 1)
    3800:	80 91 48 03 	lds	r24, 0x0348
    3804:	90 91 49 03 	lds	r25, 0x0349
    3808:	81 30       	cpi	r24, 0x01	; 1
    380a:	91 05       	cpc	r25, r1
    380c:	a9 f4       	brne	.+42     	; 0x3838 <main+0x12c2>
                                          {
                                              errorFlag = 1;
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	90 93 27 03 	sts	0x0327, r25
    3816:	80 93 26 03 	sts	0x0326, r24
                                              buzzer_2();
    381a:	0e 94 bb 3f 	call	0x7f76	; 0x7f76 <buzzer_2>

                                              line_follow_mm(20);
    381e:	84 e1       	ldi	r24, 0x14	; 20
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <line_follow_mm>

                                              skipNodes(2);
    3826:	82 e0       	ldi	r24, 0x02	; 2
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <skipNodes>
                                              buzzer_3();
    382e:	0e 94 4e 40 	call	0x809c	; 0x809c <buzzer_3>
                                              stop();
    3832:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    3836:	ff cf       	rjmp	.-2      	; 0x3836 <main+0x12c0>
                                              while(1);
                                          }

                                          state = 4; arenaUturn();
    3838:	84 e0       	ldi	r24, 0x04	; 4
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	90 93 25 03 	sts	0x0325, r25
    3840:	80 93 24 03 	sts	0x0324, r24
    3844:	0e 94 c4 29 	call	0x5388	; 0x5388 <arenaUturn>
                                          stop(); grip_2(); _delay_ms(1000);
    3848:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    384c:	0e 94 b1 12 	call	0x2562	; 0x2562 <grip_2>
    3850:	80 e0       	ldi	r24, 0x00	; 0
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	aa e7       	ldi	r26, 0x7A	; 122
    3856:	b4 e4       	ldi	r27, 0x44	; 68
    3858:	8d ab       	std	Y+53, r24	; 0x35
    385a:	9e ab       	std	Y+54, r25	; 0x36
    385c:	af ab       	std	Y+55, r26	; 0x37
    385e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3860:	6d a9       	ldd	r22, Y+53	; 0x35
    3862:	7e a9       	ldd	r23, Y+54	; 0x36
    3864:	8f a9       	ldd	r24, Y+55	; 0x37
    3866:	98 ad       	ldd	r25, Y+56	; 0x38
    3868:	26 e6       	ldi	r18, 0x66	; 102
    386a:	36 e6       	ldi	r19, 0x66	; 102
    386c:	46 e6       	ldi	r20, 0x66	; 102
    386e:	55 e4       	ldi	r21, 0x45	; 69
    3870:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    3874:	dc 01       	movw	r26, r24
    3876:	cb 01       	movw	r24, r22
    3878:	89 ab       	std	Y+49, r24	; 0x31
    387a:	9a ab       	std	Y+50, r25	; 0x32
    387c:	ab ab       	std	Y+51, r26	; 0x33
    387e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3880:	69 a9       	ldd	r22, Y+49	; 0x31
    3882:	7a a9       	ldd	r23, Y+50	; 0x32
    3884:	8b a9       	ldd	r24, Y+51	; 0x33
    3886:	9c a9       	ldd	r25, Y+52	; 0x34
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	40 e8       	ldi	r20, 0x80	; 128
    388e:	5f e3       	ldi	r21, 0x3F	; 63
    3890:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    3894:	88 23       	and	r24, r24
    3896:	2c f4       	brge	.+10     	; 0x38a2 <main+0x132c>
		__ticks = 1;
    3898:	81 e0       	ldi	r24, 0x01	; 1
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	98 ab       	std	Y+48, r25	; 0x30
    389e:	8f a7       	std	Y+47, r24	; 0x2f
    38a0:	3f c0       	rjmp	.+126    	; 0x3920 <main+0x13aa>
	else if (__tmp > 65535)
    38a2:	69 a9       	ldd	r22, Y+49	; 0x31
    38a4:	7a a9       	ldd	r23, Y+50	; 0x32
    38a6:	8b a9       	ldd	r24, Y+51	; 0x33
    38a8:	9c a9       	ldd	r25, Y+52	; 0x34
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	3f ef       	ldi	r19, 0xFF	; 255
    38ae:	4f e7       	ldi	r20, 0x7F	; 127
    38b0:	57 e4       	ldi	r21, 0x47	; 71
    38b2:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    38b6:	18 16       	cp	r1, r24
    38b8:	4c f5       	brge	.+82     	; 0x390c <main+0x1396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ba:	6d a9       	ldd	r22, Y+53	; 0x35
    38bc:	7e a9       	ldd	r23, Y+54	; 0x36
    38be:	8f a9       	ldd	r24, Y+55	; 0x37
    38c0:	98 ad       	ldd	r25, Y+56	; 0x38
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	40 e2       	ldi	r20, 0x20	; 32
    38c8:	51 e4       	ldi	r21, 0x41	; 65
    38ca:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	bc 01       	movw	r22, r24
    38d4:	cd 01       	movw	r24, r26
    38d6:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    38da:	dc 01       	movw	r26, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	98 ab       	std	Y+48, r25	; 0x30
    38e0:	8f a7       	std	Y+47, r24	; 0x2f
    38e2:	0f c0       	rjmp	.+30     	; 0x3902 <main+0x138c>
    38e4:	80 e7       	ldi	r24, 0x70	; 112
    38e6:	91 e0       	ldi	r25, 0x01	; 1
    38e8:	9e a7       	std	Y+46, r25	; 0x2e
    38ea:	8d a7       	std	Y+45, r24	; 0x2d
    38ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    38ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	f1 f7       	brne	.-4      	; 0x38f0 <main+0x137a>
    38f4:	9e a7       	std	Y+46, r25	; 0x2e
    38f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    38fa:	98 a9       	ldd	r25, Y+48	; 0x30
    38fc:	01 97       	sbiw	r24, 0x01	; 1
    38fe:	98 ab       	std	Y+48, r25	; 0x30
    3900:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3902:	8f a5       	ldd	r24, Y+47	; 0x2f
    3904:	98 a9       	ldd	r25, Y+48	; 0x30
    3906:	00 97       	sbiw	r24, 0x00	; 0
    3908:	69 f7       	brne	.-38     	; 0x38e4 <main+0x136e>
    390a:	14 c0       	rjmp	.+40     	; 0x3934 <main+0x13be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    390c:	69 a9       	ldd	r22, Y+49	; 0x31
    390e:	7a a9       	ldd	r23, Y+50	; 0x32
    3910:	8b a9       	ldd	r24, Y+51	; 0x33
    3912:	9c a9       	ldd	r25, Y+52	; 0x34
    3914:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    3918:	dc 01       	movw	r26, r24
    391a:	cb 01       	movw	r24, r22
    391c:	98 ab       	std	Y+48, r25	; 0x30
    391e:	8f a7       	std	Y+47, r24	; 0x2f
    3920:	8f a5       	ldd	r24, Y+47	; 0x2f
    3922:	98 a9       	ldd	r25, Y+48	; 0x30
    3924:	9c a7       	std	Y+44, r25	; 0x2c
    3926:	8b a7       	std	Y+43, r24	; 0x2b
    3928:	8b a5       	ldd	r24, Y+43	; 0x2b
    392a:	9c a5       	ldd	r25, Y+44	; 0x2c
    392c:	01 97       	sbiw	r24, 0x01	; 1
    392e:	f1 f7       	brne	.-4      	; 0x392c <main+0x13b6>
    3930:	9c a7       	std	Y+44, r25	; 0x2c
    3932:	8b a7       	std	Y+43, r24	; 0x2b
                                          forward(); break;
    3934:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    3938:	26 c1       	rjmp	.+588    	; 0x3b86 <main+0x1610>
                             }
                             break;

                    case 2 : line_follow_mm(75); stop();
    393a:	8b e4       	ldi	r24, 0x4B	; 75
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <line_follow_mm>
    3942:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
                             buzzerBeep_2();
    3946:	0e 94 6e 2e 	call	0x5cdc	; 0x5cdc <buzzerBeep_2>
                             a[row - 1] = 3;
    394a:	80 91 48 03 	lds	r24, 0x0348
    394e:	90 91 49 03 	lds	r25, 0x0349
    3952:	01 97       	sbiw	r24, 0x01	; 1
    3954:	88 0f       	add	r24, r24
    3956:	99 1f       	adc	r25, r25
    3958:	fc 01       	movw	r30, r24
    395a:	ec 5c       	subi	r30, 0xCC	; 204
    395c:	fc 4f       	sbci	r31, 0xFC	; 252
    395e:	83 e0       	ldi	r24, 0x03	; 3
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	91 83       	std	Z+1, r25	; 0x01
    3964:	80 83       	st	Z, r24
                             arenaUturn(); state = 3;
    3966:	0e 94 c4 29 	call	0x5388	; 0x5388 <arenaUturn>
    396a:	83 e0       	ldi	r24, 0x03	; 3
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	90 93 25 03 	sts	0x0325, r25
    3972:	80 93 24 03 	sts	0x0324, r24
                             stop(); grip_2(); _delay_ms(500);
    3976:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    397a:	0e 94 b1 12 	call	0x2562	; 0x2562 <grip_2>
    397e:	80 e0       	ldi	r24, 0x00	; 0
    3980:	90 e0       	ldi	r25, 0x00	; 0
    3982:	aa ef       	ldi	r26, 0xFA	; 250
    3984:	b3 e4       	ldi	r27, 0x43	; 67
    3986:	8f a3       	std	Y+39, r24	; 0x27
    3988:	98 a7       	std	Y+40, r25	; 0x28
    398a:	a9 a7       	std	Y+41, r26	; 0x29
    398c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    398e:	6f a1       	ldd	r22, Y+39	; 0x27
    3990:	78 a5       	ldd	r23, Y+40	; 0x28
    3992:	89 a5       	ldd	r24, Y+41	; 0x29
    3994:	9a a5       	ldd	r25, Y+42	; 0x2a
    3996:	26 e6       	ldi	r18, 0x66	; 102
    3998:	36 e6       	ldi	r19, 0x66	; 102
    399a:	46 e6       	ldi	r20, 0x66	; 102
    399c:	55 e4       	ldi	r21, 0x45	; 69
    399e:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    39a2:	dc 01       	movw	r26, r24
    39a4:	cb 01       	movw	r24, r22
    39a6:	8b a3       	std	Y+35, r24	; 0x23
    39a8:	9c a3       	std	Y+36, r25	; 0x24
    39aa:	ad a3       	std	Y+37, r26	; 0x25
    39ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    39ae:	6b a1       	ldd	r22, Y+35	; 0x23
    39b0:	7c a1       	ldd	r23, Y+36	; 0x24
    39b2:	8d a1       	ldd	r24, Y+37	; 0x25
    39b4:	9e a1       	ldd	r25, Y+38	; 0x26
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	40 e8       	ldi	r20, 0x80	; 128
    39bc:	5f e3       	ldi	r21, 0x3F	; 63
    39be:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    39c2:	88 23       	and	r24, r24
    39c4:	2c f4       	brge	.+10     	; 0x39d0 <main+0x145a>
		__ticks = 1;
    39c6:	81 e0       	ldi	r24, 0x01	; 1
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	9a a3       	std	Y+34, r25	; 0x22
    39cc:	89 a3       	std	Y+33, r24	; 0x21
    39ce:	3f c0       	rjmp	.+126    	; 0x3a4e <main+0x14d8>
	else if (__tmp > 65535)
    39d0:	6b a1       	ldd	r22, Y+35	; 0x23
    39d2:	7c a1       	ldd	r23, Y+36	; 0x24
    39d4:	8d a1       	ldd	r24, Y+37	; 0x25
    39d6:	9e a1       	ldd	r25, Y+38	; 0x26
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	3f ef       	ldi	r19, 0xFF	; 255
    39dc:	4f e7       	ldi	r20, 0x7F	; 127
    39de:	57 e4       	ldi	r21, 0x47	; 71
    39e0:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    39e4:	18 16       	cp	r1, r24
    39e6:	4c f5       	brge	.+82     	; 0x3a3a <main+0x14c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39e8:	6f a1       	ldd	r22, Y+39	; 0x27
    39ea:	78 a5       	ldd	r23, Y+40	; 0x28
    39ec:	89 a5       	ldd	r24, Y+41	; 0x29
    39ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	40 e2       	ldi	r20, 0x20	; 32
    39f6:	51 e4       	ldi	r21, 0x41	; 65
    39f8:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	bc 01       	movw	r22, r24
    3a02:	cd 01       	movw	r24, r26
    3a04:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	9a a3       	std	Y+34, r25	; 0x22
    3a0e:	89 a3       	std	Y+33, r24	; 0x21
    3a10:	0f c0       	rjmp	.+30     	; 0x3a30 <main+0x14ba>
    3a12:	80 e7       	ldi	r24, 0x70	; 112
    3a14:	91 e0       	ldi	r25, 0x01	; 1
    3a16:	98 a3       	std	Y+32, r25	; 0x20
    3a18:	8f 8f       	std	Y+31, r24	; 0x1f
    3a1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a1c:	98 a1       	ldd	r25, Y+32	; 0x20
    3a1e:	01 97       	sbiw	r24, 0x01	; 1
    3a20:	f1 f7       	brne	.-4      	; 0x3a1e <main+0x14a8>
    3a22:	98 a3       	std	Y+32, r25	; 0x20
    3a24:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a26:	89 a1       	ldd	r24, Y+33	; 0x21
    3a28:	9a a1       	ldd	r25, Y+34	; 0x22
    3a2a:	01 97       	sbiw	r24, 0x01	; 1
    3a2c:	9a a3       	std	Y+34, r25	; 0x22
    3a2e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a30:	89 a1       	ldd	r24, Y+33	; 0x21
    3a32:	9a a1       	ldd	r25, Y+34	; 0x22
    3a34:	00 97       	sbiw	r24, 0x00	; 0
    3a36:	69 f7       	brne	.-38     	; 0x3a12 <main+0x149c>
    3a38:	14 c0       	rjmp	.+40     	; 0x3a62 <main+0x14ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a3a:	6b a1       	ldd	r22, Y+35	; 0x23
    3a3c:	7c a1       	ldd	r23, Y+36	; 0x24
    3a3e:	8d a1       	ldd	r24, Y+37	; 0x25
    3a40:	9e a1       	ldd	r25, Y+38	; 0x26
    3a42:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	9a a3       	std	Y+34, r25	; 0x22
    3a4c:	89 a3       	std	Y+33, r24	; 0x21
    3a4e:	89 a1       	ldd	r24, Y+33	; 0x21
    3a50:	9a a1       	ldd	r25, Y+34	; 0x22
    3a52:	9e 8f       	std	Y+30, r25	; 0x1e
    3a54:	8d 8f       	std	Y+29, r24	; 0x1d
    3a56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a58:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a5a:	01 97       	sbiw	r24, 0x01	; 1
    3a5c:	f1 f7       	brne	.-4      	; 0x3a5a <main+0x14e4>
    3a5e:	9e 8f       	std	Y+30, r25	; 0x1e
    3a60:	8d 8f       	std	Y+29, r24	; 0x1d

                             forward();
    3a62:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    3a66:	8f c0       	rjmp	.+286    	; 0x3b86 <main+0x1610>
                             break;

                    case 3 : state = 4;
    3a68:	84 e0       	ldi	r24, 0x04	; 4
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	90 93 25 03 	sts	0x0325, r25
    3a70:	80 93 24 03 	sts	0x0324, r24
    3a74:	88 c0       	rjmp	.+272    	; 0x3b86 <main+0x1610>
                             break;

                    case 4 :
                             if(row == 1)
    3a76:	80 91 48 03 	lds	r24, 0x0348
    3a7a:	90 91 49 03 	lds	r25, 0x0349
    3a7e:	81 30       	cpi	r24, 0x01	; 1
    3a80:	91 05       	cpc	r25, r1
    3a82:	19 f4       	brne	.+6      	; 0x3a8a <main+0x1514>
                                arenaRight_3();
    3a84:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <arenaRight_3>
    3a88:	02 c0       	rjmp	.+4      	; 0x3a8e <main+0x1518>

                             else
                                arenaLeft_3();
    3a8a:	0e 94 17 22 	call	0x442e	; 0x442e <arenaLeft_3>

                             ungrip(); _delay_ms(500); state = 5;
    3a8e:	0e 94 9d 12 	call	0x253a	; 0x253a <ungrip>
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	aa ef       	ldi	r26, 0xFA	; 250
    3a98:	b3 e4       	ldi	r27, 0x43	; 67
    3a9a:	89 8f       	std	Y+25, r24	; 0x19
    3a9c:	9a 8f       	std	Y+26, r25	; 0x1a
    3a9e:	ab 8f       	std	Y+27, r26	; 0x1b
    3aa0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aa2:	69 8d       	ldd	r22, Y+25	; 0x19
    3aa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3aa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3aa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3aaa:	26 e6       	ldi	r18, 0x66	; 102
    3aac:	36 e6       	ldi	r19, 0x66	; 102
    3aae:	46 e6       	ldi	r20, 0x66	; 102
    3ab0:	55 e4       	ldi	r21, 0x45	; 69
    3ab2:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    3ab6:	dc 01       	movw	r26, r24
    3ab8:	cb 01       	movw	r24, r22
    3aba:	8d 8b       	std	Y+21, r24	; 0x15
    3abc:	9e 8b       	std	Y+22, r25	; 0x16
    3abe:	af 8b       	std	Y+23, r26	; 0x17
    3ac0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ac2:	6d 89       	ldd	r22, Y+21	; 0x15
    3ac4:	7e 89       	ldd	r23, Y+22	; 0x16
    3ac6:	8f 89       	ldd	r24, Y+23	; 0x17
    3ac8:	98 8d       	ldd	r25, Y+24	; 0x18
    3aca:	20 e0       	ldi	r18, 0x00	; 0
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	40 e8       	ldi	r20, 0x80	; 128
    3ad0:	5f e3       	ldi	r21, 0x3F	; 63
    3ad2:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    3ad6:	88 23       	and	r24, r24
    3ad8:	2c f4       	brge	.+10     	; 0x3ae4 <main+0x156e>
		__ticks = 1;
    3ada:	81 e0       	ldi	r24, 0x01	; 1
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	9c 8b       	std	Y+20, r25	; 0x14
    3ae0:	8b 8b       	std	Y+19, r24	; 0x13
    3ae2:	3f c0       	rjmp	.+126    	; 0x3b62 <main+0x15ec>
	else if (__tmp > 65535)
    3ae4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ae6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ae8:	8f 89       	ldd	r24, Y+23	; 0x17
    3aea:	98 8d       	ldd	r25, Y+24	; 0x18
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	3f ef       	ldi	r19, 0xFF	; 255
    3af0:	4f e7       	ldi	r20, 0x7F	; 127
    3af2:	57 e4       	ldi	r21, 0x47	; 71
    3af4:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    3af8:	18 16       	cp	r1, r24
    3afa:	4c f5       	brge	.+82     	; 0x3b4e <main+0x15d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3afc:	69 8d       	ldd	r22, Y+25	; 0x19
    3afe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b04:	20 e0       	ldi	r18, 0x00	; 0
    3b06:	30 e0       	ldi	r19, 0x00	; 0
    3b08:	40 e2       	ldi	r20, 0x20	; 32
    3b0a:	51 e4       	ldi	r21, 0x41	; 65
    3b0c:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	bc 01       	movw	r22, r24
    3b16:	cd 01       	movw	r24, r26
    3b18:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	cb 01       	movw	r24, r22
    3b20:	9c 8b       	std	Y+20, r25	; 0x14
    3b22:	8b 8b       	std	Y+19, r24	; 0x13
    3b24:	0f c0       	rjmp	.+30     	; 0x3b44 <main+0x15ce>
    3b26:	80 e7       	ldi	r24, 0x70	; 112
    3b28:	91 e0       	ldi	r25, 0x01	; 1
    3b2a:	9a 8b       	std	Y+18, r25	; 0x12
    3b2c:	89 8b       	std	Y+17, r24	; 0x11
    3b2e:	89 89       	ldd	r24, Y+17	; 0x11
    3b30:	9a 89       	ldd	r25, Y+18	; 0x12
    3b32:	01 97       	sbiw	r24, 0x01	; 1
    3b34:	f1 f7       	brne	.-4      	; 0x3b32 <main+0x15bc>
    3b36:	9a 8b       	std	Y+18, r25	; 0x12
    3b38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b3a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b3c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b3e:	01 97       	sbiw	r24, 0x01	; 1
    3b40:	9c 8b       	std	Y+20, r25	; 0x14
    3b42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b44:	8b 89       	ldd	r24, Y+19	; 0x13
    3b46:	9c 89       	ldd	r25, Y+20	; 0x14
    3b48:	00 97       	sbiw	r24, 0x00	; 0
    3b4a:	69 f7       	brne	.-38     	; 0x3b26 <main+0x15b0>
    3b4c:	14 c0       	rjmp	.+40     	; 0x3b76 <main+0x1600>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b4e:	6d 89       	ldd	r22, Y+21	; 0x15
    3b50:	7e 89       	ldd	r23, Y+22	; 0x16
    3b52:	8f 89       	ldd	r24, Y+23	; 0x17
    3b54:	98 8d       	ldd	r25, Y+24	; 0x18
    3b56:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    3b5a:	dc 01       	movw	r26, r24
    3b5c:	cb 01       	movw	r24, r22
    3b5e:	9c 8b       	std	Y+20, r25	; 0x14
    3b60:	8b 8b       	std	Y+19, r24	; 0x13
    3b62:	8b 89       	ldd	r24, Y+19	; 0x13
    3b64:	9c 89       	ldd	r25, Y+20	; 0x14
    3b66:	98 8b       	std	Y+16, r25	; 0x10
    3b68:	8f 87       	std	Y+15, r24	; 0x0f
    3b6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b6c:	98 89       	ldd	r25, Y+16	; 0x10
    3b6e:	01 97       	sbiw	r24, 0x01	; 1
    3b70:	f1 f7       	brne	.-4      	; 0x3b6e <main+0x15f8>
    3b72:	98 8b       	std	Y+16, r25	; 0x10
    3b74:	8f 87       	std	Y+15, r24	; 0x0f
    3b76:	85 e0       	ldi	r24, 0x05	; 5
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	90 93 25 03 	sts	0x0325, r25
    3b7e:	80 93 24 03 	sts	0x0324, r24
                             forward(); break;
    3b82:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
                }

                if(state == 5)
    3b86:	80 91 24 03 	lds	r24, 0x0324
    3b8a:	90 91 25 03 	lds	r25, 0x0325
    3b8e:	85 30       	cpi	r24, 0x05	; 5
    3b90:	91 05       	cpc	r25, r1
    3b92:	69 f4       	brne	.+26     	; 0x3bae <main+0x1638>
                {
                    state = 0;
    3b94:	10 92 25 03 	sts	0x0325, r1
    3b98:	10 92 24 03 	sts	0x0324, r1
                    row--;
    3b9c:	80 91 48 03 	lds	r24, 0x0348
    3ba0:	90 91 49 03 	lds	r25, 0x0349
    3ba4:	01 97       	sbiw	r24, 0x01	; 1
    3ba6:	90 93 49 03 	sts	0x0349, r25
    3baa:	80 93 48 03 	sts	0x0348, r24
                }

                if(row == 1)
    3bae:	80 91 48 03 	lds	r24, 0x0348
    3bb2:	90 91 49 03 	lds	r25, 0x0349
    3bb6:	81 30       	cpi	r24, 0x01	; 1
    3bb8:	91 05       	cpc	r25, r1
    3bba:	39 f4       	brne	.+14     	; 0x3bca <main+0x1654>
                {
                    errorFlag = 1;
    3bbc:	81 e0       	ldi	r24, 0x01	; 1
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	90 93 27 03 	sts	0x0327, r25
    3bc4:	80 93 26 03 	sts	0x0326, r24
    3bc8:	04 c0       	rjmp	.+8      	; 0x3bd2 <main+0x165c>
                }

                else
                    errorFlag = 0;
    3bca:	10 92 27 03 	sts	0x0327, r1
    3bce:	10 92 26 03 	sts	0x0326, r1

                if(row == 0)
    3bd2:	80 91 48 03 	lds	r24, 0x0348
    3bd6:	90 91 49 03 	lds	r25, 0x0349
    3bda:	00 97       	sbiw	r24, 0x00	; 0
    3bdc:	69 f4       	brne	.+26     	; 0x3bf8 <main+0x1682>
                {
                    buzzer_2();
    3bde:	0e 94 bb 3f 	call	0x7f76	; 0x7f76 <buzzer_2>
                    reachEnd();
    3be2:	0e 94 04 36 	call	0x6c08	; 0x6c08 <reachEnd>
                    d2Completed = 1;
    3be6:	81 e0       	ldi	r24, 0x01	; 1
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	90 93 47 03 	sts	0x0347, r25
    3bee:	80 93 46 03 	sts	0x0346, r24
    3bf2:	02 c0       	rjmp	.+4      	; 0x3bf8 <main+0x1682>
                }
            }
        }

        else
            findLine();
    3bf4:	0e 94 57 32 	call	0x64ae	; 0x64ae <findLine>

        lastError = error;
    3bf8:	de 01       	movw	r26, r28
    3bfa:	a1 58       	subi	r26, 0x81	; 129
    3bfc:	bf 4f       	sbci	r27, 0xFF	; 255
    3bfe:	fe 01       	movw	r30, r28
    3c00:	ef 57       	subi	r30, 0x7F	; 127
    3c02:	ff 4f       	sbci	r31, 0xFF	; 255
    3c04:	80 81       	ld	r24, Z
    3c06:	91 81       	ldd	r25, Z+1	; 0x01
    3c08:	11 96       	adiw	r26, 0x01	; 1
    3c0a:	9c 93       	st	X, r25
    3c0c:	8e 93       	st	-X, r24

        if(nodeMissedFlag == 1)
    3c0e:	80 91 1a 03 	lds	r24, 0x031A
    3c12:	90 91 1b 03 	lds	r25, 0x031B
    3c16:	81 30       	cpi	r24, 0x01	; 1
    3c18:	91 05       	cpc	r25, r1
    3c1a:	09 f0       	breq	.+2      	; 0x3c1e <main+0x16a8>
    3c1c:	7e c0       	rjmp	.+252    	; 0x3d1a <main+0x17a4>
        {
            stop();
    3c1e:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	a8 ec       	ldi	r26, 0xC8	; 200
    3c28:	b2 e4       	ldi	r27, 0x42	; 66
    3c2a:	8b 87       	std	Y+11, r24	; 0x0b
    3c2c:	9c 87       	std	Y+12, r25	; 0x0c
    3c2e:	ad 87       	std	Y+13, r26	; 0x0d
    3c30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c32:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c34:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c3a:	26 e6       	ldi	r18, 0x66	; 102
    3c3c:	36 e6       	ldi	r19, 0x66	; 102
    3c3e:	46 e6       	ldi	r20, 0x66	; 102
    3c40:	55 e4       	ldi	r21, 0x45	; 69
    3c42:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    3c46:	dc 01       	movw	r26, r24
    3c48:	cb 01       	movw	r24, r22
    3c4a:	8f 83       	std	Y+7, r24	; 0x07
    3c4c:	98 87       	std	Y+8, r25	; 0x08
    3c4e:	a9 87       	std	Y+9, r26	; 0x09
    3c50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c52:	6f 81       	ldd	r22, Y+7	; 0x07
    3c54:	78 85       	ldd	r23, Y+8	; 0x08
    3c56:	89 85       	ldd	r24, Y+9	; 0x09
    3c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	40 e8       	ldi	r20, 0x80	; 128
    3c60:	5f e3       	ldi	r21, 0x3F	; 63
    3c62:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    3c66:	88 23       	and	r24, r24
    3c68:	2c f4       	brge	.+10     	; 0x3c74 <main+0x16fe>
		__ticks = 1;
    3c6a:	81 e0       	ldi	r24, 0x01	; 1
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	9e 83       	std	Y+6, r25	; 0x06
    3c70:	8d 83       	std	Y+5, r24	; 0x05
    3c72:	3f c0       	rjmp	.+126    	; 0x3cf2 <main+0x177c>
	else if (__tmp > 65535)
    3c74:	6f 81       	ldd	r22, Y+7	; 0x07
    3c76:	78 85       	ldd	r23, Y+8	; 0x08
    3c78:	89 85       	ldd	r24, Y+9	; 0x09
    3c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c7c:	20 e0       	ldi	r18, 0x00	; 0
    3c7e:	3f ef       	ldi	r19, 0xFF	; 255
    3c80:	4f e7       	ldi	r20, 0x7F	; 127
    3c82:	57 e4       	ldi	r21, 0x47	; 71
    3c84:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    3c88:	18 16       	cp	r1, r24
    3c8a:	4c f5       	brge	.+82     	; 0x3cde <main+0x1768>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c92:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c94:	20 e0       	ldi	r18, 0x00	; 0
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	40 e2       	ldi	r20, 0x20	; 32
    3c9a:	51 e4       	ldi	r21, 0x41	; 65
    3c9c:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    3ca0:	dc 01       	movw	r26, r24
    3ca2:	cb 01       	movw	r24, r22
    3ca4:	bc 01       	movw	r22, r24
    3ca6:	cd 01       	movw	r24, r26
    3ca8:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    3cac:	dc 01       	movw	r26, r24
    3cae:	cb 01       	movw	r24, r22
    3cb0:	9e 83       	std	Y+6, r25	; 0x06
    3cb2:	8d 83       	std	Y+5, r24	; 0x05
    3cb4:	0f c0       	rjmp	.+30     	; 0x3cd4 <main+0x175e>
    3cb6:	80 e7       	ldi	r24, 0x70	; 112
    3cb8:	91 e0       	ldi	r25, 0x01	; 1
    3cba:	9c 83       	std	Y+4, r25	; 0x04
    3cbc:	8b 83       	std	Y+3, r24	; 0x03
    3cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc2:	01 97       	sbiw	r24, 0x01	; 1
    3cc4:	f1 f7       	brne	.-4      	; 0x3cc2 <main+0x174c>
    3cc6:	9c 83       	std	Y+4, r25	; 0x04
    3cc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cca:	8d 81       	ldd	r24, Y+5	; 0x05
    3ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    3cce:	01 97       	sbiw	r24, 0x01	; 1
    3cd0:	9e 83       	std	Y+6, r25	; 0x06
    3cd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd8:	00 97       	sbiw	r24, 0x00	; 0
    3cda:	69 f7       	brne	.-38     	; 0x3cb6 <main+0x1740>
    3cdc:	14 c0       	rjmp	.+40     	; 0x3d06 <main+0x1790>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cde:	6f 81       	ldd	r22, Y+7	; 0x07
    3ce0:	78 85       	ldd	r23, Y+8	; 0x08
    3ce2:	89 85       	ldd	r24, Y+9	; 0x09
    3ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ce6:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    3cea:	dc 01       	movw	r26, r24
    3cec:	cb 01       	movw	r24, r22
    3cee:	9e 83       	std	Y+6, r25	; 0x06
    3cf0:	8d 83       	std	Y+5, r24	; 0x05
    3cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cf6:	9a 83       	std	Y+2, r25	; 0x02
    3cf8:	89 83       	std	Y+1, r24	; 0x01
    3cfa:	89 81       	ldd	r24, Y+1	; 0x01
    3cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cfe:	01 97       	sbiw	r24, 0x01	; 1
    3d00:	f1 f7       	brne	.-4      	; 0x3cfe <main+0x1788>
    3d02:	9a 83       	std	Y+2, r25	; 0x02
    3d04:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(100);

            lineFollowBack();
    3d06:	0e 94 e2 33 	call	0x67c4	; 0x67c4 <lineFollowBack>
            nodeMissedFlag = 0;
    3d0a:	10 92 1b 03 	sts	0x031B, r1
    3d0e:	10 92 1a 03 	sts	0x031A, r1
            nodeMissTracker = 0;
    3d12:	10 92 19 03 	sts	0x0319, r1
    3d16:	10 92 18 03 	sts	0x0318, r1
        case 1 : buzzerBeep_2(); arenaRight_2(); state = 0; row = 5; a[row - 1] = 1; forward(); break;
        case 2 : state = 1; forward(); break;
        case 0 : state = 1; forward(); break;
    }

    while(!d2Completed)
    3d1a:	80 91 46 03 	lds	r24, 0x0346
    3d1e:	90 91 47 03 	lds	r25, 0x0347
    3d22:	00 97       	sbiw	r24, 0x00	; 0
    3d24:	09 f4       	brne	.+2      	; 0x3d28 <main+0x17b2>
    3d26:	91 cb       	rjmp	.-2270   	; 0x344a <main+0xed4>
    3d28:	ff cf       	rjmp	.-2      	; 0x3d28 <main+0x17b2>

00003d2a <line_follow_mm>:

}


void line_follow_mm(int distance)
{
    3d2a:	df 93       	push	r29
    3d2c:	cf 93       	push	r28
    3d2e:	00 d0       	rcall	.+0      	; 0x3d30 <line_follow_mm+0x6>
    3d30:	00 d0       	rcall	.+0      	; 0x3d32 <line_follow_mm+0x8>
    3d32:	cd b7       	in	r28, 0x3d	; 61
    3d34:	de b7       	in	r29, 0x3e	; 62
    3d36:	9e 83       	std	Y+6, r25	; 0x06
    3d38:	8d 83       	std	Y+5, r24	; 0x05
    int reqCount = distance/5.338;
    3d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d3e:	aa 27       	eor	r26, r26
    3d40:	97 fd       	sbrc	r25, 7
    3d42:	a0 95       	com	r26
    3d44:	ba 2f       	mov	r27, r26
    3d46:	bc 01       	movw	r22, r24
    3d48:	cd 01       	movw	r24, r26
    3d4a:	0e 94 ed 44 	call	0x89da	; 0x89da <__floatsisf>
    3d4e:	dc 01       	movw	r26, r24
    3d50:	cb 01       	movw	r24, r22
    3d52:	bc 01       	movw	r22, r24
    3d54:	cd 01       	movw	r24, r26
    3d56:	25 ee       	ldi	r18, 0xE5	; 229
    3d58:	30 ed       	ldi	r19, 0xD0	; 208
    3d5a:	4a ea       	ldi	r20, 0xAA	; 170
    3d5c:	50 e4       	ldi	r21, 0x40	; 64
    3d5e:	0e 94 b1 43 	call	0x8762	; 0x8762 <__divsf3>
    3d62:	dc 01       	movw	r26, r24
    3d64:	cb 01       	movw	r24, r22
    3d66:	bc 01       	movw	r22, r24
    3d68:	cd 01       	movw	r24, r26
    3d6a:	0e 94 4b 45 	call	0x8a96	; 0x8a96 <__fixsfsi>
    3d6e:	dc 01       	movw	r26, r24
    3d70:	cb 01       	movw	r24, r22
    3d72:	9c 83       	std	Y+4, r25	; 0x04
    3d74:	8b 83       	std	Y+3, r24	; 0x03
    int error = 0;
    3d76:	1a 82       	std	Y+2, r1	; 0x02
    3d78:	19 82       	std	Y+1, r1	; 0x01

    ShaftCountLeft = 0;
    3d7a:	10 92 10 03 	sts	0x0310, r1
    3d7e:	10 92 11 03 	sts	0x0311, r1
    3d82:	10 92 12 03 	sts	0x0312, r1
    3d86:	10 92 13 03 	sts	0x0313, r1
    forward();
    3d8a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    3d8e:	46 c0       	rjmp	.+140    	; 0x3e1c <line_follow_mm+0xf2>

    while(ShaftCountLeft < reqCount || ShaftCountRight < reqCount)
    {
        error = getError();
    3d90:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <getError>
    3d94:	9a 83       	std	Y+2, r25	; 0x02
    3d96:	89 83       	std	Y+1, r24	; 0x01

        else if(error == -100)
            findLine();

*/
        if(error == 0)
    3d98:	89 81       	ldd	r24, Y+1	; 0x01
    3d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d9c:	00 97       	sbiw	r24, 0x00	; 0
    3d9e:	69 f4       	brne	.+26     	; 0x3dba <line_follow_mm+0x90>
        {
            leftSpeed = forwardLeftSpeed;
    3da0:	84 eb       	ldi	r24, 0xB4	; 180
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	90 93 1f 03 	sts	0x031F, r25
    3da8:	80 93 1e 03 	sts	0x031E, r24
            rightSpeed = forwardRightSpeed;
    3dac:	84 eb       	ldi	r24, 0xB4	; 180
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	90 93 31 03 	sts	0x0331, r25
    3db4:	80 93 30 03 	sts	0x0330, r24
    3db8:	31 c0       	rjmp	.+98     	; 0x3e1c <line_follow_mm+0xf2>
        }

        else if(error == 1)
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
    3dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dbe:	81 30       	cpi	r24, 0x01	; 1
    3dc0:	91 05       	cpc	r25, r1
    3dc2:	69 f4       	brne	.+26     	; 0x3dde <line_follow_mm+0xb4>
        {
            leftSpeed = forwardLeftSpeed + 20;
    3dc4:	88 ec       	ldi	r24, 0xC8	; 200
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	90 93 1f 03 	sts	0x031F, r25
    3dcc:	80 93 1e 03 	sts	0x031E, r24
            rightSpeed = forwardRightSpeed - 20;
    3dd0:	80 ea       	ldi	r24, 0xA0	; 160
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	90 93 31 03 	sts	0x0331, r25
    3dd8:	80 93 30 03 	sts	0x0330, r24
    3ddc:	1f c0       	rjmp	.+62     	; 0x3e1c <line_follow_mm+0xf2>
        }

        else if(error == -1)
    3dde:	89 81       	ldd	r24, Y+1	; 0x01
    3de0:	9a 81       	ldd	r25, Y+2	; 0x02
    3de2:	2f ef       	ldi	r18, 0xFF	; 255
    3de4:	8f 3f       	cpi	r24, 0xFF	; 255
    3de6:	92 07       	cpc	r25, r18
    3de8:	69 f4       	brne	.+26     	; 0x3e04 <line_follow_mm+0xda>
        {
            leftSpeed = forwardLeftSpeed - 20;
    3dea:	80 ea       	ldi	r24, 0xA0	; 160
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	90 93 1f 03 	sts	0x031F, r25
    3df2:	80 93 1e 03 	sts	0x031E, r24
            rightSpeed = forwardRightSpeed + 20;
    3df6:	88 ec       	ldi	r24, 0xC8	; 200
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	90 93 31 03 	sts	0x0331, r25
    3dfe:	80 93 30 03 	sts	0x0330, r24
    3e02:	0c c0       	rjmp	.+24     	; 0x3e1c <line_follow_mm+0xf2>
        }

        else if(error == 100)
    3e04:	89 81       	ldd	r24, Y+1	; 0x01
    3e06:	9a 81       	ldd	r25, Y+2	; 0x02
    3e08:	84 36       	cpi	r24, 0x64	; 100
    3e0a:	91 05       	cpc	r25, r1
    3e0c:	29 f4       	brne	.+10     	; 0x3e18 <line_follow_mm+0xee>
            velocity(forwardLeftSpeed, forwardRightSpeed);
    3e0e:	84 eb       	ldi	r24, 0xB4	; 180
    3e10:	64 eb       	ldi	r22, 0xB4	; 180
    3e12:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    3e16:	02 c0       	rjmp	.+4      	; 0x3e1c <line_follow_mm+0xf2>

        else
            findLine();
    3e18:	0e 94 57 32 	call	0x64ae	; 0x64ae <findLine>
    int error = 0;

    ShaftCountLeft = 0;
    forward();

    while(ShaftCountLeft < reqCount || ShaftCountRight < reqCount)
    3e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e20:	9c 01       	movw	r18, r24
    3e22:	44 27       	eor	r20, r20
    3e24:	37 fd       	sbrc	r19, 7
    3e26:	40 95       	com	r20
    3e28:	54 2f       	mov	r21, r20
    3e2a:	80 91 10 03 	lds	r24, 0x0310
    3e2e:	90 91 11 03 	lds	r25, 0x0311
    3e32:	a0 91 12 03 	lds	r26, 0x0312
    3e36:	b0 91 13 03 	lds	r27, 0x0313
    3e3a:	82 17       	cp	r24, r18
    3e3c:	93 07       	cpc	r25, r19
    3e3e:	a4 07       	cpc	r26, r20
    3e40:	b5 07       	cpc	r27, r21
    3e42:	08 f4       	brcc	.+2      	; 0x3e46 <line_follow_mm+0x11c>
    3e44:	a5 cf       	rjmp	.-182    	; 0x3d90 <line_follow_mm+0x66>
    3e46:	8b 81       	ldd	r24, Y+3	; 0x03
    3e48:	9c 81       	ldd	r25, Y+4	; 0x04
    3e4a:	9c 01       	movw	r18, r24
    3e4c:	44 27       	eor	r20, r20
    3e4e:	37 fd       	sbrc	r19, 7
    3e50:	40 95       	com	r20
    3e52:	54 2f       	mov	r21, r20
    3e54:	80 91 14 03 	lds	r24, 0x0314
    3e58:	90 91 15 03 	lds	r25, 0x0315
    3e5c:	a0 91 16 03 	lds	r26, 0x0316
    3e60:	b0 91 17 03 	lds	r27, 0x0317
    3e64:	82 17       	cp	r24, r18
    3e66:	93 07       	cpc	r25, r19
    3e68:	a4 07       	cpc	r26, r20
    3e6a:	b5 07       	cpc	r27, r21
    3e6c:	08 f4       	brcc	.+2      	; 0x3e70 <line_follow_mm+0x146>
    3e6e:	90 cf       	rjmp	.-224    	; 0x3d90 <line_follow_mm+0x66>
            velocity(forwardLeftSpeed, forwardRightSpeed);

        else
            findLine();
    }
}
    3e70:	26 96       	adiw	r28, 0x06	; 6
    3e72:	0f b6       	in	r0, 0x3f	; 63
    3e74:	f8 94       	cli
    3e76:	de bf       	out	0x3e, r29	; 62
    3e78:	0f be       	out	0x3f, r0	; 63
    3e7a:	cd bf       	out	0x3d, r28	; 61
    3e7c:	cf 91       	pop	r28
    3e7e:	df 91       	pop	r29
    3e80:	08 95       	ret

00003e82 <arenaLeft>:

void arenaLeft(void)
{
    3e82:	df 93       	push	r29
    3e84:	cf 93       	push	r28
    3e86:	cd b7       	in	r28, 0x3d	; 61
    3e88:	de b7       	in	r29, 0x3e	; 62
    3e8a:	aa 97       	sbiw	r28, 0x2a	; 42
    3e8c:	0f b6       	in	r0, 0x3f	; 63
    3e8e:	f8 94       	cli
    3e90:	de bf       	out	0x3e, r29	; 62
    3e92:	0f be       	out	0x3f, r0	; 63
    3e94:	cd bf       	out	0x3d, r28	; 61
/*
    stop();
    _delay_ms(1000);
*/
    velocity(forwardLeftSpeed, forwardRightSpeed);
    3e96:	84 eb       	ldi	r24, 0xB4	; 180
    3e98:	64 eb       	ldi	r22, 0xB4	; 180
    3e9a:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>

    if(errorFlag == 1)
    3e9e:	80 91 26 03 	lds	r24, 0x0326
    3ea2:	90 91 27 03 	lds	r25, 0x0327
    3ea6:	81 30       	cpi	r24, 0x01	; 1
    3ea8:	91 05       	cpc	r25, r1
    3eaa:	29 f4       	brne	.+10     	; 0x3eb6 <arenaLeft+0x34>
        forward_mm(60);
    3eac:	8c e3       	ldi	r24, 0x3C	; 60
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	0e 94 03 02 	call	0x406	; 0x406 <forward_mm>
    3eb4:	04 c0       	rjmp	.+8      	; 0x3ebe <arenaLeft+0x3c>
    else
        line_follow_mm(60);
    3eb6:	8c e3       	ldi	r24, 0x3C	; 60
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <line_follow_mm>

    stop();
    3ebe:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>

    nodeMissEnable = 0;
    3ec2:	10 92 01 02 	sts	0x0201, r1
    3ec6:	10 92 00 02 	sts	0x0200, r1
    3eca:	80 e0       	ldi	r24, 0x00	; 0
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	a8 ec       	ldi	r26, 0xC8	; 200
    3ed0:	b2 e4       	ldi	r27, 0x42	; 66
    3ed2:	8f a3       	std	Y+39, r24	; 0x27
    3ed4:	98 a7       	std	Y+40, r25	; 0x28
    3ed6:	a9 a7       	std	Y+41, r26	; 0x29
    3ed8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eda:	6f a1       	ldd	r22, Y+39	; 0x27
    3edc:	78 a5       	ldd	r23, Y+40	; 0x28
    3ede:	89 a5       	ldd	r24, Y+41	; 0x29
    3ee0:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ee2:	26 e6       	ldi	r18, 0x66	; 102
    3ee4:	36 e6       	ldi	r19, 0x66	; 102
    3ee6:	46 e6       	ldi	r20, 0x66	; 102
    3ee8:	55 e4       	ldi	r21, 0x45	; 69
    3eea:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    3eee:	dc 01       	movw	r26, r24
    3ef0:	cb 01       	movw	r24, r22
    3ef2:	8b a3       	std	Y+35, r24	; 0x23
    3ef4:	9c a3       	std	Y+36, r25	; 0x24
    3ef6:	ad a3       	std	Y+37, r26	; 0x25
    3ef8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3efa:	6b a1       	ldd	r22, Y+35	; 0x23
    3efc:	7c a1       	ldd	r23, Y+36	; 0x24
    3efe:	8d a1       	ldd	r24, Y+37	; 0x25
    3f00:	9e a1       	ldd	r25, Y+38	; 0x26
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	30 e0       	ldi	r19, 0x00	; 0
    3f06:	40 e8       	ldi	r20, 0x80	; 128
    3f08:	5f e3       	ldi	r21, 0x3F	; 63
    3f0a:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    3f0e:	88 23       	and	r24, r24
    3f10:	2c f4       	brge	.+10     	; 0x3f1c <arenaLeft+0x9a>
		__ticks = 1;
    3f12:	81 e0       	ldi	r24, 0x01	; 1
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	9a a3       	std	Y+34, r25	; 0x22
    3f18:	89 a3       	std	Y+33, r24	; 0x21
    3f1a:	3f c0       	rjmp	.+126    	; 0x3f9a <arenaLeft+0x118>
	else if (__tmp > 65535)
    3f1c:	6b a1       	ldd	r22, Y+35	; 0x23
    3f1e:	7c a1       	ldd	r23, Y+36	; 0x24
    3f20:	8d a1       	ldd	r24, Y+37	; 0x25
    3f22:	9e a1       	ldd	r25, Y+38	; 0x26
    3f24:	20 e0       	ldi	r18, 0x00	; 0
    3f26:	3f ef       	ldi	r19, 0xFF	; 255
    3f28:	4f e7       	ldi	r20, 0x7F	; 127
    3f2a:	57 e4       	ldi	r21, 0x47	; 71
    3f2c:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    3f30:	18 16       	cp	r1, r24
    3f32:	4c f5       	brge	.+82     	; 0x3f86 <arenaLeft+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f34:	6f a1       	ldd	r22, Y+39	; 0x27
    3f36:	78 a5       	ldd	r23, Y+40	; 0x28
    3f38:	89 a5       	ldd	r24, Y+41	; 0x29
    3f3a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f3c:	20 e0       	ldi	r18, 0x00	; 0
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	40 e2       	ldi	r20, 0x20	; 32
    3f42:	51 e4       	ldi	r21, 0x41	; 65
    3f44:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    3f48:	dc 01       	movw	r26, r24
    3f4a:	cb 01       	movw	r24, r22
    3f4c:	bc 01       	movw	r22, r24
    3f4e:	cd 01       	movw	r24, r26
    3f50:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    3f54:	dc 01       	movw	r26, r24
    3f56:	cb 01       	movw	r24, r22
    3f58:	9a a3       	std	Y+34, r25	; 0x22
    3f5a:	89 a3       	std	Y+33, r24	; 0x21
    3f5c:	0f c0       	rjmp	.+30     	; 0x3f7c <arenaLeft+0xfa>
    3f5e:	80 e7       	ldi	r24, 0x70	; 112
    3f60:	91 e0       	ldi	r25, 0x01	; 1
    3f62:	98 a3       	std	Y+32, r25	; 0x20
    3f64:	8f 8f       	std	Y+31, r24	; 0x1f
    3f66:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f68:	98 a1       	ldd	r25, Y+32	; 0x20
    3f6a:	01 97       	sbiw	r24, 0x01	; 1
    3f6c:	f1 f7       	brne	.-4      	; 0x3f6a <arenaLeft+0xe8>
    3f6e:	98 a3       	std	Y+32, r25	; 0x20
    3f70:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f72:	89 a1       	ldd	r24, Y+33	; 0x21
    3f74:	9a a1       	ldd	r25, Y+34	; 0x22
    3f76:	01 97       	sbiw	r24, 0x01	; 1
    3f78:	9a a3       	std	Y+34, r25	; 0x22
    3f7a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f7c:	89 a1       	ldd	r24, Y+33	; 0x21
    3f7e:	9a a1       	ldd	r25, Y+34	; 0x22
    3f80:	00 97       	sbiw	r24, 0x00	; 0
    3f82:	69 f7       	brne	.-38     	; 0x3f5e <arenaLeft+0xdc>
    3f84:	14 c0       	rjmp	.+40     	; 0x3fae <arenaLeft+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f86:	6b a1       	ldd	r22, Y+35	; 0x23
    3f88:	7c a1       	ldd	r23, Y+36	; 0x24
    3f8a:	8d a1       	ldd	r24, Y+37	; 0x25
    3f8c:	9e a1       	ldd	r25, Y+38	; 0x26
    3f8e:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    3f92:	dc 01       	movw	r26, r24
    3f94:	cb 01       	movw	r24, r22
    3f96:	9a a3       	std	Y+34, r25	; 0x22
    3f98:	89 a3       	std	Y+33, r24	; 0x21
    3f9a:	89 a1       	ldd	r24, Y+33	; 0x21
    3f9c:	9a a1       	ldd	r25, Y+34	; 0x22
    3f9e:	9e 8f       	std	Y+30, r25	; 0x1e
    3fa0:	8d 8f       	std	Y+29, r24	; 0x1d
    3fa2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fa4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3fa6:	01 97       	sbiw	r24, 0x01	; 1
    3fa8:	f1 f7       	brne	.-4      	; 0x3fa6 <arenaLeft+0x124>
    3faa:	9e 8f       	std	Y+30, r25	; 0x1e
    3fac:	8d 8f       	std	Y+29, r24	; 0x1d

/*
                soft_left();
                _delay_ms(1000);
*/
    velocity(forwardLeftSpeed, forwardRightSpeed);
    3fae:	84 eb       	ldi	r24, 0xB4	; 180
    3fb0:	64 eb       	ldi	r22, 0xB4	; 180
    3fb2:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    left();
    3fb6:	0e 94 05 03 	call	0x60a	; 0x60a <left>
    3fba:	80 e0       	ldi	r24, 0x00	; 0
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	aa e7       	ldi	r26, 0x7A	; 122
    3fc0:	b4 e4       	ldi	r27, 0x44	; 68
    3fc2:	89 8f       	std	Y+25, r24	; 0x19
    3fc4:	9a 8f       	std	Y+26, r25	; 0x1a
    3fc6:	ab 8f       	std	Y+27, r26	; 0x1b
    3fc8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fca:	69 8d       	ldd	r22, Y+25	; 0x19
    3fcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fd2:	26 e6       	ldi	r18, 0x66	; 102
    3fd4:	36 e6       	ldi	r19, 0x66	; 102
    3fd6:	46 e6       	ldi	r20, 0x66	; 102
    3fd8:	55 e4       	ldi	r21, 0x45	; 69
    3fda:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    3fde:	dc 01       	movw	r26, r24
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	8d 8b       	std	Y+21, r24	; 0x15
    3fe4:	9e 8b       	std	Y+22, r25	; 0x16
    3fe6:	af 8b       	std	Y+23, r26	; 0x17
    3fe8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3fea:	6d 89       	ldd	r22, Y+21	; 0x15
    3fec:	7e 89       	ldd	r23, Y+22	; 0x16
    3fee:	8f 89       	ldd	r24, Y+23	; 0x17
    3ff0:	98 8d       	ldd	r25, Y+24	; 0x18
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	30 e0       	ldi	r19, 0x00	; 0
    3ff6:	40 e8       	ldi	r20, 0x80	; 128
    3ff8:	5f e3       	ldi	r21, 0x3F	; 63
    3ffa:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    3ffe:	88 23       	and	r24, r24
    4000:	2c f4       	brge	.+10     	; 0x400c <arenaLeft+0x18a>
		__ticks = 1;
    4002:	81 e0       	ldi	r24, 0x01	; 1
    4004:	90 e0       	ldi	r25, 0x00	; 0
    4006:	9c 8b       	std	Y+20, r25	; 0x14
    4008:	8b 8b       	std	Y+19, r24	; 0x13
    400a:	3f c0       	rjmp	.+126    	; 0x408a <arenaLeft+0x208>
	else if (__tmp > 65535)
    400c:	6d 89       	ldd	r22, Y+21	; 0x15
    400e:	7e 89       	ldd	r23, Y+22	; 0x16
    4010:	8f 89       	ldd	r24, Y+23	; 0x17
    4012:	98 8d       	ldd	r25, Y+24	; 0x18
    4014:	20 e0       	ldi	r18, 0x00	; 0
    4016:	3f ef       	ldi	r19, 0xFF	; 255
    4018:	4f e7       	ldi	r20, 0x7F	; 127
    401a:	57 e4       	ldi	r21, 0x47	; 71
    401c:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    4020:	18 16       	cp	r1, r24
    4022:	4c f5       	brge	.+82     	; 0x4076 <arenaLeft+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4024:	69 8d       	ldd	r22, Y+25	; 0x19
    4026:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4028:	8b 8d       	ldd	r24, Y+27	; 0x1b
    402a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    402c:	20 e0       	ldi	r18, 0x00	; 0
    402e:	30 e0       	ldi	r19, 0x00	; 0
    4030:	40 e2       	ldi	r20, 0x20	; 32
    4032:	51 e4       	ldi	r21, 0x41	; 65
    4034:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    4038:	dc 01       	movw	r26, r24
    403a:	cb 01       	movw	r24, r22
    403c:	bc 01       	movw	r22, r24
    403e:	cd 01       	movw	r24, r26
    4040:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    4044:	dc 01       	movw	r26, r24
    4046:	cb 01       	movw	r24, r22
    4048:	9c 8b       	std	Y+20, r25	; 0x14
    404a:	8b 8b       	std	Y+19, r24	; 0x13
    404c:	0f c0       	rjmp	.+30     	; 0x406c <arenaLeft+0x1ea>
    404e:	80 e7       	ldi	r24, 0x70	; 112
    4050:	91 e0       	ldi	r25, 0x01	; 1
    4052:	9a 8b       	std	Y+18, r25	; 0x12
    4054:	89 8b       	std	Y+17, r24	; 0x11
    4056:	89 89       	ldd	r24, Y+17	; 0x11
    4058:	9a 89       	ldd	r25, Y+18	; 0x12
    405a:	01 97       	sbiw	r24, 0x01	; 1
    405c:	f1 f7       	brne	.-4      	; 0x405a <arenaLeft+0x1d8>
    405e:	9a 8b       	std	Y+18, r25	; 0x12
    4060:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4062:	8b 89       	ldd	r24, Y+19	; 0x13
    4064:	9c 89       	ldd	r25, Y+20	; 0x14
    4066:	01 97       	sbiw	r24, 0x01	; 1
    4068:	9c 8b       	std	Y+20, r25	; 0x14
    406a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    406c:	8b 89       	ldd	r24, Y+19	; 0x13
    406e:	9c 89       	ldd	r25, Y+20	; 0x14
    4070:	00 97       	sbiw	r24, 0x00	; 0
    4072:	69 f7       	brne	.-38     	; 0x404e <arenaLeft+0x1cc>
    4074:	14 c0       	rjmp	.+40     	; 0x409e <arenaLeft+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4076:	6d 89       	ldd	r22, Y+21	; 0x15
    4078:	7e 89       	ldd	r23, Y+22	; 0x16
    407a:	8f 89       	ldd	r24, Y+23	; 0x17
    407c:	98 8d       	ldd	r25, Y+24	; 0x18
    407e:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    4082:	dc 01       	movw	r26, r24
    4084:	cb 01       	movw	r24, r22
    4086:	9c 8b       	std	Y+20, r25	; 0x14
    4088:	8b 8b       	std	Y+19, r24	; 0x13
    408a:	8b 89       	ldd	r24, Y+19	; 0x13
    408c:	9c 89       	ldd	r25, Y+20	; 0x14
    408e:	98 8b       	std	Y+16, r25	; 0x10
    4090:	8f 87       	std	Y+15, r24	; 0x0f
    4092:	8f 85       	ldd	r24, Y+15	; 0x0f
    4094:	98 89       	ldd	r25, Y+16	; 0x10
    4096:	01 97       	sbiw	r24, 0x01	; 1
    4098:	f1 f7       	brne	.-4      	; 0x4096 <arenaLeft+0x214>
    409a:	98 8b       	std	Y+16, r25	; 0x10
    409c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1000);

    centre = ADC_Conversion(2);
    409e:	82 e0       	ldi	r24, 0x02	; 2
    40a0:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    40a4:	88 2f       	mov	r24, r24
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	90 93 2f 03 	sts	0x032F, r25
    40ac:	80 93 2e 03 	sts	0x032E, r24
    40b0:	09 c0       	rjmp	.+18     	; 0x40c4 <arenaLeft+0x242>

    while(centre < x)
    {
        centre = ADC_Conversion(2);
    40b2:	82 e0       	ldi	r24, 0x02	; 2
    40b4:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    40b8:	88 2f       	mov	r24, r24
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	90 93 2f 03 	sts	0x032F, r25
    40c0:	80 93 2e 03 	sts	0x032E, r24
    left();
    _delay_ms(1000);

    centre = ADC_Conversion(2);

    while(centre < x)
    40c4:	20 91 2e 03 	lds	r18, 0x032E
    40c8:	30 91 2f 03 	lds	r19, 0x032F
    40cc:	80 91 02 02 	lds	r24, 0x0202
    40d0:	90 91 03 02 	lds	r25, 0x0203
    40d4:	28 17       	cp	r18, r24
    40d6:	39 07       	cpc	r19, r25
    40d8:	64 f3       	brlt	.-40     	; 0x40b2 <arenaLeft+0x230>
    {
        centre = ADC_Conversion(2);
    }

    stop();
    40da:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    40de:	80 e0       	ldi	r24, 0x00	; 0
    40e0:	90 e0       	ldi	r25, 0x00	; 0
    40e2:	a8 ec       	ldi	r26, 0xC8	; 200
    40e4:	b2 e4       	ldi	r27, 0x42	; 66
    40e6:	8b 87       	std	Y+11, r24	; 0x0b
    40e8:	9c 87       	std	Y+12, r25	; 0x0c
    40ea:	ad 87       	std	Y+13, r26	; 0x0d
    40ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    40f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    40f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    40f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    40f6:	26 e6       	ldi	r18, 0x66	; 102
    40f8:	36 e6       	ldi	r19, 0x66	; 102
    40fa:	46 e6       	ldi	r20, 0x66	; 102
    40fc:	55 e4       	ldi	r21, 0x45	; 69
    40fe:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    4102:	dc 01       	movw	r26, r24
    4104:	cb 01       	movw	r24, r22
    4106:	8f 83       	std	Y+7, r24	; 0x07
    4108:	98 87       	std	Y+8, r25	; 0x08
    410a:	a9 87       	std	Y+9, r26	; 0x09
    410c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    410e:	6f 81       	ldd	r22, Y+7	; 0x07
    4110:	78 85       	ldd	r23, Y+8	; 0x08
    4112:	89 85       	ldd	r24, Y+9	; 0x09
    4114:	9a 85       	ldd	r25, Y+10	; 0x0a
    4116:	20 e0       	ldi	r18, 0x00	; 0
    4118:	30 e0       	ldi	r19, 0x00	; 0
    411a:	40 e8       	ldi	r20, 0x80	; 128
    411c:	5f e3       	ldi	r21, 0x3F	; 63
    411e:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    4122:	88 23       	and	r24, r24
    4124:	2c f4       	brge	.+10     	; 0x4130 <arenaLeft+0x2ae>
		__ticks = 1;
    4126:	81 e0       	ldi	r24, 0x01	; 1
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	9e 83       	std	Y+6, r25	; 0x06
    412c:	8d 83       	std	Y+5, r24	; 0x05
    412e:	3f c0       	rjmp	.+126    	; 0x41ae <arenaLeft+0x32c>
	else if (__tmp > 65535)
    4130:	6f 81       	ldd	r22, Y+7	; 0x07
    4132:	78 85       	ldd	r23, Y+8	; 0x08
    4134:	89 85       	ldd	r24, Y+9	; 0x09
    4136:	9a 85       	ldd	r25, Y+10	; 0x0a
    4138:	20 e0       	ldi	r18, 0x00	; 0
    413a:	3f ef       	ldi	r19, 0xFF	; 255
    413c:	4f e7       	ldi	r20, 0x7F	; 127
    413e:	57 e4       	ldi	r21, 0x47	; 71
    4140:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    4144:	18 16       	cp	r1, r24
    4146:	4c f5       	brge	.+82     	; 0x419a <arenaLeft+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4148:	6b 85       	ldd	r22, Y+11	; 0x0b
    414a:	7c 85       	ldd	r23, Y+12	; 0x0c
    414c:	8d 85       	ldd	r24, Y+13	; 0x0d
    414e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4150:	20 e0       	ldi	r18, 0x00	; 0
    4152:	30 e0       	ldi	r19, 0x00	; 0
    4154:	40 e2       	ldi	r20, 0x20	; 32
    4156:	51 e4       	ldi	r21, 0x41	; 65
    4158:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    415c:	dc 01       	movw	r26, r24
    415e:	cb 01       	movw	r24, r22
    4160:	bc 01       	movw	r22, r24
    4162:	cd 01       	movw	r24, r26
    4164:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    4168:	dc 01       	movw	r26, r24
    416a:	cb 01       	movw	r24, r22
    416c:	9e 83       	std	Y+6, r25	; 0x06
    416e:	8d 83       	std	Y+5, r24	; 0x05
    4170:	0f c0       	rjmp	.+30     	; 0x4190 <arenaLeft+0x30e>
    4172:	80 e7       	ldi	r24, 0x70	; 112
    4174:	91 e0       	ldi	r25, 0x01	; 1
    4176:	9c 83       	std	Y+4, r25	; 0x04
    4178:	8b 83       	std	Y+3, r24	; 0x03
    417a:	8b 81       	ldd	r24, Y+3	; 0x03
    417c:	9c 81       	ldd	r25, Y+4	; 0x04
    417e:	01 97       	sbiw	r24, 0x01	; 1
    4180:	f1 f7       	brne	.-4      	; 0x417e <arenaLeft+0x2fc>
    4182:	9c 83       	std	Y+4, r25	; 0x04
    4184:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4186:	8d 81       	ldd	r24, Y+5	; 0x05
    4188:	9e 81       	ldd	r25, Y+6	; 0x06
    418a:	01 97       	sbiw	r24, 0x01	; 1
    418c:	9e 83       	std	Y+6, r25	; 0x06
    418e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4190:	8d 81       	ldd	r24, Y+5	; 0x05
    4192:	9e 81       	ldd	r25, Y+6	; 0x06
    4194:	00 97       	sbiw	r24, 0x00	; 0
    4196:	69 f7       	brne	.-38     	; 0x4172 <arenaLeft+0x2f0>
    4198:	14 c0       	rjmp	.+40     	; 0x41c2 <arenaLeft+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    419a:	6f 81       	ldd	r22, Y+7	; 0x07
    419c:	78 85       	ldd	r23, Y+8	; 0x08
    419e:	89 85       	ldd	r24, Y+9	; 0x09
    41a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    41a2:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    41a6:	dc 01       	movw	r26, r24
    41a8:	cb 01       	movw	r24, r22
    41aa:	9e 83       	std	Y+6, r25	; 0x06
    41ac:	8d 83       	std	Y+5, r24	; 0x05
    41ae:	8d 81       	ldd	r24, Y+5	; 0x05
    41b0:	9e 81       	ldd	r25, Y+6	; 0x06
    41b2:	9a 83       	std	Y+2, r25	; 0x02
    41b4:	89 83       	std	Y+1, r24	; 0x01
    41b6:	89 81       	ldd	r24, Y+1	; 0x01
    41b8:	9a 81       	ldd	r25, Y+2	; 0x02
    41ba:	01 97       	sbiw	r24, 0x01	; 1
    41bc:	f1 f7       	brne	.-4      	; 0x41ba <arenaLeft+0x338>
    41be:	9a 83       	std	Y+2, r25	; 0x02
    41c0:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(100);

    nodeMissEnable = 1;
    41c2:	81 e0       	ldi	r24, 0x01	; 1
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	90 93 01 02 	sts	0x0201, r25
    41ca:	80 93 00 02 	sts	0x0200, r24
}
    41ce:	aa 96       	adiw	r28, 0x2a	; 42
    41d0:	0f b6       	in	r0, 0x3f	; 63
    41d2:	f8 94       	cli
    41d4:	de bf       	out	0x3e, r29	; 62
    41d6:	0f be       	out	0x3f, r0	; 63
    41d8:	cd bf       	out	0x3d, r28	; 61
    41da:	cf 91       	pop	r28
    41dc:	df 91       	pop	r29
    41de:	08 95       	ret

000041e0 <arenaLeft_2>:

void arenaLeft_2()
{
    41e0:	df 93       	push	r29
    41e2:	cf 93       	push	r28
    41e4:	cd b7       	in	r28, 0x3d	; 61
    41e6:	de b7       	in	r29, 0x3e	; 62
    41e8:	6c 97       	sbiw	r28, 0x1c	; 28
    41ea:	0f b6       	in	r0, 0x3f	; 63
    41ec:	f8 94       	cli
    41ee:	de bf       	out	0x3e, r29	; 62
    41f0:	0f be       	out	0x3f, r0	; 63
    41f2:	cd bf       	out	0x3d, r28	; 61
    nodeMissEnable = 0;
    41f4:	10 92 01 02 	sts	0x0201, r1
    41f8:	10 92 00 02 	sts	0x0200, r1

    velocity(forwardLeftSpeed - 20, forwardRightSpeed - 20);
    41fc:	80 ea       	ldi	r24, 0xA0	; 160
    41fe:	60 ea       	ldi	r22, 0xA0	; 160
    4200:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    left();
    4204:	0e 94 05 03 	call	0x60a	; 0x60a <left>
    4208:	80 e0       	ldi	r24, 0x00	; 0
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	aa e7       	ldi	r26, 0x7A	; 122
    420e:	b4 e4       	ldi	r27, 0x44	; 68
    4210:	89 8f       	std	Y+25, r24	; 0x19
    4212:	9a 8f       	std	Y+26, r25	; 0x1a
    4214:	ab 8f       	std	Y+27, r26	; 0x1b
    4216:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4218:	69 8d       	ldd	r22, Y+25	; 0x19
    421a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    421c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    421e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4220:	26 e6       	ldi	r18, 0x66	; 102
    4222:	36 e6       	ldi	r19, 0x66	; 102
    4224:	46 e6       	ldi	r20, 0x66	; 102
    4226:	55 e4       	ldi	r21, 0x45	; 69
    4228:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    422c:	dc 01       	movw	r26, r24
    422e:	cb 01       	movw	r24, r22
    4230:	8d 8b       	std	Y+21, r24	; 0x15
    4232:	9e 8b       	std	Y+22, r25	; 0x16
    4234:	af 8b       	std	Y+23, r26	; 0x17
    4236:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4238:	6d 89       	ldd	r22, Y+21	; 0x15
    423a:	7e 89       	ldd	r23, Y+22	; 0x16
    423c:	8f 89       	ldd	r24, Y+23	; 0x17
    423e:	98 8d       	ldd	r25, Y+24	; 0x18
    4240:	20 e0       	ldi	r18, 0x00	; 0
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	40 e8       	ldi	r20, 0x80	; 128
    4246:	5f e3       	ldi	r21, 0x3F	; 63
    4248:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    424c:	88 23       	and	r24, r24
    424e:	2c f4       	brge	.+10     	; 0x425a <arenaLeft_2+0x7a>
		__ticks = 1;
    4250:	81 e0       	ldi	r24, 0x01	; 1
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	9c 8b       	std	Y+20, r25	; 0x14
    4256:	8b 8b       	std	Y+19, r24	; 0x13
    4258:	3f c0       	rjmp	.+126    	; 0x42d8 <arenaLeft_2+0xf8>
	else if (__tmp > 65535)
    425a:	6d 89       	ldd	r22, Y+21	; 0x15
    425c:	7e 89       	ldd	r23, Y+22	; 0x16
    425e:	8f 89       	ldd	r24, Y+23	; 0x17
    4260:	98 8d       	ldd	r25, Y+24	; 0x18
    4262:	20 e0       	ldi	r18, 0x00	; 0
    4264:	3f ef       	ldi	r19, 0xFF	; 255
    4266:	4f e7       	ldi	r20, 0x7F	; 127
    4268:	57 e4       	ldi	r21, 0x47	; 71
    426a:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    426e:	18 16       	cp	r1, r24
    4270:	4c f5       	brge	.+82     	; 0x42c4 <arenaLeft_2+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4272:	69 8d       	ldd	r22, Y+25	; 0x19
    4274:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4276:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4278:	9c 8d       	ldd	r25, Y+28	; 0x1c
    427a:	20 e0       	ldi	r18, 0x00	; 0
    427c:	30 e0       	ldi	r19, 0x00	; 0
    427e:	40 e2       	ldi	r20, 0x20	; 32
    4280:	51 e4       	ldi	r21, 0x41	; 65
    4282:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    4286:	dc 01       	movw	r26, r24
    4288:	cb 01       	movw	r24, r22
    428a:	bc 01       	movw	r22, r24
    428c:	cd 01       	movw	r24, r26
    428e:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    4292:	dc 01       	movw	r26, r24
    4294:	cb 01       	movw	r24, r22
    4296:	9c 8b       	std	Y+20, r25	; 0x14
    4298:	8b 8b       	std	Y+19, r24	; 0x13
    429a:	0f c0       	rjmp	.+30     	; 0x42ba <arenaLeft_2+0xda>
    429c:	80 e7       	ldi	r24, 0x70	; 112
    429e:	91 e0       	ldi	r25, 0x01	; 1
    42a0:	9a 8b       	std	Y+18, r25	; 0x12
    42a2:	89 8b       	std	Y+17, r24	; 0x11
    42a4:	89 89       	ldd	r24, Y+17	; 0x11
    42a6:	9a 89       	ldd	r25, Y+18	; 0x12
    42a8:	01 97       	sbiw	r24, 0x01	; 1
    42aa:	f1 f7       	brne	.-4      	; 0x42a8 <arenaLeft_2+0xc8>
    42ac:	9a 8b       	std	Y+18, r25	; 0x12
    42ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42b0:	8b 89       	ldd	r24, Y+19	; 0x13
    42b2:	9c 89       	ldd	r25, Y+20	; 0x14
    42b4:	01 97       	sbiw	r24, 0x01	; 1
    42b6:	9c 8b       	std	Y+20, r25	; 0x14
    42b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42ba:	8b 89       	ldd	r24, Y+19	; 0x13
    42bc:	9c 89       	ldd	r25, Y+20	; 0x14
    42be:	00 97       	sbiw	r24, 0x00	; 0
    42c0:	69 f7       	brne	.-38     	; 0x429c <arenaLeft_2+0xbc>
    42c2:	14 c0       	rjmp	.+40     	; 0x42ec <arenaLeft_2+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42c4:	6d 89       	ldd	r22, Y+21	; 0x15
    42c6:	7e 89       	ldd	r23, Y+22	; 0x16
    42c8:	8f 89       	ldd	r24, Y+23	; 0x17
    42ca:	98 8d       	ldd	r25, Y+24	; 0x18
    42cc:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    42d0:	dc 01       	movw	r26, r24
    42d2:	cb 01       	movw	r24, r22
    42d4:	9c 8b       	std	Y+20, r25	; 0x14
    42d6:	8b 8b       	std	Y+19, r24	; 0x13
    42d8:	8b 89       	ldd	r24, Y+19	; 0x13
    42da:	9c 89       	ldd	r25, Y+20	; 0x14
    42dc:	98 8b       	std	Y+16, r25	; 0x10
    42de:	8f 87       	std	Y+15, r24	; 0x0f
    42e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    42e2:	98 89       	ldd	r25, Y+16	; 0x10
    42e4:	01 97       	sbiw	r24, 0x01	; 1
    42e6:	f1 f7       	brne	.-4      	; 0x42e4 <arenaLeft_2+0x104>
    42e8:	98 8b       	std	Y+16, r25	; 0x10
    42ea:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1000);

    centre = ADC_Conversion(2);
    42ec:	82 e0       	ldi	r24, 0x02	; 2
    42ee:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    42f2:	88 2f       	mov	r24, r24
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	90 93 2f 03 	sts	0x032F, r25
    42fa:	80 93 2e 03 	sts	0x032E, r24
    42fe:	09 c0       	rjmp	.+18     	; 0x4312 <arenaLeft_2+0x132>

    while(centre < x)
    {
        centre = ADC_Conversion(2);
    4300:	82 e0       	ldi	r24, 0x02	; 2
    4302:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    4306:	88 2f       	mov	r24, r24
    4308:	90 e0       	ldi	r25, 0x00	; 0
    430a:	90 93 2f 03 	sts	0x032F, r25
    430e:	80 93 2e 03 	sts	0x032E, r24
    left();
    _delay_ms(1000);

    centre = ADC_Conversion(2);

    while(centre < x)
    4312:	20 91 2e 03 	lds	r18, 0x032E
    4316:	30 91 2f 03 	lds	r19, 0x032F
    431a:	80 91 02 02 	lds	r24, 0x0202
    431e:	90 91 03 02 	lds	r25, 0x0203
    4322:	28 17       	cp	r18, r24
    4324:	39 07       	cpc	r19, r25
    4326:	64 f3       	brlt	.-40     	; 0x4300 <arenaLeft_2+0x120>
    {
        centre = ADC_Conversion(2);
    }

    stop();
    4328:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    432c:	80 e0       	ldi	r24, 0x00	; 0
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	a8 ec       	ldi	r26, 0xC8	; 200
    4332:	b2 e4       	ldi	r27, 0x42	; 66
    4334:	8b 87       	std	Y+11, r24	; 0x0b
    4336:	9c 87       	std	Y+12, r25	; 0x0c
    4338:	ad 87       	std	Y+13, r26	; 0x0d
    433a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    433c:	6b 85       	ldd	r22, Y+11	; 0x0b
    433e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4340:	8d 85       	ldd	r24, Y+13	; 0x0d
    4342:	9e 85       	ldd	r25, Y+14	; 0x0e
    4344:	26 e6       	ldi	r18, 0x66	; 102
    4346:	36 e6       	ldi	r19, 0x66	; 102
    4348:	46 e6       	ldi	r20, 0x66	; 102
    434a:	55 e4       	ldi	r21, 0x45	; 69
    434c:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    4350:	dc 01       	movw	r26, r24
    4352:	cb 01       	movw	r24, r22
    4354:	8f 83       	std	Y+7, r24	; 0x07
    4356:	98 87       	std	Y+8, r25	; 0x08
    4358:	a9 87       	std	Y+9, r26	; 0x09
    435a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    435c:	6f 81       	ldd	r22, Y+7	; 0x07
    435e:	78 85       	ldd	r23, Y+8	; 0x08
    4360:	89 85       	ldd	r24, Y+9	; 0x09
    4362:	9a 85       	ldd	r25, Y+10	; 0x0a
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	30 e0       	ldi	r19, 0x00	; 0
    4368:	40 e8       	ldi	r20, 0x80	; 128
    436a:	5f e3       	ldi	r21, 0x3F	; 63
    436c:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    4370:	88 23       	and	r24, r24
    4372:	2c f4       	brge	.+10     	; 0x437e <arenaLeft_2+0x19e>
		__ticks = 1;
    4374:	81 e0       	ldi	r24, 0x01	; 1
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	9e 83       	std	Y+6, r25	; 0x06
    437a:	8d 83       	std	Y+5, r24	; 0x05
    437c:	3f c0       	rjmp	.+126    	; 0x43fc <arenaLeft_2+0x21c>
	else if (__tmp > 65535)
    437e:	6f 81       	ldd	r22, Y+7	; 0x07
    4380:	78 85       	ldd	r23, Y+8	; 0x08
    4382:	89 85       	ldd	r24, Y+9	; 0x09
    4384:	9a 85       	ldd	r25, Y+10	; 0x0a
    4386:	20 e0       	ldi	r18, 0x00	; 0
    4388:	3f ef       	ldi	r19, 0xFF	; 255
    438a:	4f e7       	ldi	r20, 0x7F	; 127
    438c:	57 e4       	ldi	r21, 0x47	; 71
    438e:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    4392:	18 16       	cp	r1, r24
    4394:	4c f5       	brge	.+82     	; 0x43e8 <arenaLeft_2+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4396:	6b 85       	ldd	r22, Y+11	; 0x0b
    4398:	7c 85       	ldd	r23, Y+12	; 0x0c
    439a:	8d 85       	ldd	r24, Y+13	; 0x0d
    439c:	9e 85       	ldd	r25, Y+14	; 0x0e
    439e:	20 e0       	ldi	r18, 0x00	; 0
    43a0:	30 e0       	ldi	r19, 0x00	; 0
    43a2:	40 e2       	ldi	r20, 0x20	; 32
    43a4:	51 e4       	ldi	r21, 0x41	; 65
    43a6:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    43aa:	dc 01       	movw	r26, r24
    43ac:	cb 01       	movw	r24, r22
    43ae:	bc 01       	movw	r22, r24
    43b0:	cd 01       	movw	r24, r26
    43b2:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22
    43ba:	9e 83       	std	Y+6, r25	; 0x06
    43bc:	8d 83       	std	Y+5, r24	; 0x05
    43be:	0f c0       	rjmp	.+30     	; 0x43de <arenaLeft_2+0x1fe>
    43c0:	80 e7       	ldi	r24, 0x70	; 112
    43c2:	91 e0       	ldi	r25, 0x01	; 1
    43c4:	9c 83       	std	Y+4, r25	; 0x04
    43c6:	8b 83       	std	Y+3, r24	; 0x03
    43c8:	8b 81       	ldd	r24, Y+3	; 0x03
    43ca:	9c 81       	ldd	r25, Y+4	; 0x04
    43cc:	01 97       	sbiw	r24, 0x01	; 1
    43ce:	f1 f7       	brne	.-4      	; 0x43cc <arenaLeft_2+0x1ec>
    43d0:	9c 83       	std	Y+4, r25	; 0x04
    43d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43d4:	8d 81       	ldd	r24, Y+5	; 0x05
    43d6:	9e 81       	ldd	r25, Y+6	; 0x06
    43d8:	01 97       	sbiw	r24, 0x01	; 1
    43da:	9e 83       	std	Y+6, r25	; 0x06
    43dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43de:	8d 81       	ldd	r24, Y+5	; 0x05
    43e0:	9e 81       	ldd	r25, Y+6	; 0x06
    43e2:	00 97       	sbiw	r24, 0x00	; 0
    43e4:	69 f7       	brne	.-38     	; 0x43c0 <arenaLeft_2+0x1e0>
    43e6:	14 c0       	rjmp	.+40     	; 0x4410 <arenaLeft_2+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43e8:	6f 81       	ldd	r22, Y+7	; 0x07
    43ea:	78 85       	ldd	r23, Y+8	; 0x08
    43ec:	89 85       	ldd	r24, Y+9	; 0x09
    43ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    43f0:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    43f4:	dc 01       	movw	r26, r24
    43f6:	cb 01       	movw	r24, r22
    43f8:	9e 83       	std	Y+6, r25	; 0x06
    43fa:	8d 83       	std	Y+5, r24	; 0x05
    43fc:	8d 81       	ldd	r24, Y+5	; 0x05
    43fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4400:	9a 83       	std	Y+2, r25	; 0x02
    4402:	89 83       	std	Y+1, r24	; 0x01
    4404:	89 81       	ldd	r24, Y+1	; 0x01
    4406:	9a 81       	ldd	r25, Y+2	; 0x02
    4408:	01 97       	sbiw	r24, 0x01	; 1
    440a:	f1 f7       	brne	.-4      	; 0x4408 <arenaLeft_2+0x228>
    440c:	9a 83       	std	Y+2, r25	; 0x02
    440e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);

    nodeMissEnable = 1;
    4410:	81 e0       	ldi	r24, 0x01	; 1
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	90 93 01 02 	sts	0x0201, r25
    4418:	80 93 00 02 	sts	0x0200, r24
}
    441c:	6c 96       	adiw	r28, 0x1c	; 28
    441e:	0f b6       	in	r0, 0x3f	; 63
    4420:	f8 94       	cli
    4422:	de bf       	out	0x3e, r29	; 62
    4424:	0f be       	out	0x3f, r0	; 63
    4426:	cd bf       	out	0x3d, r28	; 61
    4428:	cf 91       	pop	r28
    442a:	df 91       	pop	r29
    442c:	08 95       	ret

0000442e <arenaLeft_3>:

void arenaLeft_3()
{
    442e:	df 93       	push	r29
    4430:	cf 93       	push	r28
    4432:	cd b7       	in	r28, 0x3d	; 61
    4434:	de b7       	in	r29, 0x3e	; 62
    4436:	6c 97       	sbiw	r28, 0x1c	; 28
    4438:	0f b6       	in	r0, 0x3f	; 63
    443a:	f8 94       	cli
    443c:	de bf       	out	0x3e, r29	; 62
    443e:	0f be       	out	0x3f, r0	; 63
    4440:	cd bf       	out	0x3d, r28	; 61
    nodeMissEnable = 0;
    4442:	10 92 01 02 	sts	0x0201, r1
    4446:	10 92 00 02 	sts	0x0200, r1

    velocity(forwardLeftSpeed + 30, forwardRightSpeed + 30);
    444a:	82 ed       	ldi	r24, 0xD2	; 210
    444c:	62 ed       	ldi	r22, 0xD2	; 210
    444e:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    soft_left();
    4452:	0e 94 2d 04 	call	0x85a	; 0x85a <soft_left>
    4456:	80 e0       	ldi	r24, 0x00	; 0
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	aa e7       	ldi	r26, 0x7A	; 122
    445c:	b4 e4       	ldi	r27, 0x44	; 68
    445e:	89 8f       	std	Y+25, r24	; 0x19
    4460:	9a 8f       	std	Y+26, r25	; 0x1a
    4462:	ab 8f       	std	Y+27, r26	; 0x1b
    4464:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4466:	69 8d       	ldd	r22, Y+25	; 0x19
    4468:	7a 8d       	ldd	r23, Y+26	; 0x1a
    446a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    446c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    446e:	26 e6       	ldi	r18, 0x66	; 102
    4470:	36 e6       	ldi	r19, 0x66	; 102
    4472:	46 e6       	ldi	r20, 0x66	; 102
    4474:	55 e4       	ldi	r21, 0x45	; 69
    4476:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    447a:	dc 01       	movw	r26, r24
    447c:	cb 01       	movw	r24, r22
    447e:	8d 8b       	std	Y+21, r24	; 0x15
    4480:	9e 8b       	std	Y+22, r25	; 0x16
    4482:	af 8b       	std	Y+23, r26	; 0x17
    4484:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4486:	6d 89       	ldd	r22, Y+21	; 0x15
    4488:	7e 89       	ldd	r23, Y+22	; 0x16
    448a:	8f 89       	ldd	r24, Y+23	; 0x17
    448c:	98 8d       	ldd	r25, Y+24	; 0x18
    448e:	20 e0       	ldi	r18, 0x00	; 0
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	40 e8       	ldi	r20, 0x80	; 128
    4494:	5f e3       	ldi	r21, 0x3F	; 63
    4496:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    449a:	88 23       	and	r24, r24
    449c:	2c f4       	brge	.+10     	; 0x44a8 <arenaLeft_3+0x7a>
		__ticks = 1;
    449e:	81 e0       	ldi	r24, 0x01	; 1
    44a0:	90 e0       	ldi	r25, 0x00	; 0
    44a2:	9c 8b       	std	Y+20, r25	; 0x14
    44a4:	8b 8b       	std	Y+19, r24	; 0x13
    44a6:	3f c0       	rjmp	.+126    	; 0x4526 <arenaLeft_3+0xf8>
	else if (__tmp > 65535)
    44a8:	6d 89       	ldd	r22, Y+21	; 0x15
    44aa:	7e 89       	ldd	r23, Y+22	; 0x16
    44ac:	8f 89       	ldd	r24, Y+23	; 0x17
    44ae:	98 8d       	ldd	r25, Y+24	; 0x18
    44b0:	20 e0       	ldi	r18, 0x00	; 0
    44b2:	3f ef       	ldi	r19, 0xFF	; 255
    44b4:	4f e7       	ldi	r20, 0x7F	; 127
    44b6:	57 e4       	ldi	r21, 0x47	; 71
    44b8:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    44bc:	18 16       	cp	r1, r24
    44be:	4c f5       	brge	.+82     	; 0x4512 <arenaLeft_3+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44c0:	69 8d       	ldd	r22, Y+25	; 0x19
    44c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44c8:	20 e0       	ldi	r18, 0x00	; 0
    44ca:	30 e0       	ldi	r19, 0x00	; 0
    44cc:	40 e2       	ldi	r20, 0x20	; 32
    44ce:	51 e4       	ldi	r21, 0x41	; 65
    44d0:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    44d4:	dc 01       	movw	r26, r24
    44d6:	cb 01       	movw	r24, r22
    44d8:	bc 01       	movw	r22, r24
    44da:	cd 01       	movw	r24, r26
    44dc:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    44e0:	dc 01       	movw	r26, r24
    44e2:	cb 01       	movw	r24, r22
    44e4:	9c 8b       	std	Y+20, r25	; 0x14
    44e6:	8b 8b       	std	Y+19, r24	; 0x13
    44e8:	0f c0       	rjmp	.+30     	; 0x4508 <arenaLeft_3+0xda>
    44ea:	80 e7       	ldi	r24, 0x70	; 112
    44ec:	91 e0       	ldi	r25, 0x01	; 1
    44ee:	9a 8b       	std	Y+18, r25	; 0x12
    44f0:	89 8b       	std	Y+17, r24	; 0x11
    44f2:	89 89       	ldd	r24, Y+17	; 0x11
    44f4:	9a 89       	ldd	r25, Y+18	; 0x12
    44f6:	01 97       	sbiw	r24, 0x01	; 1
    44f8:	f1 f7       	brne	.-4      	; 0x44f6 <arenaLeft_3+0xc8>
    44fa:	9a 8b       	std	Y+18, r25	; 0x12
    44fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44fe:	8b 89       	ldd	r24, Y+19	; 0x13
    4500:	9c 89       	ldd	r25, Y+20	; 0x14
    4502:	01 97       	sbiw	r24, 0x01	; 1
    4504:	9c 8b       	std	Y+20, r25	; 0x14
    4506:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4508:	8b 89       	ldd	r24, Y+19	; 0x13
    450a:	9c 89       	ldd	r25, Y+20	; 0x14
    450c:	00 97       	sbiw	r24, 0x00	; 0
    450e:	69 f7       	brne	.-38     	; 0x44ea <arenaLeft_3+0xbc>
    4510:	14 c0       	rjmp	.+40     	; 0x453a <arenaLeft_3+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4512:	6d 89       	ldd	r22, Y+21	; 0x15
    4514:	7e 89       	ldd	r23, Y+22	; 0x16
    4516:	8f 89       	ldd	r24, Y+23	; 0x17
    4518:	98 8d       	ldd	r25, Y+24	; 0x18
    451a:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    451e:	dc 01       	movw	r26, r24
    4520:	cb 01       	movw	r24, r22
    4522:	9c 8b       	std	Y+20, r25	; 0x14
    4524:	8b 8b       	std	Y+19, r24	; 0x13
    4526:	8b 89       	ldd	r24, Y+19	; 0x13
    4528:	9c 89       	ldd	r25, Y+20	; 0x14
    452a:	98 8b       	std	Y+16, r25	; 0x10
    452c:	8f 87       	std	Y+15, r24	; 0x0f
    452e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4530:	98 89       	ldd	r25, Y+16	; 0x10
    4532:	01 97       	sbiw	r24, 0x01	; 1
    4534:	f1 f7       	brne	.-4      	; 0x4532 <arenaLeft_3+0x104>
    4536:	98 8b       	std	Y+16, r25	; 0x10
    4538:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1000);

    centre = ADC_Conversion(2);
    453a:	82 e0       	ldi	r24, 0x02	; 2
    453c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    4540:	88 2f       	mov	r24, r24
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	90 93 2f 03 	sts	0x032F, r25
    4548:	80 93 2e 03 	sts	0x032E, r24
    454c:	09 c0       	rjmp	.+18     	; 0x4560 <arenaLeft_3+0x132>

    while(centre < x)
    {
        centre = ADC_Conversion(2);
    454e:	82 e0       	ldi	r24, 0x02	; 2
    4550:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    4554:	88 2f       	mov	r24, r24
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	90 93 2f 03 	sts	0x032F, r25
    455c:	80 93 2e 03 	sts	0x032E, r24
    soft_left();
    _delay_ms(1000);

    centre = ADC_Conversion(2);

    while(centre < x)
    4560:	20 91 2e 03 	lds	r18, 0x032E
    4564:	30 91 2f 03 	lds	r19, 0x032F
    4568:	80 91 02 02 	lds	r24, 0x0202
    456c:	90 91 03 02 	lds	r25, 0x0203
    4570:	28 17       	cp	r18, r24
    4572:	39 07       	cpc	r19, r25
    4574:	64 f3       	brlt	.-40     	; 0x454e <arenaLeft_3+0x120>
    {
        centre = ADC_Conversion(2);
    }

    stop();
    4576:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    457a:	80 e0       	ldi	r24, 0x00	; 0
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	a8 ec       	ldi	r26, 0xC8	; 200
    4580:	b2 e4       	ldi	r27, 0x42	; 66
    4582:	8b 87       	std	Y+11, r24	; 0x0b
    4584:	9c 87       	std	Y+12, r25	; 0x0c
    4586:	ad 87       	std	Y+13, r26	; 0x0d
    4588:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    458a:	6b 85       	ldd	r22, Y+11	; 0x0b
    458c:	7c 85       	ldd	r23, Y+12	; 0x0c
    458e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4590:	9e 85       	ldd	r25, Y+14	; 0x0e
    4592:	26 e6       	ldi	r18, 0x66	; 102
    4594:	36 e6       	ldi	r19, 0x66	; 102
    4596:	46 e6       	ldi	r20, 0x66	; 102
    4598:	55 e4       	ldi	r21, 0x45	; 69
    459a:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    459e:	dc 01       	movw	r26, r24
    45a0:	cb 01       	movw	r24, r22
    45a2:	8f 83       	std	Y+7, r24	; 0x07
    45a4:	98 87       	std	Y+8, r25	; 0x08
    45a6:	a9 87       	std	Y+9, r26	; 0x09
    45a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45aa:	6f 81       	ldd	r22, Y+7	; 0x07
    45ac:	78 85       	ldd	r23, Y+8	; 0x08
    45ae:	89 85       	ldd	r24, Y+9	; 0x09
    45b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    45b2:	20 e0       	ldi	r18, 0x00	; 0
    45b4:	30 e0       	ldi	r19, 0x00	; 0
    45b6:	40 e8       	ldi	r20, 0x80	; 128
    45b8:	5f e3       	ldi	r21, 0x3F	; 63
    45ba:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    45be:	88 23       	and	r24, r24
    45c0:	2c f4       	brge	.+10     	; 0x45cc <arenaLeft_3+0x19e>
		__ticks = 1;
    45c2:	81 e0       	ldi	r24, 0x01	; 1
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	9e 83       	std	Y+6, r25	; 0x06
    45c8:	8d 83       	std	Y+5, r24	; 0x05
    45ca:	3f c0       	rjmp	.+126    	; 0x464a <arenaLeft_3+0x21c>
	else if (__tmp > 65535)
    45cc:	6f 81       	ldd	r22, Y+7	; 0x07
    45ce:	78 85       	ldd	r23, Y+8	; 0x08
    45d0:	89 85       	ldd	r24, Y+9	; 0x09
    45d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    45d4:	20 e0       	ldi	r18, 0x00	; 0
    45d6:	3f ef       	ldi	r19, 0xFF	; 255
    45d8:	4f e7       	ldi	r20, 0x7F	; 127
    45da:	57 e4       	ldi	r21, 0x47	; 71
    45dc:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    45e0:	18 16       	cp	r1, r24
    45e2:	4c f5       	brge	.+82     	; 0x4636 <arenaLeft_3+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    45e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    45e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    45ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    45ec:	20 e0       	ldi	r18, 0x00	; 0
    45ee:	30 e0       	ldi	r19, 0x00	; 0
    45f0:	40 e2       	ldi	r20, 0x20	; 32
    45f2:	51 e4       	ldi	r21, 0x41	; 65
    45f4:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    45f8:	dc 01       	movw	r26, r24
    45fa:	cb 01       	movw	r24, r22
    45fc:	bc 01       	movw	r22, r24
    45fe:	cd 01       	movw	r24, r26
    4600:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    4604:	dc 01       	movw	r26, r24
    4606:	cb 01       	movw	r24, r22
    4608:	9e 83       	std	Y+6, r25	; 0x06
    460a:	8d 83       	std	Y+5, r24	; 0x05
    460c:	0f c0       	rjmp	.+30     	; 0x462c <arenaLeft_3+0x1fe>
    460e:	80 e7       	ldi	r24, 0x70	; 112
    4610:	91 e0       	ldi	r25, 0x01	; 1
    4612:	9c 83       	std	Y+4, r25	; 0x04
    4614:	8b 83       	std	Y+3, r24	; 0x03
    4616:	8b 81       	ldd	r24, Y+3	; 0x03
    4618:	9c 81       	ldd	r25, Y+4	; 0x04
    461a:	01 97       	sbiw	r24, 0x01	; 1
    461c:	f1 f7       	brne	.-4      	; 0x461a <arenaLeft_3+0x1ec>
    461e:	9c 83       	std	Y+4, r25	; 0x04
    4620:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4622:	8d 81       	ldd	r24, Y+5	; 0x05
    4624:	9e 81       	ldd	r25, Y+6	; 0x06
    4626:	01 97       	sbiw	r24, 0x01	; 1
    4628:	9e 83       	std	Y+6, r25	; 0x06
    462a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    462c:	8d 81       	ldd	r24, Y+5	; 0x05
    462e:	9e 81       	ldd	r25, Y+6	; 0x06
    4630:	00 97       	sbiw	r24, 0x00	; 0
    4632:	69 f7       	brne	.-38     	; 0x460e <arenaLeft_3+0x1e0>
    4634:	14 c0       	rjmp	.+40     	; 0x465e <arenaLeft_3+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4636:	6f 81       	ldd	r22, Y+7	; 0x07
    4638:	78 85       	ldd	r23, Y+8	; 0x08
    463a:	89 85       	ldd	r24, Y+9	; 0x09
    463c:	9a 85       	ldd	r25, Y+10	; 0x0a
    463e:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    4642:	dc 01       	movw	r26, r24
    4644:	cb 01       	movw	r24, r22
    4646:	9e 83       	std	Y+6, r25	; 0x06
    4648:	8d 83       	std	Y+5, r24	; 0x05
    464a:	8d 81       	ldd	r24, Y+5	; 0x05
    464c:	9e 81       	ldd	r25, Y+6	; 0x06
    464e:	9a 83       	std	Y+2, r25	; 0x02
    4650:	89 83       	std	Y+1, r24	; 0x01
    4652:	89 81       	ldd	r24, Y+1	; 0x01
    4654:	9a 81       	ldd	r25, Y+2	; 0x02
    4656:	01 97       	sbiw	r24, 0x01	; 1
    4658:	f1 f7       	brne	.-4      	; 0x4656 <arenaLeft_3+0x228>
    465a:	9a 83       	std	Y+2, r25	; 0x02
    465c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);

    nodeMissEnable = 1;
    465e:	81 e0       	ldi	r24, 0x01	; 1
    4660:	90 e0       	ldi	r25, 0x00	; 0
    4662:	90 93 01 02 	sts	0x0201, r25
    4666:	80 93 00 02 	sts	0x0200, r24
}
    466a:	6c 96       	adiw	r28, 0x1c	; 28
    466c:	0f b6       	in	r0, 0x3f	; 63
    466e:	f8 94       	cli
    4670:	de bf       	out	0x3e, r29	; 62
    4672:	0f be       	out	0x3f, r0	; 63
    4674:	cd bf       	out	0x3d, r28	; 61
    4676:	cf 91       	pop	r28
    4678:	df 91       	pop	r29
    467a:	08 95       	ret

0000467c <arenaRight>:

void arenaRight(void)
{
    467c:	df 93       	push	r29
    467e:	cf 93       	push	r28
    4680:	cd b7       	in	r28, 0x3d	; 61
    4682:	de b7       	in	r29, 0x3e	; 62
    4684:	aa 97       	sbiw	r28, 0x2a	; 42
    4686:	0f b6       	in	r0, 0x3f	; 63
    4688:	f8 94       	cli
    468a:	de bf       	out	0x3e, r29	; 62
    468c:	0f be       	out	0x3f, r0	; 63
    468e:	cd bf       	out	0x3d, r28	; 61
    velocity(forwardLeftSpeed - 20, forwardRightSpeed - 20);
    4690:	80 ea       	ldi	r24, 0xA0	; 160
    4692:	60 ea       	ldi	r22, 0xA0	; 160
    4694:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>

    if(errorFlag == 1)
    4698:	80 91 26 03 	lds	r24, 0x0326
    469c:	90 91 27 03 	lds	r25, 0x0327
    46a0:	81 30       	cpi	r24, 0x01	; 1
    46a2:	91 05       	cpc	r25, r1
    46a4:	29 f4       	brne	.+10     	; 0x46b0 <arenaRight+0x34>
        forward_mm(60);
    46a6:	8c e3       	ldi	r24, 0x3C	; 60
    46a8:	90 e0       	ldi	r25, 0x00	; 0
    46aa:	0e 94 03 02 	call	0x406	; 0x406 <forward_mm>
    46ae:	04 c0       	rjmp	.+8      	; 0x46b8 <arenaRight+0x3c>
    else
        line_follow_mm(60);
    46b0:	8c e3       	ldi	r24, 0x3C	; 60
    46b2:	90 e0       	ldi	r25, 0x00	; 0
    46b4:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <line_follow_mm>

    stop();
    46b8:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>

    nodeMissEnable = 0;
    46bc:	10 92 01 02 	sts	0x0201, r1
    46c0:	10 92 00 02 	sts	0x0200, r1
    46c4:	80 e0       	ldi	r24, 0x00	; 0
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	a8 ec       	ldi	r26, 0xC8	; 200
    46ca:	b2 e4       	ldi	r27, 0x42	; 66
    46cc:	8f a3       	std	Y+39, r24	; 0x27
    46ce:	98 a7       	std	Y+40, r25	; 0x28
    46d0:	a9 a7       	std	Y+41, r26	; 0x29
    46d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46d4:	6f a1       	ldd	r22, Y+39	; 0x27
    46d6:	78 a5       	ldd	r23, Y+40	; 0x28
    46d8:	89 a5       	ldd	r24, Y+41	; 0x29
    46da:	9a a5       	ldd	r25, Y+42	; 0x2a
    46dc:	26 e6       	ldi	r18, 0x66	; 102
    46de:	36 e6       	ldi	r19, 0x66	; 102
    46e0:	46 e6       	ldi	r20, 0x66	; 102
    46e2:	55 e4       	ldi	r21, 0x45	; 69
    46e4:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    46e8:	dc 01       	movw	r26, r24
    46ea:	cb 01       	movw	r24, r22
    46ec:	8b a3       	std	Y+35, r24	; 0x23
    46ee:	9c a3       	std	Y+36, r25	; 0x24
    46f0:	ad a3       	std	Y+37, r26	; 0x25
    46f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    46f4:	6b a1       	ldd	r22, Y+35	; 0x23
    46f6:	7c a1       	ldd	r23, Y+36	; 0x24
    46f8:	8d a1       	ldd	r24, Y+37	; 0x25
    46fa:	9e a1       	ldd	r25, Y+38	; 0x26
    46fc:	20 e0       	ldi	r18, 0x00	; 0
    46fe:	30 e0       	ldi	r19, 0x00	; 0
    4700:	40 e8       	ldi	r20, 0x80	; 128
    4702:	5f e3       	ldi	r21, 0x3F	; 63
    4704:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    4708:	88 23       	and	r24, r24
    470a:	2c f4       	brge	.+10     	; 0x4716 <arenaRight+0x9a>
		__ticks = 1;
    470c:	81 e0       	ldi	r24, 0x01	; 1
    470e:	90 e0       	ldi	r25, 0x00	; 0
    4710:	9a a3       	std	Y+34, r25	; 0x22
    4712:	89 a3       	std	Y+33, r24	; 0x21
    4714:	3f c0       	rjmp	.+126    	; 0x4794 <arenaRight+0x118>
	else if (__tmp > 65535)
    4716:	6b a1       	ldd	r22, Y+35	; 0x23
    4718:	7c a1       	ldd	r23, Y+36	; 0x24
    471a:	8d a1       	ldd	r24, Y+37	; 0x25
    471c:	9e a1       	ldd	r25, Y+38	; 0x26
    471e:	20 e0       	ldi	r18, 0x00	; 0
    4720:	3f ef       	ldi	r19, 0xFF	; 255
    4722:	4f e7       	ldi	r20, 0x7F	; 127
    4724:	57 e4       	ldi	r21, 0x47	; 71
    4726:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    472a:	18 16       	cp	r1, r24
    472c:	4c f5       	brge	.+82     	; 0x4780 <arenaRight+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    472e:	6f a1       	ldd	r22, Y+39	; 0x27
    4730:	78 a5       	ldd	r23, Y+40	; 0x28
    4732:	89 a5       	ldd	r24, Y+41	; 0x29
    4734:	9a a5       	ldd	r25, Y+42	; 0x2a
    4736:	20 e0       	ldi	r18, 0x00	; 0
    4738:	30 e0       	ldi	r19, 0x00	; 0
    473a:	40 e2       	ldi	r20, 0x20	; 32
    473c:	51 e4       	ldi	r21, 0x41	; 65
    473e:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    4742:	dc 01       	movw	r26, r24
    4744:	cb 01       	movw	r24, r22
    4746:	bc 01       	movw	r22, r24
    4748:	cd 01       	movw	r24, r26
    474a:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    474e:	dc 01       	movw	r26, r24
    4750:	cb 01       	movw	r24, r22
    4752:	9a a3       	std	Y+34, r25	; 0x22
    4754:	89 a3       	std	Y+33, r24	; 0x21
    4756:	0f c0       	rjmp	.+30     	; 0x4776 <arenaRight+0xfa>
    4758:	80 e7       	ldi	r24, 0x70	; 112
    475a:	91 e0       	ldi	r25, 0x01	; 1
    475c:	98 a3       	std	Y+32, r25	; 0x20
    475e:	8f 8f       	std	Y+31, r24	; 0x1f
    4760:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4762:	98 a1       	ldd	r25, Y+32	; 0x20
    4764:	01 97       	sbiw	r24, 0x01	; 1
    4766:	f1 f7       	brne	.-4      	; 0x4764 <arenaRight+0xe8>
    4768:	98 a3       	std	Y+32, r25	; 0x20
    476a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    476c:	89 a1       	ldd	r24, Y+33	; 0x21
    476e:	9a a1       	ldd	r25, Y+34	; 0x22
    4770:	01 97       	sbiw	r24, 0x01	; 1
    4772:	9a a3       	std	Y+34, r25	; 0x22
    4774:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4776:	89 a1       	ldd	r24, Y+33	; 0x21
    4778:	9a a1       	ldd	r25, Y+34	; 0x22
    477a:	00 97       	sbiw	r24, 0x00	; 0
    477c:	69 f7       	brne	.-38     	; 0x4758 <arenaRight+0xdc>
    477e:	14 c0       	rjmp	.+40     	; 0x47a8 <arenaRight+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4780:	6b a1       	ldd	r22, Y+35	; 0x23
    4782:	7c a1       	ldd	r23, Y+36	; 0x24
    4784:	8d a1       	ldd	r24, Y+37	; 0x25
    4786:	9e a1       	ldd	r25, Y+38	; 0x26
    4788:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    478c:	dc 01       	movw	r26, r24
    478e:	cb 01       	movw	r24, r22
    4790:	9a a3       	std	Y+34, r25	; 0x22
    4792:	89 a3       	std	Y+33, r24	; 0x21
    4794:	89 a1       	ldd	r24, Y+33	; 0x21
    4796:	9a a1       	ldd	r25, Y+34	; 0x22
    4798:	9e 8f       	std	Y+30, r25	; 0x1e
    479a:	8d 8f       	std	Y+29, r24	; 0x1d
    479c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    479e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    47a0:	01 97       	sbiw	r24, 0x01	; 1
    47a2:	f1 f7       	brne	.-4      	; 0x47a0 <arenaRight+0x124>
    47a4:	9e 8f       	std	Y+30, r25	; 0x1e
    47a6:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(100);

    velocity(forwardLeftSpeed - 20, forwardRightSpeed - 20);
    47a8:	80 ea       	ldi	r24, 0xA0	; 160
    47aa:	60 ea       	ldi	r22, 0xA0	; 160
    47ac:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    right();
    47b0:	0e 94 99 03 	call	0x732	; 0x732 <right>
    47b4:	80 e0       	ldi	r24, 0x00	; 0
    47b6:	90 e0       	ldi	r25, 0x00	; 0
    47b8:	aa e7       	ldi	r26, 0x7A	; 122
    47ba:	b4 e4       	ldi	r27, 0x44	; 68
    47bc:	89 8f       	std	Y+25, r24	; 0x19
    47be:	9a 8f       	std	Y+26, r25	; 0x1a
    47c0:	ab 8f       	std	Y+27, r26	; 0x1b
    47c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47c4:	69 8d       	ldd	r22, Y+25	; 0x19
    47c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47cc:	26 e6       	ldi	r18, 0x66	; 102
    47ce:	36 e6       	ldi	r19, 0x66	; 102
    47d0:	46 e6       	ldi	r20, 0x66	; 102
    47d2:	55 e4       	ldi	r21, 0x45	; 69
    47d4:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    47d8:	dc 01       	movw	r26, r24
    47da:	cb 01       	movw	r24, r22
    47dc:	8d 8b       	std	Y+21, r24	; 0x15
    47de:	9e 8b       	std	Y+22, r25	; 0x16
    47e0:	af 8b       	std	Y+23, r26	; 0x17
    47e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    47e4:	6d 89       	ldd	r22, Y+21	; 0x15
    47e6:	7e 89       	ldd	r23, Y+22	; 0x16
    47e8:	8f 89       	ldd	r24, Y+23	; 0x17
    47ea:	98 8d       	ldd	r25, Y+24	; 0x18
    47ec:	20 e0       	ldi	r18, 0x00	; 0
    47ee:	30 e0       	ldi	r19, 0x00	; 0
    47f0:	40 e8       	ldi	r20, 0x80	; 128
    47f2:	5f e3       	ldi	r21, 0x3F	; 63
    47f4:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    47f8:	88 23       	and	r24, r24
    47fa:	2c f4       	brge	.+10     	; 0x4806 <arenaRight+0x18a>
		__ticks = 1;
    47fc:	81 e0       	ldi	r24, 0x01	; 1
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	9c 8b       	std	Y+20, r25	; 0x14
    4802:	8b 8b       	std	Y+19, r24	; 0x13
    4804:	3f c0       	rjmp	.+126    	; 0x4884 <arenaRight+0x208>
	else if (__tmp > 65535)
    4806:	6d 89       	ldd	r22, Y+21	; 0x15
    4808:	7e 89       	ldd	r23, Y+22	; 0x16
    480a:	8f 89       	ldd	r24, Y+23	; 0x17
    480c:	98 8d       	ldd	r25, Y+24	; 0x18
    480e:	20 e0       	ldi	r18, 0x00	; 0
    4810:	3f ef       	ldi	r19, 0xFF	; 255
    4812:	4f e7       	ldi	r20, 0x7F	; 127
    4814:	57 e4       	ldi	r21, 0x47	; 71
    4816:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    481a:	18 16       	cp	r1, r24
    481c:	4c f5       	brge	.+82     	; 0x4870 <arenaRight+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    481e:	69 8d       	ldd	r22, Y+25	; 0x19
    4820:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4822:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4824:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4826:	20 e0       	ldi	r18, 0x00	; 0
    4828:	30 e0       	ldi	r19, 0x00	; 0
    482a:	40 e2       	ldi	r20, 0x20	; 32
    482c:	51 e4       	ldi	r21, 0x41	; 65
    482e:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    4832:	dc 01       	movw	r26, r24
    4834:	cb 01       	movw	r24, r22
    4836:	bc 01       	movw	r22, r24
    4838:	cd 01       	movw	r24, r26
    483a:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    483e:	dc 01       	movw	r26, r24
    4840:	cb 01       	movw	r24, r22
    4842:	9c 8b       	std	Y+20, r25	; 0x14
    4844:	8b 8b       	std	Y+19, r24	; 0x13
    4846:	0f c0       	rjmp	.+30     	; 0x4866 <arenaRight+0x1ea>
    4848:	80 e7       	ldi	r24, 0x70	; 112
    484a:	91 e0       	ldi	r25, 0x01	; 1
    484c:	9a 8b       	std	Y+18, r25	; 0x12
    484e:	89 8b       	std	Y+17, r24	; 0x11
    4850:	89 89       	ldd	r24, Y+17	; 0x11
    4852:	9a 89       	ldd	r25, Y+18	; 0x12
    4854:	01 97       	sbiw	r24, 0x01	; 1
    4856:	f1 f7       	brne	.-4      	; 0x4854 <arenaRight+0x1d8>
    4858:	9a 8b       	std	Y+18, r25	; 0x12
    485a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    485c:	8b 89       	ldd	r24, Y+19	; 0x13
    485e:	9c 89       	ldd	r25, Y+20	; 0x14
    4860:	01 97       	sbiw	r24, 0x01	; 1
    4862:	9c 8b       	std	Y+20, r25	; 0x14
    4864:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4866:	8b 89       	ldd	r24, Y+19	; 0x13
    4868:	9c 89       	ldd	r25, Y+20	; 0x14
    486a:	00 97       	sbiw	r24, 0x00	; 0
    486c:	69 f7       	brne	.-38     	; 0x4848 <arenaRight+0x1cc>
    486e:	14 c0       	rjmp	.+40     	; 0x4898 <arenaRight+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4870:	6d 89       	ldd	r22, Y+21	; 0x15
    4872:	7e 89       	ldd	r23, Y+22	; 0x16
    4874:	8f 89       	ldd	r24, Y+23	; 0x17
    4876:	98 8d       	ldd	r25, Y+24	; 0x18
    4878:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    487c:	dc 01       	movw	r26, r24
    487e:	cb 01       	movw	r24, r22
    4880:	9c 8b       	std	Y+20, r25	; 0x14
    4882:	8b 8b       	std	Y+19, r24	; 0x13
    4884:	8b 89       	ldd	r24, Y+19	; 0x13
    4886:	9c 89       	ldd	r25, Y+20	; 0x14
    4888:	98 8b       	std	Y+16, r25	; 0x10
    488a:	8f 87       	std	Y+15, r24	; 0x0f
    488c:	8f 85       	ldd	r24, Y+15	; 0x0f
    488e:	98 89       	ldd	r25, Y+16	; 0x10
    4890:	01 97       	sbiw	r24, 0x01	; 1
    4892:	f1 f7       	brne	.-4      	; 0x4890 <arenaRight+0x214>
    4894:	98 8b       	std	Y+16, r25	; 0x10
    4896:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1000);

    centre = ADC_Conversion(2);
    4898:	82 e0       	ldi	r24, 0x02	; 2
    489a:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    489e:	88 2f       	mov	r24, r24
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	90 93 2f 03 	sts	0x032F, r25
    48a6:	80 93 2e 03 	sts	0x032E, r24
    48aa:	09 c0       	rjmp	.+18     	; 0x48be <arenaRight+0x242>

    while(centre < x)
    {
        centre = ADC_Conversion(2);
    48ac:	82 e0       	ldi	r24, 0x02	; 2
    48ae:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    48b2:	88 2f       	mov	r24, r24
    48b4:	90 e0       	ldi	r25, 0x00	; 0
    48b6:	90 93 2f 03 	sts	0x032F, r25
    48ba:	80 93 2e 03 	sts	0x032E, r24
    right();
    _delay_ms(1000);

    centre = ADC_Conversion(2);

    while(centre < x)
    48be:	20 91 2e 03 	lds	r18, 0x032E
    48c2:	30 91 2f 03 	lds	r19, 0x032F
    48c6:	80 91 02 02 	lds	r24, 0x0202
    48ca:	90 91 03 02 	lds	r25, 0x0203
    48ce:	28 17       	cp	r18, r24
    48d0:	39 07       	cpc	r19, r25
    48d2:	64 f3       	brlt	.-40     	; 0x48ac <arenaRight+0x230>
    {
        centre = ADC_Conversion(2);
    }

    stop();
    48d4:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    48d8:	80 e0       	ldi	r24, 0x00	; 0
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	a8 ec       	ldi	r26, 0xC8	; 200
    48de:	b2 e4       	ldi	r27, 0x42	; 66
    48e0:	8b 87       	std	Y+11, r24	; 0x0b
    48e2:	9c 87       	std	Y+12, r25	; 0x0c
    48e4:	ad 87       	std	Y+13, r26	; 0x0d
    48e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    48ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    48ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    48ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    48f0:	26 e6       	ldi	r18, 0x66	; 102
    48f2:	36 e6       	ldi	r19, 0x66	; 102
    48f4:	46 e6       	ldi	r20, 0x66	; 102
    48f6:	55 e4       	ldi	r21, 0x45	; 69
    48f8:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    48fc:	dc 01       	movw	r26, r24
    48fe:	cb 01       	movw	r24, r22
    4900:	8f 83       	std	Y+7, r24	; 0x07
    4902:	98 87       	std	Y+8, r25	; 0x08
    4904:	a9 87       	std	Y+9, r26	; 0x09
    4906:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4908:	6f 81       	ldd	r22, Y+7	; 0x07
    490a:	78 85       	ldd	r23, Y+8	; 0x08
    490c:	89 85       	ldd	r24, Y+9	; 0x09
    490e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4910:	20 e0       	ldi	r18, 0x00	; 0
    4912:	30 e0       	ldi	r19, 0x00	; 0
    4914:	40 e8       	ldi	r20, 0x80	; 128
    4916:	5f e3       	ldi	r21, 0x3F	; 63
    4918:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    491c:	88 23       	and	r24, r24
    491e:	2c f4       	brge	.+10     	; 0x492a <arenaRight+0x2ae>
		__ticks = 1;
    4920:	81 e0       	ldi	r24, 0x01	; 1
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	9e 83       	std	Y+6, r25	; 0x06
    4926:	8d 83       	std	Y+5, r24	; 0x05
    4928:	3f c0       	rjmp	.+126    	; 0x49a8 <arenaRight+0x32c>
	else if (__tmp > 65535)
    492a:	6f 81       	ldd	r22, Y+7	; 0x07
    492c:	78 85       	ldd	r23, Y+8	; 0x08
    492e:	89 85       	ldd	r24, Y+9	; 0x09
    4930:	9a 85       	ldd	r25, Y+10	; 0x0a
    4932:	20 e0       	ldi	r18, 0x00	; 0
    4934:	3f ef       	ldi	r19, 0xFF	; 255
    4936:	4f e7       	ldi	r20, 0x7F	; 127
    4938:	57 e4       	ldi	r21, 0x47	; 71
    493a:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    493e:	18 16       	cp	r1, r24
    4940:	4c f5       	brge	.+82     	; 0x4994 <arenaRight+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4942:	6b 85       	ldd	r22, Y+11	; 0x0b
    4944:	7c 85       	ldd	r23, Y+12	; 0x0c
    4946:	8d 85       	ldd	r24, Y+13	; 0x0d
    4948:	9e 85       	ldd	r25, Y+14	; 0x0e
    494a:	20 e0       	ldi	r18, 0x00	; 0
    494c:	30 e0       	ldi	r19, 0x00	; 0
    494e:	40 e2       	ldi	r20, 0x20	; 32
    4950:	51 e4       	ldi	r21, 0x41	; 65
    4952:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    4956:	dc 01       	movw	r26, r24
    4958:	cb 01       	movw	r24, r22
    495a:	bc 01       	movw	r22, r24
    495c:	cd 01       	movw	r24, r26
    495e:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    4962:	dc 01       	movw	r26, r24
    4964:	cb 01       	movw	r24, r22
    4966:	9e 83       	std	Y+6, r25	; 0x06
    4968:	8d 83       	std	Y+5, r24	; 0x05
    496a:	0f c0       	rjmp	.+30     	; 0x498a <arenaRight+0x30e>
    496c:	80 e7       	ldi	r24, 0x70	; 112
    496e:	91 e0       	ldi	r25, 0x01	; 1
    4970:	9c 83       	std	Y+4, r25	; 0x04
    4972:	8b 83       	std	Y+3, r24	; 0x03
    4974:	8b 81       	ldd	r24, Y+3	; 0x03
    4976:	9c 81       	ldd	r25, Y+4	; 0x04
    4978:	01 97       	sbiw	r24, 0x01	; 1
    497a:	f1 f7       	brne	.-4      	; 0x4978 <arenaRight+0x2fc>
    497c:	9c 83       	std	Y+4, r25	; 0x04
    497e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4980:	8d 81       	ldd	r24, Y+5	; 0x05
    4982:	9e 81       	ldd	r25, Y+6	; 0x06
    4984:	01 97       	sbiw	r24, 0x01	; 1
    4986:	9e 83       	std	Y+6, r25	; 0x06
    4988:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    498a:	8d 81       	ldd	r24, Y+5	; 0x05
    498c:	9e 81       	ldd	r25, Y+6	; 0x06
    498e:	00 97       	sbiw	r24, 0x00	; 0
    4990:	69 f7       	brne	.-38     	; 0x496c <arenaRight+0x2f0>
    4992:	14 c0       	rjmp	.+40     	; 0x49bc <arenaRight+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4994:	6f 81       	ldd	r22, Y+7	; 0x07
    4996:	78 85       	ldd	r23, Y+8	; 0x08
    4998:	89 85       	ldd	r24, Y+9	; 0x09
    499a:	9a 85       	ldd	r25, Y+10	; 0x0a
    499c:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    49a0:	dc 01       	movw	r26, r24
    49a2:	cb 01       	movw	r24, r22
    49a4:	9e 83       	std	Y+6, r25	; 0x06
    49a6:	8d 83       	std	Y+5, r24	; 0x05
    49a8:	8d 81       	ldd	r24, Y+5	; 0x05
    49aa:	9e 81       	ldd	r25, Y+6	; 0x06
    49ac:	9a 83       	std	Y+2, r25	; 0x02
    49ae:	89 83       	std	Y+1, r24	; 0x01
    49b0:	89 81       	ldd	r24, Y+1	; 0x01
    49b2:	9a 81       	ldd	r25, Y+2	; 0x02
    49b4:	01 97       	sbiw	r24, 0x01	; 1
    49b6:	f1 f7       	brne	.-4      	; 0x49b4 <arenaRight+0x338>
    49b8:	9a 83       	std	Y+2, r25	; 0x02
    49ba:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);

    nodeMissEnable = 1;
    49bc:	81 e0       	ldi	r24, 0x01	; 1
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	90 93 01 02 	sts	0x0201, r25
    49c4:	80 93 00 02 	sts	0x0200, r24
}
    49c8:	aa 96       	adiw	r28, 0x2a	; 42
    49ca:	0f b6       	in	r0, 0x3f	; 63
    49cc:	f8 94       	cli
    49ce:	de bf       	out	0x3e, r29	; 62
    49d0:	0f be       	out	0x3f, r0	; 63
    49d2:	cd bf       	out	0x3d, r28	; 61
    49d4:	cf 91       	pop	r28
    49d6:	df 91       	pop	r29
    49d8:	08 95       	ret

000049da <arenaRight_2>:

void arenaRight_2(void)
{
    49da:	df 93       	push	r29
    49dc:	cf 93       	push	r28
    49de:	cd b7       	in	r28, 0x3d	; 61
    49e0:	de b7       	in	r29, 0x3e	; 62
    49e2:	aa 97       	sbiw	r28, 0x2a	; 42
    49e4:	0f b6       	in	r0, 0x3f	; 63
    49e6:	f8 94       	cli
    49e8:	de bf       	out	0x3e, r29	; 62
    49ea:	0f be       	out	0x3f, r0	; 63
    49ec:	cd bf       	out	0x3d, r28	; 61
    velocity(forwardLeftSpeed - 20, forwardRightSpeed - 20);
    49ee:	80 ea       	ldi	r24, 0xA0	; 160
    49f0:	60 ea       	ldi	r22, 0xA0	; 160
    49f2:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>

    //line_follow_mm(60);
    //stop();

    nodeMissEnable = 0;
    49f6:	10 92 01 02 	sts	0x0201, r1
    49fa:	10 92 00 02 	sts	0x0200, r1
    49fe:	80 e0       	ldi	r24, 0x00	; 0
    4a00:	90 e0       	ldi	r25, 0x00	; 0
    4a02:	a8 ec       	ldi	r26, 0xC8	; 200
    4a04:	b2 e4       	ldi	r27, 0x42	; 66
    4a06:	8f a3       	std	Y+39, r24	; 0x27
    4a08:	98 a7       	std	Y+40, r25	; 0x28
    4a0a:	a9 a7       	std	Y+41, r26	; 0x29
    4a0c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a0e:	6f a1       	ldd	r22, Y+39	; 0x27
    4a10:	78 a5       	ldd	r23, Y+40	; 0x28
    4a12:	89 a5       	ldd	r24, Y+41	; 0x29
    4a14:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a16:	26 e6       	ldi	r18, 0x66	; 102
    4a18:	36 e6       	ldi	r19, 0x66	; 102
    4a1a:	46 e6       	ldi	r20, 0x66	; 102
    4a1c:	55 e4       	ldi	r21, 0x45	; 69
    4a1e:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    4a22:	dc 01       	movw	r26, r24
    4a24:	cb 01       	movw	r24, r22
    4a26:	8b a3       	std	Y+35, r24	; 0x23
    4a28:	9c a3       	std	Y+36, r25	; 0x24
    4a2a:	ad a3       	std	Y+37, r26	; 0x25
    4a2c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a2e:	6b a1       	ldd	r22, Y+35	; 0x23
    4a30:	7c a1       	ldd	r23, Y+36	; 0x24
    4a32:	8d a1       	ldd	r24, Y+37	; 0x25
    4a34:	9e a1       	ldd	r25, Y+38	; 0x26
    4a36:	20 e0       	ldi	r18, 0x00	; 0
    4a38:	30 e0       	ldi	r19, 0x00	; 0
    4a3a:	40 e8       	ldi	r20, 0x80	; 128
    4a3c:	5f e3       	ldi	r21, 0x3F	; 63
    4a3e:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    4a42:	88 23       	and	r24, r24
    4a44:	2c f4       	brge	.+10     	; 0x4a50 <arenaRight_2+0x76>
		__ticks = 1;
    4a46:	81 e0       	ldi	r24, 0x01	; 1
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	9a a3       	std	Y+34, r25	; 0x22
    4a4c:	89 a3       	std	Y+33, r24	; 0x21
    4a4e:	3f c0       	rjmp	.+126    	; 0x4ace <arenaRight_2+0xf4>
	else if (__tmp > 65535)
    4a50:	6b a1       	ldd	r22, Y+35	; 0x23
    4a52:	7c a1       	ldd	r23, Y+36	; 0x24
    4a54:	8d a1       	ldd	r24, Y+37	; 0x25
    4a56:	9e a1       	ldd	r25, Y+38	; 0x26
    4a58:	20 e0       	ldi	r18, 0x00	; 0
    4a5a:	3f ef       	ldi	r19, 0xFF	; 255
    4a5c:	4f e7       	ldi	r20, 0x7F	; 127
    4a5e:	57 e4       	ldi	r21, 0x47	; 71
    4a60:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    4a64:	18 16       	cp	r1, r24
    4a66:	4c f5       	brge	.+82     	; 0x4aba <arenaRight_2+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a68:	6f a1       	ldd	r22, Y+39	; 0x27
    4a6a:	78 a5       	ldd	r23, Y+40	; 0x28
    4a6c:	89 a5       	ldd	r24, Y+41	; 0x29
    4a6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a70:	20 e0       	ldi	r18, 0x00	; 0
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	40 e2       	ldi	r20, 0x20	; 32
    4a76:	51 e4       	ldi	r21, 0x41	; 65
    4a78:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    4a7c:	dc 01       	movw	r26, r24
    4a7e:	cb 01       	movw	r24, r22
    4a80:	bc 01       	movw	r22, r24
    4a82:	cd 01       	movw	r24, r26
    4a84:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    4a88:	dc 01       	movw	r26, r24
    4a8a:	cb 01       	movw	r24, r22
    4a8c:	9a a3       	std	Y+34, r25	; 0x22
    4a8e:	89 a3       	std	Y+33, r24	; 0x21
    4a90:	0f c0       	rjmp	.+30     	; 0x4ab0 <arenaRight_2+0xd6>
    4a92:	80 e7       	ldi	r24, 0x70	; 112
    4a94:	91 e0       	ldi	r25, 0x01	; 1
    4a96:	98 a3       	std	Y+32, r25	; 0x20
    4a98:	8f 8f       	std	Y+31, r24	; 0x1f
    4a9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a9c:	98 a1       	ldd	r25, Y+32	; 0x20
    4a9e:	01 97       	sbiw	r24, 0x01	; 1
    4aa0:	f1 f7       	brne	.-4      	; 0x4a9e <arenaRight_2+0xc4>
    4aa2:	98 a3       	std	Y+32, r25	; 0x20
    4aa4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aa6:	89 a1       	ldd	r24, Y+33	; 0x21
    4aa8:	9a a1       	ldd	r25, Y+34	; 0x22
    4aaa:	01 97       	sbiw	r24, 0x01	; 1
    4aac:	9a a3       	std	Y+34, r25	; 0x22
    4aae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ab0:	89 a1       	ldd	r24, Y+33	; 0x21
    4ab2:	9a a1       	ldd	r25, Y+34	; 0x22
    4ab4:	00 97       	sbiw	r24, 0x00	; 0
    4ab6:	69 f7       	brne	.-38     	; 0x4a92 <arenaRight_2+0xb8>
    4ab8:	14 c0       	rjmp	.+40     	; 0x4ae2 <arenaRight_2+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4aba:	6b a1       	ldd	r22, Y+35	; 0x23
    4abc:	7c a1       	ldd	r23, Y+36	; 0x24
    4abe:	8d a1       	ldd	r24, Y+37	; 0x25
    4ac0:	9e a1       	ldd	r25, Y+38	; 0x26
    4ac2:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    4ac6:	dc 01       	movw	r26, r24
    4ac8:	cb 01       	movw	r24, r22
    4aca:	9a a3       	std	Y+34, r25	; 0x22
    4acc:	89 a3       	std	Y+33, r24	; 0x21
    4ace:	89 a1       	ldd	r24, Y+33	; 0x21
    4ad0:	9a a1       	ldd	r25, Y+34	; 0x22
    4ad2:	9e 8f       	std	Y+30, r25	; 0x1e
    4ad4:	8d 8f       	std	Y+29, r24	; 0x1d
    4ad6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ad8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ada:	01 97       	sbiw	r24, 0x01	; 1
    4adc:	f1 f7       	brne	.-4      	; 0x4ada <arenaRight_2+0x100>
    4ade:	9e 8f       	std	Y+30, r25	; 0x1e
    4ae0:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(100);

    velocity(forwardLeftSpeed - 20, forwardRightSpeed - 20);
    4ae2:	80 ea       	ldi	r24, 0xA0	; 160
    4ae4:	60 ea       	ldi	r22, 0xA0	; 160
    4ae6:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    right();
    4aea:	0e 94 99 03 	call	0x732	; 0x732 <right>
    4aee:	80 e0       	ldi	r24, 0x00	; 0
    4af0:	90 e0       	ldi	r25, 0x00	; 0
    4af2:	aa e7       	ldi	r26, 0x7A	; 122
    4af4:	b4 e4       	ldi	r27, 0x44	; 68
    4af6:	89 8f       	std	Y+25, r24	; 0x19
    4af8:	9a 8f       	std	Y+26, r25	; 0x1a
    4afa:	ab 8f       	std	Y+27, r26	; 0x1b
    4afc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4afe:	69 8d       	ldd	r22, Y+25	; 0x19
    4b00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b06:	26 e6       	ldi	r18, 0x66	; 102
    4b08:	36 e6       	ldi	r19, 0x66	; 102
    4b0a:	46 e6       	ldi	r20, 0x66	; 102
    4b0c:	55 e4       	ldi	r21, 0x45	; 69
    4b0e:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    4b12:	dc 01       	movw	r26, r24
    4b14:	cb 01       	movw	r24, r22
    4b16:	8d 8b       	std	Y+21, r24	; 0x15
    4b18:	9e 8b       	std	Y+22, r25	; 0x16
    4b1a:	af 8b       	std	Y+23, r26	; 0x17
    4b1c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b1e:	6d 89       	ldd	r22, Y+21	; 0x15
    4b20:	7e 89       	ldd	r23, Y+22	; 0x16
    4b22:	8f 89       	ldd	r24, Y+23	; 0x17
    4b24:	98 8d       	ldd	r25, Y+24	; 0x18
    4b26:	20 e0       	ldi	r18, 0x00	; 0
    4b28:	30 e0       	ldi	r19, 0x00	; 0
    4b2a:	40 e8       	ldi	r20, 0x80	; 128
    4b2c:	5f e3       	ldi	r21, 0x3F	; 63
    4b2e:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    4b32:	88 23       	and	r24, r24
    4b34:	2c f4       	brge	.+10     	; 0x4b40 <arenaRight_2+0x166>
		__ticks = 1;
    4b36:	81 e0       	ldi	r24, 0x01	; 1
    4b38:	90 e0       	ldi	r25, 0x00	; 0
    4b3a:	9c 8b       	std	Y+20, r25	; 0x14
    4b3c:	8b 8b       	std	Y+19, r24	; 0x13
    4b3e:	3f c0       	rjmp	.+126    	; 0x4bbe <arenaRight_2+0x1e4>
	else if (__tmp > 65535)
    4b40:	6d 89       	ldd	r22, Y+21	; 0x15
    4b42:	7e 89       	ldd	r23, Y+22	; 0x16
    4b44:	8f 89       	ldd	r24, Y+23	; 0x17
    4b46:	98 8d       	ldd	r25, Y+24	; 0x18
    4b48:	20 e0       	ldi	r18, 0x00	; 0
    4b4a:	3f ef       	ldi	r19, 0xFF	; 255
    4b4c:	4f e7       	ldi	r20, 0x7F	; 127
    4b4e:	57 e4       	ldi	r21, 0x47	; 71
    4b50:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    4b54:	18 16       	cp	r1, r24
    4b56:	4c f5       	brge	.+82     	; 0x4baa <arenaRight_2+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b58:	69 8d       	ldd	r22, Y+25	; 0x19
    4b5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b60:	20 e0       	ldi	r18, 0x00	; 0
    4b62:	30 e0       	ldi	r19, 0x00	; 0
    4b64:	40 e2       	ldi	r20, 0x20	; 32
    4b66:	51 e4       	ldi	r21, 0x41	; 65
    4b68:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    4b6c:	dc 01       	movw	r26, r24
    4b6e:	cb 01       	movw	r24, r22
    4b70:	bc 01       	movw	r22, r24
    4b72:	cd 01       	movw	r24, r26
    4b74:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    4b78:	dc 01       	movw	r26, r24
    4b7a:	cb 01       	movw	r24, r22
    4b7c:	9c 8b       	std	Y+20, r25	; 0x14
    4b7e:	8b 8b       	std	Y+19, r24	; 0x13
    4b80:	0f c0       	rjmp	.+30     	; 0x4ba0 <arenaRight_2+0x1c6>
    4b82:	80 e7       	ldi	r24, 0x70	; 112
    4b84:	91 e0       	ldi	r25, 0x01	; 1
    4b86:	9a 8b       	std	Y+18, r25	; 0x12
    4b88:	89 8b       	std	Y+17, r24	; 0x11
    4b8a:	89 89       	ldd	r24, Y+17	; 0x11
    4b8c:	9a 89       	ldd	r25, Y+18	; 0x12
    4b8e:	01 97       	sbiw	r24, 0x01	; 1
    4b90:	f1 f7       	brne	.-4      	; 0x4b8e <arenaRight_2+0x1b4>
    4b92:	9a 8b       	std	Y+18, r25	; 0x12
    4b94:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b96:	8b 89       	ldd	r24, Y+19	; 0x13
    4b98:	9c 89       	ldd	r25, Y+20	; 0x14
    4b9a:	01 97       	sbiw	r24, 0x01	; 1
    4b9c:	9c 8b       	std	Y+20, r25	; 0x14
    4b9e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ba0:	8b 89       	ldd	r24, Y+19	; 0x13
    4ba2:	9c 89       	ldd	r25, Y+20	; 0x14
    4ba4:	00 97       	sbiw	r24, 0x00	; 0
    4ba6:	69 f7       	brne	.-38     	; 0x4b82 <arenaRight_2+0x1a8>
    4ba8:	14 c0       	rjmp	.+40     	; 0x4bd2 <arenaRight_2+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4baa:	6d 89       	ldd	r22, Y+21	; 0x15
    4bac:	7e 89       	ldd	r23, Y+22	; 0x16
    4bae:	8f 89       	ldd	r24, Y+23	; 0x17
    4bb0:	98 8d       	ldd	r25, Y+24	; 0x18
    4bb2:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    4bb6:	dc 01       	movw	r26, r24
    4bb8:	cb 01       	movw	r24, r22
    4bba:	9c 8b       	std	Y+20, r25	; 0x14
    4bbc:	8b 8b       	std	Y+19, r24	; 0x13
    4bbe:	8b 89       	ldd	r24, Y+19	; 0x13
    4bc0:	9c 89       	ldd	r25, Y+20	; 0x14
    4bc2:	98 8b       	std	Y+16, r25	; 0x10
    4bc4:	8f 87       	std	Y+15, r24	; 0x0f
    4bc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bc8:	98 89       	ldd	r25, Y+16	; 0x10
    4bca:	01 97       	sbiw	r24, 0x01	; 1
    4bcc:	f1 f7       	brne	.-4      	; 0x4bca <arenaRight_2+0x1f0>
    4bce:	98 8b       	std	Y+16, r25	; 0x10
    4bd0:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1000);

    centre = ADC_Conversion(2);
    4bd2:	82 e0       	ldi	r24, 0x02	; 2
    4bd4:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    4bd8:	88 2f       	mov	r24, r24
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	90 93 2f 03 	sts	0x032F, r25
    4be0:	80 93 2e 03 	sts	0x032E, r24
    4be4:	09 c0       	rjmp	.+18     	; 0x4bf8 <arenaRight_2+0x21e>

    while(centre < x)
    {
        centre = ADC_Conversion(2);
    4be6:	82 e0       	ldi	r24, 0x02	; 2
    4be8:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    4bec:	88 2f       	mov	r24, r24
    4bee:	90 e0       	ldi	r25, 0x00	; 0
    4bf0:	90 93 2f 03 	sts	0x032F, r25
    4bf4:	80 93 2e 03 	sts	0x032E, r24
    right();
    _delay_ms(1000);

    centre = ADC_Conversion(2);

    while(centre < x)
    4bf8:	20 91 2e 03 	lds	r18, 0x032E
    4bfc:	30 91 2f 03 	lds	r19, 0x032F
    4c00:	80 91 02 02 	lds	r24, 0x0202
    4c04:	90 91 03 02 	lds	r25, 0x0203
    4c08:	28 17       	cp	r18, r24
    4c0a:	39 07       	cpc	r19, r25
    4c0c:	64 f3       	brlt	.-40     	; 0x4be6 <arenaRight_2+0x20c>
    {
        centre = ADC_Conversion(2);
    }

    stop();
    4c0e:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    4c12:	80 e0       	ldi	r24, 0x00	; 0
    4c14:	90 e0       	ldi	r25, 0x00	; 0
    4c16:	a8 ec       	ldi	r26, 0xC8	; 200
    4c18:	b2 e4       	ldi	r27, 0x42	; 66
    4c1a:	8b 87       	std	Y+11, r24	; 0x0b
    4c1c:	9c 87       	std	Y+12, r25	; 0x0c
    4c1e:	ad 87       	std	Y+13, r26	; 0x0d
    4c20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c22:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c24:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c26:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c28:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c2a:	26 e6       	ldi	r18, 0x66	; 102
    4c2c:	36 e6       	ldi	r19, 0x66	; 102
    4c2e:	46 e6       	ldi	r20, 0x66	; 102
    4c30:	55 e4       	ldi	r21, 0x45	; 69
    4c32:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    4c36:	dc 01       	movw	r26, r24
    4c38:	cb 01       	movw	r24, r22
    4c3a:	8f 83       	std	Y+7, r24	; 0x07
    4c3c:	98 87       	std	Y+8, r25	; 0x08
    4c3e:	a9 87       	std	Y+9, r26	; 0x09
    4c40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c42:	6f 81       	ldd	r22, Y+7	; 0x07
    4c44:	78 85       	ldd	r23, Y+8	; 0x08
    4c46:	89 85       	ldd	r24, Y+9	; 0x09
    4c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c4a:	20 e0       	ldi	r18, 0x00	; 0
    4c4c:	30 e0       	ldi	r19, 0x00	; 0
    4c4e:	40 e8       	ldi	r20, 0x80	; 128
    4c50:	5f e3       	ldi	r21, 0x3F	; 63
    4c52:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    4c56:	88 23       	and	r24, r24
    4c58:	2c f4       	brge	.+10     	; 0x4c64 <arenaRight_2+0x28a>
		__ticks = 1;
    4c5a:	81 e0       	ldi	r24, 0x01	; 1
    4c5c:	90 e0       	ldi	r25, 0x00	; 0
    4c5e:	9e 83       	std	Y+6, r25	; 0x06
    4c60:	8d 83       	std	Y+5, r24	; 0x05
    4c62:	3f c0       	rjmp	.+126    	; 0x4ce2 <arenaRight_2+0x308>
	else if (__tmp > 65535)
    4c64:	6f 81       	ldd	r22, Y+7	; 0x07
    4c66:	78 85       	ldd	r23, Y+8	; 0x08
    4c68:	89 85       	ldd	r24, Y+9	; 0x09
    4c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c6c:	20 e0       	ldi	r18, 0x00	; 0
    4c6e:	3f ef       	ldi	r19, 0xFF	; 255
    4c70:	4f e7       	ldi	r20, 0x7F	; 127
    4c72:	57 e4       	ldi	r21, 0x47	; 71
    4c74:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    4c78:	18 16       	cp	r1, r24
    4c7a:	4c f5       	brge	.+82     	; 0x4cce <arenaRight_2+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c84:	20 e0       	ldi	r18, 0x00	; 0
    4c86:	30 e0       	ldi	r19, 0x00	; 0
    4c88:	40 e2       	ldi	r20, 0x20	; 32
    4c8a:	51 e4       	ldi	r21, 0x41	; 65
    4c8c:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    4c90:	dc 01       	movw	r26, r24
    4c92:	cb 01       	movw	r24, r22
    4c94:	bc 01       	movw	r22, r24
    4c96:	cd 01       	movw	r24, r26
    4c98:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    4c9c:	dc 01       	movw	r26, r24
    4c9e:	cb 01       	movw	r24, r22
    4ca0:	9e 83       	std	Y+6, r25	; 0x06
    4ca2:	8d 83       	std	Y+5, r24	; 0x05
    4ca4:	0f c0       	rjmp	.+30     	; 0x4cc4 <arenaRight_2+0x2ea>
    4ca6:	80 e7       	ldi	r24, 0x70	; 112
    4ca8:	91 e0       	ldi	r25, 0x01	; 1
    4caa:	9c 83       	std	Y+4, r25	; 0x04
    4cac:	8b 83       	std	Y+3, r24	; 0x03
    4cae:	8b 81       	ldd	r24, Y+3	; 0x03
    4cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    4cb2:	01 97       	sbiw	r24, 0x01	; 1
    4cb4:	f1 f7       	brne	.-4      	; 0x4cb2 <arenaRight_2+0x2d8>
    4cb6:	9c 83       	std	Y+4, r25	; 0x04
    4cb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cba:	8d 81       	ldd	r24, Y+5	; 0x05
    4cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    4cbe:	01 97       	sbiw	r24, 0x01	; 1
    4cc0:	9e 83       	std	Y+6, r25	; 0x06
    4cc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    4cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    4cc8:	00 97       	sbiw	r24, 0x00	; 0
    4cca:	69 f7       	brne	.-38     	; 0x4ca6 <arenaRight_2+0x2cc>
    4ccc:	14 c0       	rjmp	.+40     	; 0x4cf6 <arenaRight_2+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cce:	6f 81       	ldd	r22, Y+7	; 0x07
    4cd0:	78 85       	ldd	r23, Y+8	; 0x08
    4cd2:	89 85       	ldd	r24, Y+9	; 0x09
    4cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cd6:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    4cda:	dc 01       	movw	r26, r24
    4cdc:	cb 01       	movw	r24, r22
    4cde:	9e 83       	std	Y+6, r25	; 0x06
    4ce0:	8d 83       	std	Y+5, r24	; 0x05
    4ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    4ce6:	9a 83       	std	Y+2, r25	; 0x02
    4ce8:	89 83       	std	Y+1, r24	; 0x01
    4cea:	89 81       	ldd	r24, Y+1	; 0x01
    4cec:	9a 81       	ldd	r25, Y+2	; 0x02
    4cee:	01 97       	sbiw	r24, 0x01	; 1
    4cf0:	f1 f7       	brne	.-4      	; 0x4cee <arenaRight_2+0x314>
    4cf2:	9a 83       	std	Y+2, r25	; 0x02
    4cf4:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);

    nodeMissEnable = 1;
    4cf6:	81 e0       	ldi	r24, 0x01	; 1
    4cf8:	90 e0       	ldi	r25, 0x00	; 0
    4cfa:	90 93 01 02 	sts	0x0201, r25
    4cfe:	80 93 00 02 	sts	0x0200, r24
}
    4d02:	aa 96       	adiw	r28, 0x2a	; 42
    4d04:	0f b6       	in	r0, 0x3f	; 63
    4d06:	f8 94       	cli
    4d08:	de bf       	out	0x3e, r29	; 62
    4d0a:	0f be       	out	0x3f, r0	; 63
    4d0c:	cd bf       	out	0x3d, r28	; 61
    4d0e:	cf 91       	pop	r28
    4d10:	df 91       	pop	r29
    4d12:	08 95       	ret

00004d14 <arenaRight_3>:

void arenaRight_3(void)
{
    4d14:	df 93       	push	r29
    4d16:	cf 93       	push	r28
    4d18:	cd b7       	in	r28, 0x3d	; 61
    4d1a:	de b7       	in	r29, 0x3e	; 62
    4d1c:	aa 97       	sbiw	r28, 0x2a	; 42
    4d1e:	0f b6       	in	r0, 0x3f	; 63
    4d20:	f8 94       	cli
    4d22:	de bf       	out	0x3e, r29	; 62
    4d24:	0f be       	out	0x3f, r0	; 63
    4d26:	cd bf       	out	0x3d, r28	; 61
    velocity(forwardLeftSpeed, forwardRightSpeed);
    4d28:	84 eb       	ldi	r24, 0xB4	; 180
    4d2a:	64 eb       	ldi	r22, 0xB4	; 180
    4d2c:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>

    //line_follow_mm(60);
    //stop();

    nodeMissEnable = 0;
    4d30:	10 92 01 02 	sts	0x0201, r1
    4d34:	10 92 00 02 	sts	0x0200, r1
    4d38:	80 e0       	ldi	r24, 0x00	; 0
    4d3a:	90 e0       	ldi	r25, 0x00	; 0
    4d3c:	a8 ec       	ldi	r26, 0xC8	; 200
    4d3e:	b2 e4       	ldi	r27, 0x42	; 66
    4d40:	8f a3       	std	Y+39, r24	; 0x27
    4d42:	98 a7       	std	Y+40, r25	; 0x28
    4d44:	a9 a7       	std	Y+41, r26	; 0x29
    4d46:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d48:	6f a1       	ldd	r22, Y+39	; 0x27
    4d4a:	78 a5       	ldd	r23, Y+40	; 0x28
    4d4c:	89 a5       	ldd	r24, Y+41	; 0x29
    4d4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d50:	26 e6       	ldi	r18, 0x66	; 102
    4d52:	36 e6       	ldi	r19, 0x66	; 102
    4d54:	46 e6       	ldi	r20, 0x66	; 102
    4d56:	55 e4       	ldi	r21, 0x45	; 69
    4d58:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    4d5c:	dc 01       	movw	r26, r24
    4d5e:	cb 01       	movw	r24, r22
    4d60:	8b a3       	std	Y+35, r24	; 0x23
    4d62:	9c a3       	std	Y+36, r25	; 0x24
    4d64:	ad a3       	std	Y+37, r26	; 0x25
    4d66:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4d68:	6b a1       	ldd	r22, Y+35	; 0x23
    4d6a:	7c a1       	ldd	r23, Y+36	; 0x24
    4d6c:	8d a1       	ldd	r24, Y+37	; 0x25
    4d6e:	9e a1       	ldd	r25, Y+38	; 0x26
    4d70:	20 e0       	ldi	r18, 0x00	; 0
    4d72:	30 e0       	ldi	r19, 0x00	; 0
    4d74:	40 e8       	ldi	r20, 0x80	; 128
    4d76:	5f e3       	ldi	r21, 0x3F	; 63
    4d78:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    4d7c:	88 23       	and	r24, r24
    4d7e:	2c f4       	brge	.+10     	; 0x4d8a <arenaRight_3+0x76>
		__ticks = 1;
    4d80:	81 e0       	ldi	r24, 0x01	; 1
    4d82:	90 e0       	ldi	r25, 0x00	; 0
    4d84:	9a a3       	std	Y+34, r25	; 0x22
    4d86:	89 a3       	std	Y+33, r24	; 0x21
    4d88:	3f c0       	rjmp	.+126    	; 0x4e08 <arenaRight_3+0xf4>
	else if (__tmp > 65535)
    4d8a:	6b a1       	ldd	r22, Y+35	; 0x23
    4d8c:	7c a1       	ldd	r23, Y+36	; 0x24
    4d8e:	8d a1       	ldd	r24, Y+37	; 0x25
    4d90:	9e a1       	ldd	r25, Y+38	; 0x26
    4d92:	20 e0       	ldi	r18, 0x00	; 0
    4d94:	3f ef       	ldi	r19, 0xFF	; 255
    4d96:	4f e7       	ldi	r20, 0x7F	; 127
    4d98:	57 e4       	ldi	r21, 0x47	; 71
    4d9a:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    4d9e:	18 16       	cp	r1, r24
    4da0:	4c f5       	brge	.+82     	; 0x4df4 <arenaRight_3+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4da2:	6f a1       	ldd	r22, Y+39	; 0x27
    4da4:	78 a5       	ldd	r23, Y+40	; 0x28
    4da6:	89 a5       	ldd	r24, Y+41	; 0x29
    4da8:	9a a5       	ldd	r25, Y+42	; 0x2a
    4daa:	20 e0       	ldi	r18, 0x00	; 0
    4dac:	30 e0       	ldi	r19, 0x00	; 0
    4dae:	40 e2       	ldi	r20, 0x20	; 32
    4db0:	51 e4       	ldi	r21, 0x41	; 65
    4db2:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    4db6:	dc 01       	movw	r26, r24
    4db8:	cb 01       	movw	r24, r22
    4dba:	bc 01       	movw	r22, r24
    4dbc:	cd 01       	movw	r24, r26
    4dbe:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    4dc2:	dc 01       	movw	r26, r24
    4dc4:	cb 01       	movw	r24, r22
    4dc6:	9a a3       	std	Y+34, r25	; 0x22
    4dc8:	89 a3       	std	Y+33, r24	; 0x21
    4dca:	0f c0       	rjmp	.+30     	; 0x4dea <arenaRight_3+0xd6>
    4dcc:	80 e7       	ldi	r24, 0x70	; 112
    4dce:	91 e0       	ldi	r25, 0x01	; 1
    4dd0:	98 a3       	std	Y+32, r25	; 0x20
    4dd2:	8f 8f       	std	Y+31, r24	; 0x1f
    4dd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4dd6:	98 a1       	ldd	r25, Y+32	; 0x20
    4dd8:	01 97       	sbiw	r24, 0x01	; 1
    4dda:	f1 f7       	brne	.-4      	; 0x4dd8 <arenaRight_3+0xc4>
    4ddc:	98 a3       	std	Y+32, r25	; 0x20
    4dde:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4de0:	89 a1       	ldd	r24, Y+33	; 0x21
    4de2:	9a a1       	ldd	r25, Y+34	; 0x22
    4de4:	01 97       	sbiw	r24, 0x01	; 1
    4de6:	9a a3       	std	Y+34, r25	; 0x22
    4de8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dea:	89 a1       	ldd	r24, Y+33	; 0x21
    4dec:	9a a1       	ldd	r25, Y+34	; 0x22
    4dee:	00 97       	sbiw	r24, 0x00	; 0
    4df0:	69 f7       	brne	.-38     	; 0x4dcc <arenaRight_3+0xb8>
    4df2:	14 c0       	rjmp	.+40     	; 0x4e1c <arenaRight_3+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4df4:	6b a1       	ldd	r22, Y+35	; 0x23
    4df6:	7c a1       	ldd	r23, Y+36	; 0x24
    4df8:	8d a1       	ldd	r24, Y+37	; 0x25
    4dfa:	9e a1       	ldd	r25, Y+38	; 0x26
    4dfc:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    4e00:	dc 01       	movw	r26, r24
    4e02:	cb 01       	movw	r24, r22
    4e04:	9a a3       	std	Y+34, r25	; 0x22
    4e06:	89 a3       	std	Y+33, r24	; 0x21
    4e08:	89 a1       	ldd	r24, Y+33	; 0x21
    4e0a:	9a a1       	ldd	r25, Y+34	; 0x22
    4e0c:	9e 8f       	std	Y+30, r25	; 0x1e
    4e0e:	8d 8f       	std	Y+29, r24	; 0x1d
    4e10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4e14:	01 97       	sbiw	r24, 0x01	; 1
    4e16:	f1 f7       	brne	.-4      	; 0x4e14 <arenaRight_3+0x100>
    4e18:	9e 8f       	std	Y+30, r25	; 0x1e
    4e1a:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(100);

    velocity(forwardLeftSpeed - 20, forwardRightSpeed - 20);
    4e1c:	80 ea       	ldi	r24, 0xA0	; 160
    4e1e:	60 ea       	ldi	r22, 0xA0	; 160
    4e20:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    soft_right();
    4e24:	0e 94 c7 04 	call	0x98e	; 0x98e <soft_right>
    4e28:	80 e0       	ldi	r24, 0x00	; 0
    4e2a:	90 e0       	ldi	r25, 0x00	; 0
    4e2c:	aa e7       	ldi	r26, 0x7A	; 122
    4e2e:	b4 e4       	ldi	r27, 0x44	; 68
    4e30:	89 8f       	std	Y+25, r24	; 0x19
    4e32:	9a 8f       	std	Y+26, r25	; 0x1a
    4e34:	ab 8f       	std	Y+27, r26	; 0x1b
    4e36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e38:	69 8d       	ldd	r22, Y+25	; 0x19
    4e3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e40:	26 e6       	ldi	r18, 0x66	; 102
    4e42:	36 e6       	ldi	r19, 0x66	; 102
    4e44:	46 e6       	ldi	r20, 0x66	; 102
    4e46:	55 e4       	ldi	r21, 0x45	; 69
    4e48:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    4e4c:	dc 01       	movw	r26, r24
    4e4e:	cb 01       	movw	r24, r22
    4e50:	8d 8b       	std	Y+21, r24	; 0x15
    4e52:	9e 8b       	std	Y+22, r25	; 0x16
    4e54:	af 8b       	std	Y+23, r26	; 0x17
    4e56:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4e58:	6d 89       	ldd	r22, Y+21	; 0x15
    4e5a:	7e 89       	ldd	r23, Y+22	; 0x16
    4e5c:	8f 89       	ldd	r24, Y+23	; 0x17
    4e5e:	98 8d       	ldd	r25, Y+24	; 0x18
    4e60:	20 e0       	ldi	r18, 0x00	; 0
    4e62:	30 e0       	ldi	r19, 0x00	; 0
    4e64:	40 e8       	ldi	r20, 0x80	; 128
    4e66:	5f e3       	ldi	r21, 0x3F	; 63
    4e68:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    4e6c:	88 23       	and	r24, r24
    4e6e:	2c f4       	brge	.+10     	; 0x4e7a <arenaRight_3+0x166>
		__ticks = 1;
    4e70:	81 e0       	ldi	r24, 0x01	; 1
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	9c 8b       	std	Y+20, r25	; 0x14
    4e76:	8b 8b       	std	Y+19, r24	; 0x13
    4e78:	3f c0       	rjmp	.+126    	; 0x4ef8 <arenaRight_3+0x1e4>
	else if (__tmp > 65535)
    4e7a:	6d 89       	ldd	r22, Y+21	; 0x15
    4e7c:	7e 89       	ldd	r23, Y+22	; 0x16
    4e7e:	8f 89       	ldd	r24, Y+23	; 0x17
    4e80:	98 8d       	ldd	r25, Y+24	; 0x18
    4e82:	20 e0       	ldi	r18, 0x00	; 0
    4e84:	3f ef       	ldi	r19, 0xFF	; 255
    4e86:	4f e7       	ldi	r20, 0x7F	; 127
    4e88:	57 e4       	ldi	r21, 0x47	; 71
    4e8a:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    4e8e:	18 16       	cp	r1, r24
    4e90:	4c f5       	brge	.+82     	; 0x4ee4 <arenaRight_3+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e92:	69 8d       	ldd	r22, Y+25	; 0x19
    4e94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e9a:	20 e0       	ldi	r18, 0x00	; 0
    4e9c:	30 e0       	ldi	r19, 0x00	; 0
    4e9e:	40 e2       	ldi	r20, 0x20	; 32
    4ea0:	51 e4       	ldi	r21, 0x41	; 65
    4ea2:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    4ea6:	dc 01       	movw	r26, r24
    4ea8:	cb 01       	movw	r24, r22
    4eaa:	bc 01       	movw	r22, r24
    4eac:	cd 01       	movw	r24, r26
    4eae:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    4eb2:	dc 01       	movw	r26, r24
    4eb4:	cb 01       	movw	r24, r22
    4eb6:	9c 8b       	std	Y+20, r25	; 0x14
    4eb8:	8b 8b       	std	Y+19, r24	; 0x13
    4eba:	0f c0       	rjmp	.+30     	; 0x4eda <arenaRight_3+0x1c6>
    4ebc:	80 e7       	ldi	r24, 0x70	; 112
    4ebe:	91 e0       	ldi	r25, 0x01	; 1
    4ec0:	9a 8b       	std	Y+18, r25	; 0x12
    4ec2:	89 8b       	std	Y+17, r24	; 0x11
    4ec4:	89 89       	ldd	r24, Y+17	; 0x11
    4ec6:	9a 89       	ldd	r25, Y+18	; 0x12
    4ec8:	01 97       	sbiw	r24, 0x01	; 1
    4eca:	f1 f7       	brne	.-4      	; 0x4ec8 <arenaRight_3+0x1b4>
    4ecc:	9a 8b       	std	Y+18, r25	; 0x12
    4ece:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ed0:	8b 89       	ldd	r24, Y+19	; 0x13
    4ed2:	9c 89       	ldd	r25, Y+20	; 0x14
    4ed4:	01 97       	sbiw	r24, 0x01	; 1
    4ed6:	9c 8b       	std	Y+20, r25	; 0x14
    4ed8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eda:	8b 89       	ldd	r24, Y+19	; 0x13
    4edc:	9c 89       	ldd	r25, Y+20	; 0x14
    4ede:	00 97       	sbiw	r24, 0x00	; 0
    4ee0:	69 f7       	brne	.-38     	; 0x4ebc <arenaRight_3+0x1a8>
    4ee2:	14 c0       	rjmp	.+40     	; 0x4f0c <arenaRight_3+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ee4:	6d 89       	ldd	r22, Y+21	; 0x15
    4ee6:	7e 89       	ldd	r23, Y+22	; 0x16
    4ee8:	8f 89       	ldd	r24, Y+23	; 0x17
    4eea:	98 8d       	ldd	r25, Y+24	; 0x18
    4eec:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    4ef0:	dc 01       	movw	r26, r24
    4ef2:	cb 01       	movw	r24, r22
    4ef4:	9c 8b       	std	Y+20, r25	; 0x14
    4ef6:	8b 8b       	std	Y+19, r24	; 0x13
    4ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    4efa:	9c 89       	ldd	r25, Y+20	; 0x14
    4efc:	98 8b       	std	Y+16, r25	; 0x10
    4efe:	8f 87       	std	Y+15, r24	; 0x0f
    4f00:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f02:	98 89       	ldd	r25, Y+16	; 0x10
    4f04:	01 97       	sbiw	r24, 0x01	; 1
    4f06:	f1 f7       	brne	.-4      	; 0x4f04 <arenaRight_3+0x1f0>
    4f08:	98 8b       	std	Y+16, r25	; 0x10
    4f0a:	8f 87       	std	Y+15, r24	; 0x0f

    _delay_ms(1000);

    centre = ADC_Conversion(2);
    4f0c:	82 e0       	ldi	r24, 0x02	; 2
    4f0e:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    4f12:	88 2f       	mov	r24, r24
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	90 93 2f 03 	sts	0x032F, r25
    4f1a:	80 93 2e 03 	sts	0x032E, r24
    4f1e:	09 c0       	rjmp	.+18     	; 0x4f32 <arenaRight_3+0x21e>

    while(centre < x)
    {
        centre = ADC_Conversion(2);
    4f20:	82 e0       	ldi	r24, 0x02	; 2
    4f22:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    4f26:	88 2f       	mov	r24, r24
    4f28:	90 e0       	ldi	r25, 0x00	; 0
    4f2a:	90 93 2f 03 	sts	0x032F, r25
    4f2e:	80 93 2e 03 	sts	0x032E, r24

    _delay_ms(1000);

    centre = ADC_Conversion(2);

    while(centre < x)
    4f32:	20 91 2e 03 	lds	r18, 0x032E
    4f36:	30 91 2f 03 	lds	r19, 0x032F
    4f3a:	80 91 02 02 	lds	r24, 0x0202
    4f3e:	90 91 03 02 	lds	r25, 0x0203
    4f42:	28 17       	cp	r18, r24
    4f44:	39 07       	cpc	r19, r25
    4f46:	64 f3       	brlt	.-40     	; 0x4f20 <arenaRight_3+0x20c>
    {
        centre = ADC_Conversion(2);
    }

    stop();
    4f48:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    4f4c:	80 e0       	ldi	r24, 0x00	; 0
    4f4e:	90 e0       	ldi	r25, 0x00	; 0
    4f50:	a8 ec       	ldi	r26, 0xC8	; 200
    4f52:	b2 e4       	ldi	r27, 0x42	; 66
    4f54:	8b 87       	std	Y+11, r24	; 0x0b
    4f56:	9c 87       	std	Y+12, r25	; 0x0c
    4f58:	ad 87       	std	Y+13, r26	; 0x0d
    4f5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f60:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f62:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f64:	26 e6       	ldi	r18, 0x66	; 102
    4f66:	36 e6       	ldi	r19, 0x66	; 102
    4f68:	46 e6       	ldi	r20, 0x66	; 102
    4f6a:	55 e4       	ldi	r21, 0x45	; 69
    4f6c:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    4f70:	dc 01       	movw	r26, r24
    4f72:	cb 01       	movw	r24, r22
    4f74:	8f 83       	std	Y+7, r24	; 0x07
    4f76:	98 87       	std	Y+8, r25	; 0x08
    4f78:	a9 87       	std	Y+9, r26	; 0x09
    4f7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    4f7e:	78 85       	ldd	r23, Y+8	; 0x08
    4f80:	89 85       	ldd	r24, Y+9	; 0x09
    4f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f84:	20 e0       	ldi	r18, 0x00	; 0
    4f86:	30 e0       	ldi	r19, 0x00	; 0
    4f88:	40 e8       	ldi	r20, 0x80	; 128
    4f8a:	5f e3       	ldi	r21, 0x3F	; 63
    4f8c:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    4f90:	88 23       	and	r24, r24
    4f92:	2c f4       	brge	.+10     	; 0x4f9e <arenaRight_3+0x28a>
		__ticks = 1;
    4f94:	81 e0       	ldi	r24, 0x01	; 1
    4f96:	90 e0       	ldi	r25, 0x00	; 0
    4f98:	9e 83       	std	Y+6, r25	; 0x06
    4f9a:	8d 83       	std	Y+5, r24	; 0x05
    4f9c:	3f c0       	rjmp	.+126    	; 0x501c <arenaRight_3+0x308>
	else if (__tmp > 65535)
    4f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    4fa0:	78 85       	ldd	r23, Y+8	; 0x08
    4fa2:	89 85       	ldd	r24, Y+9	; 0x09
    4fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fa6:	20 e0       	ldi	r18, 0x00	; 0
    4fa8:	3f ef       	ldi	r19, 0xFF	; 255
    4faa:	4f e7       	ldi	r20, 0x7F	; 127
    4fac:	57 e4       	ldi	r21, 0x47	; 71
    4fae:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    4fb2:	18 16       	cp	r1, r24
    4fb4:	4c f5       	brge	.+82     	; 0x5008 <arenaRight_3+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fbe:	20 e0       	ldi	r18, 0x00	; 0
    4fc0:	30 e0       	ldi	r19, 0x00	; 0
    4fc2:	40 e2       	ldi	r20, 0x20	; 32
    4fc4:	51 e4       	ldi	r21, 0x41	; 65
    4fc6:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    4fca:	dc 01       	movw	r26, r24
    4fcc:	cb 01       	movw	r24, r22
    4fce:	bc 01       	movw	r22, r24
    4fd0:	cd 01       	movw	r24, r26
    4fd2:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    4fd6:	dc 01       	movw	r26, r24
    4fd8:	cb 01       	movw	r24, r22
    4fda:	9e 83       	std	Y+6, r25	; 0x06
    4fdc:	8d 83       	std	Y+5, r24	; 0x05
    4fde:	0f c0       	rjmp	.+30     	; 0x4ffe <arenaRight_3+0x2ea>
    4fe0:	80 e7       	ldi	r24, 0x70	; 112
    4fe2:	91 e0       	ldi	r25, 0x01	; 1
    4fe4:	9c 83       	std	Y+4, r25	; 0x04
    4fe6:	8b 83       	std	Y+3, r24	; 0x03
    4fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    4fea:	9c 81       	ldd	r25, Y+4	; 0x04
    4fec:	01 97       	sbiw	r24, 0x01	; 1
    4fee:	f1 f7       	brne	.-4      	; 0x4fec <arenaRight_3+0x2d8>
    4ff0:	9c 83       	std	Y+4, r25	; 0x04
    4ff2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ff8:	01 97       	sbiw	r24, 0x01	; 1
    4ffa:	9e 83       	std	Y+6, r25	; 0x06
    4ffc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    5000:	9e 81       	ldd	r25, Y+6	; 0x06
    5002:	00 97       	sbiw	r24, 0x00	; 0
    5004:	69 f7       	brne	.-38     	; 0x4fe0 <arenaRight_3+0x2cc>
    5006:	14 c0       	rjmp	.+40     	; 0x5030 <arenaRight_3+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5008:	6f 81       	ldd	r22, Y+7	; 0x07
    500a:	78 85       	ldd	r23, Y+8	; 0x08
    500c:	89 85       	ldd	r24, Y+9	; 0x09
    500e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5010:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    5014:	dc 01       	movw	r26, r24
    5016:	cb 01       	movw	r24, r22
    5018:	9e 83       	std	Y+6, r25	; 0x06
    501a:	8d 83       	std	Y+5, r24	; 0x05
    501c:	8d 81       	ldd	r24, Y+5	; 0x05
    501e:	9e 81       	ldd	r25, Y+6	; 0x06
    5020:	9a 83       	std	Y+2, r25	; 0x02
    5022:	89 83       	std	Y+1, r24	; 0x01
    5024:	89 81       	ldd	r24, Y+1	; 0x01
    5026:	9a 81       	ldd	r25, Y+2	; 0x02
    5028:	01 97       	sbiw	r24, 0x01	; 1
    502a:	f1 f7       	brne	.-4      	; 0x5028 <arenaRight_3+0x314>
    502c:	9a 83       	std	Y+2, r25	; 0x02
    502e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);

    nodeMissEnable = 1;
    5030:	81 e0       	ldi	r24, 0x01	; 1
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	90 93 01 02 	sts	0x0201, r25
    5038:	80 93 00 02 	sts	0x0200, r24
}
    503c:	aa 96       	adiw	r28, 0x2a	; 42
    503e:	0f b6       	in	r0, 0x3f	; 63
    5040:	f8 94       	cli
    5042:	de bf       	out	0x3e, r29	; 62
    5044:	0f be       	out	0x3f, r0	; 63
    5046:	cd bf       	out	0x3d, r28	; 61
    5048:	cf 91       	pop	r28
    504a:	df 91       	pop	r29
    504c:	08 95       	ret

0000504e <arenaRight_4>:

void arenaRight_4(void)
{
    504e:	df 93       	push	r29
    5050:	cf 93       	push	r28
    5052:	cd b7       	in	r28, 0x3d	; 61
    5054:	de b7       	in	r29, 0x3e	; 62
    5056:	aa 97       	sbiw	r28, 0x2a	; 42
    5058:	0f b6       	in	r0, 0x3f	; 63
    505a:	f8 94       	cli
    505c:	de bf       	out	0x3e, r29	; 62
    505e:	0f be       	out	0x3f, r0	; 63
    5060:	cd bf       	out	0x3d, r28	; 61
    velocity(forwardLeftSpeed, forwardRightSpeed);
    5062:	84 eb       	ldi	r24, 0xB4	; 180
    5064:	64 eb       	ldi	r22, 0xB4	; 180
    5066:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>

    //line_follow_mm(60);
    //stop();

    nodeMissEnable = 0;
    506a:	10 92 01 02 	sts	0x0201, r1
    506e:	10 92 00 02 	sts	0x0200, r1
    5072:	80 e0       	ldi	r24, 0x00	; 0
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	a8 ec       	ldi	r26, 0xC8	; 200
    5078:	b2 e4       	ldi	r27, 0x42	; 66
    507a:	8f a3       	std	Y+39, r24	; 0x27
    507c:	98 a7       	std	Y+40, r25	; 0x28
    507e:	a9 a7       	std	Y+41, r26	; 0x29
    5080:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5082:	6f a1       	ldd	r22, Y+39	; 0x27
    5084:	78 a5       	ldd	r23, Y+40	; 0x28
    5086:	89 a5       	ldd	r24, Y+41	; 0x29
    5088:	9a a5       	ldd	r25, Y+42	; 0x2a
    508a:	26 e6       	ldi	r18, 0x66	; 102
    508c:	36 e6       	ldi	r19, 0x66	; 102
    508e:	46 e6       	ldi	r20, 0x66	; 102
    5090:	55 e4       	ldi	r21, 0x45	; 69
    5092:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    5096:	dc 01       	movw	r26, r24
    5098:	cb 01       	movw	r24, r22
    509a:	8b a3       	std	Y+35, r24	; 0x23
    509c:	9c a3       	std	Y+36, r25	; 0x24
    509e:	ad a3       	std	Y+37, r26	; 0x25
    50a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    50a2:	6b a1       	ldd	r22, Y+35	; 0x23
    50a4:	7c a1       	ldd	r23, Y+36	; 0x24
    50a6:	8d a1       	ldd	r24, Y+37	; 0x25
    50a8:	9e a1       	ldd	r25, Y+38	; 0x26
    50aa:	20 e0       	ldi	r18, 0x00	; 0
    50ac:	30 e0       	ldi	r19, 0x00	; 0
    50ae:	40 e8       	ldi	r20, 0x80	; 128
    50b0:	5f e3       	ldi	r21, 0x3F	; 63
    50b2:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    50b6:	88 23       	and	r24, r24
    50b8:	2c f4       	brge	.+10     	; 0x50c4 <arenaRight_4+0x76>
		__ticks = 1;
    50ba:	81 e0       	ldi	r24, 0x01	; 1
    50bc:	90 e0       	ldi	r25, 0x00	; 0
    50be:	9a a3       	std	Y+34, r25	; 0x22
    50c0:	89 a3       	std	Y+33, r24	; 0x21
    50c2:	3f c0       	rjmp	.+126    	; 0x5142 <arenaRight_4+0xf4>
	else if (__tmp > 65535)
    50c4:	6b a1       	ldd	r22, Y+35	; 0x23
    50c6:	7c a1       	ldd	r23, Y+36	; 0x24
    50c8:	8d a1       	ldd	r24, Y+37	; 0x25
    50ca:	9e a1       	ldd	r25, Y+38	; 0x26
    50cc:	20 e0       	ldi	r18, 0x00	; 0
    50ce:	3f ef       	ldi	r19, 0xFF	; 255
    50d0:	4f e7       	ldi	r20, 0x7F	; 127
    50d2:	57 e4       	ldi	r21, 0x47	; 71
    50d4:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    50d8:	18 16       	cp	r1, r24
    50da:	4c f5       	brge	.+82     	; 0x512e <arenaRight_4+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50dc:	6f a1       	ldd	r22, Y+39	; 0x27
    50de:	78 a5       	ldd	r23, Y+40	; 0x28
    50e0:	89 a5       	ldd	r24, Y+41	; 0x29
    50e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    50e4:	20 e0       	ldi	r18, 0x00	; 0
    50e6:	30 e0       	ldi	r19, 0x00	; 0
    50e8:	40 e2       	ldi	r20, 0x20	; 32
    50ea:	51 e4       	ldi	r21, 0x41	; 65
    50ec:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    50f0:	dc 01       	movw	r26, r24
    50f2:	cb 01       	movw	r24, r22
    50f4:	bc 01       	movw	r22, r24
    50f6:	cd 01       	movw	r24, r26
    50f8:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    50fc:	dc 01       	movw	r26, r24
    50fe:	cb 01       	movw	r24, r22
    5100:	9a a3       	std	Y+34, r25	; 0x22
    5102:	89 a3       	std	Y+33, r24	; 0x21
    5104:	0f c0       	rjmp	.+30     	; 0x5124 <arenaRight_4+0xd6>
    5106:	80 e7       	ldi	r24, 0x70	; 112
    5108:	91 e0       	ldi	r25, 0x01	; 1
    510a:	98 a3       	std	Y+32, r25	; 0x20
    510c:	8f 8f       	std	Y+31, r24	; 0x1f
    510e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5110:	98 a1       	ldd	r25, Y+32	; 0x20
    5112:	01 97       	sbiw	r24, 0x01	; 1
    5114:	f1 f7       	brne	.-4      	; 0x5112 <arenaRight_4+0xc4>
    5116:	98 a3       	std	Y+32, r25	; 0x20
    5118:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    511a:	89 a1       	ldd	r24, Y+33	; 0x21
    511c:	9a a1       	ldd	r25, Y+34	; 0x22
    511e:	01 97       	sbiw	r24, 0x01	; 1
    5120:	9a a3       	std	Y+34, r25	; 0x22
    5122:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5124:	89 a1       	ldd	r24, Y+33	; 0x21
    5126:	9a a1       	ldd	r25, Y+34	; 0x22
    5128:	00 97       	sbiw	r24, 0x00	; 0
    512a:	69 f7       	brne	.-38     	; 0x5106 <arenaRight_4+0xb8>
    512c:	14 c0       	rjmp	.+40     	; 0x5156 <arenaRight_4+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    512e:	6b a1       	ldd	r22, Y+35	; 0x23
    5130:	7c a1       	ldd	r23, Y+36	; 0x24
    5132:	8d a1       	ldd	r24, Y+37	; 0x25
    5134:	9e a1       	ldd	r25, Y+38	; 0x26
    5136:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    513a:	dc 01       	movw	r26, r24
    513c:	cb 01       	movw	r24, r22
    513e:	9a a3       	std	Y+34, r25	; 0x22
    5140:	89 a3       	std	Y+33, r24	; 0x21
    5142:	89 a1       	ldd	r24, Y+33	; 0x21
    5144:	9a a1       	ldd	r25, Y+34	; 0x22
    5146:	9e 8f       	std	Y+30, r25	; 0x1e
    5148:	8d 8f       	std	Y+29, r24	; 0x1d
    514a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    514c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    514e:	01 97       	sbiw	r24, 0x01	; 1
    5150:	f1 f7       	brne	.-4      	; 0x514e <arenaRight_4+0x100>
    5152:	9e 8f       	std	Y+30, r25	; 0x1e
    5154:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(100);

    velocity(forwardLeftSpeed - 20, forwardRightSpeed - 20);
    5156:	80 ea       	ldi	r24, 0xA0	; 160
    5158:	60 ea       	ldi	r22, 0xA0	; 160
    515a:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
        left();
    515e:	0e 94 05 03 	call	0x60a	; 0x60a <left>
    5162:	80 e0       	ldi	r24, 0x00	; 0
    5164:	90 e0       	ldi	r25, 0x00	; 0
    5166:	aa e7       	ldi	r26, 0x7A	; 122
    5168:	b5 e4       	ldi	r27, 0x45	; 69
    516a:	89 8f       	std	Y+25, r24	; 0x19
    516c:	9a 8f       	std	Y+26, r25	; 0x1a
    516e:	ab 8f       	std	Y+27, r26	; 0x1b
    5170:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5172:	69 8d       	ldd	r22, Y+25	; 0x19
    5174:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5176:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5178:	9c 8d       	ldd	r25, Y+28	; 0x1c
    517a:	26 e6       	ldi	r18, 0x66	; 102
    517c:	36 e6       	ldi	r19, 0x66	; 102
    517e:	46 e6       	ldi	r20, 0x66	; 102
    5180:	55 e4       	ldi	r21, 0x45	; 69
    5182:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    5186:	dc 01       	movw	r26, r24
    5188:	cb 01       	movw	r24, r22
    518a:	8d 8b       	std	Y+21, r24	; 0x15
    518c:	9e 8b       	std	Y+22, r25	; 0x16
    518e:	af 8b       	std	Y+23, r26	; 0x17
    5190:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5192:	6d 89       	ldd	r22, Y+21	; 0x15
    5194:	7e 89       	ldd	r23, Y+22	; 0x16
    5196:	8f 89       	ldd	r24, Y+23	; 0x17
    5198:	98 8d       	ldd	r25, Y+24	; 0x18
    519a:	20 e0       	ldi	r18, 0x00	; 0
    519c:	30 e0       	ldi	r19, 0x00	; 0
    519e:	40 e8       	ldi	r20, 0x80	; 128
    51a0:	5f e3       	ldi	r21, 0x3F	; 63
    51a2:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    51a6:	88 23       	and	r24, r24
    51a8:	2c f4       	brge	.+10     	; 0x51b4 <arenaRight_4+0x166>
		__ticks = 1;
    51aa:	81 e0       	ldi	r24, 0x01	; 1
    51ac:	90 e0       	ldi	r25, 0x00	; 0
    51ae:	9c 8b       	std	Y+20, r25	; 0x14
    51b0:	8b 8b       	std	Y+19, r24	; 0x13
    51b2:	3f c0       	rjmp	.+126    	; 0x5232 <arenaRight_4+0x1e4>
	else if (__tmp > 65535)
    51b4:	6d 89       	ldd	r22, Y+21	; 0x15
    51b6:	7e 89       	ldd	r23, Y+22	; 0x16
    51b8:	8f 89       	ldd	r24, Y+23	; 0x17
    51ba:	98 8d       	ldd	r25, Y+24	; 0x18
    51bc:	20 e0       	ldi	r18, 0x00	; 0
    51be:	3f ef       	ldi	r19, 0xFF	; 255
    51c0:	4f e7       	ldi	r20, 0x7F	; 127
    51c2:	57 e4       	ldi	r21, 0x47	; 71
    51c4:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    51c8:	18 16       	cp	r1, r24
    51ca:	4c f5       	brge	.+82     	; 0x521e <arenaRight_4+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51cc:	69 8d       	ldd	r22, Y+25	; 0x19
    51ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51d4:	20 e0       	ldi	r18, 0x00	; 0
    51d6:	30 e0       	ldi	r19, 0x00	; 0
    51d8:	40 e2       	ldi	r20, 0x20	; 32
    51da:	51 e4       	ldi	r21, 0x41	; 65
    51dc:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    51e0:	dc 01       	movw	r26, r24
    51e2:	cb 01       	movw	r24, r22
    51e4:	bc 01       	movw	r22, r24
    51e6:	cd 01       	movw	r24, r26
    51e8:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    51ec:	dc 01       	movw	r26, r24
    51ee:	cb 01       	movw	r24, r22
    51f0:	9c 8b       	std	Y+20, r25	; 0x14
    51f2:	8b 8b       	std	Y+19, r24	; 0x13
    51f4:	0f c0       	rjmp	.+30     	; 0x5214 <arenaRight_4+0x1c6>
    51f6:	80 e7       	ldi	r24, 0x70	; 112
    51f8:	91 e0       	ldi	r25, 0x01	; 1
    51fa:	9a 8b       	std	Y+18, r25	; 0x12
    51fc:	89 8b       	std	Y+17, r24	; 0x11
    51fe:	89 89       	ldd	r24, Y+17	; 0x11
    5200:	9a 89       	ldd	r25, Y+18	; 0x12
    5202:	01 97       	sbiw	r24, 0x01	; 1
    5204:	f1 f7       	brne	.-4      	; 0x5202 <arenaRight_4+0x1b4>
    5206:	9a 8b       	std	Y+18, r25	; 0x12
    5208:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    520a:	8b 89       	ldd	r24, Y+19	; 0x13
    520c:	9c 89       	ldd	r25, Y+20	; 0x14
    520e:	01 97       	sbiw	r24, 0x01	; 1
    5210:	9c 8b       	std	Y+20, r25	; 0x14
    5212:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5214:	8b 89       	ldd	r24, Y+19	; 0x13
    5216:	9c 89       	ldd	r25, Y+20	; 0x14
    5218:	00 97       	sbiw	r24, 0x00	; 0
    521a:	69 f7       	brne	.-38     	; 0x51f6 <arenaRight_4+0x1a8>
    521c:	14 c0       	rjmp	.+40     	; 0x5246 <arenaRight_4+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    521e:	6d 89       	ldd	r22, Y+21	; 0x15
    5220:	7e 89       	ldd	r23, Y+22	; 0x16
    5222:	8f 89       	ldd	r24, Y+23	; 0x17
    5224:	98 8d       	ldd	r25, Y+24	; 0x18
    5226:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    522a:	dc 01       	movw	r26, r24
    522c:	cb 01       	movw	r24, r22
    522e:	9c 8b       	std	Y+20, r25	; 0x14
    5230:	8b 8b       	std	Y+19, r24	; 0x13
    5232:	8b 89       	ldd	r24, Y+19	; 0x13
    5234:	9c 89       	ldd	r25, Y+20	; 0x14
    5236:	98 8b       	std	Y+16, r25	; 0x10
    5238:	8f 87       	std	Y+15, r24	; 0x0f
    523a:	8f 85       	ldd	r24, Y+15	; 0x0f
    523c:	98 89       	ldd	r25, Y+16	; 0x10
    523e:	01 97       	sbiw	r24, 0x01	; 1
    5240:	f1 f7       	brne	.-4      	; 0x523e <arenaRight_4+0x1f0>
    5242:	98 8b       	std	Y+16, r25	; 0x10
    5244:	8f 87       	std	Y+15, r24	; 0x0f

    _delay_ms(4000);

    centre = ADC_Conversion(2);
    5246:	82 e0       	ldi	r24, 0x02	; 2
    5248:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    524c:	88 2f       	mov	r24, r24
    524e:	90 e0       	ldi	r25, 0x00	; 0
    5250:	90 93 2f 03 	sts	0x032F, r25
    5254:	80 93 2e 03 	sts	0x032E, r24
    5258:	09 c0       	rjmp	.+18     	; 0x526c <arenaRight_4+0x21e>

    while(centre < x)
    {
        centre = ADC_Conversion(2);
    525a:	82 e0       	ldi	r24, 0x02	; 2
    525c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    5260:	88 2f       	mov	r24, r24
    5262:	90 e0       	ldi	r25, 0x00	; 0
    5264:	90 93 2f 03 	sts	0x032F, r25
    5268:	80 93 2e 03 	sts	0x032E, r24

    _delay_ms(4000);

    centre = ADC_Conversion(2);

    while(centre < x)
    526c:	20 91 2e 03 	lds	r18, 0x032E
    5270:	30 91 2f 03 	lds	r19, 0x032F
    5274:	80 91 02 02 	lds	r24, 0x0202
    5278:	90 91 03 02 	lds	r25, 0x0203
    527c:	28 17       	cp	r18, r24
    527e:	39 07       	cpc	r19, r25
    5280:	64 f3       	brlt	.-40     	; 0x525a <arenaRight_4+0x20c>
    {
        centre = ADC_Conversion(2);
    }

    stop();
    5282:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    5286:	80 e0       	ldi	r24, 0x00	; 0
    5288:	90 e0       	ldi	r25, 0x00	; 0
    528a:	a8 ec       	ldi	r26, 0xC8	; 200
    528c:	b2 e4       	ldi	r27, 0x42	; 66
    528e:	8b 87       	std	Y+11, r24	; 0x0b
    5290:	9c 87       	std	Y+12, r25	; 0x0c
    5292:	ad 87       	std	Y+13, r26	; 0x0d
    5294:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5296:	6b 85       	ldd	r22, Y+11	; 0x0b
    5298:	7c 85       	ldd	r23, Y+12	; 0x0c
    529a:	8d 85       	ldd	r24, Y+13	; 0x0d
    529c:	9e 85       	ldd	r25, Y+14	; 0x0e
    529e:	26 e6       	ldi	r18, 0x66	; 102
    52a0:	36 e6       	ldi	r19, 0x66	; 102
    52a2:	46 e6       	ldi	r20, 0x66	; 102
    52a4:	55 e4       	ldi	r21, 0x45	; 69
    52a6:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    52aa:	dc 01       	movw	r26, r24
    52ac:	cb 01       	movw	r24, r22
    52ae:	8f 83       	std	Y+7, r24	; 0x07
    52b0:	98 87       	std	Y+8, r25	; 0x08
    52b2:	a9 87       	std	Y+9, r26	; 0x09
    52b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    52b6:	6f 81       	ldd	r22, Y+7	; 0x07
    52b8:	78 85       	ldd	r23, Y+8	; 0x08
    52ba:	89 85       	ldd	r24, Y+9	; 0x09
    52bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    52be:	20 e0       	ldi	r18, 0x00	; 0
    52c0:	30 e0       	ldi	r19, 0x00	; 0
    52c2:	40 e8       	ldi	r20, 0x80	; 128
    52c4:	5f e3       	ldi	r21, 0x3F	; 63
    52c6:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    52ca:	88 23       	and	r24, r24
    52cc:	2c f4       	brge	.+10     	; 0x52d8 <arenaRight_4+0x28a>
		__ticks = 1;
    52ce:	81 e0       	ldi	r24, 0x01	; 1
    52d0:	90 e0       	ldi	r25, 0x00	; 0
    52d2:	9e 83       	std	Y+6, r25	; 0x06
    52d4:	8d 83       	std	Y+5, r24	; 0x05
    52d6:	3f c0       	rjmp	.+126    	; 0x5356 <arenaRight_4+0x308>
	else if (__tmp > 65535)
    52d8:	6f 81       	ldd	r22, Y+7	; 0x07
    52da:	78 85       	ldd	r23, Y+8	; 0x08
    52dc:	89 85       	ldd	r24, Y+9	; 0x09
    52de:	9a 85       	ldd	r25, Y+10	; 0x0a
    52e0:	20 e0       	ldi	r18, 0x00	; 0
    52e2:	3f ef       	ldi	r19, 0xFF	; 255
    52e4:	4f e7       	ldi	r20, 0x7F	; 127
    52e6:	57 e4       	ldi	r21, 0x47	; 71
    52e8:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    52ec:	18 16       	cp	r1, r24
    52ee:	4c f5       	brge	.+82     	; 0x5342 <arenaRight_4+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    52f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    52f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    52f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    52f8:	20 e0       	ldi	r18, 0x00	; 0
    52fa:	30 e0       	ldi	r19, 0x00	; 0
    52fc:	40 e2       	ldi	r20, 0x20	; 32
    52fe:	51 e4       	ldi	r21, 0x41	; 65
    5300:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    5304:	dc 01       	movw	r26, r24
    5306:	cb 01       	movw	r24, r22
    5308:	bc 01       	movw	r22, r24
    530a:	cd 01       	movw	r24, r26
    530c:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    5310:	dc 01       	movw	r26, r24
    5312:	cb 01       	movw	r24, r22
    5314:	9e 83       	std	Y+6, r25	; 0x06
    5316:	8d 83       	std	Y+5, r24	; 0x05
    5318:	0f c0       	rjmp	.+30     	; 0x5338 <arenaRight_4+0x2ea>
    531a:	80 e7       	ldi	r24, 0x70	; 112
    531c:	91 e0       	ldi	r25, 0x01	; 1
    531e:	9c 83       	std	Y+4, r25	; 0x04
    5320:	8b 83       	std	Y+3, r24	; 0x03
    5322:	8b 81       	ldd	r24, Y+3	; 0x03
    5324:	9c 81       	ldd	r25, Y+4	; 0x04
    5326:	01 97       	sbiw	r24, 0x01	; 1
    5328:	f1 f7       	brne	.-4      	; 0x5326 <arenaRight_4+0x2d8>
    532a:	9c 83       	std	Y+4, r25	; 0x04
    532c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    532e:	8d 81       	ldd	r24, Y+5	; 0x05
    5330:	9e 81       	ldd	r25, Y+6	; 0x06
    5332:	01 97       	sbiw	r24, 0x01	; 1
    5334:	9e 83       	std	Y+6, r25	; 0x06
    5336:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5338:	8d 81       	ldd	r24, Y+5	; 0x05
    533a:	9e 81       	ldd	r25, Y+6	; 0x06
    533c:	00 97       	sbiw	r24, 0x00	; 0
    533e:	69 f7       	brne	.-38     	; 0x531a <arenaRight_4+0x2cc>
    5340:	14 c0       	rjmp	.+40     	; 0x536a <arenaRight_4+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5342:	6f 81       	ldd	r22, Y+7	; 0x07
    5344:	78 85       	ldd	r23, Y+8	; 0x08
    5346:	89 85       	ldd	r24, Y+9	; 0x09
    5348:	9a 85       	ldd	r25, Y+10	; 0x0a
    534a:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    534e:	dc 01       	movw	r26, r24
    5350:	cb 01       	movw	r24, r22
    5352:	9e 83       	std	Y+6, r25	; 0x06
    5354:	8d 83       	std	Y+5, r24	; 0x05
    5356:	8d 81       	ldd	r24, Y+5	; 0x05
    5358:	9e 81       	ldd	r25, Y+6	; 0x06
    535a:	9a 83       	std	Y+2, r25	; 0x02
    535c:	89 83       	std	Y+1, r24	; 0x01
    535e:	89 81       	ldd	r24, Y+1	; 0x01
    5360:	9a 81       	ldd	r25, Y+2	; 0x02
    5362:	01 97       	sbiw	r24, 0x01	; 1
    5364:	f1 f7       	brne	.-4      	; 0x5362 <arenaRight_4+0x314>
    5366:	9a 83       	std	Y+2, r25	; 0x02
    5368:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);

    nodeMissEnable = 1;
    536a:	81 e0       	ldi	r24, 0x01	; 1
    536c:	90 e0       	ldi	r25, 0x00	; 0
    536e:	90 93 01 02 	sts	0x0201, r25
    5372:	80 93 00 02 	sts	0x0200, r24
}
    5376:	aa 96       	adiw	r28, 0x2a	; 42
    5378:	0f b6       	in	r0, 0x3f	; 63
    537a:	f8 94       	cli
    537c:	de bf       	out	0x3e, r29	; 62
    537e:	0f be       	out	0x3f, r0	; 63
    5380:	cd bf       	out	0x3d, r28	; 61
    5382:	cf 91       	pop	r28
    5384:	df 91       	pop	r29
    5386:	08 95       	ret

00005388 <arenaUturn>:

void arenaUturn(void)
{
    5388:	df 93       	push	r29
    538a:	cf 93       	push	r28
    538c:	cd b7       	in	r28, 0x3d	; 61
    538e:	de b7       	in	r29, 0x3e	; 62
    5390:	aa 97       	sbiw	r28, 0x2a	; 42
    5392:	0f b6       	in	r0, 0x3f	; 63
    5394:	f8 94       	cli
    5396:	de bf       	out	0x3e, r29	; 62
    5398:	0f be       	out	0x3f, r0	; 63
    539a:	cd bf       	out	0x3d, r28	; 61
    nodeMissEnable = 0;
    539c:	10 92 01 02 	sts	0x0201, r1
    53a0:	10 92 00 02 	sts	0x0200, r1
    stop();
    53a4:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    53a8:	80 e0       	ldi	r24, 0x00	; 0
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	a8 ec       	ldi	r26, 0xC8	; 200
    53ae:	b2 e4       	ldi	r27, 0x42	; 66
    53b0:	8f a3       	std	Y+39, r24	; 0x27
    53b2:	98 a7       	std	Y+40, r25	; 0x28
    53b4:	a9 a7       	std	Y+41, r26	; 0x29
    53b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53b8:	6f a1       	ldd	r22, Y+39	; 0x27
    53ba:	78 a5       	ldd	r23, Y+40	; 0x28
    53bc:	89 a5       	ldd	r24, Y+41	; 0x29
    53be:	9a a5       	ldd	r25, Y+42	; 0x2a
    53c0:	26 e6       	ldi	r18, 0x66	; 102
    53c2:	36 e6       	ldi	r19, 0x66	; 102
    53c4:	46 e6       	ldi	r20, 0x66	; 102
    53c6:	55 e4       	ldi	r21, 0x45	; 69
    53c8:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    53cc:	dc 01       	movw	r26, r24
    53ce:	cb 01       	movw	r24, r22
    53d0:	8b a3       	std	Y+35, r24	; 0x23
    53d2:	9c a3       	std	Y+36, r25	; 0x24
    53d4:	ad a3       	std	Y+37, r26	; 0x25
    53d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    53d8:	6b a1       	ldd	r22, Y+35	; 0x23
    53da:	7c a1       	ldd	r23, Y+36	; 0x24
    53dc:	8d a1       	ldd	r24, Y+37	; 0x25
    53de:	9e a1       	ldd	r25, Y+38	; 0x26
    53e0:	20 e0       	ldi	r18, 0x00	; 0
    53e2:	30 e0       	ldi	r19, 0x00	; 0
    53e4:	40 e8       	ldi	r20, 0x80	; 128
    53e6:	5f e3       	ldi	r21, 0x3F	; 63
    53e8:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    53ec:	88 23       	and	r24, r24
    53ee:	2c f4       	brge	.+10     	; 0x53fa <arenaUturn+0x72>
		__ticks = 1;
    53f0:	81 e0       	ldi	r24, 0x01	; 1
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	9a a3       	std	Y+34, r25	; 0x22
    53f6:	89 a3       	std	Y+33, r24	; 0x21
    53f8:	3f c0       	rjmp	.+126    	; 0x5478 <arenaUturn+0xf0>
	else if (__tmp > 65535)
    53fa:	6b a1       	ldd	r22, Y+35	; 0x23
    53fc:	7c a1       	ldd	r23, Y+36	; 0x24
    53fe:	8d a1       	ldd	r24, Y+37	; 0x25
    5400:	9e a1       	ldd	r25, Y+38	; 0x26
    5402:	20 e0       	ldi	r18, 0x00	; 0
    5404:	3f ef       	ldi	r19, 0xFF	; 255
    5406:	4f e7       	ldi	r20, 0x7F	; 127
    5408:	57 e4       	ldi	r21, 0x47	; 71
    540a:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    540e:	18 16       	cp	r1, r24
    5410:	4c f5       	brge	.+82     	; 0x5464 <arenaUturn+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5412:	6f a1       	ldd	r22, Y+39	; 0x27
    5414:	78 a5       	ldd	r23, Y+40	; 0x28
    5416:	89 a5       	ldd	r24, Y+41	; 0x29
    5418:	9a a5       	ldd	r25, Y+42	; 0x2a
    541a:	20 e0       	ldi	r18, 0x00	; 0
    541c:	30 e0       	ldi	r19, 0x00	; 0
    541e:	40 e2       	ldi	r20, 0x20	; 32
    5420:	51 e4       	ldi	r21, 0x41	; 65
    5422:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    5426:	dc 01       	movw	r26, r24
    5428:	cb 01       	movw	r24, r22
    542a:	bc 01       	movw	r22, r24
    542c:	cd 01       	movw	r24, r26
    542e:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    5432:	dc 01       	movw	r26, r24
    5434:	cb 01       	movw	r24, r22
    5436:	9a a3       	std	Y+34, r25	; 0x22
    5438:	89 a3       	std	Y+33, r24	; 0x21
    543a:	0f c0       	rjmp	.+30     	; 0x545a <arenaUturn+0xd2>
    543c:	80 e7       	ldi	r24, 0x70	; 112
    543e:	91 e0       	ldi	r25, 0x01	; 1
    5440:	98 a3       	std	Y+32, r25	; 0x20
    5442:	8f 8f       	std	Y+31, r24	; 0x1f
    5444:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5446:	98 a1       	ldd	r25, Y+32	; 0x20
    5448:	01 97       	sbiw	r24, 0x01	; 1
    544a:	f1 f7       	brne	.-4      	; 0x5448 <arenaUturn+0xc0>
    544c:	98 a3       	std	Y+32, r25	; 0x20
    544e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5450:	89 a1       	ldd	r24, Y+33	; 0x21
    5452:	9a a1       	ldd	r25, Y+34	; 0x22
    5454:	01 97       	sbiw	r24, 0x01	; 1
    5456:	9a a3       	std	Y+34, r25	; 0x22
    5458:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    545a:	89 a1       	ldd	r24, Y+33	; 0x21
    545c:	9a a1       	ldd	r25, Y+34	; 0x22
    545e:	00 97       	sbiw	r24, 0x00	; 0
    5460:	69 f7       	brne	.-38     	; 0x543c <arenaUturn+0xb4>
    5462:	14 c0       	rjmp	.+40     	; 0x548c <arenaUturn+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5464:	6b a1       	ldd	r22, Y+35	; 0x23
    5466:	7c a1       	ldd	r23, Y+36	; 0x24
    5468:	8d a1       	ldd	r24, Y+37	; 0x25
    546a:	9e a1       	ldd	r25, Y+38	; 0x26
    546c:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    5470:	dc 01       	movw	r26, r24
    5472:	cb 01       	movw	r24, r22
    5474:	9a a3       	std	Y+34, r25	; 0x22
    5476:	89 a3       	std	Y+33, r24	; 0x21
    5478:	89 a1       	ldd	r24, Y+33	; 0x21
    547a:	9a a1       	ldd	r25, Y+34	; 0x22
    547c:	9e 8f       	std	Y+30, r25	; 0x1e
    547e:	8d 8f       	std	Y+29, r24	; 0x1d
    5480:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5482:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5484:	01 97       	sbiw	r24, 0x01	; 1
    5486:	f1 f7       	brne	.-4      	; 0x5484 <arenaUturn+0xfc>
    5488:	9e 8f       	std	Y+30, r25	; 0x1e
    548a:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(100);

    velocity(forwardLeftSpeed - 20, forwardRightSpeed - 20);
    548c:	80 ea       	ldi	r24, 0xA0	; 160
    548e:	60 ea       	ldi	r22, 0xA0	; 160
    5490:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    right();
    5494:	0e 94 99 03 	call	0x732	; 0x732 <right>
    5498:	80 e0       	ldi	r24, 0x00	; 0
    549a:	90 e8       	ldi	r25, 0x80	; 128
    549c:	a9 e0       	ldi	r26, 0x09	; 9
    549e:	b5 e4       	ldi	r27, 0x45	; 69
    54a0:	89 8f       	std	Y+25, r24	; 0x19
    54a2:	9a 8f       	std	Y+26, r25	; 0x1a
    54a4:	ab 8f       	std	Y+27, r26	; 0x1b
    54a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54a8:	69 8d       	ldd	r22, Y+25	; 0x19
    54aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    54ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    54ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    54b0:	26 e6       	ldi	r18, 0x66	; 102
    54b2:	36 e6       	ldi	r19, 0x66	; 102
    54b4:	46 e6       	ldi	r20, 0x66	; 102
    54b6:	55 e4       	ldi	r21, 0x45	; 69
    54b8:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    54bc:	dc 01       	movw	r26, r24
    54be:	cb 01       	movw	r24, r22
    54c0:	8d 8b       	std	Y+21, r24	; 0x15
    54c2:	9e 8b       	std	Y+22, r25	; 0x16
    54c4:	af 8b       	std	Y+23, r26	; 0x17
    54c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    54c8:	6d 89       	ldd	r22, Y+21	; 0x15
    54ca:	7e 89       	ldd	r23, Y+22	; 0x16
    54cc:	8f 89       	ldd	r24, Y+23	; 0x17
    54ce:	98 8d       	ldd	r25, Y+24	; 0x18
    54d0:	20 e0       	ldi	r18, 0x00	; 0
    54d2:	30 e0       	ldi	r19, 0x00	; 0
    54d4:	40 e8       	ldi	r20, 0x80	; 128
    54d6:	5f e3       	ldi	r21, 0x3F	; 63
    54d8:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    54dc:	88 23       	and	r24, r24
    54de:	2c f4       	brge	.+10     	; 0x54ea <arenaUturn+0x162>
		__ticks = 1;
    54e0:	81 e0       	ldi	r24, 0x01	; 1
    54e2:	90 e0       	ldi	r25, 0x00	; 0
    54e4:	9c 8b       	std	Y+20, r25	; 0x14
    54e6:	8b 8b       	std	Y+19, r24	; 0x13
    54e8:	3f c0       	rjmp	.+126    	; 0x5568 <arenaUturn+0x1e0>
	else if (__tmp > 65535)
    54ea:	6d 89       	ldd	r22, Y+21	; 0x15
    54ec:	7e 89       	ldd	r23, Y+22	; 0x16
    54ee:	8f 89       	ldd	r24, Y+23	; 0x17
    54f0:	98 8d       	ldd	r25, Y+24	; 0x18
    54f2:	20 e0       	ldi	r18, 0x00	; 0
    54f4:	3f ef       	ldi	r19, 0xFF	; 255
    54f6:	4f e7       	ldi	r20, 0x7F	; 127
    54f8:	57 e4       	ldi	r21, 0x47	; 71
    54fa:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    54fe:	18 16       	cp	r1, r24
    5500:	4c f5       	brge	.+82     	; 0x5554 <arenaUturn+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5502:	69 8d       	ldd	r22, Y+25	; 0x19
    5504:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5506:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5508:	9c 8d       	ldd	r25, Y+28	; 0x1c
    550a:	20 e0       	ldi	r18, 0x00	; 0
    550c:	30 e0       	ldi	r19, 0x00	; 0
    550e:	40 e2       	ldi	r20, 0x20	; 32
    5510:	51 e4       	ldi	r21, 0x41	; 65
    5512:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    5516:	dc 01       	movw	r26, r24
    5518:	cb 01       	movw	r24, r22
    551a:	bc 01       	movw	r22, r24
    551c:	cd 01       	movw	r24, r26
    551e:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    5522:	dc 01       	movw	r26, r24
    5524:	cb 01       	movw	r24, r22
    5526:	9c 8b       	std	Y+20, r25	; 0x14
    5528:	8b 8b       	std	Y+19, r24	; 0x13
    552a:	0f c0       	rjmp	.+30     	; 0x554a <arenaUturn+0x1c2>
    552c:	80 e7       	ldi	r24, 0x70	; 112
    552e:	91 e0       	ldi	r25, 0x01	; 1
    5530:	9a 8b       	std	Y+18, r25	; 0x12
    5532:	89 8b       	std	Y+17, r24	; 0x11
    5534:	89 89       	ldd	r24, Y+17	; 0x11
    5536:	9a 89       	ldd	r25, Y+18	; 0x12
    5538:	01 97       	sbiw	r24, 0x01	; 1
    553a:	f1 f7       	brne	.-4      	; 0x5538 <arenaUturn+0x1b0>
    553c:	9a 8b       	std	Y+18, r25	; 0x12
    553e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5540:	8b 89       	ldd	r24, Y+19	; 0x13
    5542:	9c 89       	ldd	r25, Y+20	; 0x14
    5544:	01 97       	sbiw	r24, 0x01	; 1
    5546:	9c 8b       	std	Y+20, r25	; 0x14
    5548:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    554a:	8b 89       	ldd	r24, Y+19	; 0x13
    554c:	9c 89       	ldd	r25, Y+20	; 0x14
    554e:	00 97       	sbiw	r24, 0x00	; 0
    5550:	69 f7       	brne	.-38     	; 0x552c <arenaUturn+0x1a4>
    5552:	14 c0       	rjmp	.+40     	; 0x557c <arenaUturn+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5554:	6d 89       	ldd	r22, Y+21	; 0x15
    5556:	7e 89       	ldd	r23, Y+22	; 0x16
    5558:	8f 89       	ldd	r24, Y+23	; 0x17
    555a:	98 8d       	ldd	r25, Y+24	; 0x18
    555c:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    5560:	dc 01       	movw	r26, r24
    5562:	cb 01       	movw	r24, r22
    5564:	9c 8b       	std	Y+20, r25	; 0x14
    5566:	8b 8b       	std	Y+19, r24	; 0x13
    5568:	8b 89       	ldd	r24, Y+19	; 0x13
    556a:	9c 89       	ldd	r25, Y+20	; 0x14
    556c:	98 8b       	std	Y+16, r25	; 0x10
    556e:	8f 87       	std	Y+15, r24	; 0x0f
    5570:	8f 85       	ldd	r24, Y+15	; 0x0f
    5572:	98 89       	ldd	r25, Y+16	; 0x10
    5574:	01 97       	sbiw	r24, 0x01	; 1
    5576:	f1 f7       	brne	.-4      	; 0x5574 <arenaUturn+0x1ec>
    5578:	98 8b       	std	Y+16, r25	; 0x10
    557a:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2200);

    centre = ADC_Conversion(2);
    557c:	82 e0       	ldi	r24, 0x02	; 2
    557e:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    5582:	88 2f       	mov	r24, r24
    5584:	90 e0       	ldi	r25, 0x00	; 0
    5586:	90 93 2f 03 	sts	0x032F, r25
    558a:	80 93 2e 03 	sts	0x032E, r24
    558e:	09 c0       	rjmp	.+18     	; 0x55a2 <arenaUturn+0x21a>

    while(centre < x)
    {
        centre = ADC_Conversion(2);
    5590:	82 e0       	ldi	r24, 0x02	; 2
    5592:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    5596:	88 2f       	mov	r24, r24
    5598:	90 e0       	ldi	r25, 0x00	; 0
    559a:	90 93 2f 03 	sts	0x032F, r25
    559e:	80 93 2e 03 	sts	0x032E, r24
    right();
    _delay_ms(2200);

    centre = ADC_Conversion(2);

    while(centre < x)
    55a2:	20 91 2e 03 	lds	r18, 0x032E
    55a6:	30 91 2f 03 	lds	r19, 0x032F
    55aa:	80 91 02 02 	lds	r24, 0x0202
    55ae:	90 91 03 02 	lds	r25, 0x0203
    55b2:	28 17       	cp	r18, r24
    55b4:	39 07       	cpc	r19, r25
    55b6:	64 f3       	brlt	.-40     	; 0x5590 <arenaUturn+0x208>
    {
        centre = ADC_Conversion(2);
    }

    stop();
    55b8:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    55bc:	80 e0       	ldi	r24, 0x00	; 0
    55be:	90 e0       	ldi	r25, 0x00	; 0
    55c0:	a8 ec       	ldi	r26, 0xC8	; 200
    55c2:	b2 e4       	ldi	r27, 0x42	; 66
    55c4:	8b 87       	std	Y+11, r24	; 0x0b
    55c6:	9c 87       	std	Y+12, r25	; 0x0c
    55c8:	ad 87       	std	Y+13, r26	; 0x0d
    55ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    55ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    55d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    55d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    55d4:	26 e6       	ldi	r18, 0x66	; 102
    55d6:	36 e6       	ldi	r19, 0x66	; 102
    55d8:	46 e6       	ldi	r20, 0x66	; 102
    55da:	55 e4       	ldi	r21, 0x45	; 69
    55dc:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    55e0:	dc 01       	movw	r26, r24
    55e2:	cb 01       	movw	r24, r22
    55e4:	8f 83       	std	Y+7, r24	; 0x07
    55e6:	98 87       	std	Y+8, r25	; 0x08
    55e8:	a9 87       	std	Y+9, r26	; 0x09
    55ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    55ec:	6f 81       	ldd	r22, Y+7	; 0x07
    55ee:	78 85       	ldd	r23, Y+8	; 0x08
    55f0:	89 85       	ldd	r24, Y+9	; 0x09
    55f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    55f4:	20 e0       	ldi	r18, 0x00	; 0
    55f6:	30 e0       	ldi	r19, 0x00	; 0
    55f8:	40 e8       	ldi	r20, 0x80	; 128
    55fa:	5f e3       	ldi	r21, 0x3F	; 63
    55fc:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    5600:	88 23       	and	r24, r24
    5602:	2c f4       	brge	.+10     	; 0x560e <arenaUturn+0x286>
		__ticks = 1;
    5604:	81 e0       	ldi	r24, 0x01	; 1
    5606:	90 e0       	ldi	r25, 0x00	; 0
    5608:	9e 83       	std	Y+6, r25	; 0x06
    560a:	8d 83       	std	Y+5, r24	; 0x05
    560c:	3f c0       	rjmp	.+126    	; 0x568c <arenaUturn+0x304>
	else if (__tmp > 65535)
    560e:	6f 81       	ldd	r22, Y+7	; 0x07
    5610:	78 85       	ldd	r23, Y+8	; 0x08
    5612:	89 85       	ldd	r24, Y+9	; 0x09
    5614:	9a 85       	ldd	r25, Y+10	; 0x0a
    5616:	20 e0       	ldi	r18, 0x00	; 0
    5618:	3f ef       	ldi	r19, 0xFF	; 255
    561a:	4f e7       	ldi	r20, 0x7F	; 127
    561c:	57 e4       	ldi	r21, 0x47	; 71
    561e:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    5622:	18 16       	cp	r1, r24
    5624:	4c f5       	brge	.+82     	; 0x5678 <arenaUturn+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5626:	6b 85       	ldd	r22, Y+11	; 0x0b
    5628:	7c 85       	ldd	r23, Y+12	; 0x0c
    562a:	8d 85       	ldd	r24, Y+13	; 0x0d
    562c:	9e 85       	ldd	r25, Y+14	; 0x0e
    562e:	20 e0       	ldi	r18, 0x00	; 0
    5630:	30 e0       	ldi	r19, 0x00	; 0
    5632:	40 e2       	ldi	r20, 0x20	; 32
    5634:	51 e4       	ldi	r21, 0x41	; 65
    5636:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    563a:	dc 01       	movw	r26, r24
    563c:	cb 01       	movw	r24, r22
    563e:	bc 01       	movw	r22, r24
    5640:	cd 01       	movw	r24, r26
    5642:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    5646:	dc 01       	movw	r26, r24
    5648:	cb 01       	movw	r24, r22
    564a:	9e 83       	std	Y+6, r25	; 0x06
    564c:	8d 83       	std	Y+5, r24	; 0x05
    564e:	0f c0       	rjmp	.+30     	; 0x566e <arenaUturn+0x2e6>
    5650:	80 e7       	ldi	r24, 0x70	; 112
    5652:	91 e0       	ldi	r25, 0x01	; 1
    5654:	9c 83       	std	Y+4, r25	; 0x04
    5656:	8b 83       	std	Y+3, r24	; 0x03
    5658:	8b 81       	ldd	r24, Y+3	; 0x03
    565a:	9c 81       	ldd	r25, Y+4	; 0x04
    565c:	01 97       	sbiw	r24, 0x01	; 1
    565e:	f1 f7       	brne	.-4      	; 0x565c <arenaUturn+0x2d4>
    5660:	9c 83       	std	Y+4, r25	; 0x04
    5662:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5664:	8d 81       	ldd	r24, Y+5	; 0x05
    5666:	9e 81       	ldd	r25, Y+6	; 0x06
    5668:	01 97       	sbiw	r24, 0x01	; 1
    566a:	9e 83       	std	Y+6, r25	; 0x06
    566c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    566e:	8d 81       	ldd	r24, Y+5	; 0x05
    5670:	9e 81       	ldd	r25, Y+6	; 0x06
    5672:	00 97       	sbiw	r24, 0x00	; 0
    5674:	69 f7       	brne	.-38     	; 0x5650 <arenaUturn+0x2c8>
    5676:	14 c0       	rjmp	.+40     	; 0x56a0 <arenaUturn+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5678:	6f 81       	ldd	r22, Y+7	; 0x07
    567a:	78 85       	ldd	r23, Y+8	; 0x08
    567c:	89 85       	ldd	r24, Y+9	; 0x09
    567e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5680:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    5684:	dc 01       	movw	r26, r24
    5686:	cb 01       	movw	r24, r22
    5688:	9e 83       	std	Y+6, r25	; 0x06
    568a:	8d 83       	std	Y+5, r24	; 0x05
    568c:	8d 81       	ldd	r24, Y+5	; 0x05
    568e:	9e 81       	ldd	r25, Y+6	; 0x06
    5690:	9a 83       	std	Y+2, r25	; 0x02
    5692:	89 83       	std	Y+1, r24	; 0x01
    5694:	89 81       	ldd	r24, Y+1	; 0x01
    5696:	9a 81       	ldd	r25, Y+2	; 0x02
    5698:	01 97       	sbiw	r24, 0x01	; 1
    569a:	f1 f7       	brne	.-4      	; 0x5698 <arenaUturn+0x310>
    569c:	9a 83       	std	Y+2, r25	; 0x02
    569e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);

    nodeMissTracker = 25;
    56a0:	89 e1       	ldi	r24, 0x19	; 25
    56a2:	90 e0       	ldi	r25, 0x00	; 0
    56a4:	90 93 19 03 	sts	0x0319, r25
    56a8:	80 93 18 03 	sts	0x0318, r24

    nodeMissEnable = 1;
    56ac:	81 e0       	ldi	r24, 0x01	; 1
    56ae:	90 e0       	ldi	r25, 0x00	; 0
    56b0:	90 93 01 02 	sts	0x0201, r25
    56b4:	80 93 00 02 	sts	0x0200, r24
}
    56b8:	aa 96       	adiw	r28, 0x2a	; 42
    56ba:	0f b6       	in	r0, 0x3f	; 63
    56bc:	f8 94       	cli
    56be:	de bf       	out	0x3e, r29	; 62
    56c0:	0f be       	out	0x3f, r0	; 63
    56c2:	cd bf       	out	0x3d, r28	; 61
    56c4:	cf 91       	pop	r28
    56c6:	df 91       	pop	r29
    56c8:	08 95       	ret

000056ca <arenaStraight>:

void arenaStraight(void)
{
    56ca:	df 93       	push	r29
    56cc:	cf 93       	push	r28
    56ce:	cd b7       	in	r28, 0x3d	; 61
    56d0:	de b7       	in	r29, 0x3e	; 62
    velocity(forwardLeftSpeed - 20, forwardRightSpeed - 20);
    56d2:	80 ea       	ldi	r24, 0xA0	; 160
    56d4:	60 ea       	ldi	r22, 0xA0	; 160
    56d6:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
}
    56da:	cf 91       	pop	r28
    56dc:	df 91       	pop	r29
    56de:	08 95       	ret

000056e0 <getError>:

int getError(void)
{
    56e0:	df 93       	push	r29
    56e2:	cf 93       	push	r28
    56e4:	0f 92       	push	r0
    56e6:	0f 92       	push	r0
    56e8:	cd b7       	in	r28, 0x3d	; 61
    56ea:	de b7       	in	r29, 0x3e	; 62
    int error;
    centre = ADC_Conversion(2);
    56ec:	82 e0       	ldi	r24, 0x02	; 2
    56ee:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    56f2:	88 2f       	mov	r24, r24
    56f4:	90 e0       	ldi	r25, 0x00	; 0
    56f6:	90 93 2f 03 	sts	0x032F, r25
    56fa:	80 93 2e 03 	sts	0x032E, r24
    sensorLeft = ADC_Conversion(3);
    56fe:	83 e0       	ldi	r24, 0x03	; 3
    5700:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    5704:	88 2f       	mov	r24, r24
    5706:	90 e0       	ldi	r25, 0x00	; 0
    5708:	90 93 29 03 	sts	0x0329, r25
    570c:	80 93 28 03 	sts	0x0328, r24
    sensorRight = ADC_Conversion(1);
    5710:	81 e0       	ldi	r24, 0x01	; 1
    5712:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    5716:	88 2f       	mov	r24, r24
    5718:	90 e0       	ldi	r25, 0x00	; 0
    571a:	90 93 41 03 	sts	0x0341, r25
    571e:	80 93 40 03 	sts	0x0340, r24

    lcd_print(2, 1, sensorLeft, 3);
    5722:	80 91 28 03 	lds	r24, 0x0328
    5726:	90 91 29 03 	lds	r25, 0x0329
    572a:	9c 01       	movw	r18, r24
    572c:	82 e0       	ldi	r24, 0x02	; 2
    572e:	61 e0       	ldi	r22, 0x01	; 1
    5730:	a9 01       	movw	r20, r18
    5732:	23 e0       	ldi	r18, 0x03	; 3
    5734:	30 e0       	ldi	r19, 0x00	; 0
    5736:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcd_print>
    lcd_print(2, 5, centre, 3);
    573a:	80 91 2e 03 	lds	r24, 0x032E
    573e:	90 91 2f 03 	lds	r25, 0x032F
    5742:	9c 01       	movw	r18, r24
    5744:	82 e0       	ldi	r24, 0x02	; 2
    5746:	65 e0       	ldi	r22, 0x05	; 5
    5748:	a9 01       	movw	r20, r18
    574a:	23 e0       	ldi	r18, 0x03	; 3
    574c:	30 e0       	ldi	r19, 0x00	; 0
    574e:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcd_print>
    lcd_print(2, 9, sensorRight, 3);
    5752:	80 91 40 03 	lds	r24, 0x0340
    5756:	90 91 41 03 	lds	r25, 0x0341
    575a:	9c 01       	movw	r18, r24
    575c:	82 e0       	ldi	r24, 0x02	; 2
    575e:	69 e0       	ldi	r22, 0x09	; 9
    5760:	a9 01       	movw	r20, r18
    5762:	23 e0       	ldi	r18, 0x03	; 3
    5764:	30 e0       	ldi	r19, 0x00	; 0
    5766:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcd_print>
    else
        error = -100;

*/

    if(errorFlag == 1)
    576a:	80 91 26 03 	lds	r24, 0x0326
    576e:	90 91 27 03 	lds	r25, 0x0327
    5772:	81 30       	cpi	r24, 0x01	; 1
    5774:	91 05       	cpc	r25, r1
    5776:	19 f5       	brne	.+70     	; 0x57be <getError+0xde>
    {
        if((sensorLeft > 13 && centre > 30) || (sensorRight > 13 && centre > 30))
    5778:	80 91 28 03 	lds	r24, 0x0328
    577c:	90 91 29 03 	lds	r25, 0x0329
    5780:	8e 30       	cpi	r24, 0x0E	; 14
    5782:	91 05       	cpc	r25, r1
    5784:	3c f0       	brlt	.+14     	; 0x5794 <getError+0xb4>
    5786:	80 91 2e 03 	lds	r24, 0x032E
    578a:	90 91 2f 03 	lds	r25, 0x032F
    578e:	8f 31       	cpi	r24, 0x1F	; 31
    5790:	91 05       	cpc	r25, r1
    5792:	84 f4       	brge	.+32     	; 0x57b4 <getError+0xd4>
    5794:	80 91 40 03 	lds	r24, 0x0340
    5798:	90 91 41 03 	lds	r25, 0x0341
    579c:	8e 30       	cpi	r24, 0x0E	; 14
    579e:	91 05       	cpc	r25, r1
    57a0:	0c f4       	brge	.+2      	; 0x57a4 <getError+0xc4>
    57a2:	4d c0       	rjmp	.+154    	; 0x583e <getError+0x15e>
    57a4:	80 91 2e 03 	lds	r24, 0x032E
    57a8:	90 91 2f 03 	lds	r25, 0x032F
    57ac:	8f 31       	cpi	r24, 0x1F	; 31
    57ae:	91 05       	cpc	r25, r1
    57b0:	0c f4       	brge	.+2      	; 0x57b4 <getError+0xd4>
    57b2:	45 c0       	rjmp	.+138    	; 0x583e <getError+0x15e>
            error = 100;
    57b4:	84 e6       	ldi	r24, 0x64	; 100
    57b6:	90 e0       	ldi	r25, 0x00	; 0
    57b8:	9a 83       	std	Y+2, r25	; 0x02
    57ba:	89 83       	std	Y+1, r24	; 0x01
    57bc:	40 c0       	rjmp	.+128    	; 0x583e <getError+0x15e>
    }


    else if((sensorLeft > 11 && sensorRight > 11) && errorFlag != 1)
    57be:	80 91 28 03 	lds	r24, 0x0328
    57c2:	90 91 29 03 	lds	r25, 0x0329
    57c6:	8c 30       	cpi	r24, 0x0C	; 12
    57c8:	91 05       	cpc	r25, r1
    57ca:	9c f0       	brlt	.+38     	; 0x57f2 <getError+0x112>
    57cc:	80 91 40 03 	lds	r24, 0x0340
    57d0:	90 91 41 03 	lds	r25, 0x0341
    57d4:	8c 30       	cpi	r24, 0x0C	; 12
    57d6:	91 05       	cpc	r25, r1
    57d8:	64 f0       	brlt	.+24     	; 0x57f2 <getError+0x112>
    57da:	80 91 26 03 	lds	r24, 0x0326
    57de:	90 91 27 03 	lds	r25, 0x0327
    57e2:	81 30       	cpi	r24, 0x01	; 1
    57e4:	91 05       	cpc	r25, r1
    57e6:	29 f0       	breq	.+10     	; 0x57f2 <getError+0x112>
        error = 100;
    57e8:	84 e6       	ldi	r24, 0x64	; 100
    57ea:	90 e0       	ldi	r25, 0x00	; 0
    57ec:	9a 83       	std	Y+2, r25	; 0x02
    57ee:	89 83       	std	Y+1, r24	; 0x01
    57f0:	26 c0       	rjmp	.+76     	; 0x583e <getError+0x15e>

    else if(centre > 15)
    57f2:	80 91 2e 03 	lds	r24, 0x032E
    57f6:	90 91 2f 03 	lds	r25, 0x032F
    57fa:	80 31       	cpi	r24, 0x10	; 16
    57fc:	91 05       	cpc	r25, r1
    57fe:	1c f0       	brlt	.+6      	; 0x5806 <getError+0x126>
        error = 0;
    5800:	1a 82       	std	Y+2, r1	; 0x02
    5802:	19 82       	std	Y+1, r1	; 0x01
    5804:	1c c0       	rjmp	.+56     	; 0x583e <getError+0x15e>

    else if(sensorRight > 15)
    5806:	80 91 40 03 	lds	r24, 0x0340
    580a:	90 91 41 03 	lds	r25, 0x0341
    580e:	80 31       	cpi	r24, 0x10	; 16
    5810:	91 05       	cpc	r25, r1
    5812:	2c f0       	brlt	.+10     	; 0x581e <getError+0x13e>
        error = 1;
    5814:	81 e0       	ldi	r24, 0x01	; 1
    5816:	90 e0       	ldi	r25, 0x00	; 0
    5818:	9a 83       	std	Y+2, r25	; 0x02
    581a:	89 83       	std	Y+1, r24	; 0x01
    581c:	10 c0       	rjmp	.+32     	; 0x583e <getError+0x15e>

    else if(sensorLeft > 15)
    581e:	80 91 28 03 	lds	r24, 0x0328
    5822:	90 91 29 03 	lds	r25, 0x0329
    5826:	80 31       	cpi	r24, 0x10	; 16
    5828:	91 05       	cpc	r25, r1
    582a:	2c f0       	brlt	.+10     	; 0x5836 <getError+0x156>
        error = -1;
    582c:	8f ef       	ldi	r24, 0xFF	; 255
    582e:	9f ef       	ldi	r25, 0xFF	; 255
    5830:	9a 83       	std	Y+2, r25	; 0x02
    5832:	89 83       	std	Y+1, r24	; 0x01
    5834:	04 c0       	rjmp	.+8      	; 0x583e <getError+0x15e>

    else
        error = -100;
    5836:	8c e9       	ldi	r24, 0x9C	; 156
    5838:	9f ef       	ldi	r25, 0xFF	; 255
    583a:	9a 83       	std	Y+2, r25	; 0x02
    583c:	89 83       	std	Y+1, r24	; 0x01

    return error;
    583e:	89 81       	ldd	r24, Y+1	; 0x01
    5840:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5842:	0f 90       	pop	r0
    5844:	0f 90       	pop	r0
    5846:	cf 91       	pop	r28
    5848:	df 91       	pop	r29
    584a:	08 95       	ret

0000584c <checkForCube>:

int checkForCube(void)
{
    584c:	df 93       	push	r29
    584e:	cf 93       	push	r28
    5850:	cd b7       	in	r28, 0x3d	; 61
    5852:	de b7       	in	r29, 0x3e	; 62
    5854:	e0 97       	sbiw	r28, 0x30	; 48
    5856:	0f b6       	in	r0, 0x3f	; 63
    5858:	f8 94       	cli
    585a:	de bf       	out	0x3e, r29	; 62
    585c:	0f be       	out	0x3f, r0	; 63
    585e:	cd bf       	out	0x3d, r28	; 61
    nodeMissEnable = 0;
    5860:	10 92 01 02 	sts	0x0201, r1
    5864:	10 92 00 02 	sts	0x0200, r1

    int value = ADC_Conversion(11);
    5868:	8b e0       	ldi	r24, 0x0B	; 11
    586a:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    586e:	88 2f       	mov	r24, r24
    5870:	90 e0       	ldi	r25, 0x00	; 0
    5872:	9e a7       	std	Y+46, r25	; 0x2e
    5874:	8d a7       	std	Y+45, r24	; 0x2d
    int max = 0;
    5876:	1c a6       	std	Y+44, r1	; 0x2c
    5878:	1b a6       	std	Y+43, r1	; 0x2b

    if(value > 100)
    587a:	8d a5       	ldd	r24, Y+45	; 0x2d
    587c:	9e a5       	ldd	r25, Y+46	; 0x2e
    587e:	85 36       	cpi	r24, 0x65	; 101
    5880:	91 05       	cpc	r25, r1
    5882:	2c f0       	brlt	.+10     	; 0x588e <checkForCube+0x42>
        return 1;
    5884:	81 e0       	ldi	r24, 0x01	; 1
    5886:	90 e0       	ldi	r25, 0x00	; 0
    5888:	98 ab       	std	Y+48, r25	; 0x30
    588a:	8f a7       	std	Y+47, r24	; 0x2f
    588c:	1c c2       	rjmp	.+1080   	; 0x5cc6 <checkForCube+0x47a>

    else if(value > 40)
    588e:	8d a5       	ldd	r24, Y+45	; 0x2d
    5890:	9e a5       	ldd	r25, Y+46	; 0x2e
    5892:	89 32       	cpi	r24, 0x29	; 41
    5894:	91 05       	cpc	r25, r1
    5896:	2c f0       	brlt	.+10     	; 0x58a2 <checkForCube+0x56>
        return 2;
    5898:	82 e0       	ldi	r24, 0x02	; 2
    589a:	90 e0       	ldi	r25, 0x00	; 0
    589c:	98 ab       	std	Y+48, r25	; 0x30
    589e:	8f a7       	std	Y+47, r24	; 0x2f
    58a0:	12 c2       	rjmp	.+1060   	; 0x5cc6 <checkForCube+0x47a>



    else
    {
        velocity(forwardLeftSpeed, forwardRightSpeed);
    58a2:	84 eb       	ldi	r24, 0xB4	; 180
    58a4:	64 eb       	ldi	r22, 0xB4	; 180
    58a6:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>

        sensorLeft = ADC_Conversion(3);
    58aa:	83 e0       	ldi	r24, 0x03	; 3
    58ac:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    58b0:	88 2f       	mov	r24, r24
    58b2:	90 e0       	ldi	r25, 0x00	; 0
    58b4:	90 93 29 03 	sts	0x0329, r25
    58b8:	80 93 28 03 	sts	0x0328, r24
        right();
    58bc:	0e 94 99 03 	call	0x732	; 0x732 <right>
    58c0:	1b c0       	rjmp	.+54     	; 0x58f8 <checkForCube+0xac>
        while(sensorLeft < 20)
        {
            value = ADC_Conversion(11);
    58c2:	8b e0       	ldi	r24, 0x0B	; 11
    58c4:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    58c8:	88 2f       	mov	r24, r24
    58ca:	90 e0       	ldi	r25, 0x00	; 0
    58cc:	9e a7       	std	Y+46, r25	; 0x2e
    58ce:	8d a7       	std	Y+45, r24	; 0x2d
            if(value > max)
    58d0:	2d a5       	ldd	r18, Y+45	; 0x2d
    58d2:	3e a5       	ldd	r19, Y+46	; 0x2e
    58d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    58d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    58d8:	82 17       	cp	r24, r18
    58da:	93 07       	cpc	r25, r19
    58dc:	24 f4       	brge	.+8      	; 0x58e6 <checkForCube+0x9a>
                max = value;
    58de:	8d a5       	ldd	r24, Y+45	; 0x2d
    58e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    58e2:	9c a7       	std	Y+44, r25	; 0x2c
    58e4:	8b a7       	std	Y+43, r24	; 0x2b
            sensorLeft = ADC_Conversion(3);
    58e6:	83 e0       	ldi	r24, 0x03	; 3
    58e8:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    58ec:	88 2f       	mov	r24, r24
    58ee:	90 e0       	ldi	r25, 0x00	; 0
    58f0:	90 93 29 03 	sts	0x0329, r25
    58f4:	80 93 28 03 	sts	0x0328, r24
    {
        velocity(forwardLeftSpeed, forwardRightSpeed);

        sensorLeft = ADC_Conversion(3);
        right();
        while(sensorLeft < 20)
    58f8:	80 91 28 03 	lds	r24, 0x0328
    58fc:	90 91 29 03 	lds	r25, 0x0329
    5900:	84 31       	cpi	r24, 0x14	; 20
    5902:	91 05       	cpc	r25, r1
    5904:	f4 f2       	brlt	.-68     	; 0x58c2 <checkForCube+0x76>
            if(value > max)
                max = value;
            sensorLeft = ADC_Conversion(3);
        }

        stop();
    5906:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    590a:	80 e0       	ldi	r24, 0x00	; 0
    590c:	90 e0       	ldi	r25, 0x00	; 0
    590e:	a8 ec       	ldi	r26, 0xC8	; 200
    5910:	b2 e4       	ldi	r27, 0x42	; 66
    5912:	8f a3       	std	Y+39, r24	; 0x27
    5914:	98 a7       	std	Y+40, r25	; 0x28
    5916:	a9 a7       	std	Y+41, r26	; 0x29
    5918:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    591a:	6f a1       	ldd	r22, Y+39	; 0x27
    591c:	78 a5       	ldd	r23, Y+40	; 0x28
    591e:	89 a5       	ldd	r24, Y+41	; 0x29
    5920:	9a a5       	ldd	r25, Y+42	; 0x2a
    5922:	26 e6       	ldi	r18, 0x66	; 102
    5924:	36 e6       	ldi	r19, 0x66	; 102
    5926:	46 e6       	ldi	r20, 0x66	; 102
    5928:	55 e4       	ldi	r21, 0x45	; 69
    592a:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    592e:	dc 01       	movw	r26, r24
    5930:	cb 01       	movw	r24, r22
    5932:	8b a3       	std	Y+35, r24	; 0x23
    5934:	9c a3       	std	Y+36, r25	; 0x24
    5936:	ad a3       	std	Y+37, r26	; 0x25
    5938:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    593a:	6b a1       	ldd	r22, Y+35	; 0x23
    593c:	7c a1       	ldd	r23, Y+36	; 0x24
    593e:	8d a1       	ldd	r24, Y+37	; 0x25
    5940:	9e a1       	ldd	r25, Y+38	; 0x26
    5942:	20 e0       	ldi	r18, 0x00	; 0
    5944:	30 e0       	ldi	r19, 0x00	; 0
    5946:	40 e8       	ldi	r20, 0x80	; 128
    5948:	5f e3       	ldi	r21, 0x3F	; 63
    594a:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    594e:	88 23       	and	r24, r24
    5950:	2c f4       	brge	.+10     	; 0x595c <checkForCube+0x110>
		__ticks = 1;
    5952:	81 e0       	ldi	r24, 0x01	; 1
    5954:	90 e0       	ldi	r25, 0x00	; 0
    5956:	9a a3       	std	Y+34, r25	; 0x22
    5958:	89 a3       	std	Y+33, r24	; 0x21
    595a:	3f c0       	rjmp	.+126    	; 0x59da <checkForCube+0x18e>
	else if (__tmp > 65535)
    595c:	6b a1       	ldd	r22, Y+35	; 0x23
    595e:	7c a1       	ldd	r23, Y+36	; 0x24
    5960:	8d a1       	ldd	r24, Y+37	; 0x25
    5962:	9e a1       	ldd	r25, Y+38	; 0x26
    5964:	20 e0       	ldi	r18, 0x00	; 0
    5966:	3f ef       	ldi	r19, 0xFF	; 255
    5968:	4f e7       	ldi	r20, 0x7F	; 127
    596a:	57 e4       	ldi	r21, 0x47	; 71
    596c:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    5970:	18 16       	cp	r1, r24
    5972:	4c f5       	brge	.+82     	; 0x59c6 <checkForCube+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5974:	6f a1       	ldd	r22, Y+39	; 0x27
    5976:	78 a5       	ldd	r23, Y+40	; 0x28
    5978:	89 a5       	ldd	r24, Y+41	; 0x29
    597a:	9a a5       	ldd	r25, Y+42	; 0x2a
    597c:	20 e0       	ldi	r18, 0x00	; 0
    597e:	30 e0       	ldi	r19, 0x00	; 0
    5980:	40 e2       	ldi	r20, 0x20	; 32
    5982:	51 e4       	ldi	r21, 0x41	; 65
    5984:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    5988:	dc 01       	movw	r26, r24
    598a:	cb 01       	movw	r24, r22
    598c:	bc 01       	movw	r22, r24
    598e:	cd 01       	movw	r24, r26
    5990:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    5994:	dc 01       	movw	r26, r24
    5996:	cb 01       	movw	r24, r22
    5998:	9a a3       	std	Y+34, r25	; 0x22
    599a:	89 a3       	std	Y+33, r24	; 0x21
    599c:	0f c0       	rjmp	.+30     	; 0x59bc <checkForCube+0x170>
    599e:	80 e7       	ldi	r24, 0x70	; 112
    59a0:	91 e0       	ldi	r25, 0x01	; 1
    59a2:	98 a3       	std	Y+32, r25	; 0x20
    59a4:	8f 8f       	std	Y+31, r24	; 0x1f
    59a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    59a8:	98 a1       	ldd	r25, Y+32	; 0x20
    59aa:	01 97       	sbiw	r24, 0x01	; 1
    59ac:	f1 f7       	brne	.-4      	; 0x59aa <checkForCube+0x15e>
    59ae:	98 a3       	std	Y+32, r25	; 0x20
    59b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59b2:	89 a1       	ldd	r24, Y+33	; 0x21
    59b4:	9a a1       	ldd	r25, Y+34	; 0x22
    59b6:	01 97       	sbiw	r24, 0x01	; 1
    59b8:	9a a3       	std	Y+34, r25	; 0x22
    59ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59bc:	89 a1       	ldd	r24, Y+33	; 0x21
    59be:	9a a1       	ldd	r25, Y+34	; 0x22
    59c0:	00 97       	sbiw	r24, 0x00	; 0
    59c2:	69 f7       	brne	.-38     	; 0x599e <checkForCube+0x152>
    59c4:	14 c0       	rjmp	.+40     	; 0x59ee <checkForCube+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59c6:	6b a1       	ldd	r22, Y+35	; 0x23
    59c8:	7c a1       	ldd	r23, Y+36	; 0x24
    59ca:	8d a1       	ldd	r24, Y+37	; 0x25
    59cc:	9e a1       	ldd	r25, Y+38	; 0x26
    59ce:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    59d2:	dc 01       	movw	r26, r24
    59d4:	cb 01       	movw	r24, r22
    59d6:	9a a3       	std	Y+34, r25	; 0x22
    59d8:	89 a3       	std	Y+33, r24	; 0x21
    59da:	89 a1       	ldd	r24, Y+33	; 0x21
    59dc:	9a a1       	ldd	r25, Y+34	; 0x22
    59de:	9e 8f       	std	Y+30, r25	; 0x1e
    59e0:	8d 8f       	std	Y+29, r24	; 0x1d
    59e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    59e6:	01 97       	sbiw	r24, 0x01	; 1
    59e8:	f1 f7       	brne	.-4      	; 0x59e6 <checkForCube+0x19a>
    59ea:	9e 8f       	std	Y+30, r25	; 0x1e
    59ec:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(100);

        sensorRight = ADC_Conversion(1);
    59ee:	81 e0       	ldi	r24, 0x01	; 1
    59f0:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    59f4:	88 2f       	mov	r24, r24
    59f6:	90 e0       	ldi	r25, 0x00	; 0
    59f8:	90 93 41 03 	sts	0x0341, r25
    59fc:	80 93 40 03 	sts	0x0340, r24
        left();
    5a00:	0e 94 05 03 	call	0x60a	; 0x60a <left>
    5a04:	1b c0       	rjmp	.+54     	; 0x5a3c <checkForCube+0x1f0>
        while(sensorRight < 20)
        {
            value = ADC_Conversion(11);
    5a06:	8b e0       	ldi	r24, 0x0B	; 11
    5a08:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    5a0c:	88 2f       	mov	r24, r24
    5a0e:	90 e0       	ldi	r25, 0x00	; 0
    5a10:	9e a7       	std	Y+46, r25	; 0x2e
    5a12:	8d a7       	std	Y+45, r24	; 0x2d
            if(value > max)
    5a14:	2d a5       	ldd	r18, Y+45	; 0x2d
    5a16:	3e a5       	ldd	r19, Y+46	; 0x2e
    5a18:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a1a:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a1c:	82 17       	cp	r24, r18
    5a1e:	93 07       	cpc	r25, r19
    5a20:	24 f4       	brge	.+8      	; 0x5a2a <checkForCube+0x1de>
                max = value;
    5a22:	8d a5       	ldd	r24, Y+45	; 0x2d
    5a24:	9e a5       	ldd	r25, Y+46	; 0x2e
    5a26:	9c a7       	std	Y+44, r25	; 0x2c
    5a28:	8b a7       	std	Y+43, r24	; 0x2b
            sensorRight = ADC_Conversion(1);
    5a2a:	81 e0       	ldi	r24, 0x01	; 1
    5a2c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    5a30:	88 2f       	mov	r24, r24
    5a32:	90 e0       	ldi	r25, 0x00	; 0
    5a34:	90 93 41 03 	sts	0x0341, r25
    5a38:	80 93 40 03 	sts	0x0340, r24
        stop();
        _delay_ms(100);

        sensorRight = ADC_Conversion(1);
        left();
        while(sensorRight < 20)
    5a3c:	80 91 40 03 	lds	r24, 0x0340
    5a40:	90 91 41 03 	lds	r25, 0x0341
    5a44:	84 31       	cpi	r24, 0x14	; 20
    5a46:	91 05       	cpc	r25, r1
    5a48:	f4 f2       	brlt	.-68     	; 0x5a06 <checkForCube+0x1ba>
            if(value > max)
                max = value;
            sensorRight = ADC_Conversion(1);
        }

        stop();
    5a4a:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    5a4e:	80 e0       	ldi	r24, 0x00	; 0
    5a50:	90 e0       	ldi	r25, 0x00	; 0
    5a52:	a8 ec       	ldi	r26, 0xC8	; 200
    5a54:	b2 e4       	ldi	r27, 0x42	; 66
    5a56:	89 8f       	std	Y+25, r24	; 0x19
    5a58:	9a 8f       	std	Y+26, r25	; 0x1a
    5a5a:	ab 8f       	std	Y+27, r26	; 0x1b
    5a5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a5e:	69 8d       	ldd	r22, Y+25	; 0x19
    5a60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a66:	26 e6       	ldi	r18, 0x66	; 102
    5a68:	36 e6       	ldi	r19, 0x66	; 102
    5a6a:	46 e6       	ldi	r20, 0x66	; 102
    5a6c:	55 e4       	ldi	r21, 0x45	; 69
    5a6e:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    5a72:	dc 01       	movw	r26, r24
    5a74:	cb 01       	movw	r24, r22
    5a76:	8d 8b       	std	Y+21, r24	; 0x15
    5a78:	9e 8b       	std	Y+22, r25	; 0x16
    5a7a:	af 8b       	std	Y+23, r26	; 0x17
    5a7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5a7e:	6d 89       	ldd	r22, Y+21	; 0x15
    5a80:	7e 89       	ldd	r23, Y+22	; 0x16
    5a82:	8f 89       	ldd	r24, Y+23	; 0x17
    5a84:	98 8d       	ldd	r25, Y+24	; 0x18
    5a86:	20 e0       	ldi	r18, 0x00	; 0
    5a88:	30 e0       	ldi	r19, 0x00	; 0
    5a8a:	40 e8       	ldi	r20, 0x80	; 128
    5a8c:	5f e3       	ldi	r21, 0x3F	; 63
    5a8e:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    5a92:	88 23       	and	r24, r24
    5a94:	2c f4       	brge	.+10     	; 0x5aa0 <checkForCube+0x254>
		__ticks = 1;
    5a96:	81 e0       	ldi	r24, 0x01	; 1
    5a98:	90 e0       	ldi	r25, 0x00	; 0
    5a9a:	9c 8b       	std	Y+20, r25	; 0x14
    5a9c:	8b 8b       	std	Y+19, r24	; 0x13
    5a9e:	3f c0       	rjmp	.+126    	; 0x5b1e <checkForCube+0x2d2>
	else if (__tmp > 65535)
    5aa0:	6d 89       	ldd	r22, Y+21	; 0x15
    5aa2:	7e 89       	ldd	r23, Y+22	; 0x16
    5aa4:	8f 89       	ldd	r24, Y+23	; 0x17
    5aa6:	98 8d       	ldd	r25, Y+24	; 0x18
    5aa8:	20 e0       	ldi	r18, 0x00	; 0
    5aaa:	3f ef       	ldi	r19, 0xFF	; 255
    5aac:	4f e7       	ldi	r20, 0x7F	; 127
    5aae:	57 e4       	ldi	r21, 0x47	; 71
    5ab0:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    5ab4:	18 16       	cp	r1, r24
    5ab6:	4c f5       	brge	.+82     	; 0x5b0a <checkForCube+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ab8:	69 8d       	ldd	r22, Y+25	; 0x19
    5aba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5abc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5abe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ac0:	20 e0       	ldi	r18, 0x00	; 0
    5ac2:	30 e0       	ldi	r19, 0x00	; 0
    5ac4:	40 e2       	ldi	r20, 0x20	; 32
    5ac6:	51 e4       	ldi	r21, 0x41	; 65
    5ac8:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    5acc:	dc 01       	movw	r26, r24
    5ace:	cb 01       	movw	r24, r22
    5ad0:	bc 01       	movw	r22, r24
    5ad2:	cd 01       	movw	r24, r26
    5ad4:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    5ad8:	dc 01       	movw	r26, r24
    5ada:	cb 01       	movw	r24, r22
    5adc:	9c 8b       	std	Y+20, r25	; 0x14
    5ade:	8b 8b       	std	Y+19, r24	; 0x13
    5ae0:	0f c0       	rjmp	.+30     	; 0x5b00 <checkForCube+0x2b4>
    5ae2:	80 e7       	ldi	r24, 0x70	; 112
    5ae4:	91 e0       	ldi	r25, 0x01	; 1
    5ae6:	9a 8b       	std	Y+18, r25	; 0x12
    5ae8:	89 8b       	std	Y+17, r24	; 0x11
    5aea:	89 89       	ldd	r24, Y+17	; 0x11
    5aec:	9a 89       	ldd	r25, Y+18	; 0x12
    5aee:	01 97       	sbiw	r24, 0x01	; 1
    5af0:	f1 f7       	brne	.-4      	; 0x5aee <checkForCube+0x2a2>
    5af2:	9a 8b       	std	Y+18, r25	; 0x12
    5af4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5af6:	8b 89       	ldd	r24, Y+19	; 0x13
    5af8:	9c 89       	ldd	r25, Y+20	; 0x14
    5afa:	01 97       	sbiw	r24, 0x01	; 1
    5afc:	9c 8b       	std	Y+20, r25	; 0x14
    5afe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b00:	8b 89       	ldd	r24, Y+19	; 0x13
    5b02:	9c 89       	ldd	r25, Y+20	; 0x14
    5b04:	00 97       	sbiw	r24, 0x00	; 0
    5b06:	69 f7       	brne	.-38     	; 0x5ae2 <checkForCube+0x296>
    5b08:	14 c0       	rjmp	.+40     	; 0x5b32 <checkForCube+0x2e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b0a:	6d 89       	ldd	r22, Y+21	; 0x15
    5b0c:	7e 89       	ldd	r23, Y+22	; 0x16
    5b0e:	8f 89       	ldd	r24, Y+23	; 0x17
    5b10:	98 8d       	ldd	r25, Y+24	; 0x18
    5b12:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    5b16:	dc 01       	movw	r26, r24
    5b18:	cb 01       	movw	r24, r22
    5b1a:	9c 8b       	std	Y+20, r25	; 0x14
    5b1c:	8b 8b       	std	Y+19, r24	; 0x13
    5b1e:	8b 89       	ldd	r24, Y+19	; 0x13
    5b20:	9c 89       	ldd	r25, Y+20	; 0x14
    5b22:	98 8b       	std	Y+16, r25	; 0x10
    5b24:	8f 87       	std	Y+15, r24	; 0x0f
    5b26:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b28:	98 89       	ldd	r25, Y+16	; 0x10
    5b2a:	01 97       	sbiw	r24, 0x01	; 1
    5b2c:	f1 f7       	brne	.-4      	; 0x5b2a <checkForCube+0x2de>
    5b2e:	98 8b       	std	Y+16, r25	; 0x10
    5b30:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(100);

        centre = ADC_Conversion(2);
    5b32:	82 e0       	ldi	r24, 0x02	; 2
    5b34:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    5b38:	88 2f       	mov	r24, r24
    5b3a:	90 e0       	ldi	r25, 0x00	; 0
    5b3c:	90 93 2f 03 	sts	0x032F, r25
    5b40:	80 93 2e 03 	sts	0x032E, r24
        right();
    5b44:	0e 94 99 03 	call	0x732	; 0x732 <right>
    5b48:	1b c0       	rjmp	.+54     	; 0x5b80 <checkForCube+0x334>
        while(centre < 15)
        {
            value = ADC_Conversion(11);
    5b4a:	8b e0       	ldi	r24, 0x0B	; 11
    5b4c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    5b50:	88 2f       	mov	r24, r24
    5b52:	90 e0       	ldi	r25, 0x00	; 0
    5b54:	9e a7       	std	Y+46, r25	; 0x2e
    5b56:	8d a7       	std	Y+45, r24	; 0x2d
            if(value > max)
    5b58:	2d a5       	ldd	r18, Y+45	; 0x2d
    5b5a:	3e a5       	ldd	r19, Y+46	; 0x2e
    5b5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    5b5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5b60:	82 17       	cp	r24, r18
    5b62:	93 07       	cpc	r25, r19
    5b64:	24 f4       	brge	.+8      	; 0x5b6e <checkForCube+0x322>
                max = value;
    5b66:	8d a5       	ldd	r24, Y+45	; 0x2d
    5b68:	9e a5       	ldd	r25, Y+46	; 0x2e
    5b6a:	9c a7       	std	Y+44, r25	; 0x2c
    5b6c:	8b a7       	std	Y+43, r24	; 0x2b
            centre = ADC_Conversion(2);
    5b6e:	82 e0       	ldi	r24, 0x02	; 2
    5b70:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    5b74:	88 2f       	mov	r24, r24
    5b76:	90 e0       	ldi	r25, 0x00	; 0
    5b78:	90 93 2f 03 	sts	0x032F, r25
    5b7c:	80 93 2e 03 	sts	0x032E, r24
        stop();
        _delay_ms(100);

        centre = ADC_Conversion(2);
        right();
        while(centre < 15)
    5b80:	80 91 2e 03 	lds	r24, 0x032E
    5b84:	90 91 2f 03 	lds	r25, 0x032F
    5b88:	8f 30       	cpi	r24, 0x0F	; 15
    5b8a:	91 05       	cpc	r25, r1
    5b8c:	f4 f2       	brlt	.-68     	; 0x5b4a <checkForCube+0x2fe>
            if(value > max)
                max = value;
            centre = ADC_Conversion(2);
        }

        stop();
    5b8e:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    5b92:	80 e0       	ldi	r24, 0x00	; 0
    5b94:	90 e0       	ldi	r25, 0x00	; 0
    5b96:	a8 ec       	ldi	r26, 0xC8	; 200
    5b98:	b2 e4       	ldi	r27, 0x42	; 66
    5b9a:	8b 87       	std	Y+11, r24	; 0x0b
    5b9c:	9c 87       	std	Y+12, r25	; 0x0c
    5b9e:	ad 87       	std	Y+13, r26	; 0x0d
    5ba0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ba2:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ba4:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ba6:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ba8:	9e 85       	ldd	r25, Y+14	; 0x0e
    5baa:	26 e6       	ldi	r18, 0x66	; 102
    5bac:	36 e6       	ldi	r19, 0x66	; 102
    5bae:	46 e6       	ldi	r20, 0x66	; 102
    5bb0:	55 e4       	ldi	r21, 0x45	; 69
    5bb2:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    5bb6:	dc 01       	movw	r26, r24
    5bb8:	cb 01       	movw	r24, r22
    5bba:	8f 83       	std	Y+7, r24	; 0x07
    5bbc:	98 87       	std	Y+8, r25	; 0x08
    5bbe:	a9 87       	std	Y+9, r26	; 0x09
    5bc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    5bc4:	78 85       	ldd	r23, Y+8	; 0x08
    5bc6:	89 85       	ldd	r24, Y+9	; 0x09
    5bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bca:	20 e0       	ldi	r18, 0x00	; 0
    5bcc:	30 e0       	ldi	r19, 0x00	; 0
    5bce:	40 e8       	ldi	r20, 0x80	; 128
    5bd0:	5f e3       	ldi	r21, 0x3F	; 63
    5bd2:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    5bd6:	88 23       	and	r24, r24
    5bd8:	2c f4       	brge	.+10     	; 0x5be4 <checkForCube+0x398>
		__ticks = 1;
    5bda:	81 e0       	ldi	r24, 0x01	; 1
    5bdc:	90 e0       	ldi	r25, 0x00	; 0
    5bde:	9e 83       	std	Y+6, r25	; 0x06
    5be0:	8d 83       	std	Y+5, r24	; 0x05
    5be2:	3f c0       	rjmp	.+126    	; 0x5c62 <checkForCube+0x416>
	else if (__tmp > 65535)
    5be4:	6f 81       	ldd	r22, Y+7	; 0x07
    5be6:	78 85       	ldd	r23, Y+8	; 0x08
    5be8:	89 85       	ldd	r24, Y+9	; 0x09
    5bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bec:	20 e0       	ldi	r18, 0x00	; 0
    5bee:	3f ef       	ldi	r19, 0xFF	; 255
    5bf0:	4f e7       	ldi	r20, 0x7F	; 127
    5bf2:	57 e4       	ldi	r21, 0x47	; 71
    5bf4:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    5bf8:	18 16       	cp	r1, r24
    5bfa:	4c f5       	brge	.+82     	; 0x5c4e <checkForCube+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    5bfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c00:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c02:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c04:	20 e0       	ldi	r18, 0x00	; 0
    5c06:	30 e0       	ldi	r19, 0x00	; 0
    5c08:	40 e2       	ldi	r20, 0x20	; 32
    5c0a:	51 e4       	ldi	r21, 0x41	; 65
    5c0c:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    5c10:	dc 01       	movw	r26, r24
    5c12:	cb 01       	movw	r24, r22
    5c14:	bc 01       	movw	r22, r24
    5c16:	cd 01       	movw	r24, r26
    5c18:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    5c1c:	dc 01       	movw	r26, r24
    5c1e:	cb 01       	movw	r24, r22
    5c20:	9e 83       	std	Y+6, r25	; 0x06
    5c22:	8d 83       	std	Y+5, r24	; 0x05
    5c24:	0f c0       	rjmp	.+30     	; 0x5c44 <checkForCube+0x3f8>
    5c26:	80 e7       	ldi	r24, 0x70	; 112
    5c28:	91 e0       	ldi	r25, 0x01	; 1
    5c2a:	9c 83       	std	Y+4, r25	; 0x04
    5c2c:	8b 83       	std	Y+3, r24	; 0x03
    5c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    5c30:	9c 81       	ldd	r25, Y+4	; 0x04
    5c32:	01 97       	sbiw	r24, 0x01	; 1
    5c34:	f1 f7       	brne	.-4      	; 0x5c32 <checkForCube+0x3e6>
    5c36:	9c 83       	std	Y+4, r25	; 0x04
    5c38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    5c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    5c3e:	01 97       	sbiw	r24, 0x01	; 1
    5c40:	9e 83       	std	Y+6, r25	; 0x06
    5c42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c44:	8d 81       	ldd	r24, Y+5	; 0x05
    5c46:	9e 81       	ldd	r25, Y+6	; 0x06
    5c48:	00 97       	sbiw	r24, 0x00	; 0
    5c4a:	69 f7       	brne	.-38     	; 0x5c26 <checkForCube+0x3da>
    5c4c:	14 c0       	rjmp	.+40     	; 0x5c76 <checkForCube+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c4e:	6f 81       	ldd	r22, Y+7	; 0x07
    5c50:	78 85       	ldd	r23, Y+8	; 0x08
    5c52:	89 85       	ldd	r24, Y+9	; 0x09
    5c54:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c56:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    5c5a:	dc 01       	movw	r26, r24
    5c5c:	cb 01       	movw	r24, r22
    5c5e:	9e 83       	std	Y+6, r25	; 0x06
    5c60:	8d 83       	std	Y+5, r24	; 0x05
    5c62:	8d 81       	ldd	r24, Y+5	; 0x05
    5c64:	9e 81       	ldd	r25, Y+6	; 0x06
    5c66:	9a 83       	std	Y+2, r25	; 0x02
    5c68:	89 83       	std	Y+1, r24	; 0x01
    5c6a:	89 81       	ldd	r24, Y+1	; 0x01
    5c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    5c6e:	01 97       	sbiw	r24, 0x01	; 1
    5c70:	f1 f7       	brne	.-4      	; 0x5c6e <checkForCube+0x422>
    5c72:	9a 83       	std	Y+2, r25	; 0x02
    5c74:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(100);

        if(max > 140)
    5c76:	8b a5       	ldd	r24, Y+43	; 0x2b
    5c78:	9c a5       	ldd	r25, Y+44	; 0x2c
    5c7a:	8d 38       	cpi	r24, 0x8D	; 141
    5c7c:	91 05       	cpc	r25, r1
    5c7e:	5c f0       	brlt	.+22     	; 0x5c96 <checkForCube+0x44a>
        {
            nodeMissEnable = 1;
    5c80:	81 e0       	ldi	r24, 0x01	; 1
    5c82:	90 e0       	ldi	r25, 0x00	; 0
    5c84:	90 93 01 02 	sts	0x0201, r25
    5c88:	80 93 00 02 	sts	0x0200, r24
            return 1;
    5c8c:	81 e0       	ldi	r24, 0x01	; 1
    5c8e:	90 e0       	ldi	r25, 0x00	; 0
    5c90:	98 ab       	std	Y+48, r25	; 0x30
    5c92:	8f a7       	std	Y+47, r24	; 0x2f
    5c94:	18 c0       	rjmp	.+48     	; 0x5cc6 <checkForCube+0x47a>
        }

        if(max > 50)
    5c96:	8b a5       	ldd	r24, Y+43	; 0x2b
    5c98:	9c a5       	ldd	r25, Y+44	; 0x2c
    5c9a:	83 33       	cpi	r24, 0x33	; 51
    5c9c:	91 05       	cpc	r25, r1
    5c9e:	5c f0       	brlt	.+22     	; 0x5cb6 <checkForCube+0x46a>
        {
            nodeMissEnable = 1;
    5ca0:	81 e0       	ldi	r24, 0x01	; 1
    5ca2:	90 e0       	ldi	r25, 0x00	; 0
    5ca4:	90 93 01 02 	sts	0x0201, r25
    5ca8:	80 93 00 02 	sts	0x0200, r24
            return 2;
    5cac:	82 e0       	ldi	r24, 0x02	; 2
    5cae:	90 e0       	ldi	r25, 0x00	; 0
    5cb0:	98 ab       	std	Y+48, r25	; 0x30
    5cb2:	8f a7       	std	Y+47, r24	; 0x2f
    5cb4:	08 c0       	rjmp	.+16     	; 0x5cc6 <checkForCube+0x47a>
        }

        nodeMissEnable = 1;
    5cb6:	81 e0       	ldi	r24, 0x01	; 1
    5cb8:	90 e0       	ldi	r25, 0x00	; 0
    5cba:	90 93 01 02 	sts	0x0201, r25
    5cbe:	80 93 00 02 	sts	0x0200, r24
        return 0;
    5cc2:	18 aa       	std	Y+48, r1	; 0x30
    5cc4:	1f a6       	std	Y+47, r1	; 0x2f
    5cc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    5cc8:	98 a9       	ldd	r25, Y+48	; 0x30

    }
}
    5cca:	e0 96       	adiw	r28, 0x30	; 48
    5ccc:	0f b6       	in	r0, 0x3f	; 63
    5cce:	f8 94       	cli
    5cd0:	de bf       	out	0x3e, r29	; 62
    5cd2:	0f be       	out	0x3f, r0	; 63
    5cd4:	cd bf       	out	0x3d, r28	; 61
    5cd6:	cf 91       	pop	r28
    5cd8:	df 91       	pop	r29
    5cda:	08 95       	ret

00005cdc <buzzerBeep_2>:

void buzzerBeep_2()
{
    5cdc:	0f 93       	push	r16
    5cde:	1f 93       	push	r17
    5ce0:	df 93       	push	r29
    5ce2:	cf 93       	push	r28
    5ce4:	cd b7       	in	r28, 0x3d	; 61
    5ce6:	de b7       	in	r29, 0x3e	; 62
    5ce8:	c2 56       	subi	r28, 0x62	; 98
    5cea:	d0 40       	sbci	r29, 0x00	; 0
    5cec:	0f b6       	in	r0, 0x3f	; 63
    5cee:	f8 94       	cli
    5cf0:	de bf       	out	0x3e, r29	; 62
    5cf2:	0f be       	out	0x3f, r0	; 63
    5cf4:	cd bf       	out	0x3d, r28	; 61
    //This function is currently under construction. The buzzer seems to be faulty. So, the return statement is put in the first
    //line. This statement is to be removed when the buzzer is hardware rectified.
    PORTJ = 0xFF;
    5cf6:	e5 e0       	ldi	r30, 0x05	; 5
    5cf8:	f1 e0       	ldi	r31, 0x01	; 1
    5cfa:	8f ef       	ldi	r24, 0xFF	; 255
    5cfc:	80 83       	st	Z, r24
    5cfe:	fe 01       	movw	r30, r28
    5d00:	e1 5a       	subi	r30, 0xA1	; 161
    5d02:	ff 4f       	sbci	r31, 0xFF	; 255
    5d04:	80 e0       	ldi	r24, 0x00	; 0
    5d06:	90 e0       	ldi	r25, 0x00	; 0
    5d08:	aa e7       	ldi	r26, 0x7A	; 122
    5d0a:	b4 e4       	ldi	r27, 0x44	; 68
    5d0c:	80 83       	st	Z, r24
    5d0e:	91 83       	std	Z+1, r25	; 0x01
    5d10:	a2 83       	std	Z+2, r26	; 0x02
    5d12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d14:	8e 01       	movw	r16, r28
    5d16:	05 5a       	subi	r16, 0xA5	; 165
    5d18:	1f 4f       	sbci	r17, 0xFF	; 255
    5d1a:	fe 01       	movw	r30, r28
    5d1c:	e1 5a       	subi	r30, 0xA1	; 161
    5d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d20:	60 81       	ld	r22, Z
    5d22:	71 81       	ldd	r23, Z+1	; 0x01
    5d24:	82 81       	ldd	r24, Z+2	; 0x02
    5d26:	93 81       	ldd	r25, Z+3	; 0x03
    5d28:	26 e6       	ldi	r18, 0x66	; 102
    5d2a:	36 e6       	ldi	r19, 0x66	; 102
    5d2c:	46 e6       	ldi	r20, 0x66	; 102
    5d2e:	55 e4       	ldi	r21, 0x45	; 69
    5d30:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    5d34:	dc 01       	movw	r26, r24
    5d36:	cb 01       	movw	r24, r22
    5d38:	f8 01       	movw	r30, r16
    5d3a:	80 83       	st	Z, r24
    5d3c:	91 83       	std	Z+1, r25	; 0x01
    5d3e:	a2 83       	std	Z+2, r26	; 0x02
    5d40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5d42:	fe 01       	movw	r30, r28
    5d44:	e5 5a       	subi	r30, 0xA5	; 165
    5d46:	ff 4f       	sbci	r31, 0xFF	; 255
    5d48:	60 81       	ld	r22, Z
    5d4a:	71 81       	ldd	r23, Z+1	; 0x01
    5d4c:	82 81       	ldd	r24, Z+2	; 0x02
    5d4e:	93 81       	ldd	r25, Z+3	; 0x03
    5d50:	20 e0       	ldi	r18, 0x00	; 0
    5d52:	30 e0       	ldi	r19, 0x00	; 0
    5d54:	40 e8       	ldi	r20, 0x80	; 128
    5d56:	5f e3       	ldi	r21, 0x3F	; 63
    5d58:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    5d5c:	88 23       	and	r24, r24
    5d5e:	44 f4       	brge	.+16     	; 0x5d70 <buzzerBeep_2+0x94>
		__ticks = 1;
    5d60:	fe 01       	movw	r30, r28
    5d62:	e7 5a       	subi	r30, 0xA7	; 167
    5d64:	ff 4f       	sbci	r31, 0xFF	; 255
    5d66:	81 e0       	ldi	r24, 0x01	; 1
    5d68:	90 e0       	ldi	r25, 0x00	; 0
    5d6a:	91 83       	std	Z+1, r25	; 0x01
    5d6c:	80 83       	st	Z, r24
    5d6e:	64 c0       	rjmp	.+200    	; 0x5e38 <buzzerBeep_2+0x15c>
	else if (__tmp > 65535)
    5d70:	fe 01       	movw	r30, r28
    5d72:	e5 5a       	subi	r30, 0xA5	; 165
    5d74:	ff 4f       	sbci	r31, 0xFF	; 255
    5d76:	60 81       	ld	r22, Z
    5d78:	71 81       	ldd	r23, Z+1	; 0x01
    5d7a:	82 81       	ldd	r24, Z+2	; 0x02
    5d7c:	93 81       	ldd	r25, Z+3	; 0x03
    5d7e:	20 e0       	ldi	r18, 0x00	; 0
    5d80:	3f ef       	ldi	r19, 0xFF	; 255
    5d82:	4f e7       	ldi	r20, 0x7F	; 127
    5d84:	57 e4       	ldi	r21, 0x47	; 71
    5d86:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    5d8a:	18 16       	cp	r1, r24
    5d8c:	0c f0       	brlt	.+2      	; 0x5d90 <buzzerBeep_2+0xb4>
    5d8e:	43 c0       	rjmp	.+134    	; 0x5e16 <buzzerBeep_2+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d90:	fe 01       	movw	r30, r28
    5d92:	e1 5a       	subi	r30, 0xA1	; 161
    5d94:	ff 4f       	sbci	r31, 0xFF	; 255
    5d96:	60 81       	ld	r22, Z
    5d98:	71 81       	ldd	r23, Z+1	; 0x01
    5d9a:	82 81       	ldd	r24, Z+2	; 0x02
    5d9c:	93 81       	ldd	r25, Z+3	; 0x03
    5d9e:	20 e0       	ldi	r18, 0x00	; 0
    5da0:	30 e0       	ldi	r19, 0x00	; 0
    5da2:	40 e2       	ldi	r20, 0x20	; 32
    5da4:	51 e4       	ldi	r21, 0x41	; 65
    5da6:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    5daa:	dc 01       	movw	r26, r24
    5dac:	cb 01       	movw	r24, r22
    5dae:	8e 01       	movw	r16, r28
    5db0:	07 5a       	subi	r16, 0xA7	; 167
    5db2:	1f 4f       	sbci	r17, 0xFF	; 255
    5db4:	bc 01       	movw	r22, r24
    5db6:	cd 01       	movw	r24, r26
    5db8:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    5dbc:	dc 01       	movw	r26, r24
    5dbe:	cb 01       	movw	r24, r22
    5dc0:	f8 01       	movw	r30, r16
    5dc2:	91 83       	std	Z+1, r25	; 0x01
    5dc4:	80 83       	st	Z, r24
    5dc6:	1f c0       	rjmp	.+62     	; 0x5e06 <buzzerBeep_2+0x12a>
    5dc8:	fe 01       	movw	r30, r28
    5dca:	e9 5a       	subi	r30, 0xA9	; 169
    5dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    5dce:	80 e7       	ldi	r24, 0x70	; 112
    5dd0:	91 e0       	ldi	r25, 0x01	; 1
    5dd2:	91 83       	std	Z+1, r25	; 0x01
    5dd4:	80 83       	st	Z, r24
    5dd6:	fe 01       	movw	r30, r28
    5dd8:	e9 5a       	subi	r30, 0xA9	; 169
    5dda:	ff 4f       	sbci	r31, 0xFF	; 255
    5ddc:	80 81       	ld	r24, Z
    5dde:	91 81       	ldd	r25, Z+1	; 0x01
    5de0:	01 97       	sbiw	r24, 0x01	; 1
    5de2:	f1 f7       	brne	.-4      	; 0x5de0 <buzzerBeep_2+0x104>
    5de4:	fe 01       	movw	r30, r28
    5de6:	e9 5a       	subi	r30, 0xA9	; 169
    5de8:	ff 4f       	sbci	r31, 0xFF	; 255
    5dea:	91 83       	std	Z+1, r25	; 0x01
    5dec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5dee:	de 01       	movw	r26, r28
    5df0:	a7 5a       	subi	r26, 0xA7	; 167
    5df2:	bf 4f       	sbci	r27, 0xFF	; 255
    5df4:	fe 01       	movw	r30, r28
    5df6:	e7 5a       	subi	r30, 0xA7	; 167
    5df8:	ff 4f       	sbci	r31, 0xFF	; 255
    5dfa:	80 81       	ld	r24, Z
    5dfc:	91 81       	ldd	r25, Z+1	; 0x01
    5dfe:	01 97       	sbiw	r24, 0x01	; 1
    5e00:	11 96       	adiw	r26, 0x01	; 1
    5e02:	9c 93       	st	X, r25
    5e04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e06:	fe 01       	movw	r30, r28
    5e08:	e7 5a       	subi	r30, 0xA7	; 167
    5e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5e0c:	80 81       	ld	r24, Z
    5e0e:	91 81       	ldd	r25, Z+1	; 0x01
    5e10:	00 97       	sbiw	r24, 0x00	; 0
    5e12:	d1 f6       	brne	.-76     	; 0x5dc8 <buzzerBeep_2+0xec>
    5e14:	27 c0       	rjmp	.+78     	; 0x5e64 <buzzerBeep_2+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e16:	8e 01       	movw	r16, r28
    5e18:	07 5a       	subi	r16, 0xA7	; 167
    5e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    5e1c:	fe 01       	movw	r30, r28
    5e1e:	e5 5a       	subi	r30, 0xA5	; 165
    5e20:	ff 4f       	sbci	r31, 0xFF	; 255
    5e22:	60 81       	ld	r22, Z
    5e24:	71 81       	ldd	r23, Z+1	; 0x01
    5e26:	82 81       	ldd	r24, Z+2	; 0x02
    5e28:	93 81       	ldd	r25, Z+3	; 0x03
    5e2a:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    5e2e:	dc 01       	movw	r26, r24
    5e30:	cb 01       	movw	r24, r22
    5e32:	f8 01       	movw	r30, r16
    5e34:	91 83       	std	Z+1, r25	; 0x01
    5e36:	80 83       	st	Z, r24
    5e38:	de 01       	movw	r26, r28
    5e3a:	ab 5a       	subi	r26, 0xAB	; 171
    5e3c:	bf 4f       	sbci	r27, 0xFF	; 255
    5e3e:	fe 01       	movw	r30, r28
    5e40:	e7 5a       	subi	r30, 0xA7	; 167
    5e42:	ff 4f       	sbci	r31, 0xFF	; 255
    5e44:	80 81       	ld	r24, Z
    5e46:	91 81       	ldd	r25, Z+1	; 0x01
    5e48:	8d 93       	st	X+, r24
    5e4a:	9c 93       	st	X, r25
    5e4c:	fe 01       	movw	r30, r28
    5e4e:	eb 5a       	subi	r30, 0xAB	; 171
    5e50:	ff 4f       	sbci	r31, 0xFF	; 255
    5e52:	80 81       	ld	r24, Z
    5e54:	91 81       	ldd	r25, Z+1	; 0x01
    5e56:	01 97       	sbiw	r24, 0x01	; 1
    5e58:	f1 f7       	brne	.-4      	; 0x5e56 <buzzerBeep_2+0x17a>
    5e5a:	fe 01       	movw	r30, r28
    5e5c:	eb 5a       	subi	r30, 0xAB	; 171
    5e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e60:	91 83       	std	Z+1, r25	; 0x01
    5e62:	80 83       	st	Z, r24
    _delay_ms(1000);
    PORTJ = 0x00;
    5e64:	e5 e0       	ldi	r30, 0x05	; 5
    5e66:	f1 e0       	ldi	r31, 0x01	; 1
    5e68:	10 82       	st	Z, r1
/*
    if(!isAlignedWrong())
        return;
*/

    ungrip_2();
    5e6a:	0e 94 a7 12 	call	0x254e	; 0x254e <ungrip_2>
    5e6e:	fe 01       	movw	r30, r28
    5e70:	ef 5a       	subi	r30, 0xAF	; 175
    5e72:	ff 4f       	sbci	r31, 0xFF	; 255
    5e74:	80 e0       	ldi	r24, 0x00	; 0
    5e76:	90 e0       	ldi	r25, 0x00	; 0
    5e78:	aa e7       	ldi	r26, 0x7A	; 122
    5e7a:	b4 e4       	ldi	r27, 0x44	; 68
    5e7c:	80 83       	st	Z, r24
    5e7e:	91 83       	std	Z+1, r25	; 0x01
    5e80:	a2 83       	std	Z+2, r26	; 0x02
    5e82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e84:	8e 01       	movw	r16, r28
    5e86:	03 5b       	subi	r16, 0xB3	; 179
    5e88:	1f 4f       	sbci	r17, 0xFF	; 255
    5e8a:	fe 01       	movw	r30, r28
    5e8c:	ef 5a       	subi	r30, 0xAF	; 175
    5e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e90:	60 81       	ld	r22, Z
    5e92:	71 81       	ldd	r23, Z+1	; 0x01
    5e94:	82 81       	ldd	r24, Z+2	; 0x02
    5e96:	93 81       	ldd	r25, Z+3	; 0x03
    5e98:	26 e6       	ldi	r18, 0x66	; 102
    5e9a:	36 e6       	ldi	r19, 0x66	; 102
    5e9c:	46 e6       	ldi	r20, 0x66	; 102
    5e9e:	55 e4       	ldi	r21, 0x45	; 69
    5ea0:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    5ea4:	dc 01       	movw	r26, r24
    5ea6:	cb 01       	movw	r24, r22
    5ea8:	f8 01       	movw	r30, r16
    5eaa:	80 83       	st	Z, r24
    5eac:	91 83       	std	Z+1, r25	; 0x01
    5eae:	a2 83       	std	Z+2, r26	; 0x02
    5eb0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5eb2:	fe 01       	movw	r30, r28
    5eb4:	e3 5b       	subi	r30, 0xB3	; 179
    5eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    5eb8:	60 81       	ld	r22, Z
    5eba:	71 81       	ldd	r23, Z+1	; 0x01
    5ebc:	82 81       	ldd	r24, Z+2	; 0x02
    5ebe:	93 81       	ldd	r25, Z+3	; 0x03
    5ec0:	20 e0       	ldi	r18, 0x00	; 0
    5ec2:	30 e0       	ldi	r19, 0x00	; 0
    5ec4:	40 e8       	ldi	r20, 0x80	; 128
    5ec6:	5f e3       	ldi	r21, 0x3F	; 63
    5ec8:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    5ecc:	88 23       	and	r24, r24
    5ece:	44 f4       	brge	.+16     	; 0x5ee0 <buzzerBeep_2+0x204>
		__ticks = 1;
    5ed0:	fe 01       	movw	r30, r28
    5ed2:	e5 5b       	subi	r30, 0xB5	; 181
    5ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ed6:	81 e0       	ldi	r24, 0x01	; 1
    5ed8:	90 e0       	ldi	r25, 0x00	; 0
    5eda:	91 83       	std	Z+1, r25	; 0x01
    5edc:	80 83       	st	Z, r24
    5ede:	64 c0       	rjmp	.+200    	; 0x5fa8 <buzzerBeep_2+0x2cc>
	else if (__tmp > 65535)
    5ee0:	fe 01       	movw	r30, r28
    5ee2:	e3 5b       	subi	r30, 0xB3	; 179
    5ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ee6:	60 81       	ld	r22, Z
    5ee8:	71 81       	ldd	r23, Z+1	; 0x01
    5eea:	82 81       	ldd	r24, Z+2	; 0x02
    5eec:	93 81       	ldd	r25, Z+3	; 0x03
    5eee:	20 e0       	ldi	r18, 0x00	; 0
    5ef0:	3f ef       	ldi	r19, 0xFF	; 255
    5ef2:	4f e7       	ldi	r20, 0x7F	; 127
    5ef4:	57 e4       	ldi	r21, 0x47	; 71
    5ef6:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    5efa:	18 16       	cp	r1, r24
    5efc:	0c f0       	brlt	.+2      	; 0x5f00 <buzzerBeep_2+0x224>
    5efe:	43 c0       	rjmp	.+134    	; 0x5f86 <buzzerBeep_2+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f00:	fe 01       	movw	r30, r28
    5f02:	ef 5a       	subi	r30, 0xAF	; 175
    5f04:	ff 4f       	sbci	r31, 0xFF	; 255
    5f06:	60 81       	ld	r22, Z
    5f08:	71 81       	ldd	r23, Z+1	; 0x01
    5f0a:	82 81       	ldd	r24, Z+2	; 0x02
    5f0c:	93 81       	ldd	r25, Z+3	; 0x03
    5f0e:	20 e0       	ldi	r18, 0x00	; 0
    5f10:	30 e0       	ldi	r19, 0x00	; 0
    5f12:	40 e2       	ldi	r20, 0x20	; 32
    5f14:	51 e4       	ldi	r21, 0x41	; 65
    5f16:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    5f1a:	dc 01       	movw	r26, r24
    5f1c:	cb 01       	movw	r24, r22
    5f1e:	8e 01       	movw	r16, r28
    5f20:	05 5b       	subi	r16, 0xB5	; 181
    5f22:	1f 4f       	sbci	r17, 0xFF	; 255
    5f24:	bc 01       	movw	r22, r24
    5f26:	cd 01       	movw	r24, r26
    5f28:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    5f2c:	dc 01       	movw	r26, r24
    5f2e:	cb 01       	movw	r24, r22
    5f30:	f8 01       	movw	r30, r16
    5f32:	91 83       	std	Z+1, r25	; 0x01
    5f34:	80 83       	st	Z, r24
    5f36:	1f c0       	rjmp	.+62     	; 0x5f76 <buzzerBeep_2+0x29a>
    5f38:	fe 01       	movw	r30, r28
    5f3a:	e7 5b       	subi	r30, 0xB7	; 183
    5f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f3e:	80 e7       	ldi	r24, 0x70	; 112
    5f40:	91 e0       	ldi	r25, 0x01	; 1
    5f42:	91 83       	std	Z+1, r25	; 0x01
    5f44:	80 83       	st	Z, r24
    5f46:	fe 01       	movw	r30, r28
    5f48:	e7 5b       	subi	r30, 0xB7	; 183
    5f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f4c:	80 81       	ld	r24, Z
    5f4e:	91 81       	ldd	r25, Z+1	; 0x01
    5f50:	01 97       	sbiw	r24, 0x01	; 1
    5f52:	f1 f7       	brne	.-4      	; 0x5f50 <buzzerBeep_2+0x274>
    5f54:	fe 01       	movw	r30, r28
    5f56:	e7 5b       	subi	r30, 0xB7	; 183
    5f58:	ff 4f       	sbci	r31, 0xFF	; 255
    5f5a:	91 83       	std	Z+1, r25	; 0x01
    5f5c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f5e:	de 01       	movw	r26, r28
    5f60:	a5 5b       	subi	r26, 0xB5	; 181
    5f62:	bf 4f       	sbci	r27, 0xFF	; 255
    5f64:	fe 01       	movw	r30, r28
    5f66:	e5 5b       	subi	r30, 0xB5	; 181
    5f68:	ff 4f       	sbci	r31, 0xFF	; 255
    5f6a:	80 81       	ld	r24, Z
    5f6c:	91 81       	ldd	r25, Z+1	; 0x01
    5f6e:	01 97       	sbiw	r24, 0x01	; 1
    5f70:	11 96       	adiw	r26, 0x01	; 1
    5f72:	9c 93       	st	X, r25
    5f74:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f76:	fe 01       	movw	r30, r28
    5f78:	e5 5b       	subi	r30, 0xB5	; 181
    5f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f7c:	80 81       	ld	r24, Z
    5f7e:	91 81       	ldd	r25, Z+1	; 0x01
    5f80:	00 97       	sbiw	r24, 0x00	; 0
    5f82:	d1 f6       	brne	.-76     	; 0x5f38 <buzzerBeep_2+0x25c>
    5f84:	27 c0       	rjmp	.+78     	; 0x5fd4 <buzzerBeep_2+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f86:	8e 01       	movw	r16, r28
    5f88:	05 5b       	subi	r16, 0xB5	; 181
    5f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    5f8c:	fe 01       	movw	r30, r28
    5f8e:	e3 5b       	subi	r30, 0xB3	; 179
    5f90:	ff 4f       	sbci	r31, 0xFF	; 255
    5f92:	60 81       	ld	r22, Z
    5f94:	71 81       	ldd	r23, Z+1	; 0x01
    5f96:	82 81       	ldd	r24, Z+2	; 0x02
    5f98:	93 81       	ldd	r25, Z+3	; 0x03
    5f9a:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    5f9e:	dc 01       	movw	r26, r24
    5fa0:	cb 01       	movw	r24, r22
    5fa2:	f8 01       	movw	r30, r16
    5fa4:	91 83       	std	Z+1, r25	; 0x01
    5fa6:	80 83       	st	Z, r24
    5fa8:	de 01       	movw	r26, r28
    5faa:	a9 5b       	subi	r26, 0xB9	; 185
    5fac:	bf 4f       	sbci	r27, 0xFF	; 255
    5fae:	fe 01       	movw	r30, r28
    5fb0:	e5 5b       	subi	r30, 0xB5	; 181
    5fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    5fb4:	80 81       	ld	r24, Z
    5fb6:	91 81       	ldd	r25, Z+1	; 0x01
    5fb8:	8d 93       	st	X+, r24
    5fba:	9c 93       	st	X, r25
    5fbc:	fe 01       	movw	r30, r28
    5fbe:	e9 5b       	subi	r30, 0xB9	; 185
    5fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    5fc2:	80 81       	ld	r24, Z
    5fc4:	91 81       	ldd	r25, Z+1	; 0x01
    5fc6:	01 97       	sbiw	r24, 0x01	; 1
    5fc8:	f1 f7       	brne	.-4      	; 0x5fc6 <buzzerBeep_2+0x2ea>
    5fca:	fe 01       	movw	r30, r28
    5fcc:	e9 5b       	subi	r30, 0xB9	; 185
    5fce:	ff 4f       	sbci	r31, 0xFF	; 255
    5fd0:	91 83       	std	Z+1, r25	; 0x01
    5fd2:	80 83       	st	Z, r24
    _delay_ms(1000);

    if(isAlignedCorrect_2())
    5fd4:	0e 94 e2 35 	call	0x6bc4	; 0x6bc4 <isAlignedCorrect_2>
    5fd8:	00 97       	sbiw	r24, 0x00	; 0
    5fda:	09 f4       	brne	.+2      	; 0x5fde <buzzerBeep_2+0x302>
    5fdc:	8a c0       	rjmp	.+276    	; 0x60f2 <buzzerBeep_2+0x416>
    {
        ungrip();
    5fde:	0e 94 9d 12 	call	0x253a	; 0x253a <ungrip>
    5fe2:	fe 01       	movw	r30, r28
    5fe4:	ed 5b       	subi	r30, 0xBD	; 189
    5fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    5fe8:	80 e0       	ldi	r24, 0x00	; 0
    5fea:	90 e0       	ldi	r25, 0x00	; 0
    5fec:	aa ef       	ldi	r26, 0xFA	; 250
    5fee:	b3 e4       	ldi	r27, 0x43	; 67
    5ff0:	80 83       	st	Z, r24
    5ff2:	91 83       	std	Z+1, r25	; 0x01
    5ff4:	a2 83       	std	Z+2, r26	; 0x02
    5ff6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ff8:	8e 01       	movw	r16, r28
    5ffa:	01 5c       	subi	r16, 0xC1	; 193
    5ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    5ffe:	fe 01       	movw	r30, r28
    6000:	ed 5b       	subi	r30, 0xBD	; 189
    6002:	ff 4f       	sbci	r31, 0xFF	; 255
    6004:	60 81       	ld	r22, Z
    6006:	71 81       	ldd	r23, Z+1	; 0x01
    6008:	82 81       	ldd	r24, Z+2	; 0x02
    600a:	93 81       	ldd	r25, Z+3	; 0x03
    600c:	26 e6       	ldi	r18, 0x66	; 102
    600e:	36 e6       	ldi	r19, 0x66	; 102
    6010:	46 e6       	ldi	r20, 0x66	; 102
    6012:	55 e4       	ldi	r21, 0x45	; 69
    6014:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    6018:	dc 01       	movw	r26, r24
    601a:	cb 01       	movw	r24, r22
    601c:	f8 01       	movw	r30, r16
    601e:	80 83       	st	Z, r24
    6020:	91 83       	std	Z+1, r25	; 0x01
    6022:	a2 83       	std	Z+2, r26	; 0x02
    6024:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6026:	fe 01       	movw	r30, r28
    6028:	ff 96       	adiw	r30, 0x3f	; 63
    602a:	60 81       	ld	r22, Z
    602c:	71 81       	ldd	r23, Z+1	; 0x01
    602e:	82 81       	ldd	r24, Z+2	; 0x02
    6030:	93 81       	ldd	r25, Z+3	; 0x03
    6032:	20 e0       	ldi	r18, 0x00	; 0
    6034:	30 e0       	ldi	r19, 0x00	; 0
    6036:	40 e8       	ldi	r20, 0x80	; 128
    6038:	5f e3       	ldi	r21, 0x3F	; 63
    603a:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    603e:	88 23       	and	r24, r24
    6040:	2c f4       	brge	.+10     	; 0x604c <buzzerBeep_2+0x370>
		__ticks = 1;
    6042:	81 e0       	ldi	r24, 0x01	; 1
    6044:	90 e0       	ldi	r25, 0x00	; 0
    6046:	9e af       	std	Y+62, r25	; 0x3e
    6048:	8d af       	std	Y+61, r24	; 0x3d
    604a:	46 c0       	rjmp	.+140    	; 0x60d8 <buzzerBeep_2+0x3fc>
	else if (__tmp > 65535)
    604c:	fe 01       	movw	r30, r28
    604e:	ff 96       	adiw	r30, 0x3f	; 63
    6050:	60 81       	ld	r22, Z
    6052:	71 81       	ldd	r23, Z+1	; 0x01
    6054:	82 81       	ldd	r24, Z+2	; 0x02
    6056:	93 81       	ldd	r25, Z+3	; 0x03
    6058:	20 e0       	ldi	r18, 0x00	; 0
    605a:	3f ef       	ldi	r19, 0xFF	; 255
    605c:	4f e7       	ldi	r20, 0x7F	; 127
    605e:	57 e4       	ldi	r21, 0x47	; 71
    6060:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    6064:	18 16       	cp	r1, r24
    6066:	64 f5       	brge	.+88     	; 0x60c0 <buzzerBeep_2+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6068:	fe 01       	movw	r30, r28
    606a:	ed 5b       	subi	r30, 0xBD	; 189
    606c:	ff 4f       	sbci	r31, 0xFF	; 255
    606e:	60 81       	ld	r22, Z
    6070:	71 81       	ldd	r23, Z+1	; 0x01
    6072:	82 81       	ldd	r24, Z+2	; 0x02
    6074:	93 81       	ldd	r25, Z+3	; 0x03
    6076:	20 e0       	ldi	r18, 0x00	; 0
    6078:	30 e0       	ldi	r19, 0x00	; 0
    607a:	40 e2       	ldi	r20, 0x20	; 32
    607c:	51 e4       	ldi	r21, 0x41	; 65
    607e:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    6082:	dc 01       	movw	r26, r24
    6084:	cb 01       	movw	r24, r22
    6086:	bc 01       	movw	r22, r24
    6088:	cd 01       	movw	r24, r26
    608a:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    608e:	dc 01       	movw	r26, r24
    6090:	cb 01       	movw	r24, r22
    6092:	9e af       	std	Y+62, r25	; 0x3e
    6094:	8d af       	std	Y+61, r24	; 0x3d
    6096:	0f c0       	rjmp	.+30     	; 0x60b6 <buzzerBeep_2+0x3da>
    6098:	80 e7       	ldi	r24, 0x70	; 112
    609a:	91 e0       	ldi	r25, 0x01	; 1
    609c:	9c af       	std	Y+60, r25	; 0x3c
    609e:	8b af       	std	Y+59, r24	; 0x3b
    60a0:	8b ad       	ldd	r24, Y+59	; 0x3b
    60a2:	9c ad       	ldd	r25, Y+60	; 0x3c
    60a4:	01 97       	sbiw	r24, 0x01	; 1
    60a6:	f1 f7       	brne	.-4      	; 0x60a4 <buzzerBeep_2+0x3c8>
    60a8:	9c af       	std	Y+60, r25	; 0x3c
    60aa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    60ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    60b0:	01 97       	sbiw	r24, 0x01	; 1
    60b2:	9e af       	std	Y+62, r25	; 0x3e
    60b4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    60b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    60ba:	00 97       	sbiw	r24, 0x00	; 0
    60bc:	69 f7       	brne	.-38     	; 0x6098 <buzzerBeep_2+0x3bc>
    60be:	16 c0       	rjmp	.+44     	; 0x60ec <buzzerBeep_2+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60c0:	fe 01       	movw	r30, r28
    60c2:	ff 96       	adiw	r30, 0x3f	; 63
    60c4:	60 81       	ld	r22, Z
    60c6:	71 81       	ldd	r23, Z+1	; 0x01
    60c8:	82 81       	ldd	r24, Z+2	; 0x02
    60ca:	93 81       	ldd	r25, Z+3	; 0x03
    60cc:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    60d0:	dc 01       	movw	r26, r24
    60d2:	cb 01       	movw	r24, r22
    60d4:	9e af       	std	Y+62, r25	; 0x3e
    60d6:	8d af       	std	Y+61, r24	; 0x3d
    60d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    60da:	9e ad       	ldd	r25, Y+62	; 0x3e
    60dc:	9a af       	std	Y+58, r25	; 0x3a
    60de:	89 af       	std	Y+57, r24	; 0x39
    60e0:	89 ad       	ldd	r24, Y+57	; 0x39
    60e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    60e4:	01 97       	sbiw	r24, 0x01	; 1
    60e6:	f1 f7       	brne	.-4      	; 0x60e4 <buzzerBeep_2+0x408>
    60e8:	9a af       	std	Y+58, r25	; 0x3a
    60ea:	89 af       	std	Y+57, r24	; 0x39
        _delay_ms(500);
        buzzer_1();
    60ec:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <buzzer_1>
    60f0:	d2 c1       	rjmp	.+932    	; 0x6496 <buzzerBeep_2+0x7ba>
        return;
    }

    grip();
    60f2:	0e 94 93 12 	call	0x2526	; 0x2526 <grip>
    60f6:	80 e0       	ldi	r24, 0x00	; 0
    60f8:	90 e0       	ldi	r25, 0x00	; 0
    60fa:	aa e7       	ldi	r26, 0x7A	; 122
    60fc:	b4 e4       	ldi	r27, 0x44	; 68
    60fe:	8d ab       	std	Y+53, r24	; 0x35
    6100:	9e ab       	std	Y+54, r25	; 0x36
    6102:	af ab       	std	Y+55, r26	; 0x37
    6104:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6106:	6d a9       	ldd	r22, Y+53	; 0x35
    6108:	7e a9       	ldd	r23, Y+54	; 0x36
    610a:	8f a9       	ldd	r24, Y+55	; 0x37
    610c:	98 ad       	ldd	r25, Y+56	; 0x38
    610e:	26 e6       	ldi	r18, 0x66	; 102
    6110:	36 e6       	ldi	r19, 0x66	; 102
    6112:	46 e6       	ldi	r20, 0x66	; 102
    6114:	55 e4       	ldi	r21, 0x45	; 69
    6116:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    611a:	dc 01       	movw	r26, r24
    611c:	cb 01       	movw	r24, r22
    611e:	89 ab       	std	Y+49, r24	; 0x31
    6120:	9a ab       	std	Y+50, r25	; 0x32
    6122:	ab ab       	std	Y+51, r26	; 0x33
    6124:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6126:	69 a9       	ldd	r22, Y+49	; 0x31
    6128:	7a a9       	ldd	r23, Y+50	; 0x32
    612a:	8b a9       	ldd	r24, Y+51	; 0x33
    612c:	9c a9       	ldd	r25, Y+52	; 0x34
    612e:	20 e0       	ldi	r18, 0x00	; 0
    6130:	30 e0       	ldi	r19, 0x00	; 0
    6132:	40 e8       	ldi	r20, 0x80	; 128
    6134:	5f e3       	ldi	r21, 0x3F	; 63
    6136:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    613a:	88 23       	and	r24, r24
    613c:	2c f4       	brge	.+10     	; 0x6148 <buzzerBeep_2+0x46c>
		__ticks = 1;
    613e:	81 e0       	ldi	r24, 0x01	; 1
    6140:	90 e0       	ldi	r25, 0x00	; 0
    6142:	98 ab       	std	Y+48, r25	; 0x30
    6144:	8f a7       	std	Y+47, r24	; 0x2f
    6146:	3f c0       	rjmp	.+126    	; 0x61c6 <buzzerBeep_2+0x4ea>
	else if (__tmp > 65535)
    6148:	69 a9       	ldd	r22, Y+49	; 0x31
    614a:	7a a9       	ldd	r23, Y+50	; 0x32
    614c:	8b a9       	ldd	r24, Y+51	; 0x33
    614e:	9c a9       	ldd	r25, Y+52	; 0x34
    6150:	20 e0       	ldi	r18, 0x00	; 0
    6152:	3f ef       	ldi	r19, 0xFF	; 255
    6154:	4f e7       	ldi	r20, 0x7F	; 127
    6156:	57 e4       	ldi	r21, 0x47	; 71
    6158:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    615c:	18 16       	cp	r1, r24
    615e:	4c f5       	brge	.+82     	; 0x61b2 <buzzerBeep_2+0x4d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6160:	6d a9       	ldd	r22, Y+53	; 0x35
    6162:	7e a9       	ldd	r23, Y+54	; 0x36
    6164:	8f a9       	ldd	r24, Y+55	; 0x37
    6166:	98 ad       	ldd	r25, Y+56	; 0x38
    6168:	20 e0       	ldi	r18, 0x00	; 0
    616a:	30 e0       	ldi	r19, 0x00	; 0
    616c:	40 e2       	ldi	r20, 0x20	; 32
    616e:	51 e4       	ldi	r21, 0x41	; 65
    6170:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    6174:	dc 01       	movw	r26, r24
    6176:	cb 01       	movw	r24, r22
    6178:	bc 01       	movw	r22, r24
    617a:	cd 01       	movw	r24, r26
    617c:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    6180:	dc 01       	movw	r26, r24
    6182:	cb 01       	movw	r24, r22
    6184:	98 ab       	std	Y+48, r25	; 0x30
    6186:	8f a7       	std	Y+47, r24	; 0x2f
    6188:	0f c0       	rjmp	.+30     	; 0x61a8 <buzzerBeep_2+0x4cc>
    618a:	80 e7       	ldi	r24, 0x70	; 112
    618c:	91 e0       	ldi	r25, 0x01	; 1
    618e:	9e a7       	std	Y+46, r25	; 0x2e
    6190:	8d a7       	std	Y+45, r24	; 0x2d
    6192:	8d a5       	ldd	r24, Y+45	; 0x2d
    6194:	9e a5       	ldd	r25, Y+46	; 0x2e
    6196:	01 97       	sbiw	r24, 0x01	; 1
    6198:	f1 f7       	brne	.-4      	; 0x6196 <buzzerBeep_2+0x4ba>
    619a:	9e a7       	std	Y+46, r25	; 0x2e
    619c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    619e:	8f a5       	ldd	r24, Y+47	; 0x2f
    61a0:	98 a9       	ldd	r25, Y+48	; 0x30
    61a2:	01 97       	sbiw	r24, 0x01	; 1
    61a4:	98 ab       	std	Y+48, r25	; 0x30
    61a6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    61aa:	98 a9       	ldd	r25, Y+48	; 0x30
    61ac:	00 97       	sbiw	r24, 0x00	; 0
    61ae:	69 f7       	brne	.-38     	; 0x618a <buzzerBeep_2+0x4ae>
    61b0:	14 c0       	rjmp	.+40     	; 0x61da <buzzerBeep_2+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61b2:	69 a9       	ldd	r22, Y+49	; 0x31
    61b4:	7a a9       	ldd	r23, Y+50	; 0x32
    61b6:	8b a9       	ldd	r24, Y+51	; 0x33
    61b8:	9c a9       	ldd	r25, Y+52	; 0x34
    61ba:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    61be:	dc 01       	movw	r26, r24
    61c0:	cb 01       	movw	r24, r22
    61c2:	98 ab       	std	Y+48, r25	; 0x30
    61c4:	8f a7       	std	Y+47, r24	; 0x2f
    61c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    61c8:	98 a9       	ldd	r25, Y+48	; 0x30
    61ca:	9c a7       	std	Y+44, r25	; 0x2c
    61cc:	8b a7       	std	Y+43, r24	; 0x2b
    61ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    61d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    61d2:	01 97       	sbiw	r24, 0x01	; 1
    61d4:	f1 f7       	brne	.-4      	; 0x61d2 <buzzerBeep_2+0x4f6>
    61d6:	9c a7       	std	Y+44, r25	; 0x2c
    61d8:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1000);
    faceBack();
    61da:	0e 94 7f 12 	call	0x24fe	; 0x24fe <faceBack>
    61de:	80 e0       	ldi	r24, 0x00	; 0
    61e0:	90 e0       	ldi	r25, 0x00	; 0
    61e2:	aa e7       	ldi	r26, 0x7A	; 122
    61e4:	b4 e4       	ldi	r27, 0x44	; 68
    61e6:	8f a3       	std	Y+39, r24	; 0x27
    61e8:	98 a7       	std	Y+40, r25	; 0x28
    61ea:	a9 a7       	std	Y+41, r26	; 0x29
    61ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    61ee:	6f a1       	ldd	r22, Y+39	; 0x27
    61f0:	78 a5       	ldd	r23, Y+40	; 0x28
    61f2:	89 a5       	ldd	r24, Y+41	; 0x29
    61f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    61f6:	26 e6       	ldi	r18, 0x66	; 102
    61f8:	36 e6       	ldi	r19, 0x66	; 102
    61fa:	46 e6       	ldi	r20, 0x66	; 102
    61fc:	55 e4       	ldi	r21, 0x45	; 69
    61fe:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    6202:	dc 01       	movw	r26, r24
    6204:	cb 01       	movw	r24, r22
    6206:	8b a3       	std	Y+35, r24	; 0x23
    6208:	9c a3       	std	Y+36, r25	; 0x24
    620a:	ad a3       	std	Y+37, r26	; 0x25
    620c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    620e:	6b a1       	ldd	r22, Y+35	; 0x23
    6210:	7c a1       	ldd	r23, Y+36	; 0x24
    6212:	8d a1       	ldd	r24, Y+37	; 0x25
    6214:	9e a1       	ldd	r25, Y+38	; 0x26
    6216:	20 e0       	ldi	r18, 0x00	; 0
    6218:	30 e0       	ldi	r19, 0x00	; 0
    621a:	40 e8       	ldi	r20, 0x80	; 128
    621c:	5f e3       	ldi	r21, 0x3F	; 63
    621e:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    6222:	88 23       	and	r24, r24
    6224:	2c f4       	brge	.+10     	; 0x6230 <buzzerBeep_2+0x554>
		__ticks = 1;
    6226:	81 e0       	ldi	r24, 0x01	; 1
    6228:	90 e0       	ldi	r25, 0x00	; 0
    622a:	9a a3       	std	Y+34, r25	; 0x22
    622c:	89 a3       	std	Y+33, r24	; 0x21
    622e:	3f c0       	rjmp	.+126    	; 0x62ae <buzzerBeep_2+0x5d2>
	else if (__tmp > 65535)
    6230:	6b a1       	ldd	r22, Y+35	; 0x23
    6232:	7c a1       	ldd	r23, Y+36	; 0x24
    6234:	8d a1       	ldd	r24, Y+37	; 0x25
    6236:	9e a1       	ldd	r25, Y+38	; 0x26
    6238:	20 e0       	ldi	r18, 0x00	; 0
    623a:	3f ef       	ldi	r19, 0xFF	; 255
    623c:	4f e7       	ldi	r20, 0x7F	; 127
    623e:	57 e4       	ldi	r21, 0x47	; 71
    6240:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    6244:	18 16       	cp	r1, r24
    6246:	4c f5       	brge	.+82     	; 0x629a <buzzerBeep_2+0x5be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6248:	6f a1       	ldd	r22, Y+39	; 0x27
    624a:	78 a5       	ldd	r23, Y+40	; 0x28
    624c:	89 a5       	ldd	r24, Y+41	; 0x29
    624e:	9a a5       	ldd	r25, Y+42	; 0x2a
    6250:	20 e0       	ldi	r18, 0x00	; 0
    6252:	30 e0       	ldi	r19, 0x00	; 0
    6254:	40 e2       	ldi	r20, 0x20	; 32
    6256:	51 e4       	ldi	r21, 0x41	; 65
    6258:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    625c:	dc 01       	movw	r26, r24
    625e:	cb 01       	movw	r24, r22
    6260:	bc 01       	movw	r22, r24
    6262:	cd 01       	movw	r24, r26
    6264:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    6268:	dc 01       	movw	r26, r24
    626a:	cb 01       	movw	r24, r22
    626c:	9a a3       	std	Y+34, r25	; 0x22
    626e:	89 a3       	std	Y+33, r24	; 0x21
    6270:	0f c0       	rjmp	.+30     	; 0x6290 <buzzerBeep_2+0x5b4>
    6272:	80 e7       	ldi	r24, 0x70	; 112
    6274:	91 e0       	ldi	r25, 0x01	; 1
    6276:	98 a3       	std	Y+32, r25	; 0x20
    6278:	8f 8f       	std	Y+31, r24	; 0x1f
    627a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    627c:	98 a1       	ldd	r25, Y+32	; 0x20
    627e:	01 97       	sbiw	r24, 0x01	; 1
    6280:	f1 f7       	brne	.-4      	; 0x627e <buzzerBeep_2+0x5a2>
    6282:	98 a3       	std	Y+32, r25	; 0x20
    6284:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6286:	89 a1       	ldd	r24, Y+33	; 0x21
    6288:	9a a1       	ldd	r25, Y+34	; 0x22
    628a:	01 97       	sbiw	r24, 0x01	; 1
    628c:	9a a3       	std	Y+34, r25	; 0x22
    628e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6290:	89 a1       	ldd	r24, Y+33	; 0x21
    6292:	9a a1       	ldd	r25, Y+34	; 0x22
    6294:	00 97       	sbiw	r24, 0x00	; 0
    6296:	69 f7       	brne	.-38     	; 0x6272 <buzzerBeep_2+0x596>
    6298:	14 c0       	rjmp	.+40     	; 0x62c2 <buzzerBeep_2+0x5e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    629a:	6b a1       	ldd	r22, Y+35	; 0x23
    629c:	7c a1       	ldd	r23, Y+36	; 0x24
    629e:	8d a1       	ldd	r24, Y+37	; 0x25
    62a0:	9e a1       	ldd	r25, Y+38	; 0x26
    62a2:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    62a6:	dc 01       	movw	r26, r24
    62a8:	cb 01       	movw	r24, r22
    62aa:	9a a3       	std	Y+34, r25	; 0x22
    62ac:	89 a3       	std	Y+33, r24	; 0x21
    62ae:	89 a1       	ldd	r24, Y+33	; 0x21
    62b0:	9a a1       	ldd	r25, Y+34	; 0x22
    62b2:	9e 8f       	std	Y+30, r25	; 0x1e
    62b4:	8d 8f       	std	Y+29, r24	; 0x1d
    62b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    62b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    62ba:	01 97       	sbiw	r24, 0x01	; 1
    62bc:	f1 f7       	brne	.-4      	; 0x62ba <buzzerBeep_2+0x5de>
    62be:	9e 8f       	std	Y+30, r25	; 0x1e
    62c0:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1000);
    ungrip();
    62c2:	0e 94 9d 12 	call	0x253a	; 0x253a <ungrip>
    62c6:	80 e0       	ldi	r24, 0x00	; 0
    62c8:	90 e0       	ldi	r25, 0x00	; 0
    62ca:	aa e7       	ldi	r26, 0x7A	; 122
    62cc:	b4 e4       	ldi	r27, 0x44	; 68
    62ce:	89 8f       	std	Y+25, r24	; 0x19
    62d0:	9a 8f       	std	Y+26, r25	; 0x1a
    62d2:	ab 8f       	std	Y+27, r26	; 0x1b
    62d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    62d6:	69 8d       	ldd	r22, Y+25	; 0x19
    62d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    62da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    62dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    62de:	26 e6       	ldi	r18, 0x66	; 102
    62e0:	36 e6       	ldi	r19, 0x66	; 102
    62e2:	46 e6       	ldi	r20, 0x66	; 102
    62e4:	55 e4       	ldi	r21, 0x45	; 69
    62e6:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    62ea:	dc 01       	movw	r26, r24
    62ec:	cb 01       	movw	r24, r22
    62ee:	8d 8b       	std	Y+21, r24	; 0x15
    62f0:	9e 8b       	std	Y+22, r25	; 0x16
    62f2:	af 8b       	std	Y+23, r26	; 0x17
    62f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    62f6:	6d 89       	ldd	r22, Y+21	; 0x15
    62f8:	7e 89       	ldd	r23, Y+22	; 0x16
    62fa:	8f 89       	ldd	r24, Y+23	; 0x17
    62fc:	98 8d       	ldd	r25, Y+24	; 0x18
    62fe:	20 e0       	ldi	r18, 0x00	; 0
    6300:	30 e0       	ldi	r19, 0x00	; 0
    6302:	40 e8       	ldi	r20, 0x80	; 128
    6304:	5f e3       	ldi	r21, 0x3F	; 63
    6306:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    630a:	88 23       	and	r24, r24
    630c:	2c f4       	brge	.+10     	; 0x6318 <buzzerBeep_2+0x63c>
		__ticks = 1;
    630e:	81 e0       	ldi	r24, 0x01	; 1
    6310:	90 e0       	ldi	r25, 0x00	; 0
    6312:	9c 8b       	std	Y+20, r25	; 0x14
    6314:	8b 8b       	std	Y+19, r24	; 0x13
    6316:	3f c0       	rjmp	.+126    	; 0x6396 <buzzerBeep_2+0x6ba>
	else if (__tmp > 65535)
    6318:	6d 89       	ldd	r22, Y+21	; 0x15
    631a:	7e 89       	ldd	r23, Y+22	; 0x16
    631c:	8f 89       	ldd	r24, Y+23	; 0x17
    631e:	98 8d       	ldd	r25, Y+24	; 0x18
    6320:	20 e0       	ldi	r18, 0x00	; 0
    6322:	3f ef       	ldi	r19, 0xFF	; 255
    6324:	4f e7       	ldi	r20, 0x7F	; 127
    6326:	57 e4       	ldi	r21, 0x47	; 71
    6328:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    632c:	18 16       	cp	r1, r24
    632e:	4c f5       	brge	.+82     	; 0x6382 <buzzerBeep_2+0x6a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6330:	69 8d       	ldd	r22, Y+25	; 0x19
    6332:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6334:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6336:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6338:	20 e0       	ldi	r18, 0x00	; 0
    633a:	30 e0       	ldi	r19, 0x00	; 0
    633c:	40 e2       	ldi	r20, 0x20	; 32
    633e:	51 e4       	ldi	r21, 0x41	; 65
    6340:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    6344:	dc 01       	movw	r26, r24
    6346:	cb 01       	movw	r24, r22
    6348:	bc 01       	movw	r22, r24
    634a:	cd 01       	movw	r24, r26
    634c:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    6350:	dc 01       	movw	r26, r24
    6352:	cb 01       	movw	r24, r22
    6354:	9c 8b       	std	Y+20, r25	; 0x14
    6356:	8b 8b       	std	Y+19, r24	; 0x13
    6358:	0f c0       	rjmp	.+30     	; 0x6378 <buzzerBeep_2+0x69c>
    635a:	80 e7       	ldi	r24, 0x70	; 112
    635c:	91 e0       	ldi	r25, 0x01	; 1
    635e:	9a 8b       	std	Y+18, r25	; 0x12
    6360:	89 8b       	std	Y+17, r24	; 0x11
    6362:	89 89       	ldd	r24, Y+17	; 0x11
    6364:	9a 89       	ldd	r25, Y+18	; 0x12
    6366:	01 97       	sbiw	r24, 0x01	; 1
    6368:	f1 f7       	brne	.-4      	; 0x6366 <buzzerBeep_2+0x68a>
    636a:	9a 8b       	std	Y+18, r25	; 0x12
    636c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    636e:	8b 89       	ldd	r24, Y+19	; 0x13
    6370:	9c 89       	ldd	r25, Y+20	; 0x14
    6372:	01 97       	sbiw	r24, 0x01	; 1
    6374:	9c 8b       	std	Y+20, r25	; 0x14
    6376:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6378:	8b 89       	ldd	r24, Y+19	; 0x13
    637a:	9c 89       	ldd	r25, Y+20	; 0x14
    637c:	00 97       	sbiw	r24, 0x00	; 0
    637e:	69 f7       	brne	.-38     	; 0x635a <buzzerBeep_2+0x67e>
    6380:	14 c0       	rjmp	.+40     	; 0x63aa <buzzerBeep_2+0x6ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6382:	6d 89       	ldd	r22, Y+21	; 0x15
    6384:	7e 89       	ldd	r23, Y+22	; 0x16
    6386:	8f 89       	ldd	r24, Y+23	; 0x17
    6388:	98 8d       	ldd	r25, Y+24	; 0x18
    638a:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    638e:	dc 01       	movw	r26, r24
    6390:	cb 01       	movw	r24, r22
    6392:	9c 8b       	std	Y+20, r25	; 0x14
    6394:	8b 8b       	std	Y+19, r24	; 0x13
    6396:	8b 89       	ldd	r24, Y+19	; 0x13
    6398:	9c 89       	ldd	r25, Y+20	; 0x14
    639a:	98 8b       	std	Y+16, r25	; 0x10
    639c:	8f 87       	std	Y+15, r24	; 0x0f
    639e:	8f 85       	ldd	r24, Y+15	; 0x0f
    63a0:	98 89       	ldd	r25, Y+16	; 0x10
    63a2:	01 97       	sbiw	r24, 0x01	; 1
    63a4:	f1 f7       	brne	.-4      	; 0x63a2 <buzzerBeep_2+0x6c6>
    63a6:	98 8b       	std	Y+16, r25	; 0x10
    63a8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1000);
    faceFront();
    63aa:	0e 94 75 12 	call	0x24ea	; 0x24ea <faceFront>
    63ae:	80 e0       	ldi	r24, 0x00	; 0
    63b0:	90 e0       	ldi	r25, 0x00	; 0
    63b2:	aa e7       	ldi	r26, 0x7A	; 122
    63b4:	b4 e4       	ldi	r27, 0x44	; 68
    63b6:	8b 87       	std	Y+11, r24	; 0x0b
    63b8:	9c 87       	std	Y+12, r25	; 0x0c
    63ba:	ad 87       	std	Y+13, r26	; 0x0d
    63bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    63be:	6b 85       	ldd	r22, Y+11	; 0x0b
    63c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    63c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    63c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    63c6:	26 e6       	ldi	r18, 0x66	; 102
    63c8:	36 e6       	ldi	r19, 0x66	; 102
    63ca:	46 e6       	ldi	r20, 0x66	; 102
    63cc:	55 e4       	ldi	r21, 0x45	; 69
    63ce:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    63d2:	dc 01       	movw	r26, r24
    63d4:	cb 01       	movw	r24, r22
    63d6:	8f 83       	std	Y+7, r24	; 0x07
    63d8:	98 87       	std	Y+8, r25	; 0x08
    63da:	a9 87       	std	Y+9, r26	; 0x09
    63dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    63de:	6f 81       	ldd	r22, Y+7	; 0x07
    63e0:	78 85       	ldd	r23, Y+8	; 0x08
    63e2:	89 85       	ldd	r24, Y+9	; 0x09
    63e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    63e6:	20 e0       	ldi	r18, 0x00	; 0
    63e8:	30 e0       	ldi	r19, 0x00	; 0
    63ea:	40 e8       	ldi	r20, 0x80	; 128
    63ec:	5f e3       	ldi	r21, 0x3F	; 63
    63ee:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    63f2:	88 23       	and	r24, r24
    63f4:	2c f4       	brge	.+10     	; 0x6400 <buzzerBeep_2+0x724>
		__ticks = 1;
    63f6:	81 e0       	ldi	r24, 0x01	; 1
    63f8:	90 e0       	ldi	r25, 0x00	; 0
    63fa:	9e 83       	std	Y+6, r25	; 0x06
    63fc:	8d 83       	std	Y+5, r24	; 0x05
    63fe:	3f c0       	rjmp	.+126    	; 0x647e <buzzerBeep_2+0x7a2>
	else if (__tmp > 65535)
    6400:	6f 81       	ldd	r22, Y+7	; 0x07
    6402:	78 85       	ldd	r23, Y+8	; 0x08
    6404:	89 85       	ldd	r24, Y+9	; 0x09
    6406:	9a 85       	ldd	r25, Y+10	; 0x0a
    6408:	20 e0       	ldi	r18, 0x00	; 0
    640a:	3f ef       	ldi	r19, 0xFF	; 255
    640c:	4f e7       	ldi	r20, 0x7F	; 127
    640e:	57 e4       	ldi	r21, 0x47	; 71
    6410:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    6414:	18 16       	cp	r1, r24
    6416:	4c f5       	brge	.+82     	; 0x646a <buzzerBeep_2+0x78e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6418:	6b 85       	ldd	r22, Y+11	; 0x0b
    641a:	7c 85       	ldd	r23, Y+12	; 0x0c
    641c:	8d 85       	ldd	r24, Y+13	; 0x0d
    641e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6420:	20 e0       	ldi	r18, 0x00	; 0
    6422:	30 e0       	ldi	r19, 0x00	; 0
    6424:	40 e2       	ldi	r20, 0x20	; 32
    6426:	51 e4       	ldi	r21, 0x41	; 65
    6428:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    642c:	dc 01       	movw	r26, r24
    642e:	cb 01       	movw	r24, r22
    6430:	bc 01       	movw	r22, r24
    6432:	cd 01       	movw	r24, r26
    6434:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    6438:	dc 01       	movw	r26, r24
    643a:	cb 01       	movw	r24, r22
    643c:	9e 83       	std	Y+6, r25	; 0x06
    643e:	8d 83       	std	Y+5, r24	; 0x05
    6440:	0f c0       	rjmp	.+30     	; 0x6460 <buzzerBeep_2+0x784>
    6442:	80 e7       	ldi	r24, 0x70	; 112
    6444:	91 e0       	ldi	r25, 0x01	; 1
    6446:	9c 83       	std	Y+4, r25	; 0x04
    6448:	8b 83       	std	Y+3, r24	; 0x03
    644a:	8b 81       	ldd	r24, Y+3	; 0x03
    644c:	9c 81       	ldd	r25, Y+4	; 0x04
    644e:	01 97       	sbiw	r24, 0x01	; 1
    6450:	f1 f7       	brne	.-4      	; 0x644e <buzzerBeep_2+0x772>
    6452:	9c 83       	std	Y+4, r25	; 0x04
    6454:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6456:	8d 81       	ldd	r24, Y+5	; 0x05
    6458:	9e 81       	ldd	r25, Y+6	; 0x06
    645a:	01 97       	sbiw	r24, 0x01	; 1
    645c:	9e 83       	std	Y+6, r25	; 0x06
    645e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6460:	8d 81       	ldd	r24, Y+5	; 0x05
    6462:	9e 81       	ldd	r25, Y+6	; 0x06
    6464:	00 97       	sbiw	r24, 0x00	; 0
    6466:	69 f7       	brne	.-38     	; 0x6442 <buzzerBeep_2+0x766>
    6468:	14 c0       	rjmp	.+40     	; 0x6492 <buzzerBeep_2+0x7b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    646a:	6f 81       	ldd	r22, Y+7	; 0x07
    646c:	78 85       	ldd	r23, Y+8	; 0x08
    646e:	89 85       	ldd	r24, Y+9	; 0x09
    6470:	9a 85       	ldd	r25, Y+10	; 0x0a
    6472:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    6476:	dc 01       	movw	r26, r24
    6478:	cb 01       	movw	r24, r22
    647a:	9e 83       	std	Y+6, r25	; 0x06
    647c:	8d 83       	std	Y+5, r24	; 0x05
    647e:	8d 81       	ldd	r24, Y+5	; 0x05
    6480:	9e 81       	ldd	r25, Y+6	; 0x06
    6482:	9a 83       	std	Y+2, r25	; 0x02
    6484:	89 83       	std	Y+1, r24	; 0x01
    6486:	89 81       	ldd	r24, Y+1	; 0x01
    6488:	9a 81       	ldd	r25, Y+2	; 0x02
    648a:	01 97       	sbiw	r24, 0x01	; 1
    648c:	f1 f7       	brne	.-4      	; 0x648a <buzzerBeep_2+0x7ae>
    648e:	9a 83       	std	Y+2, r25	; 0x02
    6490:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);

    buzzer_1();
    6492:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <buzzer_1>
    return;

}
    6496:	ce 59       	subi	r28, 0x9E	; 158
    6498:	df 4f       	sbci	r29, 0xFF	; 255
    649a:	0f b6       	in	r0, 0x3f	; 63
    649c:	f8 94       	cli
    649e:	de bf       	out	0x3e, r29	; 62
    64a0:	0f be       	out	0x3f, r0	; 63
    64a2:	cd bf       	out	0x3d, r28	; 61
    64a4:	cf 91       	pop	r28
    64a6:	df 91       	pop	r29
    64a8:	1f 91       	pop	r17
    64aa:	0f 91       	pop	r16
    64ac:	08 95       	ret

000064ae <findLine>:

void findLine(void)
{
    64ae:	df 93       	push	r29
    64b0:	cf 93       	push	r28
    64b2:	cd b7       	in	r28, 0x3d	; 61
    64b4:	de b7       	in	r29, 0x3e	; 62
    64b6:	62 97       	sbiw	r28, 0x12	; 18
    64b8:	0f b6       	in	r0, 0x3f	; 63
    64ba:	f8 94       	cli
    64bc:	de bf       	out	0x3e, r29	; 62
    64be:	0f be       	out	0x3f, r0	; 63
    64c0:	cd bf       	out	0x3d, r28	; 61
    nodeMissEnable = 0;
    64c2:	10 92 01 02 	sts	0x0201, r1
    64c6:	10 92 00 02 	sts	0x0200, r1

    int tempLeftCount = ShaftCountLeft;
    64ca:	80 91 10 03 	lds	r24, 0x0310
    64ce:	90 91 11 03 	lds	r25, 0x0311
    64d2:	a0 91 12 03 	lds	r26, 0x0312
    64d6:	b0 91 13 03 	lds	r27, 0x0313
    64da:	9a 8b       	std	Y+18, r25	; 0x12
    64dc:	89 8b       	std	Y+17, r24	; 0x11
    int tempRightCount = ShaftCountRight;
    64de:	80 91 14 03 	lds	r24, 0x0314
    64e2:	90 91 15 03 	lds	r25, 0x0315
    64e6:	a0 91 16 03 	lds	r26, 0x0316
    64ea:	b0 91 17 03 	lds	r27, 0x0317
    64ee:	98 8b       	std	Y+16, r25	; 0x10
    64f0:	8f 87       	std	Y+15, r24	; 0x0f

    ShaftCountRight = 0;
    64f2:	10 92 14 03 	sts	0x0314, r1
    64f6:	10 92 15 03 	sts	0x0315, r1
    64fa:	10 92 16 03 	sts	0x0316, r1
    64fe:	10 92 17 03 	sts	0x0317, r1
    ShaftCountLeft = 0;
    6502:	10 92 10 03 	sts	0x0310, r1
    6506:	10 92 11 03 	sts	0x0311, r1
    650a:	10 92 12 03 	sts	0x0312, r1
    650e:	10 92 13 03 	sts	0x0313, r1

    velocity(forwardLeftSpeed - 20, forwardRightSpeed - 20);
    6512:	80 ea       	ldi	r24, 0xA0	; 160
    6514:	60 ea       	ldi	r22, 0xA0	; 160
    6516:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>

    sensorRight = ADC_Conversion(1);
    651a:	81 e0       	ldi	r24, 0x01	; 1
    651c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    6520:	88 2f       	mov	r24, r24
    6522:	90 e0       	ldi	r25, 0x00	; 0
    6524:	90 93 41 03 	sts	0x0341, r25
    6528:	80 93 40 03 	sts	0x0340, r24

    left();
    652c:	0e 94 05 03 	call	0x60a	; 0x60a <left>
    6530:	42 c0       	rjmp	.+132    	; 0x65b6 <findLine+0x108>
    while((sensorRight < 20) && (ShaftCountRight < 8))
    {
        centre = ADC_Conversion(2);
    6532:	82 e0       	ldi	r24, 0x02	; 2
    6534:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    6538:	88 2f       	mov	r24, r24
    653a:	90 e0       	ldi	r25, 0x00	; 0
    653c:	90 93 2f 03 	sts	0x032F, r25
    6540:	80 93 2e 03 	sts	0x032E, r24
        if(centre > x)
    6544:	20 91 2e 03 	lds	r18, 0x032E
    6548:	30 91 2f 03 	lds	r19, 0x032F
    654c:	80 91 02 02 	lds	r24, 0x0202
    6550:	90 91 03 02 	lds	r25, 0x0203
    6554:	82 17       	cp	r24, r18
    6556:	93 07       	cpc	r25, r19
    6558:	2c f5       	brge	.+74     	; 0x65a4 <findLine+0xf6>
        {

            nodeMissEnable = 1;
    655a:	81 e0       	ldi	r24, 0x01	; 1
    655c:	90 e0       	ldi	r25, 0x00	; 0
    655e:	90 93 01 02 	sts	0x0201, r25
    6562:	80 93 00 02 	sts	0x0200, r24
            ShaftCountLeft = tempLeftCount;
    6566:	89 89       	ldd	r24, Y+17	; 0x11
    6568:	9a 89       	ldd	r25, Y+18	; 0x12
    656a:	aa 27       	eor	r26, r26
    656c:	97 fd       	sbrc	r25, 7
    656e:	a0 95       	com	r26
    6570:	ba 2f       	mov	r27, r26
    6572:	80 93 10 03 	sts	0x0310, r24
    6576:	90 93 11 03 	sts	0x0311, r25
    657a:	a0 93 12 03 	sts	0x0312, r26
    657e:	b0 93 13 03 	sts	0x0313, r27
            ShaftCountRight = tempRightCount;
    6582:	8f 85       	ldd	r24, Y+15	; 0x0f
    6584:	98 89       	ldd	r25, Y+16	; 0x10
    6586:	aa 27       	eor	r26, r26
    6588:	97 fd       	sbrc	r25, 7
    658a:	a0 95       	com	r26
    658c:	ba 2f       	mov	r27, r26
    658e:	80 93 14 03 	sts	0x0314, r24
    6592:	90 93 15 03 	sts	0x0315, r25
    6596:	a0 93 16 03 	sts	0x0316, r26
    659a:	b0 93 17 03 	sts	0x0317, r27
            forward();
    659e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    65a2:	07 c1       	rjmp	.+526    	; 0x67b2 <findLine+0x304>
            return;
        }
        sensorRight = ADC_Conversion(1);
    65a4:	81 e0       	ldi	r24, 0x01	; 1
    65a6:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    65aa:	88 2f       	mov	r24, r24
    65ac:	90 e0       	ldi	r25, 0x00	; 0
    65ae:	90 93 41 03 	sts	0x0341, r25
    65b2:	80 93 40 03 	sts	0x0340, r24
    velocity(forwardLeftSpeed - 20, forwardRightSpeed - 20);

    sensorRight = ADC_Conversion(1);

    left();
    while((sensorRight < 20) && (ShaftCountRight < 8))
    65b6:	80 91 40 03 	lds	r24, 0x0340
    65ba:	90 91 41 03 	lds	r25, 0x0341
    65be:	84 31       	cpi	r24, 0x14	; 20
    65c0:	91 05       	cpc	r25, r1
    65c2:	74 f4       	brge	.+28     	; 0x65e0 <findLine+0x132>
    65c4:	80 91 14 03 	lds	r24, 0x0314
    65c8:	90 91 15 03 	lds	r25, 0x0315
    65cc:	a0 91 16 03 	lds	r26, 0x0316
    65d0:	b0 91 17 03 	lds	r27, 0x0317
    65d4:	88 30       	cpi	r24, 0x08	; 8
    65d6:	91 05       	cpc	r25, r1
    65d8:	a1 05       	cpc	r26, r1
    65da:	b1 05       	cpc	r27, r1
    65dc:	08 f4       	brcc	.+2      	; 0x65e0 <findLine+0x132>
    65de:	a9 cf       	rjmp	.-174    	; 0x6532 <findLine+0x84>
            return;
        }
        sensorRight = ADC_Conversion(1);
    }

    stop();
    65e0:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    65e4:	80 e0       	ldi	r24, 0x00	; 0
    65e6:	90 e0       	ldi	r25, 0x00	; 0
    65e8:	a8 ec       	ldi	r26, 0xC8	; 200
    65ea:	b2 e4       	ldi	r27, 0x42	; 66
    65ec:	8b 87       	std	Y+11, r24	; 0x0b
    65ee:	9c 87       	std	Y+12, r25	; 0x0c
    65f0:	ad 87       	std	Y+13, r26	; 0x0d
    65f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    65f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    65f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    65f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    65fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    65fc:	26 e6       	ldi	r18, 0x66	; 102
    65fe:	36 e6       	ldi	r19, 0x66	; 102
    6600:	46 e6       	ldi	r20, 0x66	; 102
    6602:	55 e4       	ldi	r21, 0x45	; 69
    6604:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    6608:	dc 01       	movw	r26, r24
    660a:	cb 01       	movw	r24, r22
    660c:	8f 83       	std	Y+7, r24	; 0x07
    660e:	98 87       	std	Y+8, r25	; 0x08
    6610:	a9 87       	std	Y+9, r26	; 0x09
    6612:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6614:	6f 81       	ldd	r22, Y+7	; 0x07
    6616:	78 85       	ldd	r23, Y+8	; 0x08
    6618:	89 85       	ldd	r24, Y+9	; 0x09
    661a:	9a 85       	ldd	r25, Y+10	; 0x0a
    661c:	20 e0       	ldi	r18, 0x00	; 0
    661e:	30 e0       	ldi	r19, 0x00	; 0
    6620:	40 e8       	ldi	r20, 0x80	; 128
    6622:	5f e3       	ldi	r21, 0x3F	; 63
    6624:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    6628:	88 23       	and	r24, r24
    662a:	2c f4       	brge	.+10     	; 0x6636 <findLine+0x188>
		__ticks = 1;
    662c:	81 e0       	ldi	r24, 0x01	; 1
    662e:	90 e0       	ldi	r25, 0x00	; 0
    6630:	9e 83       	std	Y+6, r25	; 0x06
    6632:	8d 83       	std	Y+5, r24	; 0x05
    6634:	3f c0       	rjmp	.+126    	; 0x66b4 <findLine+0x206>
	else if (__tmp > 65535)
    6636:	6f 81       	ldd	r22, Y+7	; 0x07
    6638:	78 85       	ldd	r23, Y+8	; 0x08
    663a:	89 85       	ldd	r24, Y+9	; 0x09
    663c:	9a 85       	ldd	r25, Y+10	; 0x0a
    663e:	20 e0       	ldi	r18, 0x00	; 0
    6640:	3f ef       	ldi	r19, 0xFF	; 255
    6642:	4f e7       	ldi	r20, 0x7F	; 127
    6644:	57 e4       	ldi	r21, 0x47	; 71
    6646:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    664a:	18 16       	cp	r1, r24
    664c:	4c f5       	brge	.+82     	; 0x66a0 <findLine+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    664e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6650:	7c 85       	ldd	r23, Y+12	; 0x0c
    6652:	8d 85       	ldd	r24, Y+13	; 0x0d
    6654:	9e 85       	ldd	r25, Y+14	; 0x0e
    6656:	20 e0       	ldi	r18, 0x00	; 0
    6658:	30 e0       	ldi	r19, 0x00	; 0
    665a:	40 e2       	ldi	r20, 0x20	; 32
    665c:	51 e4       	ldi	r21, 0x41	; 65
    665e:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    6662:	dc 01       	movw	r26, r24
    6664:	cb 01       	movw	r24, r22
    6666:	bc 01       	movw	r22, r24
    6668:	cd 01       	movw	r24, r26
    666a:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    666e:	dc 01       	movw	r26, r24
    6670:	cb 01       	movw	r24, r22
    6672:	9e 83       	std	Y+6, r25	; 0x06
    6674:	8d 83       	std	Y+5, r24	; 0x05
    6676:	0f c0       	rjmp	.+30     	; 0x6696 <findLine+0x1e8>
    6678:	80 e7       	ldi	r24, 0x70	; 112
    667a:	91 e0       	ldi	r25, 0x01	; 1
    667c:	9c 83       	std	Y+4, r25	; 0x04
    667e:	8b 83       	std	Y+3, r24	; 0x03
    6680:	8b 81       	ldd	r24, Y+3	; 0x03
    6682:	9c 81       	ldd	r25, Y+4	; 0x04
    6684:	01 97       	sbiw	r24, 0x01	; 1
    6686:	f1 f7       	brne	.-4      	; 0x6684 <findLine+0x1d6>
    6688:	9c 83       	std	Y+4, r25	; 0x04
    668a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    668c:	8d 81       	ldd	r24, Y+5	; 0x05
    668e:	9e 81       	ldd	r25, Y+6	; 0x06
    6690:	01 97       	sbiw	r24, 0x01	; 1
    6692:	9e 83       	std	Y+6, r25	; 0x06
    6694:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6696:	8d 81       	ldd	r24, Y+5	; 0x05
    6698:	9e 81       	ldd	r25, Y+6	; 0x06
    669a:	00 97       	sbiw	r24, 0x00	; 0
    669c:	69 f7       	brne	.-38     	; 0x6678 <findLine+0x1ca>
    669e:	14 c0       	rjmp	.+40     	; 0x66c8 <findLine+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    66a0:	6f 81       	ldd	r22, Y+7	; 0x07
    66a2:	78 85       	ldd	r23, Y+8	; 0x08
    66a4:	89 85       	ldd	r24, Y+9	; 0x09
    66a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    66a8:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    66ac:	dc 01       	movw	r26, r24
    66ae:	cb 01       	movw	r24, r22
    66b0:	9e 83       	std	Y+6, r25	; 0x06
    66b2:	8d 83       	std	Y+5, r24	; 0x05
    66b4:	8d 81       	ldd	r24, Y+5	; 0x05
    66b6:	9e 81       	ldd	r25, Y+6	; 0x06
    66b8:	9a 83       	std	Y+2, r25	; 0x02
    66ba:	89 83       	std	Y+1, r24	; 0x01
    66bc:	89 81       	ldd	r24, Y+1	; 0x01
    66be:	9a 81       	ldd	r25, Y+2	; 0x02
    66c0:	01 97       	sbiw	r24, 0x01	; 1
    66c2:	f1 f7       	brne	.-4      	; 0x66c0 <findLine+0x212>
    66c4:	9a 83       	std	Y+2, r25	; 0x02
    66c6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);

    sensorLeft = ADC_Conversion(3);
    66c8:	83 e0       	ldi	r24, 0x03	; 3
    66ca:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    66ce:	88 2f       	mov	r24, r24
    66d0:	90 e0       	ldi	r25, 0x00	; 0
    66d2:	90 93 29 03 	sts	0x0329, r25
    66d6:	80 93 28 03 	sts	0x0328, r24
    right();
    66da:	0e 94 99 03 	call	0x732	; 0x732 <right>

    ShaftCountLeft = 0;
    66de:	10 92 10 03 	sts	0x0310, r1
    66e2:	10 92 11 03 	sts	0x0311, r1
    66e6:	10 92 12 03 	sts	0x0312, r1
    66ea:	10 92 13 03 	sts	0x0313, r1
    ShaftCountRight = 0;
    66ee:	10 92 14 03 	sts	0x0314, r1
    66f2:	10 92 15 03 	sts	0x0315, r1
    66f6:	10 92 16 03 	sts	0x0316, r1
    66fa:	10 92 17 03 	sts	0x0317, r1
    66fe:	44 c0       	rjmp	.+136    	; 0x6788 <findLine+0x2da>

    while((sensorLeft < 20) && (ShaftCountLeft < 16))
    {
        centre = ADC_Conversion(2);
    6700:	82 e0       	ldi	r24, 0x02	; 2
    6702:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    6706:	88 2f       	mov	r24, r24
    6708:	90 e0       	ldi	r25, 0x00	; 0
    670a:	90 93 2f 03 	sts	0x032F, r25
    670e:	80 93 2e 03 	sts	0x032E, r24
        if(centre > x)
    6712:	20 91 2e 03 	lds	r18, 0x032E
    6716:	30 91 2f 03 	lds	r19, 0x032F
    671a:	80 91 02 02 	lds	r24, 0x0202
    671e:	90 91 03 02 	lds	r25, 0x0203
    6722:	82 17       	cp	r24, r18
    6724:	93 07       	cpc	r25, r19
    6726:	3c f5       	brge	.+78     	; 0x6776 <findLine+0x2c8>
        {
            stop();
    6728:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
            nodeMissEnable = 1;
    672c:	81 e0       	ldi	r24, 0x01	; 1
    672e:	90 e0       	ldi	r25, 0x00	; 0
    6730:	90 93 01 02 	sts	0x0201, r25
    6734:	80 93 00 02 	sts	0x0200, r24
            ShaftCountLeft = tempLeftCount;
    6738:	89 89       	ldd	r24, Y+17	; 0x11
    673a:	9a 89       	ldd	r25, Y+18	; 0x12
    673c:	aa 27       	eor	r26, r26
    673e:	97 fd       	sbrc	r25, 7
    6740:	a0 95       	com	r26
    6742:	ba 2f       	mov	r27, r26
    6744:	80 93 10 03 	sts	0x0310, r24
    6748:	90 93 11 03 	sts	0x0311, r25
    674c:	a0 93 12 03 	sts	0x0312, r26
    6750:	b0 93 13 03 	sts	0x0313, r27
            ShaftCountRight = tempRightCount;
    6754:	8f 85       	ldd	r24, Y+15	; 0x0f
    6756:	98 89       	ldd	r25, Y+16	; 0x10
    6758:	aa 27       	eor	r26, r26
    675a:	97 fd       	sbrc	r25, 7
    675c:	a0 95       	com	r26
    675e:	ba 2f       	mov	r27, r26
    6760:	80 93 14 03 	sts	0x0314, r24
    6764:	90 93 15 03 	sts	0x0315, r25
    6768:	a0 93 16 03 	sts	0x0316, r26
    676c:	b0 93 17 03 	sts	0x0317, r27
            forward();
    6770:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    6774:	1e c0       	rjmp	.+60     	; 0x67b2 <findLine+0x304>
            return;
        }
        sensorLeft = ADC_Conversion(3);
    6776:	83 e0       	ldi	r24, 0x03	; 3
    6778:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    677c:	88 2f       	mov	r24, r24
    677e:	90 e0       	ldi	r25, 0x00	; 0
    6780:	90 93 29 03 	sts	0x0329, r25
    6784:	80 93 28 03 	sts	0x0328, r24
    right();

    ShaftCountLeft = 0;
    ShaftCountRight = 0;

    while((sensorLeft < 20) && (ShaftCountLeft < 16))
    6788:	80 91 28 03 	lds	r24, 0x0328
    678c:	90 91 29 03 	lds	r25, 0x0329
    6790:	84 31       	cpi	r24, 0x14	; 20
    6792:	91 05       	cpc	r25, r1
    6794:	74 f4       	brge	.+28     	; 0x67b2 <findLine+0x304>
    6796:	80 91 10 03 	lds	r24, 0x0310
    679a:	90 91 11 03 	lds	r25, 0x0311
    679e:	a0 91 12 03 	lds	r26, 0x0312
    67a2:	b0 91 13 03 	lds	r27, 0x0313
    67a6:	80 31       	cpi	r24, 0x10	; 16
    67a8:	91 05       	cpc	r25, r1
    67aa:	a1 05       	cpc	r26, r1
    67ac:	b1 05       	cpc	r27, r1
    67ae:	08 f4       	brcc	.+2      	; 0x67b2 <findLine+0x304>
    67b0:	a7 cf       	rjmp	.-178    	; 0x6700 <findLine+0x252>
    lcd_string("Leaving the program now!");
    while(1);

*/

}
    67b2:	62 96       	adiw	r28, 0x12	; 18
    67b4:	0f b6       	in	r0, 0x3f	; 63
    67b6:	f8 94       	cli
    67b8:	de bf       	out	0x3e, r29	; 62
    67ba:	0f be       	out	0x3f, r0	; 63
    67bc:	cd bf       	out	0x3d, r28	; 61
    67be:	cf 91       	pop	r28
    67c0:	df 91       	pop	r29
    67c2:	08 95       	ret

000067c4 <lineFollowBack>:

void lineFollowBack(void)
{
    67c4:	df 93       	push	r29
    67c6:	cf 93       	push	r28
    67c8:	cd b7       	in	r28, 0x3d	; 61
    67ca:	de b7       	in	r29, 0x3e	; 62
    67cc:	2e 97       	sbiw	r28, 0x0e	; 14
    67ce:	0f b6       	in	r0, 0x3f	; 63
    67d0:	f8 94       	cli
    67d2:	de bf       	out	0x3e, r29	; 62
    67d4:	0f be       	out	0x3f, r0	; 63
    67d6:	cd bf       	out	0x3d, r28	; 61
    nodeMissEnable = 0;
    67d8:	10 92 01 02 	sts	0x0201, r1
    67dc:	10 92 00 02 	sts	0x0200, r1
    stop();
    _delay_ms(100);

    velocity(forwardLeftSpeed, forwardRightSpeed);
*/
    ShaftCountLeft = 0;
    67e0:	10 92 10 03 	sts	0x0310, r1
    67e4:	10 92 11 03 	sts	0x0311, r1
    67e8:	10 92 12 03 	sts	0x0312, r1
    67ec:	10 92 13 03 	sts	0x0313, r1

    back();
    67f0:	0e 94 7f 02 	call	0x4fe	; 0x4fe <back>
    sensorLeft = ADC_Conversion(3);
    67f4:	83 e0       	ldi	r24, 0x03	; 3
    67f6:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    67fa:	88 2f       	mov	r24, r24
    67fc:	90 e0       	ldi	r25, 0x00	; 0
    67fe:	90 93 29 03 	sts	0x0329, r25
    6802:	80 93 28 03 	sts	0x0328, r24
    sensorRight = ADC_Conversion(1);
    6806:	81 e0       	ldi	r24, 0x01	; 1
    6808:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    680c:	88 2f       	mov	r24, r24
    680e:	90 e0       	ldi	r25, 0x00	; 0
    6810:	90 93 41 03 	sts	0x0341, r25
    6814:	80 93 40 03 	sts	0x0340, r24
    6818:	2a c0       	rjmp	.+84     	; 0x686e <lineFollowBack+0xaa>

    while(!(sensorLeft > 20 && sensorRight > 20) && ShaftCountLeft < 40)
    {
         lcd_print(2, 1, sensorLeft, 3);
    681a:	80 91 28 03 	lds	r24, 0x0328
    681e:	90 91 29 03 	lds	r25, 0x0329
    6822:	9c 01       	movw	r18, r24
    6824:	82 e0       	ldi	r24, 0x02	; 2
    6826:	61 e0       	ldi	r22, 0x01	; 1
    6828:	a9 01       	movw	r20, r18
    682a:	23 e0       	ldi	r18, 0x03	; 3
    682c:	30 e0       	ldi	r19, 0x00	; 0
    682e:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcd_print>

        lcd_print(2, 9, sensorRight, 3);
    6832:	80 91 40 03 	lds	r24, 0x0340
    6836:	90 91 41 03 	lds	r25, 0x0341
    683a:	9c 01       	movw	r18, r24
    683c:	82 e0       	ldi	r24, 0x02	; 2
    683e:	69 e0       	ldi	r22, 0x09	; 9
    6840:	a9 01       	movw	r20, r18
    6842:	23 e0       	ldi	r18, 0x03	; 3
    6844:	30 e0       	ldi	r19, 0x00	; 0
    6846:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcd_print>
        sensorLeft = ADC_Conversion(3);
    684a:	83 e0       	ldi	r24, 0x03	; 3
    684c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    6850:	88 2f       	mov	r24, r24
    6852:	90 e0       	ldi	r25, 0x00	; 0
    6854:	90 93 29 03 	sts	0x0329, r25
    6858:	80 93 28 03 	sts	0x0328, r24
        sensorRight = ADC_Conversion(1);
    685c:	81 e0       	ldi	r24, 0x01	; 1
    685e:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    6862:	88 2f       	mov	r24, r24
    6864:	90 e0       	ldi	r25, 0x00	; 0
    6866:	90 93 41 03 	sts	0x0341, r25
    686a:	80 93 40 03 	sts	0x0340, r24

    back();
    sensorLeft = ADC_Conversion(3);
    sensorRight = ADC_Conversion(1);

    while(!(sensorLeft > 20 && sensorRight > 20) && ShaftCountLeft < 40)
    686e:	80 91 28 03 	lds	r24, 0x0328
    6872:	90 91 29 03 	lds	r25, 0x0329
    6876:	85 31       	cpi	r24, 0x15	; 21
    6878:	91 05       	cpc	r25, r1
    687a:	3c f0       	brlt	.+14     	; 0x688a <lineFollowBack+0xc6>
    687c:	80 91 40 03 	lds	r24, 0x0340
    6880:	90 91 41 03 	lds	r25, 0x0341
    6884:	85 31       	cpi	r24, 0x15	; 21
    6886:	91 05       	cpc	r25, r1
    6888:	74 f4       	brge	.+28     	; 0x68a6 <lineFollowBack+0xe2>
    688a:	80 91 10 03 	lds	r24, 0x0310
    688e:	90 91 11 03 	lds	r25, 0x0311
    6892:	a0 91 12 03 	lds	r26, 0x0312
    6896:	b0 91 13 03 	lds	r27, 0x0313
    689a:	88 32       	cpi	r24, 0x28	; 40
    689c:	91 05       	cpc	r25, r1
    689e:	a1 05       	cpc	r26, r1
    68a0:	b1 05       	cpc	r27, r1
    68a2:	08 f4       	brcc	.+2      	; 0x68a6 <lineFollowBack+0xe2>
    68a4:	ba cf       	rjmp	.-140    	; 0x681a <lineFollowBack+0x56>
        lcd_print(2, 9, sensorRight, 3);
        sensorLeft = ADC_Conversion(3);
        sensorRight = ADC_Conversion(1);
    }

    stop();
    68a6:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    68aa:	80 e0       	ldi	r24, 0x00	; 0
    68ac:	90 e0       	ldi	r25, 0x00	; 0
    68ae:	a8 ec       	ldi	r26, 0xC8	; 200
    68b0:	b2 e4       	ldi	r27, 0x42	; 66
    68b2:	8b 87       	std	Y+11, r24	; 0x0b
    68b4:	9c 87       	std	Y+12, r25	; 0x0c
    68b6:	ad 87       	std	Y+13, r26	; 0x0d
    68b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    68ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    68bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    68be:	8d 85       	ldd	r24, Y+13	; 0x0d
    68c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    68c2:	26 e6       	ldi	r18, 0x66	; 102
    68c4:	36 e6       	ldi	r19, 0x66	; 102
    68c6:	46 e6       	ldi	r20, 0x66	; 102
    68c8:	55 e4       	ldi	r21, 0x45	; 69
    68ca:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    68ce:	dc 01       	movw	r26, r24
    68d0:	cb 01       	movw	r24, r22
    68d2:	8f 83       	std	Y+7, r24	; 0x07
    68d4:	98 87       	std	Y+8, r25	; 0x08
    68d6:	a9 87       	std	Y+9, r26	; 0x09
    68d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    68da:	6f 81       	ldd	r22, Y+7	; 0x07
    68dc:	78 85       	ldd	r23, Y+8	; 0x08
    68de:	89 85       	ldd	r24, Y+9	; 0x09
    68e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    68e2:	20 e0       	ldi	r18, 0x00	; 0
    68e4:	30 e0       	ldi	r19, 0x00	; 0
    68e6:	40 e8       	ldi	r20, 0x80	; 128
    68e8:	5f e3       	ldi	r21, 0x3F	; 63
    68ea:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    68ee:	88 23       	and	r24, r24
    68f0:	2c f4       	brge	.+10     	; 0x68fc <lineFollowBack+0x138>
		__ticks = 1;
    68f2:	81 e0       	ldi	r24, 0x01	; 1
    68f4:	90 e0       	ldi	r25, 0x00	; 0
    68f6:	9e 83       	std	Y+6, r25	; 0x06
    68f8:	8d 83       	std	Y+5, r24	; 0x05
    68fa:	3f c0       	rjmp	.+126    	; 0x697a <lineFollowBack+0x1b6>
	else if (__tmp > 65535)
    68fc:	6f 81       	ldd	r22, Y+7	; 0x07
    68fe:	78 85       	ldd	r23, Y+8	; 0x08
    6900:	89 85       	ldd	r24, Y+9	; 0x09
    6902:	9a 85       	ldd	r25, Y+10	; 0x0a
    6904:	20 e0       	ldi	r18, 0x00	; 0
    6906:	3f ef       	ldi	r19, 0xFF	; 255
    6908:	4f e7       	ldi	r20, 0x7F	; 127
    690a:	57 e4       	ldi	r21, 0x47	; 71
    690c:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    6910:	18 16       	cp	r1, r24
    6912:	4c f5       	brge	.+82     	; 0x6966 <lineFollowBack+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6914:	6b 85       	ldd	r22, Y+11	; 0x0b
    6916:	7c 85       	ldd	r23, Y+12	; 0x0c
    6918:	8d 85       	ldd	r24, Y+13	; 0x0d
    691a:	9e 85       	ldd	r25, Y+14	; 0x0e
    691c:	20 e0       	ldi	r18, 0x00	; 0
    691e:	30 e0       	ldi	r19, 0x00	; 0
    6920:	40 e2       	ldi	r20, 0x20	; 32
    6922:	51 e4       	ldi	r21, 0x41	; 65
    6924:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    6928:	dc 01       	movw	r26, r24
    692a:	cb 01       	movw	r24, r22
    692c:	bc 01       	movw	r22, r24
    692e:	cd 01       	movw	r24, r26
    6930:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    6934:	dc 01       	movw	r26, r24
    6936:	cb 01       	movw	r24, r22
    6938:	9e 83       	std	Y+6, r25	; 0x06
    693a:	8d 83       	std	Y+5, r24	; 0x05
    693c:	0f c0       	rjmp	.+30     	; 0x695c <lineFollowBack+0x198>
    693e:	80 e7       	ldi	r24, 0x70	; 112
    6940:	91 e0       	ldi	r25, 0x01	; 1
    6942:	9c 83       	std	Y+4, r25	; 0x04
    6944:	8b 83       	std	Y+3, r24	; 0x03
    6946:	8b 81       	ldd	r24, Y+3	; 0x03
    6948:	9c 81       	ldd	r25, Y+4	; 0x04
    694a:	01 97       	sbiw	r24, 0x01	; 1
    694c:	f1 f7       	brne	.-4      	; 0x694a <lineFollowBack+0x186>
    694e:	9c 83       	std	Y+4, r25	; 0x04
    6950:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6952:	8d 81       	ldd	r24, Y+5	; 0x05
    6954:	9e 81       	ldd	r25, Y+6	; 0x06
    6956:	01 97       	sbiw	r24, 0x01	; 1
    6958:	9e 83       	std	Y+6, r25	; 0x06
    695a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    695c:	8d 81       	ldd	r24, Y+5	; 0x05
    695e:	9e 81       	ldd	r25, Y+6	; 0x06
    6960:	00 97       	sbiw	r24, 0x00	; 0
    6962:	69 f7       	brne	.-38     	; 0x693e <lineFollowBack+0x17a>
    6964:	14 c0       	rjmp	.+40     	; 0x698e <lineFollowBack+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6966:	6f 81       	ldd	r22, Y+7	; 0x07
    6968:	78 85       	ldd	r23, Y+8	; 0x08
    696a:	89 85       	ldd	r24, Y+9	; 0x09
    696c:	9a 85       	ldd	r25, Y+10	; 0x0a
    696e:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    6972:	dc 01       	movw	r26, r24
    6974:	cb 01       	movw	r24, r22
    6976:	9e 83       	std	Y+6, r25	; 0x06
    6978:	8d 83       	std	Y+5, r24	; 0x05
    697a:	8d 81       	ldd	r24, Y+5	; 0x05
    697c:	9e 81       	ldd	r25, Y+6	; 0x06
    697e:	9a 83       	std	Y+2, r25	; 0x02
    6980:	89 83       	std	Y+1, r24	; 0x01
    6982:	89 81       	ldd	r24, Y+1	; 0x01
    6984:	9a 81       	ldd	r25, Y+2	; 0x02
    6986:	01 97       	sbiw	r24, 0x01	; 1
    6988:	f1 f7       	brne	.-4      	; 0x6986 <lineFollowBack+0x1c2>
    698a:	9a 83       	std	Y+2, r25	; 0x02
    698c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);

    forward();
    698e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    nodeMissEnable = 1;
    6992:	81 e0       	ldi	r24, 0x01	; 1
    6994:	90 e0       	ldi	r25, 0x00	; 0
    6996:	90 93 01 02 	sts	0x0201, r25
    699a:	80 93 00 02 	sts	0x0200, r24

}
    699e:	2e 96       	adiw	r28, 0x0e	; 14
    69a0:	0f b6       	in	r0, 0x3f	; 63
    69a2:	f8 94       	cli
    69a4:	de bf       	out	0x3e, r29	; 62
    69a6:	0f be       	out	0x3f, r0	; 63
    69a8:	cd bf       	out	0x3d, r28	; 61
    69aa:	cf 91       	pop	r28
    69ac:	df 91       	pop	r29
    69ae:	08 95       	ret

000069b0 <skipNodes>:

void skipNodes(int n)
{
    69b0:	df 93       	push	r29
    69b2:	cf 93       	push	r28
    69b4:	cd b7       	in	r28, 0x3d	; 61
    69b6:	de b7       	in	r29, 0x3e	; 62
    69b8:	66 97       	sbiw	r28, 0x16	; 22
    69ba:	0f b6       	in	r0, 0x3f	; 63
    69bc:	f8 94       	cli
    69be:	de bf       	out	0x3e, r29	; 62
    69c0:	0f be       	out	0x3f, r0	; 63
    69c2:	cd bf       	out	0x3d, r28	; 61
    69c4:	9e 8b       	std	Y+22, r25	; 0x16
    69c6:	8d 8b       	std	Y+21, r24	; 0x15
    nodeMissTracker = 0;
    69c8:	10 92 19 03 	sts	0x0319, r1
    69cc:	10 92 18 03 	sts	0x0318, r1

    int temp = 0;
    69d0:	1c 8a       	std	Y+20, r1	; 0x14
    69d2:	1b 8a       	std	Y+19, r1	; 0x13

    int error = 0, lastError = 0;
    69d4:	1a 8a       	std	Y+18, r1	; 0x12
    69d6:	19 8a       	std	Y+17, r1	; 0x11
    69d8:	18 8a       	std	Y+16, r1	; 0x10
    69da:	1f 86       	std	Y+15, r1	; 0x0f


    velocity(forwardLeftSpeed, forwardRightSpeed);
    69dc:	84 eb       	ldi	r24, 0xB4	; 180
    69de:	64 eb       	ldi	r22, 0xB4	; 180
    69e0:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    forward();
    69e4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>

    error = getError();
    69e8:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <getError>
    69ec:	9a 8b       	std	Y+18, r25	; 0x12
    69ee:	89 8b       	std	Y+17, r24	; 0x11
    69f0:	d6 c0       	rjmp	.+428    	; 0x6b9e <skipNodes+0x1ee>
    lastError = error;
    line_follow_mm(15);
*/
    while(temp < n)
    {
            error = getError();
    69f2:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <getError>
    69f6:	9a 8b       	std	Y+18, r25	; 0x12
    69f8:	89 8b       	std	Y+17, r24	; 0x11
            if(error == 0)
    69fa:	89 89       	ldd	r24, Y+17	; 0x11
    69fc:	9a 89       	ldd	r25, Y+18	; 0x12
    69fe:	00 97       	sbiw	r24, 0x00	; 0
    6a00:	69 f4       	brne	.+26     	; 0x6a1c <skipNodes+0x6c>
            {
                leftSpeed = forwardLeftSpeed;
    6a02:	84 eb       	ldi	r24, 0xB4	; 180
    6a04:	90 e0       	ldi	r25, 0x00	; 0
    6a06:	90 93 1f 03 	sts	0x031F, r25
    6a0a:	80 93 1e 03 	sts	0x031E, r24
                rightSpeed = forwardRightSpeed;
    6a0e:	84 eb       	ldi	r24, 0xB4	; 180
    6a10:	90 e0       	ldi	r25, 0x00	; 0
    6a12:	90 93 31 03 	sts	0x0331, r25
    6a16:	80 93 30 03 	sts	0x0330, r24
    6a1a:	29 c0       	rjmp	.+82     	; 0x6a6e <skipNodes+0xbe>
                leftSpeed = forwardLeftSpeed - 30;
                rightSpeed = forwardRightSpeed + 30;
            }
*/
        //Error is 100 when a node is detected.
            else if (error == 100)
    6a1c:	89 89       	ldd	r24, Y+17	; 0x11
    6a1e:	9a 89       	ldd	r25, Y+18	; 0x12
    6a20:	84 36       	cpi	r24, 0x64	; 100
    6a22:	91 05       	cpc	r25, r1
    6a24:	11 f5       	brne	.+68     	; 0x6a6a <skipNodes+0xba>
            {
                if(lastError != error)
    6a26:	2f 85       	ldd	r18, Y+15	; 0x0f
    6a28:	38 89       	ldd	r19, Y+16	; 0x10
    6a2a:	89 89       	ldd	r24, Y+17	; 0x11
    6a2c:	9a 89       	ldd	r25, Y+18	; 0x12
    6a2e:	28 17       	cp	r18, r24
    6a30:	39 07       	cpc	r19, r25
    6a32:	b1 f0       	breq	.+44     	; 0x6a60 <skipNodes+0xb0>
                {
                    nodeMissTracker = 0;
    6a34:	10 92 19 03 	sts	0x0319, r1
    6a38:	10 92 18 03 	sts	0x0318, r1
                    temp++;
    6a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    6a3e:	9c 89       	ldd	r25, Y+20	; 0x14
    6a40:	01 96       	adiw	r24, 0x01	; 1
    6a42:	9c 8b       	std	Y+20, r25	; 0x14
    6a44:	8b 8b       	std	Y+19, r24	; 0x13
                    leftSpeed = forwardLeftSpeed;
    6a46:	84 eb       	ldi	r24, 0xB4	; 180
    6a48:	90 e0       	ldi	r25, 0x00	; 0
    6a4a:	90 93 1f 03 	sts	0x031F, r25
    6a4e:	80 93 1e 03 	sts	0x031E, r24
                    rightSpeed = forwardRightSpeed;
    6a52:	84 eb       	ldi	r24, 0xB4	; 180
    6a54:	90 e0       	ldi	r25, 0x00	; 0
    6a56:	90 93 31 03 	sts	0x0331, r25
    6a5a:	80 93 30 03 	sts	0x0330, r24
    6a5e:	07 c0       	rjmp	.+14     	; 0x6a6e <skipNodes+0xbe>
                }

                else
                    velocity(forwardLeftSpeed, forwardRightSpeed);
    6a60:	84 eb       	ldi	r24, 0xB4	; 180
    6a62:	64 eb       	ldi	r22, 0xB4	; 180
    6a64:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    6a68:	02 c0       	rjmp	.+4      	; 0x6a6e <skipNodes+0xbe>
            }

            else
                findLine();
    6a6a:	0e 94 57 32 	call	0x64ae	; 0x64ae <findLine>

            velocity(leftSpeed, rightSpeed);
    6a6e:	80 91 1e 03 	lds	r24, 0x031E
    6a72:	90 91 1f 03 	lds	r25, 0x031F
    6a76:	28 2f       	mov	r18, r24
    6a78:	80 91 30 03 	lds	r24, 0x0330
    6a7c:	90 91 31 03 	lds	r25, 0x0331
    6a80:	98 2f       	mov	r25, r24
    6a82:	82 2f       	mov	r24, r18
    6a84:	69 2f       	mov	r22, r25
    6a86:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>

            if(nodeMissedFlag == 1)
    6a8a:	80 91 1a 03 	lds	r24, 0x031A
    6a8e:	90 91 1b 03 	lds	r25, 0x031B
    6a92:	81 30       	cpi	r24, 0x01	; 1
    6a94:	91 05       	cpc	r25, r1
    6a96:	09 f0       	breq	.+2      	; 0x6a9a <skipNodes+0xea>
    6a98:	7e c0       	rjmp	.+252    	; 0x6b96 <skipNodes+0x1e6>
            {
                stop();
    6a9a:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    6a9e:	80 e0       	ldi	r24, 0x00	; 0
    6aa0:	90 e0       	ldi	r25, 0x00	; 0
    6aa2:	a8 ec       	ldi	r26, 0xC8	; 200
    6aa4:	b2 e4       	ldi	r27, 0x42	; 66
    6aa6:	8b 87       	std	Y+11, r24	; 0x0b
    6aa8:	9c 87       	std	Y+12, r25	; 0x0c
    6aaa:	ad 87       	std	Y+13, r26	; 0x0d
    6aac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6aae:	6b 85       	ldd	r22, Y+11	; 0x0b
    6ab0:	7c 85       	ldd	r23, Y+12	; 0x0c
    6ab2:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ab4:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ab6:	26 e6       	ldi	r18, 0x66	; 102
    6ab8:	36 e6       	ldi	r19, 0x66	; 102
    6aba:	46 e6       	ldi	r20, 0x66	; 102
    6abc:	55 e4       	ldi	r21, 0x45	; 69
    6abe:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    6ac2:	dc 01       	movw	r26, r24
    6ac4:	cb 01       	movw	r24, r22
    6ac6:	8f 83       	std	Y+7, r24	; 0x07
    6ac8:	98 87       	std	Y+8, r25	; 0x08
    6aca:	a9 87       	std	Y+9, r26	; 0x09
    6acc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6ace:	6f 81       	ldd	r22, Y+7	; 0x07
    6ad0:	78 85       	ldd	r23, Y+8	; 0x08
    6ad2:	89 85       	ldd	r24, Y+9	; 0x09
    6ad4:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ad6:	20 e0       	ldi	r18, 0x00	; 0
    6ad8:	30 e0       	ldi	r19, 0x00	; 0
    6ada:	40 e8       	ldi	r20, 0x80	; 128
    6adc:	5f e3       	ldi	r21, 0x3F	; 63
    6ade:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    6ae2:	88 23       	and	r24, r24
    6ae4:	2c f4       	brge	.+10     	; 0x6af0 <skipNodes+0x140>
		__ticks = 1;
    6ae6:	81 e0       	ldi	r24, 0x01	; 1
    6ae8:	90 e0       	ldi	r25, 0x00	; 0
    6aea:	9e 83       	std	Y+6, r25	; 0x06
    6aec:	8d 83       	std	Y+5, r24	; 0x05
    6aee:	3f c0       	rjmp	.+126    	; 0x6b6e <skipNodes+0x1be>
	else if (__tmp > 65535)
    6af0:	6f 81       	ldd	r22, Y+7	; 0x07
    6af2:	78 85       	ldd	r23, Y+8	; 0x08
    6af4:	89 85       	ldd	r24, Y+9	; 0x09
    6af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6af8:	20 e0       	ldi	r18, 0x00	; 0
    6afa:	3f ef       	ldi	r19, 0xFF	; 255
    6afc:	4f e7       	ldi	r20, 0x7F	; 127
    6afe:	57 e4       	ldi	r21, 0x47	; 71
    6b00:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    6b04:	18 16       	cp	r1, r24
    6b06:	4c f5       	brge	.+82     	; 0x6b5a <skipNodes+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b08:	6b 85       	ldd	r22, Y+11	; 0x0b
    6b0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    6b0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6b10:	20 e0       	ldi	r18, 0x00	; 0
    6b12:	30 e0       	ldi	r19, 0x00	; 0
    6b14:	40 e2       	ldi	r20, 0x20	; 32
    6b16:	51 e4       	ldi	r21, 0x41	; 65
    6b18:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    6b1c:	dc 01       	movw	r26, r24
    6b1e:	cb 01       	movw	r24, r22
    6b20:	bc 01       	movw	r22, r24
    6b22:	cd 01       	movw	r24, r26
    6b24:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    6b28:	dc 01       	movw	r26, r24
    6b2a:	cb 01       	movw	r24, r22
    6b2c:	9e 83       	std	Y+6, r25	; 0x06
    6b2e:	8d 83       	std	Y+5, r24	; 0x05
    6b30:	0f c0       	rjmp	.+30     	; 0x6b50 <skipNodes+0x1a0>
    6b32:	80 e7       	ldi	r24, 0x70	; 112
    6b34:	91 e0       	ldi	r25, 0x01	; 1
    6b36:	9c 83       	std	Y+4, r25	; 0x04
    6b38:	8b 83       	std	Y+3, r24	; 0x03
    6b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    6b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    6b3e:	01 97       	sbiw	r24, 0x01	; 1
    6b40:	f1 f7       	brne	.-4      	; 0x6b3e <skipNodes+0x18e>
    6b42:	9c 83       	std	Y+4, r25	; 0x04
    6b44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b46:	8d 81       	ldd	r24, Y+5	; 0x05
    6b48:	9e 81       	ldd	r25, Y+6	; 0x06
    6b4a:	01 97       	sbiw	r24, 0x01	; 1
    6b4c:	9e 83       	std	Y+6, r25	; 0x06
    6b4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b50:	8d 81       	ldd	r24, Y+5	; 0x05
    6b52:	9e 81       	ldd	r25, Y+6	; 0x06
    6b54:	00 97       	sbiw	r24, 0x00	; 0
    6b56:	69 f7       	brne	.-38     	; 0x6b32 <skipNodes+0x182>
    6b58:	14 c0       	rjmp	.+40     	; 0x6b82 <skipNodes+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b5a:	6f 81       	ldd	r22, Y+7	; 0x07
    6b5c:	78 85       	ldd	r23, Y+8	; 0x08
    6b5e:	89 85       	ldd	r24, Y+9	; 0x09
    6b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b62:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    6b66:	dc 01       	movw	r26, r24
    6b68:	cb 01       	movw	r24, r22
    6b6a:	9e 83       	std	Y+6, r25	; 0x06
    6b6c:	8d 83       	std	Y+5, r24	; 0x05
    6b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    6b70:	9e 81       	ldd	r25, Y+6	; 0x06
    6b72:	9a 83       	std	Y+2, r25	; 0x02
    6b74:	89 83       	std	Y+1, r24	; 0x01
    6b76:	89 81       	ldd	r24, Y+1	; 0x01
    6b78:	9a 81       	ldd	r25, Y+2	; 0x02
    6b7a:	01 97       	sbiw	r24, 0x01	; 1
    6b7c:	f1 f7       	brne	.-4      	; 0x6b7a <skipNodes+0x1ca>
    6b7e:	9a 83       	std	Y+2, r25	; 0x02
    6b80:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(100);

                lineFollowBack();
    6b82:	0e 94 e2 33 	call	0x67c4	; 0x67c4 <lineFollowBack>
                nodeMissedFlag = 0;
    6b86:	10 92 1b 03 	sts	0x031B, r1
    6b8a:	10 92 1a 03 	sts	0x031A, r1
                nodeMissTracker = 0;
    6b8e:	10 92 19 03 	sts	0x0319, r1
    6b92:	10 92 18 03 	sts	0x0318, r1
            }


            lastError = error;
    6b96:	89 89       	ldd	r24, Y+17	; 0x11
    6b98:	9a 89       	ldd	r25, Y+18	; 0x12
    6b9a:	98 8b       	std	Y+16, r25	; 0x10
    6b9c:	8f 87       	std	Y+15, r24	; 0x0f
    }

    lastError = error;
    line_follow_mm(15);
*/
    while(temp < n)
    6b9e:	2b 89       	ldd	r18, Y+19	; 0x13
    6ba0:	3c 89       	ldd	r19, Y+20	; 0x14
    6ba2:	8d 89       	ldd	r24, Y+21	; 0x15
    6ba4:	9e 89       	ldd	r25, Y+22	; 0x16
    6ba6:	28 17       	cp	r18, r24
    6ba8:	39 07       	cpc	r19, r25
    6baa:	0c f4       	brge	.+2      	; 0x6bae <skipNodes+0x1fe>
    6bac:	22 cf       	rjmp	.-444    	; 0x69f2 <skipNodes+0x42>


            lastError = error;
    }

    stop();
    6bae:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    return;
}
    6bb2:	66 96       	adiw	r28, 0x16	; 22
    6bb4:	0f b6       	in	r0, 0x3f	; 63
    6bb6:	f8 94       	cli
    6bb8:	de bf       	out	0x3e, r29	; 62
    6bba:	0f be       	out	0x3f, r0	; 63
    6bbc:	cd bf       	out	0x3d, r28	; 61
    6bbe:	cf 91       	pop	r28
    6bc0:	df 91       	pop	r29
    6bc2:	08 95       	ret

00006bc4 <isAlignedCorrect_2>:

int isAlignedCorrect_2()
{
    6bc4:	df 93       	push	r29
    6bc6:	cf 93       	push	r28
    6bc8:	00 d0       	rcall	.+0      	; 0x6bca <isAlignedCorrect_2+0x6>
    6bca:	0f 92       	push	r0
    6bcc:	cd b7       	in	r28, 0x3d	; 61
    6bce:	de b7       	in	r29, 0x3e	; 62
    int middle;
    //out = ADC_Conversion(14);
    middle = ADC_Conversion(15);
    6bd0:	8f e0       	ldi	r24, 0x0F	; 15
    6bd2:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    6bd6:	88 2f       	mov	r24, r24
    6bd8:	90 e0       	ldi	r25, 0x00	; 0
    6bda:	9a 83       	std	Y+2, r25	; 0x02
    6bdc:	89 83       	std	Y+1, r24	; 0x01
    //in = ADC_Conversion(12);

    if(middle > 100)
    6bde:	89 81       	ldd	r24, Y+1	; 0x01
    6be0:	9a 81       	ldd	r25, Y+2	; 0x02
    6be2:	85 36       	cpi	r24, 0x65	; 101
    6be4:	91 05       	cpc	r25, r1
    6be6:	1c f0       	brlt	.+6      	; 0x6bee <isAlignedCorrect_2+0x2a>
        return 0;
    6be8:	1c 82       	std	Y+4, r1	; 0x04
    6bea:	1b 82       	std	Y+3, r1	; 0x03
    6bec:	04 c0       	rjmp	.+8      	; 0x6bf6 <isAlignedCorrect_2+0x32>

    else
        return 1;
    6bee:	81 e0       	ldi	r24, 0x01	; 1
    6bf0:	90 e0       	ldi	r25, 0x00	; 0
    6bf2:	9c 83       	std	Y+4, r25	; 0x04
    6bf4:	8b 83       	std	Y+3, r24	; 0x03
    6bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    6bf8:	9c 81       	ldd	r25, Y+4	; 0x04
}
    6bfa:	0f 90       	pop	r0
    6bfc:	0f 90       	pop	r0
    6bfe:	0f 90       	pop	r0
    6c00:	0f 90       	pop	r0
    6c02:	cf 91       	pop	r28
    6c04:	df 91       	pop	r29
    6c06:	08 95       	ret

00006c08 <reachEnd>:


void reachEnd()
{
    6c08:	df 93       	push	r29
    6c0a:	cf 93       	push	r28
    6c0c:	cd b7       	in	r28, 0x3d	; 61
    6c0e:	de b7       	in	r29, 0x3e	; 62
    6c10:	ea 97       	sbiw	r28, 0x3a	; 58
    6c12:	0f b6       	in	r0, 0x3f	; 63
    6c14:	f8 94       	cli
    6c16:	de bf       	out	0x3e, r29	; 62
    6c18:	0f be       	out	0x3f, r0	; 63
    6c1a:	cd bf       	out	0x3d, r28	; 61
        int i = 1;
    6c1c:	81 e0       	ldi	r24, 0x01	; 1
    6c1e:	90 e0       	ldi	r25, 0x00	; 0
    6c20:	9a af       	std	Y+58, r25	; 0x3a
    6c22:	89 af       	std	Y+57, r24	; 0x39
    6c24:	05 c0       	rjmp	.+10     	; 0x6c30 <reachEnd+0x28>

        while(!(a[i] == 3 || a[i] == 0))
            i++;
    6c26:	89 ad       	ldd	r24, Y+57	; 0x39
    6c28:	9a ad       	ldd	r25, Y+58	; 0x3a
    6c2a:	01 96       	adiw	r24, 0x01	; 1
    6c2c:	9a af       	std	Y+58, r25	; 0x3a
    6c2e:	89 af       	std	Y+57, r24	; 0x39

void reachEnd()
{
        int i = 1;

        while(!(a[i] == 3 || a[i] == 0))
    6c30:	89 ad       	ldd	r24, Y+57	; 0x39
    6c32:	9a ad       	ldd	r25, Y+58	; 0x3a
    6c34:	88 0f       	add	r24, r24
    6c36:	99 1f       	adc	r25, r25
    6c38:	fc 01       	movw	r30, r24
    6c3a:	ec 5c       	subi	r30, 0xCC	; 204
    6c3c:	fc 4f       	sbci	r31, 0xFC	; 252
    6c3e:	80 81       	ld	r24, Z
    6c40:	91 81       	ldd	r25, Z+1	; 0x01
    6c42:	83 30       	cpi	r24, 0x03	; 3
    6c44:	91 05       	cpc	r25, r1
    6c46:	59 f0       	breq	.+22     	; 0x6c5e <reachEnd+0x56>
    6c48:	89 ad       	ldd	r24, Y+57	; 0x39
    6c4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    6c4c:	88 0f       	add	r24, r24
    6c4e:	99 1f       	adc	r25, r25
    6c50:	fc 01       	movw	r30, r24
    6c52:	ec 5c       	subi	r30, 0xCC	; 204
    6c54:	fc 4f       	sbci	r31, 0xFC	; 252
    6c56:	80 81       	ld	r24, Z
    6c58:	91 81       	ldd	r25, Z+1	; 0x01
    6c5a:	00 97       	sbiw	r24, 0x00	; 0
    6c5c:	21 f7       	brne	.-56     	; 0x6c26 <reachEnd+0x1e>
            i++;

        forward();
    6c5e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>

        skipNodes(i);
    6c62:	89 ad       	ldd	r24, Y+57	; 0x39
    6c64:	9a ad       	ldd	r25, Y+58	; 0x3a
    6c66:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <skipNodes>

        stop();
    6c6a:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    6c6e:	80 e0       	ldi	r24, 0x00	; 0
    6c70:	90 e0       	ldi	r25, 0x00	; 0
    6c72:	aa e7       	ldi	r26, 0x7A	; 122
    6c74:	b4 e4       	ldi	r27, 0x44	; 68
    6c76:	8d ab       	std	Y+53, r24	; 0x35
    6c78:	9e ab       	std	Y+54, r25	; 0x36
    6c7a:	af ab       	std	Y+55, r26	; 0x37
    6c7c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6c7e:	6d a9       	ldd	r22, Y+53	; 0x35
    6c80:	7e a9       	ldd	r23, Y+54	; 0x36
    6c82:	8f a9       	ldd	r24, Y+55	; 0x37
    6c84:	98 ad       	ldd	r25, Y+56	; 0x38
    6c86:	26 e6       	ldi	r18, 0x66	; 102
    6c88:	36 e6       	ldi	r19, 0x66	; 102
    6c8a:	46 e6       	ldi	r20, 0x66	; 102
    6c8c:	55 e4       	ldi	r21, 0x45	; 69
    6c8e:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    6c92:	dc 01       	movw	r26, r24
    6c94:	cb 01       	movw	r24, r22
    6c96:	89 ab       	std	Y+49, r24	; 0x31
    6c98:	9a ab       	std	Y+50, r25	; 0x32
    6c9a:	ab ab       	std	Y+51, r26	; 0x33
    6c9c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6c9e:	69 a9       	ldd	r22, Y+49	; 0x31
    6ca0:	7a a9       	ldd	r23, Y+50	; 0x32
    6ca2:	8b a9       	ldd	r24, Y+51	; 0x33
    6ca4:	9c a9       	ldd	r25, Y+52	; 0x34
    6ca6:	20 e0       	ldi	r18, 0x00	; 0
    6ca8:	30 e0       	ldi	r19, 0x00	; 0
    6caa:	40 e8       	ldi	r20, 0x80	; 128
    6cac:	5f e3       	ldi	r21, 0x3F	; 63
    6cae:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    6cb2:	88 23       	and	r24, r24
    6cb4:	2c f4       	brge	.+10     	; 0x6cc0 <reachEnd+0xb8>
		__ticks = 1;
    6cb6:	81 e0       	ldi	r24, 0x01	; 1
    6cb8:	90 e0       	ldi	r25, 0x00	; 0
    6cba:	98 ab       	std	Y+48, r25	; 0x30
    6cbc:	8f a7       	std	Y+47, r24	; 0x2f
    6cbe:	3f c0       	rjmp	.+126    	; 0x6d3e <reachEnd+0x136>
	else if (__tmp > 65535)
    6cc0:	69 a9       	ldd	r22, Y+49	; 0x31
    6cc2:	7a a9       	ldd	r23, Y+50	; 0x32
    6cc4:	8b a9       	ldd	r24, Y+51	; 0x33
    6cc6:	9c a9       	ldd	r25, Y+52	; 0x34
    6cc8:	20 e0       	ldi	r18, 0x00	; 0
    6cca:	3f ef       	ldi	r19, 0xFF	; 255
    6ccc:	4f e7       	ldi	r20, 0x7F	; 127
    6cce:	57 e4       	ldi	r21, 0x47	; 71
    6cd0:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    6cd4:	18 16       	cp	r1, r24
    6cd6:	4c f5       	brge	.+82     	; 0x6d2a <reachEnd+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6cd8:	6d a9       	ldd	r22, Y+53	; 0x35
    6cda:	7e a9       	ldd	r23, Y+54	; 0x36
    6cdc:	8f a9       	ldd	r24, Y+55	; 0x37
    6cde:	98 ad       	ldd	r25, Y+56	; 0x38
    6ce0:	20 e0       	ldi	r18, 0x00	; 0
    6ce2:	30 e0       	ldi	r19, 0x00	; 0
    6ce4:	40 e2       	ldi	r20, 0x20	; 32
    6ce6:	51 e4       	ldi	r21, 0x41	; 65
    6ce8:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    6cec:	dc 01       	movw	r26, r24
    6cee:	cb 01       	movw	r24, r22
    6cf0:	bc 01       	movw	r22, r24
    6cf2:	cd 01       	movw	r24, r26
    6cf4:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    6cf8:	dc 01       	movw	r26, r24
    6cfa:	cb 01       	movw	r24, r22
    6cfc:	98 ab       	std	Y+48, r25	; 0x30
    6cfe:	8f a7       	std	Y+47, r24	; 0x2f
    6d00:	0f c0       	rjmp	.+30     	; 0x6d20 <reachEnd+0x118>
    6d02:	80 e7       	ldi	r24, 0x70	; 112
    6d04:	91 e0       	ldi	r25, 0x01	; 1
    6d06:	9e a7       	std	Y+46, r25	; 0x2e
    6d08:	8d a7       	std	Y+45, r24	; 0x2d
    6d0a:	8d a5       	ldd	r24, Y+45	; 0x2d
    6d0c:	9e a5       	ldd	r25, Y+46	; 0x2e
    6d0e:	01 97       	sbiw	r24, 0x01	; 1
    6d10:	f1 f7       	brne	.-4      	; 0x6d0e <reachEnd+0x106>
    6d12:	9e a7       	std	Y+46, r25	; 0x2e
    6d14:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d16:	8f a5       	ldd	r24, Y+47	; 0x2f
    6d18:	98 a9       	ldd	r25, Y+48	; 0x30
    6d1a:	01 97       	sbiw	r24, 0x01	; 1
    6d1c:	98 ab       	std	Y+48, r25	; 0x30
    6d1e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d20:	8f a5       	ldd	r24, Y+47	; 0x2f
    6d22:	98 a9       	ldd	r25, Y+48	; 0x30
    6d24:	00 97       	sbiw	r24, 0x00	; 0
    6d26:	69 f7       	brne	.-38     	; 0x6d02 <reachEnd+0xfa>
    6d28:	14 c0       	rjmp	.+40     	; 0x6d52 <reachEnd+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6d2a:	69 a9       	ldd	r22, Y+49	; 0x31
    6d2c:	7a a9       	ldd	r23, Y+50	; 0x32
    6d2e:	8b a9       	ldd	r24, Y+51	; 0x33
    6d30:	9c a9       	ldd	r25, Y+52	; 0x34
    6d32:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    6d36:	dc 01       	movw	r26, r24
    6d38:	cb 01       	movw	r24, r22
    6d3a:	98 ab       	std	Y+48, r25	; 0x30
    6d3c:	8f a7       	std	Y+47, r24	; 0x2f
    6d3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    6d40:	98 a9       	ldd	r25, Y+48	; 0x30
    6d42:	9c a7       	std	Y+44, r25	; 0x2c
    6d44:	8b a7       	std	Y+43, r24	; 0x2b
    6d46:	8b a5       	ldd	r24, Y+43	; 0x2b
    6d48:	9c a5       	ldd	r25, Y+44	; 0x2c
    6d4a:	01 97       	sbiw	r24, 0x01	; 1
    6d4c:	f1 f7       	brne	.-4      	; 0x6d4a <reachEnd+0x142>
    6d4e:	9c a7       	std	Y+44, r25	; 0x2c
    6d50:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1000);

        arenaRight();
    6d52:	0e 94 3e 23 	call	0x467c	; 0x467c <arenaRight>

        if(a[i] == 0)
    6d56:	89 ad       	ldd	r24, Y+57	; 0x39
    6d58:	9a ad       	ldd	r25, Y+58	; 0x3a
    6d5a:	88 0f       	add	r24, r24
    6d5c:	99 1f       	adc	r25, r25
    6d5e:	fc 01       	movw	r30, r24
    6d60:	ec 5c       	subi	r30, 0xCC	; 204
    6d62:	fc 4f       	sbci	r31, 0xFC	; 252
    6d64:	80 81       	ld	r24, Z
    6d66:	91 81       	ldd	r25, Z+1	; 0x01
    6d68:	00 97       	sbiw	r24, 0x00	; 0
    6d6a:	09 f0       	breq	.+2      	; 0x6d6e <reachEnd+0x166>
    6d6c:	f9 c0       	rjmp	.+498    	; 0x6f60 <reachEnd+0x358>
        {
            skipNodes(3);
    6d6e:	83 e0       	ldi	r24, 0x03	; 3
    6d70:	90 e0       	ldi	r25, 0x00	; 0
    6d72:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <skipNodes>
            errorFlag = 1;
    6d76:	81 e0       	ldi	r24, 0x01	; 1
    6d78:	90 e0       	ldi	r25, 0x00	; 0
    6d7a:	90 93 27 03 	sts	0x0327, r25
    6d7e:	80 93 26 03 	sts	0x0326, r24

            arenaRight();
    6d82:	0e 94 3e 23 	call	0x467c	; 0x467c <arenaRight>
            stop();
    6d86:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    6d8a:	80 e0       	ldi	r24, 0x00	; 0
    6d8c:	90 e0       	ldi	r25, 0x00	; 0
    6d8e:	aa e7       	ldi	r26, 0x7A	; 122
    6d90:	b4 e4       	ldi	r27, 0x44	; 68
    6d92:	8f a3       	std	Y+39, r24	; 0x27
    6d94:	98 a7       	std	Y+40, r25	; 0x28
    6d96:	a9 a7       	std	Y+41, r26	; 0x29
    6d98:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6d9a:	6f a1       	ldd	r22, Y+39	; 0x27
    6d9c:	78 a5       	ldd	r23, Y+40	; 0x28
    6d9e:	89 a5       	ldd	r24, Y+41	; 0x29
    6da0:	9a a5       	ldd	r25, Y+42	; 0x2a
    6da2:	26 e6       	ldi	r18, 0x66	; 102
    6da4:	36 e6       	ldi	r19, 0x66	; 102
    6da6:	46 e6       	ldi	r20, 0x66	; 102
    6da8:	55 e4       	ldi	r21, 0x45	; 69
    6daa:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    6dae:	dc 01       	movw	r26, r24
    6db0:	cb 01       	movw	r24, r22
    6db2:	8b a3       	std	Y+35, r24	; 0x23
    6db4:	9c a3       	std	Y+36, r25	; 0x24
    6db6:	ad a3       	std	Y+37, r26	; 0x25
    6db8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6dba:	6b a1       	ldd	r22, Y+35	; 0x23
    6dbc:	7c a1       	ldd	r23, Y+36	; 0x24
    6dbe:	8d a1       	ldd	r24, Y+37	; 0x25
    6dc0:	9e a1       	ldd	r25, Y+38	; 0x26
    6dc2:	20 e0       	ldi	r18, 0x00	; 0
    6dc4:	30 e0       	ldi	r19, 0x00	; 0
    6dc6:	40 e8       	ldi	r20, 0x80	; 128
    6dc8:	5f e3       	ldi	r21, 0x3F	; 63
    6dca:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    6dce:	88 23       	and	r24, r24
    6dd0:	2c f4       	brge	.+10     	; 0x6ddc <reachEnd+0x1d4>
		__ticks = 1;
    6dd2:	81 e0       	ldi	r24, 0x01	; 1
    6dd4:	90 e0       	ldi	r25, 0x00	; 0
    6dd6:	9a a3       	std	Y+34, r25	; 0x22
    6dd8:	89 a3       	std	Y+33, r24	; 0x21
    6dda:	3f c0       	rjmp	.+126    	; 0x6e5a <reachEnd+0x252>
	else if (__tmp > 65535)
    6ddc:	6b a1       	ldd	r22, Y+35	; 0x23
    6dde:	7c a1       	ldd	r23, Y+36	; 0x24
    6de0:	8d a1       	ldd	r24, Y+37	; 0x25
    6de2:	9e a1       	ldd	r25, Y+38	; 0x26
    6de4:	20 e0       	ldi	r18, 0x00	; 0
    6de6:	3f ef       	ldi	r19, 0xFF	; 255
    6de8:	4f e7       	ldi	r20, 0x7F	; 127
    6dea:	57 e4       	ldi	r21, 0x47	; 71
    6dec:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    6df0:	18 16       	cp	r1, r24
    6df2:	4c f5       	brge	.+82     	; 0x6e46 <reachEnd+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6df4:	6f a1       	ldd	r22, Y+39	; 0x27
    6df6:	78 a5       	ldd	r23, Y+40	; 0x28
    6df8:	89 a5       	ldd	r24, Y+41	; 0x29
    6dfa:	9a a5       	ldd	r25, Y+42	; 0x2a
    6dfc:	20 e0       	ldi	r18, 0x00	; 0
    6dfe:	30 e0       	ldi	r19, 0x00	; 0
    6e00:	40 e2       	ldi	r20, 0x20	; 32
    6e02:	51 e4       	ldi	r21, 0x41	; 65
    6e04:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    6e08:	dc 01       	movw	r26, r24
    6e0a:	cb 01       	movw	r24, r22
    6e0c:	bc 01       	movw	r22, r24
    6e0e:	cd 01       	movw	r24, r26
    6e10:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    6e14:	dc 01       	movw	r26, r24
    6e16:	cb 01       	movw	r24, r22
    6e18:	9a a3       	std	Y+34, r25	; 0x22
    6e1a:	89 a3       	std	Y+33, r24	; 0x21
    6e1c:	0f c0       	rjmp	.+30     	; 0x6e3c <reachEnd+0x234>
    6e1e:	80 e7       	ldi	r24, 0x70	; 112
    6e20:	91 e0       	ldi	r25, 0x01	; 1
    6e22:	98 a3       	std	Y+32, r25	; 0x20
    6e24:	8f 8f       	std	Y+31, r24	; 0x1f
    6e26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6e28:	98 a1       	ldd	r25, Y+32	; 0x20
    6e2a:	01 97       	sbiw	r24, 0x01	; 1
    6e2c:	f1 f7       	brne	.-4      	; 0x6e2a <reachEnd+0x222>
    6e2e:	98 a3       	std	Y+32, r25	; 0x20
    6e30:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6e32:	89 a1       	ldd	r24, Y+33	; 0x21
    6e34:	9a a1       	ldd	r25, Y+34	; 0x22
    6e36:	01 97       	sbiw	r24, 0x01	; 1
    6e38:	9a a3       	std	Y+34, r25	; 0x22
    6e3a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6e3c:	89 a1       	ldd	r24, Y+33	; 0x21
    6e3e:	9a a1       	ldd	r25, Y+34	; 0x22
    6e40:	00 97       	sbiw	r24, 0x00	; 0
    6e42:	69 f7       	brne	.-38     	; 0x6e1e <reachEnd+0x216>
    6e44:	14 c0       	rjmp	.+40     	; 0x6e6e <reachEnd+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6e46:	6b a1       	ldd	r22, Y+35	; 0x23
    6e48:	7c a1       	ldd	r23, Y+36	; 0x24
    6e4a:	8d a1       	ldd	r24, Y+37	; 0x25
    6e4c:	9e a1       	ldd	r25, Y+38	; 0x26
    6e4e:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    6e52:	dc 01       	movw	r26, r24
    6e54:	cb 01       	movw	r24, r22
    6e56:	9a a3       	std	Y+34, r25	; 0x22
    6e58:	89 a3       	std	Y+33, r24	; 0x21
    6e5a:	89 a1       	ldd	r24, Y+33	; 0x21
    6e5c:	9a a1       	ldd	r25, Y+34	; 0x22
    6e5e:	9e 8f       	std	Y+30, r25	; 0x1e
    6e60:	8d 8f       	std	Y+29, r24	; 0x1d
    6e62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6e64:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6e66:	01 97       	sbiw	r24, 0x01	; 1
    6e68:	f1 f7       	brne	.-4      	; 0x6e66 <reachEnd+0x25e>
    6e6a:	9e 8f       	std	Y+30, r25	; 0x1e
    6e6c:	8d 8f       	std	Y+29, r24	; 0x1d
            _delay_ms(1000);

            skipNodes(i);
    6e6e:	89 ad       	ldd	r24, Y+57	; 0x39
    6e70:	9a ad       	ldd	r25, Y+58	; 0x3a
    6e72:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <skipNodes>
            stop();
    6e76:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    6e7a:	80 e0       	ldi	r24, 0x00	; 0
    6e7c:	90 e0       	ldi	r25, 0x00	; 0
    6e7e:	aa e7       	ldi	r26, 0x7A	; 122
    6e80:	b4 e4       	ldi	r27, 0x44	; 68
    6e82:	89 8f       	std	Y+25, r24	; 0x19
    6e84:	9a 8f       	std	Y+26, r25	; 0x1a
    6e86:	ab 8f       	std	Y+27, r26	; 0x1b
    6e88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6e8a:	69 8d       	ldd	r22, Y+25	; 0x19
    6e8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6e8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6e90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6e92:	26 e6       	ldi	r18, 0x66	; 102
    6e94:	36 e6       	ldi	r19, 0x66	; 102
    6e96:	46 e6       	ldi	r20, 0x66	; 102
    6e98:	55 e4       	ldi	r21, 0x45	; 69
    6e9a:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    6e9e:	dc 01       	movw	r26, r24
    6ea0:	cb 01       	movw	r24, r22
    6ea2:	8d 8b       	std	Y+21, r24	; 0x15
    6ea4:	9e 8b       	std	Y+22, r25	; 0x16
    6ea6:	af 8b       	std	Y+23, r26	; 0x17
    6ea8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6eaa:	6d 89       	ldd	r22, Y+21	; 0x15
    6eac:	7e 89       	ldd	r23, Y+22	; 0x16
    6eae:	8f 89       	ldd	r24, Y+23	; 0x17
    6eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    6eb2:	20 e0       	ldi	r18, 0x00	; 0
    6eb4:	30 e0       	ldi	r19, 0x00	; 0
    6eb6:	40 e8       	ldi	r20, 0x80	; 128
    6eb8:	5f e3       	ldi	r21, 0x3F	; 63
    6eba:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    6ebe:	88 23       	and	r24, r24
    6ec0:	2c f4       	brge	.+10     	; 0x6ecc <reachEnd+0x2c4>
		__ticks = 1;
    6ec2:	81 e0       	ldi	r24, 0x01	; 1
    6ec4:	90 e0       	ldi	r25, 0x00	; 0
    6ec6:	9c 8b       	std	Y+20, r25	; 0x14
    6ec8:	8b 8b       	std	Y+19, r24	; 0x13
    6eca:	3f c0       	rjmp	.+126    	; 0x6f4a <reachEnd+0x342>
	else if (__tmp > 65535)
    6ecc:	6d 89       	ldd	r22, Y+21	; 0x15
    6ece:	7e 89       	ldd	r23, Y+22	; 0x16
    6ed0:	8f 89       	ldd	r24, Y+23	; 0x17
    6ed2:	98 8d       	ldd	r25, Y+24	; 0x18
    6ed4:	20 e0       	ldi	r18, 0x00	; 0
    6ed6:	3f ef       	ldi	r19, 0xFF	; 255
    6ed8:	4f e7       	ldi	r20, 0x7F	; 127
    6eda:	57 e4       	ldi	r21, 0x47	; 71
    6edc:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    6ee0:	18 16       	cp	r1, r24
    6ee2:	4c f5       	brge	.+82     	; 0x6f36 <reachEnd+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ee4:	69 8d       	ldd	r22, Y+25	; 0x19
    6ee6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6ee8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6eea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6eec:	20 e0       	ldi	r18, 0x00	; 0
    6eee:	30 e0       	ldi	r19, 0x00	; 0
    6ef0:	40 e2       	ldi	r20, 0x20	; 32
    6ef2:	51 e4       	ldi	r21, 0x41	; 65
    6ef4:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    6ef8:	dc 01       	movw	r26, r24
    6efa:	cb 01       	movw	r24, r22
    6efc:	bc 01       	movw	r22, r24
    6efe:	cd 01       	movw	r24, r26
    6f00:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    6f04:	dc 01       	movw	r26, r24
    6f06:	cb 01       	movw	r24, r22
    6f08:	9c 8b       	std	Y+20, r25	; 0x14
    6f0a:	8b 8b       	std	Y+19, r24	; 0x13
    6f0c:	0f c0       	rjmp	.+30     	; 0x6f2c <reachEnd+0x324>
    6f0e:	80 e7       	ldi	r24, 0x70	; 112
    6f10:	91 e0       	ldi	r25, 0x01	; 1
    6f12:	9a 8b       	std	Y+18, r25	; 0x12
    6f14:	89 8b       	std	Y+17, r24	; 0x11
    6f16:	89 89       	ldd	r24, Y+17	; 0x11
    6f18:	9a 89       	ldd	r25, Y+18	; 0x12
    6f1a:	01 97       	sbiw	r24, 0x01	; 1
    6f1c:	f1 f7       	brne	.-4      	; 0x6f1a <reachEnd+0x312>
    6f1e:	9a 8b       	std	Y+18, r25	; 0x12
    6f20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6f22:	8b 89       	ldd	r24, Y+19	; 0x13
    6f24:	9c 89       	ldd	r25, Y+20	; 0x14
    6f26:	01 97       	sbiw	r24, 0x01	; 1
    6f28:	9c 8b       	std	Y+20, r25	; 0x14
    6f2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f2c:	8b 89       	ldd	r24, Y+19	; 0x13
    6f2e:	9c 89       	ldd	r25, Y+20	; 0x14
    6f30:	00 97       	sbiw	r24, 0x00	; 0
    6f32:	69 f7       	brne	.-38     	; 0x6f0e <reachEnd+0x306>
    6f34:	a8 c0       	rjmp	.+336    	; 0x7086 <reachEnd+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6f36:	6d 89       	ldd	r22, Y+21	; 0x15
    6f38:	7e 89       	ldd	r23, Y+22	; 0x16
    6f3a:	8f 89       	ldd	r24, Y+23	; 0x17
    6f3c:	98 8d       	ldd	r25, Y+24	; 0x18
    6f3e:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    6f42:	dc 01       	movw	r26, r24
    6f44:	cb 01       	movw	r24, r22
    6f46:	9c 8b       	std	Y+20, r25	; 0x14
    6f48:	8b 8b       	std	Y+19, r24	; 0x13
    6f4a:	8b 89       	ldd	r24, Y+19	; 0x13
    6f4c:	9c 89       	ldd	r25, Y+20	; 0x14
    6f4e:	98 8b       	std	Y+16, r25	; 0x10
    6f50:	8f 87       	std	Y+15, r24	; 0x0f
    6f52:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f54:	98 89       	ldd	r25, Y+16	; 0x10
    6f56:	01 97       	sbiw	r24, 0x01	; 1
    6f58:	f1 f7       	brne	.-4      	; 0x6f56 <reachEnd+0x34e>
    6f5a:	98 8b       	std	Y+16, r25	; 0x10
    6f5c:	8f 87       	std	Y+15, r24	; 0x0f
    6f5e:	93 c0       	rjmp	.+294    	; 0x7086 <reachEnd+0x47e>
            //Reach i, 1 directly
        }

        else
        {
            skipNodes(2);
    6f60:	82 e0       	ldi	r24, 0x02	; 2
    6f62:	90 e0       	ldi	r25, 0x00	; 0
    6f64:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <skipNodes>
            stop();
    6f68:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    6f6c:	80 e0       	ldi	r24, 0x00	; 0
    6f6e:	90 e0       	ldi	r25, 0x00	; 0
    6f70:	aa e7       	ldi	r26, 0x7A	; 122
    6f72:	b4 e4       	ldi	r27, 0x44	; 68
    6f74:	8b 87       	std	Y+11, r24	; 0x0b
    6f76:	9c 87       	std	Y+12, r25	; 0x0c
    6f78:	ad 87       	std	Y+13, r26	; 0x0d
    6f7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6f7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    6f7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6f80:	8d 85       	ldd	r24, Y+13	; 0x0d
    6f82:	9e 85       	ldd	r25, Y+14	; 0x0e
    6f84:	26 e6       	ldi	r18, 0x66	; 102
    6f86:	36 e6       	ldi	r19, 0x66	; 102
    6f88:	46 e6       	ldi	r20, 0x66	; 102
    6f8a:	55 e4       	ldi	r21, 0x45	; 69
    6f8c:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    6f90:	dc 01       	movw	r26, r24
    6f92:	cb 01       	movw	r24, r22
    6f94:	8f 83       	std	Y+7, r24	; 0x07
    6f96:	98 87       	std	Y+8, r25	; 0x08
    6f98:	a9 87       	std	Y+9, r26	; 0x09
    6f9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6f9c:	6f 81       	ldd	r22, Y+7	; 0x07
    6f9e:	78 85       	ldd	r23, Y+8	; 0x08
    6fa0:	89 85       	ldd	r24, Y+9	; 0x09
    6fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    6fa4:	20 e0       	ldi	r18, 0x00	; 0
    6fa6:	30 e0       	ldi	r19, 0x00	; 0
    6fa8:	40 e8       	ldi	r20, 0x80	; 128
    6faa:	5f e3       	ldi	r21, 0x3F	; 63
    6fac:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    6fb0:	88 23       	and	r24, r24
    6fb2:	2c f4       	brge	.+10     	; 0x6fbe <reachEnd+0x3b6>
		__ticks = 1;
    6fb4:	81 e0       	ldi	r24, 0x01	; 1
    6fb6:	90 e0       	ldi	r25, 0x00	; 0
    6fb8:	9e 83       	std	Y+6, r25	; 0x06
    6fba:	8d 83       	std	Y+5, r24	; 0x05
    6fbc:	3f c0       	rjmp	.+126    	; 0x703c <reachEnd+0x434>
	else if (__tmp > 65535)
    6fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    6fc0:	78 85       	ldd	r23, Y+8	; 0x08
    6fc2:	89 85       	ldd	r24, Y+9	; 0x09
    6fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    6fc6:	20 e0       	ldi	r18, 0x00	; 0
    6fc8:	3f ef       	ldi	r19, 0xFF	; 255
    6fca:	4f e7       	ldi	r20, 0x7F	; 127
    6fcc:	57 e4       	ldi	r21, 0x47	; 71
    6fce:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    6fd2:	18 16       	cp	r1, r24
    6fd4:	4c f5       	brge	.+82     	; 0x7028 <reachEnd+0x420>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6fd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    6fd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    6fda:	8d 85       	ldd	r24, Y+13	; 0x0d
    6fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    6fde:	20 e0       	ldi	r18, 0x00	; 0
    6fe0:	30 e0       	ldi	r19, 0x00	; 0
    6fe2:	40 e2       	ldi	r20, 0x20	; 32
    6fe4:	51 e4       	ldi	r21, 0x41	; 65
    6fe6:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    6fea:	dc 01       	movw	r26, r24
    6fec:	cb 01       	movw	r24, r22
    6fee:	bc 01       	movw	r22, r24
    6ff0:	cd 01       	movw	r24, r26
    6ff2:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    6ff6:	dc 01       	movw	r26, r24
    6ff8:	cb 01       	movw	r24, r22
    6ffa:	9e 83       	std	Y+6, r25	; 0x06
    6ffc:	8d 83       	std	Y+5, r24	; 0x05
    6ffe:	0f c0       	rjmp	.+30     	; 0x701e <reachEnd+0x416>
    7000:	80 e7       	ldi	r24, 0x70	; 112
    7002:	91 e0       	ldi	r25, 0x01	; 1
    7004:	9c 83       	std	Y+4, r25	; 0x04
    7006:	8b 83       	std	Y+3, r24	; 0x03
    7008:	8b 81       	ldd	r24, Y+3	; 0x03
    700a:	9c 81       	ldd	r25, Y+4	; 0x04
    700c:	01 97       	sbiw	r24, 0x01	; 1
    700e:	f1 f7       	brne	.-4      	; 0x700c <reachEnd+0x404>
    7010:	9c 83       	std	Y+4, r25	; 0x04
    7012:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7014:	8d 81       	ldd	r24, Y+5	; 0x05
    7016:	9e 81       	ldd	r25, Y+6	; 0x06
    7018:	01 97       	sbiw	r24, 0x01	; 1
    701a:	9e 83       	std	Y+6, r25	; 0x06
    701c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    701e:	8d 81       	ldd	r24, Y+5	; 0x05
    7020:	9e 81       	ldd	r25, Y+6	; 0x06
    7022:	00 97       	sbiw	r24, 0x00	; 0
    7024:	69 f7       	brne	.-38     	; 0x7000 <reachEnd+0x3f8>
    7026:	14 c0       	rjmp	.+40     	; 0x7050 <reachEnd+0x448>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7028:	6f 81       	ldd	r22, Y+7	; 0x07
    702a:	78 85       	ldd	r23, Y+8	; 0x08
    702c:	89 85       	ldd	r24, Y+9	; 0x09
    702e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7030:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    7034:	dc 01       	movw	r26, r24
    7036:	cb 01       	movw	r24, r22
    7038:	9e 83       	std	Y+6, r25	; 0x06
    703a:	8d 83       	std	Y+5, r24	; 0x05
    703c:	8d 81       	ldd	r24, Y+5	; 0x05
    703e:	9e 81       	ldd	r25, Y+6	; 0x06
    7040:	9a 83       	std	Y+2, r25	; 0x02
    7042:	89 83       	std	Y+1, r24	; 0x01
    7044:	89 81       	ldd	r24, Y+1	; 0x01
    7046:	9a 81       	ldd	r25, Y+2	; 0x02
    7048:	01 97       	sbiw	r24, 0x01	; 1
    704a:	f1 f7       	brne	.-4      	; 0x7048 <reachEnd+0x440>
    704c:	9a 83       	std	Y+2, r25	; 0x02
    704e:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(1000);
            arenaRight();
    7050:	0e 94 3e 23 	call	0x467c	; 0x467c <arenaRight>
            skipNodes(1);
    7054:	81 e0       	ldi	r24, 0x01	; 1
    7056:	90 e0       	ldi	r25, 0x00	; 0
    7058:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <skipNodes>
            arenaLeft();
    705c:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <arenaLeft>
            skipNodes(1);
    7060:	81 e0       	ldi	r24, 0x01	; 1
    7062:	90 e0       	ldi	r25, 0x00	; 0
    7064:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <skipNodes>
            errorFlag = 1;
    7068:	81 e0       	ldi	r24, 0x01	; 1
    706a:	90 e0       	ldi	r25, 0x00	; 0
    706c:	90 93 27 03 	sts	0x0327, r25
    7070:	80 93 26 03 	sts	0x0326, r24

            arenaRight();
    7074:	0e 94 3e 23 	call	0x467c	; 0x467c <arenaRight>
            skipNodes(i-1);
    7078:	89 ad       	ldd	r24, Y+57	; 0x39
    707a:	9a ad       	ldd	r25, Y+58	; 0x3a
    707c:	01 97       	sbiw	r24, 0x01	; 1
    707e:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <skipNodes>
            stop();
    7082:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>

            return;
        }
}
    7086:	ea 96       	adiw	r28, 0x3a	; 58
    7088:	0f b6       	in	r0, 0x3f	; 63
    708a:	f8 94       	cli
    708c:	de bf       	out	0x3e, r29	; 62
    708e:	0f be       	out	0x3f, r0	; 63
    7090:	cd bf       	out	0x3d, r28	; 61
    7092:	cf 91       	pop	r28
    7094:	df 91       	pop	r29
    7096:	08 95       	ret

00007098 <buzzerBeep_1>:


void buzzerBeep_1()
{
    7098:	0f 93       	push	r16
    709a:	1f 93       	push	r17
    709c:	df 93       	push	r29
    709e:	cf 93       	push	r28
    70a0:	cd b7       	in	r28, 0x3d	; 61
    70a2:	de b7       	in	r29, 0x3e	; 62
    70a4:	c6 54       	subi	r28, 0x46	; 70
    70a6:	d0 40       	sbci	r29, 0x00	; 0
    70a8:	0f b6       	in	r0, 0x3f	; 63
    70aa:	f8 94       	cli
    70ac:	de bf       	out	0x3e, r29	; 62
    70ae:	0f be       	out	0x3f, r0	; 63
    70b0:	cd bf       	out	0x3d, r28	; 61
    //This function is currently under construction. The buzzer seems to be faulty. So, the return statement is put in the first
    //line. This statement is to be removed when the buzzer is hardware rectified.
    PORTJ = 0xFF;
    70b2:	e5 e0       	ldi	r30, 0x05	; 5
    70b4:	f1 e0       	ldi	r31, 0x01	; 1
    70b6:	8f ef       	ldi	r24, 0xFF	; 255
    70b8:	80 83       	st	Z, r24
    70ba:	fe 01       	movw	r30, r28
    70bc:	ed 5b       	subi	r30, 0xBD	; 189
    70be:	ff 4f       	sbci	r31, 0xFF	; 255
    70c0:	80 e0       	ldi	r24, 0x00	; 0
    70c2:	90 e0       	ldi	r25, 0x00	; 0
    70c4:	aa e7       	ldi	r26, 0x7A	; 122
    70c6:	b4 e4       	ldi	r27, 0x44	; 68
    70c8:	80 83       	st	Z, r24
    70ca:	91 83       	std	Z+1, r25	; 0x01
    70cc:	a2 83       	std	Z+2, r26	; 0x02
    70ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    70d0:	8e 01       	movw	r16, r28
    70d2:	01 5c       	subi	r16, 0xC1	; 193
    70d4:	1f 4f       	sbci	r17, 0xFF	; 255
    70d6:	fe 01       	movw	r30, r28
    70d8:	ed 5b       	subi	r30, 0xBD	; 189
    70da:	ff 4f       	sbci	r31, 0xFF	; 255
    70dc:	60 81       	ld	r22, Z
    70de:	71 81       	ldd	r23, Z+1	; 0x01
    70e0:	82 81       	ldd	r24, Z+2	; 0x02
    70e2:	93 81       	ldd	r25, Z+3	; 0x03
    70e4:	26 e6       	ldi	r18, 0x66	; 102
    70e6:	36 e6       	ldi	r19, 0x66	; 102
    70e8:	46 e6       	ldi	r20, 0x66	; 102
    70ea:	55 e4       	ldi	r21, 0x45	; 69
    70ec:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    70f0:	dc 01       	movw	r26, r24
    70f2:	cb 01       	movw	r24, r22
    70f4:	f8 01       	movw	r30, r16
    70f6:	80 83       	st	Z, r24
    70f8:	91 83       	std	Z+1, r25	; 0x01
    70fa:	a2 83       	std	Z+2, r26	; 0x02
    70fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    70fe:	fe 01       	movw	r30, r28
    7100:	ff 96       	adiw	r30, 0x3f	; 63
    7102:	60 81       	ld	r22, Z
    7104:	71 81       	ldd	r23, Z+1	; 0x01
    7106:	82 81       	ldd	r24, Z+2	; 0x02
    7108:	93 81       	ldd	r25, Z+3	; 0x03
    710a:	20 e0       	ldi	r18, 0x00	; 0
    710c:	30 e0       	ldi	r19, 0x00	; 0
    710e:	40 e8       	ldi	r20, 0x80	; 128
    7110:	5f e3       	ldi	r21, 0x3F	; 63
    7112:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    7116:	88 23       	and	r24, r24
    7118:	2c f4       	brge	.+10     	; 0x7124 <buzzerBeep_1+0x8c>
		__ticks = 1;
    711a:	81 e0       	ldi	r24, 0x01	; 1
    711c:	90 e0       	ldi	r25, 0x00	; 0
    711e:	9e af       	std	Y+62, r25	; 0x3e
    7120:	8d af       	std	Y+61, r24	; 0x3d
    7122:	46 c0       	rjmp	.+140    	; 0x71b0 <buzzerBeep_1+0x118>
	else if (__tmp > 65535)
    7124:	fe 01       	movw	r30, r28
    7126:	ff 96       	adiw	r30, 0x3f	; 63
    7128:	60 81       	ld	r22, Z
    712a:	71 81       	ldd	r23, Z+1	; 0x01
    712c:	82 81       	ldd	r24, Z+2	; 0x02
    712e:	93 81       	ldd	r25, Z+3	; 0x03
    7130:	20 e0       	ldi	r18, 0x00	; 0
    7132:	3f ef       	ldi	r19, 0xFF	; 255
    7134:	4f e7       	ldi	r20, 0x7F	; 127
    7136:	57 e4       	ldi	r21, 0x47	; 71
    7138:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    713c:	18 16       	cp	r1, r24
    713e:	64 f5       	brge	.+88     	; 0x7198 <buzzerBeep_1+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7140:	fe 01       	movw	r30, r28
    7142:	ed 5b       	subi	r30, 0xBD	; 189
    7144:	ff 4f       	sbci	r31, 0xFF	; 255
    7146:	60 81       	ld	r22, Z
    7148:	71 81       	ldd	r23, Z+1	; 0x01
    714a:	82 81       	ldd	r24, Z+2	; 0x02
    714c:	93 81       	ldd	r25, Z+3	; 0x03
    714e:	20 e0       	ldi	r18, 0x00	; 0
    7150:	30 e0       	ldi	r19, 0x00	; 0
    7152:	40 e2       	ldi	r20, 0x20	; 32
    7154:	51 e4       	ldi	r21, 0x41	; 65
    7156:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    715a:	dc 01       	movw	r26, r24
    715c:	cb 01       	movw	r24, r22
    715e:	bc 01       	movw	r22, r24
    7160:	cd 01       	movw	r24, r26
    7162:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    7166:	dc 01       	movw	r26, r24
    7168:	cb 01       	movw	r24, r22
    716a:	9e af       	std	Y+62, r25	; 0x3e
    716c:	8d af       	std	Y+61, r24	; 0x3d
    716e:	0f c0       	rjmp	.+30     	; 0x718e <buzzerBeep_1+0xf6>
    7170:	80 e7       	ldi	r24, 0x70	; 112
    7172:	91 e0       	ldi	r25, 0x01	; 1
    7174:	9c af       	std	Y+60, r25	; 0x3c
    7176:	8b af       	std	Y+59, r24	; 0x3b
    7178:	8b ad       	ldd	r24, Y+59	; 0x3b
    717a:	9c ad       	ldd	r25, Y+60	; 0x3c
    717c:	01 97       	sbiw	r24, 0x01	; 1
    717e:	f1 f7       	brne	.-4      	; 0x717c <buzzerBeep_1+0xe4>
    7180:	9c af       	std	Y+60, r25	; 0x3c
    7182:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7184:	8d ad       	ldd	r24, Y+61	; 0x3d
    7186:	9e ad       	ldd	r25, Y+62	; 0x3e
    7188:	01 97       	sbiw	r24, 0x01	; 1
    718a:	9e af       	std	Y+62, r25	; 0x3e
    718c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    718e:	8d ad       	ldd	r24, Y+61	; 0x3d
    7190:	9e ad       	ldd	r25, Y+62	; 0x3e
    7192:	00 97       	sbiw	r24, 0x00	; 0
    7194:	69 f7       	brne	.-38     	; 0x7170 <buzzerBeep_1+0xd8>
    7196:	16 c0       	rjmp	.+44     	; 0x71c4 <buzzerBeep_1+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7198:	fe 01       	movw	r30, r28
    719a:	ff 96       	adiw	r30, 0x3f	; 63
    719c:	60 81       	ld	r22, Z
    719e:	71 81       	ldd	r23, Z+1	; 0x01
    71a0:	82 81       	ldd	r24, Z+2	; 0x02
    71a2:	93 81       	ldd	r25, Z+3	; 0x03
    71a4:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    71a8:	dc 01       	movw	r26, r24
    71aa:	cb 01       	movw	r24, r22
    71ac:	9e af       	std	Y+62, r25	; 0x3e
    71ae:	8d af       	std	Y+61, r24	; 0x3d
    71b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    71b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    71b4:	9a af       	std	Y+58, r25	; 0x3a
    71b6:	89 af       	std	Y+57, r24	; 0x39
    71b8:	89 ad       	ldd	r24, Y+57	; 0x39
    71ba:	9a ad       	ldd	r25, Y+58	; 0x3a
    71bc:	01 97       	sbiw	r24, 0x01	; 1
    71be:	f1 f7       	brne	.-4      	; 0x71bc <buzzerBeep_1+0x124>
    71c0:	9a af       	std	Y+58, r25	; 0x3a
    71c2:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(1000);
    PORTJ = 0x00;
    71c4:	e5 e0       	ldi	r30, 0x05	; 5
    71c6:	f1 e0       	ldi	r31, 0x01	; 1
    71c8:	10 82       	st	Z, r1

    if(isAlignedCorrect_1())
    71ca:	0e 94 ca 3a 	call	0x7594	; 0x7594 <isAlignedCorrect_1>
    71ce:	00 97       	sbiw	r24, 0x00	; 0
    71d0:	19 f0       	breq	.+6      	; 0x71d8 <buzzerBeep_1+0x140>
    {
        buzzer_1();
    71d2:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <buzzer_1>
    71d6:	d2 c1       	rjmp	.+932    	; 0x757c <buzzerBeep_1+0x4e4>
        return;
    }


    grip();
    71d8:	0e 94 93 12 	call	0x2526	; 0x2526 <grip>
    71dc:	80 e0       	ldi	r24, 0x00	; 0
    71de:	90 e0       	ldi	r25, 0x00	; 0
    71e0:	aa e7       	ldi	r26, 0x7A	; 122
    71e2:	b4 e4       	ldi	r27, 0x44	; 68
    71e4:	8d ab       	std	Y+53, r24	; 0x35
    71e6:	9e ab       	std	Y+54, r25	; 0x36
    71e8:	af ab       	std	Y+55, r26	; 0x37
    71ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    71ec:	6d a9       	ldd	r22, Y+53	; 0x35
    71ee:	7e a9       	ldd	r23, Y+54	; 0x36
    71f0:	8f a9       	ldd	r24, Y+55	; 0x37
    71f2:	98 ad       	ldd	r25, Y+56	; 0x38
    71f4:	26 e6       	ldi	r18, 0x66	; 102
    71f6:	36 e6       	ldi	r19, 0x66	; 102
    71f8:	46 e6       	ldi	r20, 0x66	; 102
    71fa:	55 e4       	ldi	r21, 0x45	; 69
    71fc:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    7200:	dc 01       	movw	r26, r24
    7202:	cb 01       	movw	r24, r22
    7204:	89 ab       	std	Y+49, r24	; 0x31
    7206:	9a ab       	std	Y+50, r25	; 0x32
    7208:	ab ab       	std	Y+51, r26	; 0x33
    720a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    720c:	69 a9       	ldd	r22, Y+49	; 0x31
    720e:	7a a9       	ldd	r23, Y+50	; 0x32
    7210:	8b a9       	ldd	r24, Y+51	; 0x33
    7212:	9c a9       	ldd	r25, Y+52	; 0x34
    7214:	20 e0       	ldi	r18, 0x00	; 0
    7216:	30 e0       	ldi	r19, 0x00	; 0
    7218:	40 e8       	ldi	r20, 0x80	; 128
    721a:	5f e3       	ldi	r21, 0x3F	; 63
    721c:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    7220:	88 23       	and	r24, r24
    7222:	2c f4       	brge	.+10     	; 0x722e <buzzerBeep_1+0x196>
		__ticks = 1;
    7224:	81 e0       	ldi	r24, 0x01	; 1
    7226:	90 e0       	ldi	r25, 0x00	; 0
    7228:	98 ab       	std	Y+48, r25	; 0x30
    722a:	8f a7       	std	Y+47, r24	; 0x2f
    722c:	3f c0       	rjmp	.+126    	; 0x72ac <buzzerBeep_1+0x214>
	else if (__tmp > 65535)
    722e:	69 a9       	ldd	r22, Y+49	; 0x31
    7230:	7a a9       	ldd	r23, Y+50	; 0x32
    7232:	8b a9       	ldd	r24, Y+51	; 0x33
    7234:	9c a9       	ldd	r25, Y+52	; 0x34
    7236:	20 e0       	ldi	r18, 0x00	; 0
    7238:	3f ef       	ldi	r19, 0xFF	; 255
    723a:	4f e7       	ldi	r20, 0x7F	; 127
    723c:	57 e4       	ldi	r21, 0x47	; 71
    723e:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    7242:	18 16       	cp	r1, r24
    7244:	4c f5       	brge	.+82     	; 0x7298 <buzzerBeep_1+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7246:	6d a9       	ldd	r22, Y+53	; 0x35
    7248:	7e a9       	ldd	r23, Y+54	; 0x36
    724a:	8f a9       	ldd	r24, Y+55	; 0x37
    724c:	98 ad       	ldd	r25, Y+56	; 0x38
    724e:	20 e0       	ldi	r18, 0x00	; 0
    7250:	30 e0       	ldi	r19, 0x00	; 0
    7252:	40 e2       	ldi	r20, 0x20	; 32
    7254:	51 e4       	ldi	r21, 0x41	; 65
    7256:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    725a:	dc 01       	movw	r26, r24
    725c:	cb 01       	movw	r24, r22
    725e:	bc 01       	movw	r22, r24
    7260:	cd 01       	movw	r24, r26
    7262:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    7266:	dc 01       	movw	r26, r24
    7268:	cb 01       	movw	r24, r22
    726a:	98 ab       	std	Y+48, r25	; 0x30
    726c:	8f a7       	std	Y+47, r24	; 0x2f
    726e:	0f c0       	rjmp	.+30     	; 0x728e <buzzerBeep_1+0x1f6>
    7270:	80 e7       	ldi	r24, 0x70	; 112
    7272:	91 e0       	ldi	r25, 0x01	; 1
    7274:	9e a7       	std	Y+46, r25	; 0x2e
    7276:	8d a7       	std	Y+45, r24	; 0x2d
    7278:	8d a5       	ldd	r24, Y+45	; 0x2d
    727a:	9e a5       	ldd	r25, Y+46	; 0x2e
    727c:	01 97       	sbiw	r24, 0x01	; 1
    727e:	f1 f7       	brne	.-4      	; 0x727c <buzzerBeep_1+0x1e4>
    7280:	9e a7       	std	Y+46, r25	; 0x2e
    7282:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7284:	8f a5       	ldd	r24, Y+47	; 0x2f
    7286:	98 a9       	ldd	r25, Y+48	; 0x30
    7288:	01 97       	sbiw	r24, 0x01	; 1
    728a:	98 ab       	std	Y+48, r25	; 0x30
    728c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    728e:	8f a5       	ldd	r24, Y+47	; 0x2f
    7290:	98 a9       	ldd	r25, Y+48	; 0x30
    7292:	00 97       	sbiw	r24, 0x00	; 0
    7294:	69 f7       	brne	.-38     	; 0x7270 <buzzerBeep_1+0x1d8>
    7296:	14 c0       	rjmp	.+40     	; 0x72c0 <buzzerBeep_1+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7298:	69 a9       	ldd	r22, Y+49	; 0x31
    729a:	7a a9       	ldd	r23, Y+50	; 0x32
    729c:	8b a9       	ldd	r24, Y+51	; 0x33
    729e:	9c a9       	ldd	r25, Y+52	; 0x34
    72a0:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    72a4:	dc 01       	movw	r26, r24
    72a6:	cb 01       	movw	r24, r22
    72a8:	98 ab       	std	Y+48, r25	; 0x30
    72aa:	8f a7       	std	Y+47, r24	; 0x2f
    72ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    72ae:	98 a9       	ldd	r25, Y+48	; 0x30
    72b0:	9c a7       	std	Y+44, r25	; 0x2c
    72b2:	8b a7       	std	Y+43, r24	; 0x2b
    72b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    72b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    72b8:	01 97       	sbiw	r24, 0x01	; 1
    72ba:	f1 f7       	brne	.-4      	; 0x72b8 <buzzerBeep_1+0x220>
    72bc:	9c a7       	std	Y+44, r25	; 0x2c
    72be:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1000);
    faceBack();
    72c0:	0e 94 7f 12 	call	0x24fe	; 0x24fe <faceBack>
    72c4:	80 e0       	ldi	r24, 0x00	; 0
    72c6:	90 e0       	ldi	r25, 0x00	; 0
    72c8:	aa e7       	ldi	r26, 0x7A	; 122
    72ca:	b4 e4       	ldi	r27, 0x44	; 68
    72cc:	8f a3       	std	Y+39, r24	; 0x27
    72ce:	98 a7       	std	Y+40, r25	; 0x28
    72d0:	a9 a7       	std	Y+41, r26	; 0x29
    72d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    72d4:	6f a1       	ldd	r22, Y+39	; 0x27
    72d6:	78 a5       	ldd	r23, Y+40	; 0x28
    72d8:	89 a5       	ldd	r24, Y+41	; 0x29
    72da:	9a a5       	ldd	r25, Y+42	; 0x2a
    72dc:	26 e6       	ldi	r18, 0x66	; 102
    72de:	36 e6       	ldi	r19, 0x66	; 102
    72e0:	46 e6       	ldi	r20, 0x66	; 102
    72e2:	55 e4       	ldi	r21, 0x45	; 69
    72e4:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    72e8:	dc 01       	movw	r26, r24
    72ea:	cb 01       	movw	r24, r22
    72ec:	8b a3       	std	Y+35, r24	; 0x23
    72ee:	9c a3       	std	Y+36, r25	; 0x24
    72f0:	ad a3       	std	Y+37, r26	; 0x25
    72f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    72f4:	6b a1       	ldd	r22, Y+35	; 0x23
    72f6:	7c a1       	ldd	r23, Y+36	; 0x24
    72f8:	8d a1       	ldd	r24, Y+37	; 0x25
    72fa:	9e a1       	ldd	r25, Y+38	; 0x26
    72fc:	20 e0       	ldi	r18, 0x00	; 0
    72fe:	30 e0       	ldi	r19, 0x00	; 0
    7300:	40 e8       	ldi	r20, 0x80	; 128
    7302:	5f e3       	ldi	r21, 0x3F	; 63
    7304:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    7308:	88 23       	and	r24, r24
    730a:	2c f4       	brge	.+10     	; 0x7316 <buzzerBeep_1+0x27e>
		__ticks = 1;
    730c:	81 e0       	ldi	r24, 0x01	; 1
    730e:	90 e0       	ldi	r25, 0x00	; 0
    7310:	9a a3       	std	Y+34, r25	; 0x22
    7312:	89 a3       	std	Y+33, r24	; 0x21
    7314:	3f c0       	rjmp	.+126    	; 0x7394 <buzzerBeep_1+0x2fc>
	else if (__tmp > 65535)
    7316:	6b a1       	ldd	r22, Y+35	; 0x23
    7318:	7c a1       	ldd	r23, Y+36	; 0x24
    731a:	8d a1       	ldd	r24, Y+37	; 0x25
    731c:	9e a1       	ldd	r25, Y+38	; 0x26
    731e:	20 e0       	ldi	r18, 0x00	; 0
    7320:	3f ef       	ldi	r19, 0xFF	; 255
    7322:	4f e7       	ldi	r20, 0x7F	; 127
    7324:	57 e4       	ldi	r21, 0x47	; 71
    7326:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    732a:	18 16       	cp	r1, r24
    732c:	4c f5       	brge	.+82     	; 0x7380 <buzzerBeep_1+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    732e:	6f a1       	ldd	r22, Y+39	; 0x27
    7330:	78 a5       	ldd	r23, Y+40	; 0x28
    7332:	89 a5       	ldd	r24, Y+41	; 0x29
    7334:	9a a5       	ldd	r25, Y+42	; 0x2a
    7336:	20 e0       	ldi	r18, 0x00	; 0
    7338:	30 e0       	ldi	r19, 0x00	; 0
    733a:	40 e2       	ldi	r20, 0x20	; 32
    733c:	51 e4       	ldi	r21, 0x41	; 65
    733e:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    7342:	dc 01       	movw	r26, r24
    7344:	cb 01       	movw	r24, r22
    7346:	bc 01       	movw	r22, r24
    7348:	cd 01       	movw	r24, r26
    734a:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    734e:	dc 01       	movw	r26, r24
    7350:	cb 01       	movw	r24, r22
    7352:	9a a3       	std	Y+34, r25	; 0x22
    7354:	89 a3       	std	Y+33, r24	; 0x21
    7356:	0f c0       	rjmp	.+30     	; 0x7376 <buzzerBeep_1+0x2de>
    7358:	80 e7       	ldi	r24, 0x70	; 112
    735a:	91 e0       	ldi	r25, 0x01	; 1
    735c:	98 a3       	std	Y+32, r25	; 0x20
    735e:	8f 8f       	std	Y+31, r24	; 0x1f
    7360:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7362:	98 a1       	ldd	r25, Y+32	; 0x20
    7364:	01 97       	sbiw	r24, 0x01	; 1
    7366:	f1 f7       	brne	.-4      	; 0x7364 <buzzerBeep_1+0x2cc>
    7368:	98 a3       	std	Y+32, r25	; 0x20
    736a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    736c:	89 a1       	ldd	r24, Y+33	; 0x21
    736e:	9a a1       	ldd	r25, Y+34	; 0x22
    7370:	01 97       	sbiw	r24, 0x01	; 1
    7372:	9a a3       	std	Y+34, r25	; 0x22
    7374:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7376:	89 a1       	ldd	r24, Y+33	; 0x21
    7378:	9a a1       	ldd	r25, Y+34	; 0x22
    737a:	00 97       	sbiw	r24, 0x00	; 0
    737c:	69 f7       	brne	.-38     	; 0x7358 <buzzerBeep_1+0x2c0>
    737e:	14 c0       	rjmp	.+40     	; 0x73a8 <buzzerBeep_1+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7380:	6b a1       	ldd	r22, Y+35	; 0x23
    7382:	7c a1       	ldd	r23, Y+36	; 0x24
    7384:	8d a1       	ldd	r24, Y+37	; 0x25
    7386:	9e a1       	ldd	r25, Y+38	; 0x26
    7388:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    738c:	dc 01       	movw	r26, r24
    738e:	cb 01       	movw	r24, r22
    7390:	9a a3       	std	Y+34, r25	; 0x22
    7392:	89 a3       	std	Y+33, r24	; 0x21
    7394:	89 a1       	ldd	r24, Y+33	; 0x21
    7396:	9a a1       	ldd	r25, Y+34	; 0x22
    7398:	9e 8f       	std	Y+30, r25	; 0x1e
    739a:	8d 8f       	std	Y+29, r24	; 0x1d
    739c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    739e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    73a0:	01 97       	sbiw	r24, 0x01	; 1
    73a2:	f1 f7       	brne	.-4      	; 0x73a0 <buzzerBeep_1+0x308>
    73a4:	9e 8f       	std	Y+30, r25	; 0x1e
    73a6:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1000);
    ungrip();
    73a8:	0e 94 9d 12 	call	0x253a	; 0x253a <ungrip>
    73ac:	80 e0       	ldi	r24, 0x00	; 0
    73ae:	90 e0       	ldi	r25, 0x00	; 0
    73b0:	aa e7       	ldi	r26, 0x7A	; 122
    73b2:	b4 e4       	ldi	r27, 0x44	; 68
    73b4:	89 8f       	std	Y+25, r24	; 0x19
    73b6:	9a 8f       	std	Y+26, r25	; 0x1a
    73b8:	ab 8f       	std	Y+27, r26	; 0x1b
    73ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    73bc:	69 8d       	ldd	r22, Y+25	; 0x19
    73be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    73c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    73c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    73c4:	26 e6       	ldi	r18, 0x66	; 102
    73c6:	36 e6       	ldi	r19, 0x66	; 102
    73c8:	46 e6       	ldi	r20, 0x66	; 102
    73ca:	55 e4       	ldi	r21, 0x45	; 69
    73cc:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    73d0:	dc 01       	movw	r26, r24
    73d2:	cb 01       	movw	r24, r22
    73d4:	8d 8b       	std	Y+21, r24	; 0x15
    73d6:	9e 8b       	std	Y+22, r25	; 0x16
    73d8:	af 8b       	std	Y+23, r26	; 0x17
    73da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    73dc:	6d 89       	ldd	r22, Y+21	; 0x15
    73de:	7e 89       	ldd	r23, Y+22	; 0x16
    73e0:	8f 89       	ldd	r24, Y+23	; 0x17
    73e2:	98 8d       	ldd	r25, Y+24	; 0x18
    73e4:	20 e0       	ldi	r18, 0x00	; 0
    73e6:	30 e0       	ldi	r19, 0x00	; 0
    73e8:	40 e8       	ldi	r20, 0x80	; 128
    73ea:	5f e3       	ldi	r21, 0x3F	; 63
    73ec:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    73f0:	88 23       	and	r24, r24
    73f2:	2c f4       	brge	.+10     	; 0x73fe <buzzerBeep_1+0x366>
		__ticks = 1;
    73f4:	81 e0       	ldi	r24, 0x01	; 1
    73f6:	90 e0       	ldi	r25, 0x00	; 0
    73f8:	9c 8b       	std	Y+20, r25	; 0x14
    73fa:	8b 8b       	std	Y+19, r24	; 0x13
    73fc:	3f c0       	rjmp	.+126    	; 0x747c <buzzerBeep_1+0x3e4>
	else if (__tmp > 65535)
    73fe:	6d 89       	ldd	r22, Y+21	; 0x15
    7400:	7e 89       	ldd	r23, Y+22	; 0x16
    7402:	8f 89       	ldd	r24, Y+23	; 0x17
    7404:	98 8d       	ldd	r25, Y+24	; 0x18
    7406:	20 e0       	ldi	r18, 0x00	; 0
    7408:	3f ef       	ldi	r19, 0xFF	; 255
    740a:	4f e7       	ldi	r20, 0x7F	; 127
    740c:	57 e4       	ldi	r21, 0x47	; 71
    740e:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    7412:	18 16       	cp	r1, r24
    7414:	4c f5       	brge	.+82     	; 0x7468 <buzzerBeep_1+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7416:	69 8d       	ldd	r22, Y+25	; 0x19
    7418:	7a 8d       	ldd	r23, Y+26	; 0x1a
    741a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    741c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    741e:	20 e0       	ldi	r18, 0x00	; 0
    7420:	30 e0       	ldi	r19, 0x00	; 0
    7422:	40 e2       	ldi	r20, 0x20	; 32
    7424:	51 e4       	ldi	r21, 0x41	; 65
    7426:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    742a:	dc 01       	movw	r26, r24
    742c:	cb 01       	movw	r24, r22
    742e:	bc 01       	movw	r22, r24
    7430:	cd 01       	movw	r24, r26
    7432:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    7436:	dc 01       	movw	r26, r24
    7438:	cb 01       	movw	r24, r22
    743a:	9c 8b       	std	Y+20, r25	; 0x14
    743c:	8b 8b       	std	Y+19, r24	; 0x13
    743e:	0f c0       	rjmp	.+30     	; 0x745e <buzzerBeep_1+0x3c6>
    7440:	80 e7       	ldi	r24, 0x70	; 112
    7442:	91 e0       	ldi	r25, 0x01	; 1
    7444:	9a 8b       	std	Y+18, r25	; 0x12
    7446:	89 8b       	std	Y+17, r24	; 0x11
    7448:	89 89       	ldd	r24, Y+17	; 0x11
    744a:	9a 89       	ldd	r25, Y+18	; 0x12
    744c:	01 97       	sbiw	r24, 0x01	; 1
    744e:	f1 f7       	brne	.-4      	; 0x744c <buzzerBeep_1+0x3b4>
    7450:	9a 8b       	std	Y+18, r25	; 0x12
    7452:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7454:	8b 89       	ldd	r24, Y+19	; 0x13
    7456:	9c 89       	ldd	r25, Y+20	; 0x14
    7458:	01 97       	sbiw	r24, 0x01	; 1
    745a:	9c 8b       	std	Y+20, r25	; 0x14
    745c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    745e:	8b 89       	ldd	r24, Y+19	; 0x13
    7460:	9c 89       	ldd	r25, Y+20	; 0x14
    7462:	00 97       	sbiw	r24, 0x00	; 0
    7464:	69 f7       	brne	.-38     	; 0x7440 <buzzerBeep_1+0x3a8>
    7466:	14 c0       	rjmp	.+40     	; 0x7490 <buzzerBeep_1+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7468:	6d 89       	ldd	r22, Y+21	; 0x15
    746a:	7e 89       	ldd	r23, Y+22	; 0x16
    746c:	8f 89       	ldd	r24, Y+23	; 0x17
    746e:	98 8d       	ldd	r25, Y+24	; 0x18
    7470:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    7474:	dc 01       	movw	r26, r24
    7476:	cb 01       	movw	r24, r22
    7478:	9c 8b       	std	Y+20, r25	; 0x14
    747a:	8b 8b       	std	Y+19, r24	; 0x13
    747c:	8b 89       	ldd	r24, Y+19	; 0x13
    747e:	9c 89       	ldd	r25, Y+20	; 0x14
    7480:	98 8b       	std	Y+16, r25	; 0x10
    7482:	8f 87       	std	Y+15, r24	; 0x0f
    7484:	8f 85       	ldd	r24, Y+15	; 0x0f
    7486:	98 89       	ldd	r25, Y+16	; 0x10
    7488:	01 97       	sbiw	r24, 0x01	; 1
    748a:	f1 f7       	brne	.-4      	; 0x7488 <buzzerBeep_1+0x3f0>
    748c:	98 8b       	std	Y+16, r25	; 0x10
    748e:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1000);
    faceFront();
    7490:	0e 94 75 12 	call	0x24ea	; 0x24ea <faceFront>
    7494:	80 e0       	ldi	r24, 0x00	; 0
    7496:	90 e0       	ldi	r25, 0x00	; 0
    7498:	aa e7       	ldi	r26, 0x7A	; 122
    749a:	b4 e4       	ldi	r27, 0x44	; 68
    749c:	8b 87       	std	Y+11, r24	; 0x0b
    749e:	9c 87       	std	Y+12, r25	; 0x0c
    74a0:	ad 87       	std	Y+13, r26	; 0x0d
    74a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    74a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    74a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    74a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    74aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    74ac:	26 e6       	ldi	r18, 0x66	; 102
    74ae:	36 e6       	ldi	r19, 0x66	; 102
    74b0:	46 e6       	ldi	r20, 0x66	; 102
    74b2:	55 e4       	ldi	r21, 0x45	; 69
    74b4:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    74b8:	dc 01       	movw	r26, r24
    74ba:	cb 01       	movw	r24, r22
    74bc:	8f 83       	std	Y+7, r24	; 0x07
    74be:	98 87       	std	Y+8, r25	; 0x08
    74c0:	a9 87       	std	Y+9, r26	; 0x09
    74c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    74c4:	6f 81       	ldd	r22, Y+7	; 0x07
    74c6:	78 85       	ldd	r23, Y+8	; 0x08
    74c8:	89 85       	ldd	r24, Y+9	; 0x09
    74ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    74cc:	20 e0       	ldi	r18, 0x00	; 0
    74ce:	30 e0       	ldi	r19, 0x00	; 0
    74d0:	40 e8       	ldi	r20, 0x80	; 128
    74d2:	5f e3       	ldi	r21, 0x3F	; 63
    74d4:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    74d8:	88 23       	and	r24, r24
    74da:	2c f4       	brge	.+10     	; 0x74e6 <buzzerBeep_1+0x44e>
		__ticks = 1;
    74dc:	81 e0       	ldi	r24, 0x01	; 1
    74de:	90 e0       	ldi	r25, 0x00	; 0
    74e0:	9e 83       	std	Y+6, r25	; 0x06
    74e2:	8d 83       	std	Y+5, r24	; 0x05
    74e4:	3f c0       	rjmp	.+126    	; 0x7564 <buzzerBeep_1+0x4cc>
	else if (__tmp > 65535)
    74e6:	6f 81       	ldd	r22, Y+7	; 0x07
    74e8:	78 85       	ldd	r23, Y+8	; 0x08
    74ea:	89 85       	ldd	r24, Y+9	; 0x09
    74ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    74ee:	20 e0       	ldi	r18, 0x00	; 0
    74f0:	3f ef       	ldi	r19, 0xFF	; 255
    74f2:	4f e7       	ldi	r20, 0x7F	; 127
    74f4:	57 e4       	ldi	r21, 0x47	; 71
    74f6:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    74fa:	18 16       	cp	r1, r24
    74fc:	4c f5       	brge	.+82     	; 0x7550 <buzzerBeep_1+0x4b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    74fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    7500:	7c 85       	ldd	r23, Y+12	; 0x0c
    7502:	8d 85       	ldd	r24, Y+13	; 0x0d
    7504:	9e 85       	ldd	r25, Y+14	; 0x0e
    7506:	20 e0       	ldi	r18, 0x00	; 0
    7508:	30 e0       	ldi	r19, 0x00	; 0
    750a:	40 e2       	ldi	r20, 0x20	; 32
    750c:	51 e4       	ldi	r21, 0x41	; 65
    750e:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    7512:	dc 01       	movw	r26, r24
    7514:	cb 01       	movw	r24, r22
    7516:	bc 01       	movw	r22, r24
    7518:	cd 01       	movw	r24, r26
    751a:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    751e:	dc 01       	movw	r26, r24
    7520:	cb 01       	movw	r24, r22
    7522:	9e 83       	std	Y+6, r25	; 0x06
    7524:	8d 83       	std	Y+5, r24	; 0x05
    7526:	0f c0       	rjmp	.+30     	; 0x7546 <buzzerBeep_1+0x4ae>
    7528:	80 e7       	ldi	r24, 0x70	; 112
    752a:	91 e0       	ldi	r25, 0x01	; 1
    752c:	9c 83       	std	Y+4, r25	; 0x04
    752e:	8b 83       	std	Y+3, r24	; 0x03
    7530:	8b 81       	ldd	r24, Y+3	; 0x03
    7532:	9c 81       	ldd	r25, Y+4	; 0x04
    7534:	01 97       	sbiw	r24, 0x01	; 1
    7536:	f1 f7       	brne	.-4      	; 0x7534 <buzzerBeep_1+0x49c>
    7538:	9c 83       	std	Y+4, r25	; 0x04
    753a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    753c:	8d 81       	ldd	r24, Y+5	; 0x05
    753e:	9e 81       	ldd	r25, Y+6	; 0x06
    7540:	01 97       	sbiw	r24, 0x01	; 1
    7542:	9e 83       	std	Y+6, r25	; 0x06
    7544:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7546:	8d 81       	ldd	r24, Y+5	; 0x05
    7548:	9e 81       	ldd	r25, Y+6	; 0x06
    754a:	00 97       	sbiw	r24, 0x00	; 0
    754c:	69 f7       	brne	.-38     	; 0x7528 <buzzerBeep_1+0x490>
    754e:	14 c0       	rjmp	.+40     	; 0x7578 <buzzerBeep_1+0x4e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7550:	6f 81       	ldd	r22, Y+7	; 0x07
    7552:	78 85       	ldd	r23, Y+8	; 0x08
    7554:	89 85       	ldd	r24, Y+9	; 0x09
    7556:	9a 85       	ldd	r25, Y+10	; 0x0a
    7558:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    755c:	dc 01       	movw	r26, r24
    755e:	cb 01       	movw	r24, r22
    7560:	9e 83       	std	Y+6, r25	; 0x06
    7562:	8d 83       	std	Y+5, r24	; 0x05
    7564:	8d 81       	ldd	r24, Y+5	; 0x05
    7566:	9e 81       	ldd	r25, Y+6	; 0x06
    7568:	9a 83       	std	Y+2, r25	; 0x02
    756a:	89 83       	std	Y+1, r24	; 0x01
    756c:	89 81       	ldd	r24, Y+1	; 0x01
    756e:	9a 81       	ldd	r25, Y+2	; 0x02
    7570:	01 97       	sbiw	r24, 0x01	; 1
    7572:	f1 f7       	brne	.-4      	; 0x7570 <buzzerBeep_1+0x4d8>
    7574:	9a 83       	std	Y+2, r25	; 0x02
    7576:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);

    buzzer_1();
    7578:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <buzzer_1>
    return;

}
    757c:	ca 5b       	subi	r28, 0xBA	; 186
    757e:	df 4f       	sbci	r29, 0xFF	; 255
    7580:	0f b6       	in	r0, 0x3f	; 63
    7582:	f8 94       	cli
    7584:	de bf       	out	0x3e, r29	; 62
    7586:	0f be       	out	0x3f, r0	; 63
    7588:	cd bf       	out	0x3d, r28	; 61
    758a:	cf 91       	pop	r28
    758c:	df 91       	pop	r29
    758e:	1f 91       	pop	r17
    7590:	0f 91       	pop	r16
    7592:	08 95       	ret

00007594 <isAlignedCorrect_1>:

int isAlignedCorrect_1()
{
    7594:	df 93       	push	r29
    7596:	cf 93       	push	r28
    7598:	cd b7       	in	r28, 0x3d	; 61
    759a:	de b7       	in	r29, 0x3e	; 62
    759c:	e0 97       	sbiw	r28, 0x30	; 48
    759e:	0f b6       	in	r0, 0x3f	; 63
    75a0:	f8 94       	cli
    75a2:	de bf       	out	0x3e, r29	; 62
    75a4:	0f be       	out	0x3f, r0	; 63
    75a6:	cd bf       	out	0x3d, r28	; 61
    int reading = ADC_Conversion(6);
    75a8:	86 e0       	ldi	r24, 0x06	; 6
    75aa:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    75ae:	88 2f       	mov	r24, r24
    75b0:	90 e0       	ldi	r25, 0x00	; 0
    75b2:	9e a7       	std	Y+46, r25	; 0x2e
    75b4:	8d a7       	std	Y+45, r24	; 0x2d
    int value;

        velocity(forwardLeftSpeed, forwardRightSpeed);
    75b6:	84 eb       	ldi	r24, 0xB4	; 180
    75b8:	64 eb       	ldi	r22, 0xB4	; 180
    75ba:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>

        sensorLeft = ADC_Conversion(3);
    75be:	83 e0       	ldi	r24, 0x03	; 3
    75c0:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    75c4:	88 2f       	mov	r24, r24
    75c6:	90 e0       	ldi	r25, 0x00	; 0
    75c8:	90 93 29 03 	sts	0x0329, r25
    75cc:	80 93 28 03 	sts	0x0328, r24
        right();
    75d0:	0e 94 99 03 	call	0x732	; 0x732 <right>
    75d4:	1b c0       	rjmp	.+54     	; 0x760c <isAlignedCorrect_1+0x78>

        while(sensorLeft < 20)
        {
            value = ADC_Conversion(6);
    75d6:	86 e0       	ldi	r24, 0x06	; 6
    75d8:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    75dc:	88 2f       	mov	r24, r24
    75de:	90 e0       	ldi	r25, 0x00	; 0
    75e0:	9c a7       	std	Y+44, r25	; 0x2c
    75e2:	8b a7       	std	Y+43, r24	; 0x2b
            if(value < reading)
    75e4:	2b a5       	ldd	r18, Y+43	; 0x2b
    75e6:	3c a5       	ldd	r19, Y+44	; 0x2c
    75e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    75ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    75ec:	28 17       	cp	r18, r24
    75ee:	39 07       	cpc	r19, r25
    75f0:	24 f4       	brge	.+8      	; 0x75fa <isAlignedCorrect_1+0x66>
                reading = value;
    75f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    75f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    75f6:	9e a7       	std	Y+46, r25	; 0x2e
    75f8:	8d a7       	std	Y+45, r24	; 0x2d
            sensorLeft = ADC_Conversion(3);
    75fa:	83 e0       	ldi	r24, 0x03	; 3
    75fc:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    7600:	88 2f       	mov	r24, r24
    7602:	90 e0       	ldi	r25, 0x00	; 0
    7604:	90 93 29 03 	sts	0x0329, r25
    7608:	80 93 28 03 	sts	0x0328, r24
        velocity(forwardLeftSpeed, forwardRightSpeed);

        sensorLeft = ADC_Conversion(3);
        right();

        while(sensorLeft < 20)
    760c:	80 91 28 03 	lds	r24, 0x0328
    7610:	90 91 29 03 	lds	r25, 0x0329
    7614:	84 31       	cpi	r24, 0x14	; 20
    7616:	91 05       	cpc	r25, r1
    7618:	f4 f2       	brlt	.-68     	; 0x75d6 <isAlignedCorrect_1+0x42>
            if(value < reading)
                reading = value;
            sensorLeft = ADC_Conversion(3);
        }

        stop();
    761a:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    761e:	80 e0       	ldi	r24, 0x00	; 0
    7620:	90 e0       	ldi	r25, 0x00	; 0
    7622:	a8 ec       	ldi	r26, 0xC8	; 200
    7624:	b2 e4       	ldi	r27, 0x42	; 66
    7626:	8f a3       	std	Y+39, r24	; 0x27
    7628:	98 a7       	std	Y+40, r25	; 0x28
    762a:	a9 a7       	std	Y+41, r26	; 0x29
    762c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    762e:	6f a1       	ldd	r22, Y+39	; 0x27
    7630:	78 a5       	ldd	r23, Y+40	; 0x28
    7632:	89 a5       	ldd	r24, Y+41	; 0x29
    7634:	9a a5       	ldd	r25, Y+42	; 0x2a
    7636:	26 e6       	ldi	r18, 0x66	; 102
    7638:	36 e6       	ldi	r19, 0x66	; 102
    763a:	46 e6       	ldi	r20, 0x66	; 102
    763c:	55 e4       	ldi	r21, 0x45	; 69
    763e:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    7642:	dc 01       	movw	r26, r24
    7644:	cb 01       	movw	r24, r22
    7646:	8b a3       	std	Y+35, r24	; 0x23
    7648:	9c a3       	std	Y+36, r25	; 0x24
    764a:	ad a3       	std	Y+37, r26	; 0x25
    764c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    764e:	6b a1       	ldd	r22, Y+35	; 0x23
    7650:	7c a1       	ldd	r23, Y+36	; 0x24
    7652:	8d a1       	ldd	r24, Y+37	; 0x25
    7654:	9e a1       	ldd	r25, Y+38	; 0x26
    7656:	20 e0       	ldi	r18, 0x00	; 0
    7658:	30 e0       	ldi	r19, 0x00	; 0
    765a:	40 e8       	ldi	r20, 0x80	; 128
    765c:	5f e3       	ldi	r21, 0x3F	; 63
    765e:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    7662:	88 23       	and	r24, r24
    7664:	2c f4       	brge	.+10     	; 0x7670 <isAlignedCorrect_1+0xdc>
		__ticks = 1;
    7666:	81 e0       	ldi	r24, 0x01	; 1
    7668:	90 e0       	ldi	r25, 0x00	; 0
    766a:	9a a3       	std	Y+34, r25	; 0x22
    766c:	89 a3       	std	Y+33, r24	; 0x21
    766e:	3f c0       	rjmp	.+126    	; 0x76ee <isAlignedCorrect_1+0x15a>
	else if (__tmp > 65535)
    7670:	6b a1       	ldd	r22, Y+35	; 0x23
    7672:	7c a1       	ldd	r23, Y+36	; 0x24
    7674:	8d a1       	ldd	r24, Y+37	; 0x25
    7676:	9e a1       	ldd	r25, Y+38	; 0x26
    7678:	20 e0       	ldi	r18, 0x00	; 0
    767a:	3f ef       	ldi	r19, 0xFF	; 255
    767c:	4f e7       	ldi	r20, 0x7F	; 127
    767e:	57 e4       	ldi	r21, 0x47	; 71
    7680:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    7684:	18 16       	cp	r1, r24
    7686:	4c f5       	brge	.+82     	; 0x76da <isAlignedCorrect_1+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7688:	6f a1       	ldd	r22, Y+39	; 0x27
    768a:	78 a5       	ldd	r23, Y+40	; 0x28
    768c:	89 a5       	ldd	r24, Y+41	; 0x29
    768e:	9a a5       	ldd	r25, Y+42	; 0x2a
    7690:	20 e0       	ldi	r18, 0x00	; 0
    7692:	30 e0       	ldi	r19, 0x00	; 0
    7694:	40 e2       	ldi	r20, 0x20	; 32
    7696:	51 e4       	ldi	r21, 0x41	; 65
    7698:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    769c:	dc 01       	movw	r26, r24
    769e:	cb 01       	movw	r24, r22
    76a0:	bc 01       	movw	r22, r24
    76a2:	cd 01       	movw	r24, r26
    76a4:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    76a8:	dc 01       	movw	r26, r24
    76aa:	cb 01       	movw	r24, r22
    76ac:	9a a3       	std	Y+34, r25	; 0x22
    76ae:	89 a3       	std	Y+33, r24	; 0x21
    76b0:	0f c0       	rjmp	.+30     	; 0x76d0 <isAlignedCorrect_1+0x13c>
    76b2:	80 e7       	ldi	r24, 0x70	; 112
    76b4:	91 e0       	ldi	r25, 0x01	; 1
    76b6:	98 a3       	std	Y+32, r25	; 0x20
    76b8:	8f 8f       	std	Y+31, r24	; 0x1f
    76ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    76bc:	98 a1       	ldd	r25, Y+32	; 0x20
    76be:	01 97       	sbiw	r24, 0x01	; 1
    76c0:	f1 f7       	brne	.-4      	; 0x76be <isAlignedCorrect_1+0x12a>
    76c2:	98 a3       	std	Y+32, r25	; 0x20
    76c4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    76c6:	89 a1       	ldd	r24, Y+33	; 0x21
    76c8:	9a a1       	ldd	r25, Y+34	; 0x22
    76ca:	01 97       	sbiw	r24, 0x01	; 1
    76cc:	9a a3       	std	Y+34, r25	; 0x22
    76ce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    76d0:	89 a1       	ldd	r24, Y+33	; 0x21
    76d2:	9a a1       	ldd	r25, Y+34	; 0x22
    76d4:	00 97       	sbiw	r24, 0x00	; 0
    76d6:	69 f7       	brne	.-38     	; 0x76b2 <isAlignedCorrect_1+0x11e>
    76d8:	14 c0       	rjmp	.+40     	; 0x7702 <isAlignedCorrect_1+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    76da:	6b a1       	ldd	r22, Y+35	; 0x23
    76dc:	7c a1       	ldd	r23, Y+36	; 0x24
    76de:	8d a1       	ldd	r24, Y+37	; 0x25
    76e0:	9e a1       	ldd	r25, Y+38	; 0x26
    76e2:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    76e6:	dc 01       	movw	r26, r24
    76e8:	cb 01       	movw	r24, r22
    76ea:	9a a3       	std	Y+34, r25	; 0x22
    76ec:	89 a3       	std	Y+33, r24	; 0x21
    76ee:	89 a1       	ldd	r24, Y+33	; 0x21
    76f0:	9a a1       	ldd	r25, Y+34	; 0x22
    76f2:	9e 8f       	std	Y+30, r25	; 0x1e
    76f4:	8d 8f       	std	Y+29, r24	; 0x1d
    76f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    76f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    76fa:	01 97       	sbiw	r24, 0x01	; 1
    76fc:	f1 f7       	brne	.-4      	; 0x76fa <isAlignedCorrect_1+0x166>
    76fe:	9e 8f       	std	Y+30, r25	; 0x1e
    7700:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(100);

        sensorRight = ADC_Conversion(1);
    7702:	81 e0       	ldi	r24, 0x01	; 1
    7704:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    7708:	88 2f       	mov	r24, r24
    770a:	90 e0       	ldi	r25, 0x00	; 0
    770c:	90 93 41 03 	sts	0x0341, r25
    7710:	80 93 40 03 	sts	0x0340, r24
        left();
    7714:	0e 94 05 03 	call	0x60a	; 0x60a <left>
    7718:	1b c0       	rjmp	.+54     	; 0x7750 <isAlignedCorrect_1+0x1bc>
        while(sensorRight < 20)
        {
            value = ADC_Conversion(6);
    771a:	86 e0       	ldi	r24, 0x06	; 6
    771c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    7720:	88 2f       	mov	r24, r24
    7722:	90 e0       	ldi	r25, 0x00	; 0
    7724:	9c a7       	std	Y+44, r25	; 0x2c
    7726:	8b a7       	std	Y+43, r24	; 0x2b
            if(value < reading)
    7728:	2b a5       	ldd	r18, Y+43	; 0x2b
    772a:	3c a5       	ldd	r19, Y+44	; 0x2c
    772c:	8d a5       	ldd	r24, Y+45	; 0x2d
    772e:	9e a5       	ldd	r25, Y+46	; 0x2e
    7730:	28 17       	cp	r18, r24
    7732:	39 07       	cpc	r19, r25
    7734:	24 f4       	brge	.+8      	; 0x773e <isAlignedCorrect_1+0x1aa>
                reading = value;
    7736:	8b a5       	ldd	r24, Y+43	; 0x2b
    7738:	9c a5       	ldd	r25, Y+44	; 0x2c
    773a:	9e a7       	std	Y+46, r25	; 0x2e
    773c:	8d a7       	std	Y+45, r24	; 0x2d
            sensorRight = ADC_Conversion(1);
    773e:	81 e0       	ldi	r24, 0x01	; 1
    7740:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    7744:	88 2f       	mov	r24, r24
    7746:	90 e0       	ldi	r25, 0x00	; 0
    7748:	90 93 41 03 	sts	0x0341, r25
    774c:	80 93 40 03 	sts	0x0340, r24
        stop();
        _delay_ms(100);

        sensorRight = ADC_Conversion(1);
        left();
        while(sensorRight < 20)
    7750:	80 91 40 03 	lds	r24, 0x0340
    7754:	90 91 41 03 	lds	r25, 0x0341
    7758:	84 31       	cpi	r24, 0x14	; 20
    775a:	91 05       	cpc	r25, r1
    775c:	f4 f2       	brlt	.-68     	; 0x771a <isAlignedCorrect_1+0x186>
            if(value < reading)
                reading = value;
            sensorRight = ADC_Conversion(1);
        }

        stop();
    775e:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    7762:	80 e0       	ldi	r24, 0x00	; 0
    7764:	90 e0       	ldi	r25, 0x00	; 0
    7766:	a8 ec       	ldi	r26, 0xC8	; 200
    7768:	b2 e4       	ldi	r27, 0x42	; 66
    776a:	89 8f       	std	Y+25, r24	; 0x19
    776c:	9a 8f       	std	Y+26, r25	; 0x1a
    776e:	ab 8f       	std	Y+27, r26	; 0x1b
    7770:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7772:	69 8d       	ldd	r22, Y+25	; 0x19
    7774:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7776:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7778:	9c 8d       	ldd	r25, Y+28	; 0x1c
    777a:	26 e6       	ldi	r18, 0x66	; 102
    777c:	36 e6       	ldi	r19, 0x66	; 102
    777e:	46 e6       	ldi	r20, 0x66	; 102
    7780:	55 e4       	ldi	r21, 0x45	; 69
    7782:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    7786:	dc 01       	movw	r26, r24
    7788:	cb 01       	movw	r24, r22
    778a:	8d 8b       	std	Y+21, r24	; 0x15
    778c:	9e 8b       	std	Y+22, r25	; 0x16
    778e:	af 8b       	std	Y+23, r26	; 0x17
    7790:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7792:	6d 89       	ldd	r22, Y+21	; 0x15
    7794:	7e 89       	ldd	r23, Y+22	; 0x16
    7796:	8f 89       	ldd	r24, Y+23	; 0x17
    7798:	98 8d       	ldd	r25, Y+24	; 0x18
    779a:	20 e0       	ldi	r18, 0x00	; 0
    779c:	30 e0       	ldi	r19, 0x00	; 0
    779e:	40 e8       	ldi	r20, 0x80	; 128
    77a0:	5f e3       	ldi	r21, 0x3F	; 63
    77a2:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    77a6:	88 23       	and	r24, r24
    77a8:	2c f4       	brge	.+10     	; 0x77b4 <isAlignedCorrect_1+0x220>
		__ticks = 1;
    77aa:	81 e0       	ldi	r24, 0x01	; 1
    77ac:	90 e0       	ldi	r25, 0x00	; 0
    77ae:	9c 8b       	std	Y+20, r25	; 0x14
    77b0:	8b 8b       	std	Y+19, r24	; 0x13
    77b2:	3f c0       	rjmp	.+126    	; 0x7832 <isAlignedCorrect_1+0x29e>
	else if (__tmp > 65535)
    77b4:	6d 89       	ldd	r22, Y+21	; 0x15
    77b6:	7e 89       	ldd	r23, Y+22	; 0x16
    77b8:	8f 89       	ldd	r24, Y+23	; 0x17
    77ba:	98 8d       	ldd	r25, Y+24	; 0x18
    77bc:	20 e0       	ldi	r18, 0x00	; 0
    77be:	3f ef       	ldi	r19, 0xFF	; 255
    77c0:	4f e7       	ldi	r20, 0x7F	; 127
    77c2:	57 e4       	ldi	r21, 0x47	; 71
    77c4:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    77c8:	18 16       	cp	r1, r24
    77ca:	4c f5       	brge	.+82     	; 0x781e <isAlignedCorrect_1+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    77cc:	69 8d       	ldd	r22, Y+25	; 0x19
    77ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    77d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    77d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    77d4:	20 e0       	ldi	r18, 0x00	; 0
    77d6:	30 e0       	ldi	r19, 0x00	; 0
    77d8:	40 e2       	ldi	r20, 0x20	; 32
    77da:	51 e4       	ldi	r21, 0x41	; 65
    77dc:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    77e0:	dc 01       	movw	r26, r24
    77e2:	cb 01       	movw	r24, r22
    77e4:	bc 01       	movw	r22, r24
    77e6:	cd 01       	movw	r24, r26
    77e8:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    77ec:	dc 01       	movw	r26, r24
    77ee:	cb 01       	movw	r24, r22
    77f0:	9c 8b       	std	Y+20, r25	; 0x14
    77f2:	8b 8b       	std	Y+19, r24	; 0x13
    77f4:	0f c0       	rjmp	.+30     	; 0x7814 <isAlignedCorrect_1+0x280>
    77f6:	80 e7       	ldi	r24, 0x70	; 112
    77f8:	91 e0       	ldi	r25, 0x01	; 1
    77fa:	9a 8b       	std	Y+18, r25	; 0x12
    77fc:	89 8b       	std	Y+17, r24	; 0x11
    77fe:	89 89       	ldd	r24, Y+17	; 0x11
    7800:	9a 89       	ldd	r25, Y+18	; 0x12
    7802:	01 97       	sbiw	r24, 0x01	; 1
    7804:	f1 f7       	brne	.-4      	; 0x7802 <isAlignedCorrect_1+0x26e>
    7806:	9a 8b       	std	Y+18, r25	; 0x12
    7808:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    780a:	8b 89       	ldd	r24, Y+19	; 0x13
    780c:	9c 89       	ldd	r25, Y+20	; 0x14
    780e:	01 97       	sbiw	r24, 0x01	; 1
    7810:	9c 8b       	std	Y+20, r25	; 0x14
    7812:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7814:	8b 89       	ldd	r24, Y+19	; 0x13
    7816:	9c 89       	ldd	r25, Y+20	; 0x14
    7818:	00 97       	sbiw	r24, 0x00	; 0
    781a:	69 f7       	brne	.-38     	; 0x77f6 <isAlignedCorrect_1+0x262>
    781c:	14 c0       	rjmp	.+40     	; 0x7846 <isAlignedCorrect_1+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    781e:	6d 89       	ldd	r22, Y+21	; 0x15
    7820:	7e 89       	ldd	r23, Y+22	; 0x16
    7822:	8f 89       	ldd	r24, Y+23	; 0x17
    7824:	98 8d       	ldd	r25, Y+24	; 0x18
    7826:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    782a:	dc 01       	movw	r26, r24
    782c:	cb 01       	movw	r24, r22
    782e:	9c 8b       	std	Y+20, r25	; 0x14
    7830:	8b 8b       	std	Y+19, r24	; 0x13
    7832:	8b 89       	ldd	r24, Y+19	; 0x13
    7834:	9c 89       	ldd	r25, Y+20	; 0x14
    7836:	98 8b       	std	Y+16, r25	; 0x10
    7838:	8f 87       	std	Y+15, r24	; 0x0f
    783a:	8f 85       	ldd	r24, Y+15	; 0x0f
    783c:	98 89       	ldd	r25, Y+16	; 0x10
    783e:	01 97       	sbiw	r24, 0x01	; 1
    7840:	f1 f7       	brne	.-4      	; 0x783e <isAlignedCorrect_1+0x2aa>
    7842:	98 8b       	std	Y+16, r25	; 0x10
    7844:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(100);

        centre = ADC_Conversion(2);
    7846:	82 e0       	ldi	r24, 0x02	; 2
    7848:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    784c:	88 2f       	mov	r24, r24
    784e:	90 e0       	ldi	r25, 0x00	; 0
    7850:	90 93 2f 03 	sts	0x032F, r25
    7854:	80 93 2e 03 	sts	0x032E, r24
        right();
    7858:	0e 94 99 03 	call	0x732	; 0x732 <right>
    785c:	1b c0       	rjmp	.+54     	; 0x7894 <isAlignedCorrect_1+0x300>
        while(centre < x)
        {
            value = ADC_Conversion(6);
    785e:	86 e0       	ldi	r24, 0x06	; 6
    7860:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    7864:	88 2f       	mov	r24, r24
    7866:	90 e0       	ldi	r25, 0x00	; 0
    7868:	9c a7       	std	Y+44, r25	; 0x2c
    786a:	8b a7       	std	Y+43, r24	; 0x2b
            if(value < reading)
    786c:	2b a5       	ldd	r18, Y+43	; 0x2b
    786e:	3c a5       	ldd	r19, Y+44	; 0x2c
    7870:	8d a5       	ldd	r24, Y+45	; 0x2d
    7872:	9e a5       	ldd	r25, Y+46	; 0x2e
    7874:	28 17       	cp	r18, r24
    7876:	39 07       	cpc	r19, r25
    7878:	24 f4       	brge	.+8      	; 0x7882 <isAlignedCorrect_1+0x2ee>
                reading = value;
    787a:	8b a5       	ldd	r24, Y+43	; 0x2b
    787c:	9c a5       	ldd	r25, Y+44	; 0x2c
    787e:	9e a7       	std	Y+46, r25	; 0x2e
    7880:	8d a7       	std	Y+45, r24	; 0x2d
            centre = ADC_Conversion(2);
    7882:	82 e0       	ldi	r24, 0x02	; 2
    7884:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    7888:	88 2f       	mov	r24, r24
    788a:	90 e0       	ldi	r25, 0x00	; 0
    788c:	90 93 2f 03 	sts	0x032F, r25
    7890:	80 93 2e 03 	sts	0x032E, r24
        stop();
        _delay_ms(100);

        centre = ADC_Conversion(2);
        right();
        while(centre < x)
    7894:	20 91 2e 03 	lds	r18, 0x032E
    7898:	30 91 2f 03 	lds	r19, 0x032F
    789c:	80 91 02 02 	lds	r24, 0x0202
    78a0:	90 91 03 02 	lds	r25, 0x0203
    78a4:	28 17       	cp	r18, r24
    78a6:	39 07       	cpc	r19, r25
    78a8:	d4 f2       	brlt	.-76     	; 0x785e <isAlignedCorrect_1+0x2ca>
            if(value < reading)
                reading = value;
            centre = ADC_Conversion(2);
        }

        stop();
    78aa:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
    78ae:	80 e0       	ldi	r24, 0x00	; 0
    78b0:	90 e0       	ldi	r25, 0x00	; 0
    78b2:	a8 ec       	ldi	r26, 0xC8	; 200
    78b4:	b2 e4       	ldi	r27, 0x42	; 66
    78b6:	8b 87       	std	Y+11, r24	; 0x0b
    78b8:	9c 87       	std	Y+12, r25	; 0x0c
    78ba:	ad 87       	std	Y+13, r26	; 0x0d
    78bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    78be:	6b 85       	ldd	r22, Y+11	; 0x0b
    78c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    78c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    78c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    78c6:	26 e6       	ldi	r18, 0x66	; 102
    78c8:	36 e6       	ldi	r19, 0x66	; 102
    78ca:	46 e6       	ldi	r20, 0x66	; 102
    78cc:	55 e4       	ldi	r21, 0x45	; 69
    78ce:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    78d2:	dc 01       	movw	r26, r24
    78d4:	cb 01       	movw	r24, r22
    78d6:	8f 83       	std	Y+7, r24	; 0x07
    78d8:	98 87       	std	Y+8, r25	; 0x08
    78da:	a9 87       	std	Y+9, r26	; 0x09
    78dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    78de:	6f 81       	ldd	r22, Y+7	; 0x07
    78e0:	78 85       	ldd	r23, Y+8	; 0x08
    78e2:	89 85       	ldd	r24, Y+9	; 0x09
    78e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    78e6:	20 e0       	ldi	r18, 0x00	; 0
    78e8:	30 e0       	ldi	r19, 0x00	; 0
    78ea:	40 e8       	ldi	r20, 0x80	; 128
    78ec:	5f e3       	ldi	r21, 0x3F	; 63
    78ee:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    78f2:	88 23       	and	r24, r24
    78f4:	2c f4       	brge	.+10     	; 0x7900 <isAlignedCorrect_1+0x36c>
		__ticks = 1;
    78f6:	81 e0       	ldi	r24, 0x01	; 1
    78f8:	90 e0       	ldi	r25, 0x00	; 0
    78fa:	9e 83       	std	Y+6, r25	; 0x06
    78fc:	8d 83       	std	Y+5, r24	; 0x05
    78fe:	3f c0       	rjmp	.+126    	; 0x797e <isAlignedCorrect_1+0x3ea>
	else if (__tmp > 65535)
    7900:	6f 81       	ldd	r22, Y+7	; 0x07
    7902:	78 85       	ldd	r23, Y+8	; 0x08
    7904:	89 85       	ldd	r24, Y+9	; 0x09
    7906:	9a 85       	ldd	r25, Y+10	; 0x0a
    7908:	20 e0       	ldi	r18, 0x00	; 0
    790a:	3f ef       	ldi	r19, 0xFF	; 255
    790c:	4f e7       	ldi	r20, 0x7F	; 127
    790e:	57 e4       	ldi	r21, 0x47	; 71
    7910:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    7914:	18 16       	cp	r1, r24
    7916:	4c f5       	brge	.+82     	; 0x796a <isAlignedCorrect_1+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7918:	6b 85       	ldd	r22, Y+11	; 0x0b
    791a:	7c 85       	ldd	r23, Y+12	; 0x0c
    791c:	8d 85       	ldd	r24, Y+13	; 0x0d
    791e:	9e 85       	ldd	r25, Y+14	; 0x0e
    7920:	20 e0       	ldi	r18, 0x00	; 0
    7922:	30 e0       	ldi	r19, 0x00	; 0
    7924:	40 e2       	ldi	r20, 0x20	; 32
    7926:	51 e4       	ldi	r21, 0x41	; 65
    7928:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    792c:	dc 01       	movw	r26, r24
    792e:	cb 01       	movw	r24, r22
    7930:	bc 01       	movw	r22, r24
    7932:	cd 01       	movw	r24, r26
    7934:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    7938:	dc 01       	movw	r26, r24
    793a:	cb 01       	movw	r24, r22
    793c:	9e 83       	std	Y+6, r25	; 0x06
    793e:	8d 83       	std	Y+5, r24	; 0x05
    7940:	0f c0       	rjmp	.+30     	; 0x7960 <isAlignedCorrect_1+0x3cc>
    7942:	80 e7       	ldi	r24, 0x70	; 112
    7944:	91 e0       	ldi	r25, 0x01	; 1
    7946:	9c 83       	std	Y+4, r25	; 0x04
    7948:	8b 83       	std	Y+3, r24	; 0x03
    794a:	8b 81       	ldd	r24, Y+3	; 0x03
    794c:	9c 81       	ldd	r25, Y+4	; 0x04
    794e:	01 97       	sbiw	r24, 0x01	; 1
    7950:	f1 f7       	brne	.-4      	; 0x794e <isAlignedCorrect_1+0x3ba>
    7952:	9c 83       	std	Y+4, r25	; 0x04
    7954:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7956:	8d 81       	ldd	r24, Y+5	; 0x05
    7958:	9e 81       	ldd	r25, Y+6	; 0x06
    795a:	01 97       	sbiw	r24, 0x01	; 1
    795c:	9e 83       	std	Y+6, r25	; 0x06
    795e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7960:	8d 81       	ldd	r24, Y+5	; 0x05
    7962:	9e 81       	ldd	r25, Y+6	; 0x06
    7964:	00 97       	sbiw	r24, 0x00	; 0
    7966:	69 f7       	brne	.-38     	; 0x7942 <isAlignedCorrect_1+0x3ae>
    7968:	14 c0       	rjmp	.+40     	; 0x7992 <isAlignedCorrect_1+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    796a:	6f 81       	ldd	r22, Y+7	; 0x07
    796c:	78 85       	ldd	r23, Y+8	; 0x08
    796e:	89 85       	ldd	r24, Y+9	; 0x09
    7970:	9a 85       	ldd	r25, Y+10	; 0x0a
    7972:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    7976:	dc 01       	movw	r26, r24
    7978:	cb 01       	movw	r24, r22
    797a:	9e 83       	std	Y+6, r25	; 0x06
    797c:	8d 83       	std	Y+5, r24	; 0x05
    797e:	8d 81       	ldd	r24, Y+5	; 0x05
    7980:	9e 81       	ldd	r25, Y+6	; 0x06
    7982:	9a 83       	std	Y+2, r25	; 0x02
    7984:	89 83       	std	Y+1, r24	; 0x01
    7986:	89 81       	ldd	r24, Y+1	; 0x01
    7988:	9a 81       	ldd	r25, Y+2	; 0x02
    798a:	01 97       	sbiw	r24, 0x01	; 1
    798c:	f1 f7       	brne	.-4      	; 0x798a <isAlignedCorrect_1+0x3f6>
    798e:	9a 83       	std	Y+2, r25	; 0x02
    7990:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(100);



    if(state < 4)
    7992:	80 91 24 03 	lds	r24, 0x0324
    7996:	90 91 25 03 	lds	r25, 0x0325
    799a:	84 30       	cpi	r24, 0x04	; 4
    799c:	91 05       	cpc	r25, r1
    799e:	6c f4       	brge	.+26     	; 0x79ba <isAlignedCorrect_1+0x426>
    {
        if(reading < 120)
    79a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    79a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    79a4:	88 37       	cpi	r24, 0x78	; 120
    79a6:	91 05       	cpc	r25, r1
    79a8:	1c f4       	brge	.+6      	; 0x79b0 <isAlignedCorrect_1+0x41c>
            return 0;
    79aa:	18 aa       	std	Y+48, r1	; 0x30
    79ac:	1f a6       	std	Y+47, r1	; 0x2f
    79ae:	11 c0       	rjmp	.+34     	; 0x79d2 <isAlignedCorrect_1+0x43e>

        else return 1;
    79b0:	81 e0       	ldi	r24, 0x01	; 1
    79b2:	90 e0       	ldi	r25, 0x00	; 0
    79b4:	98 ab       	std	Y+48, r25	; 0x30
    79b6:	8f a7       	std	Y+47, r24	; 0x2f
    79b8:	0c c0       	rjmp	.+24     	; 0x79d2 <isAlignedCorrect_1+0x43e>
    }

    else
    {
        if(reading < 120)
    79ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    79bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    79be:	88 37       	cpi	r24, 0x78	; 120
    79c0:	91 05       	cpc	r25, r1
    79c2:	2c f4       	brge	.+10     	; 0x79ce <isAlignedCorrect_1+0x43a>
            return 1;
    79c4:	81 e0       	ldi	r24, 0x01	; 1
    79c6:	90 e0       	ldi	r25, 0x00	; 0
    79c8:	98 ab       	std	Y+48, r25	; 0x30
    79ca:	8f a7       	std	Y+47, r24	; 0x2f
    79cc:	02 c0       	rjmp	.+4      	; 0x79d2 <isAlignedCorrect_1+0x43e>

        else return 0;
    79ce:	18 aa       	std	Y+48, r1	; 0x30
    79d0:	1f a6       	std	Y+47, r1	; 0x2f
    79d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    79d4:	98 a9       	ldd	r25, Y+48	; 0x30
    }
}
    79d6:	e0 96       	adiw	r28, 0x30	; 48
    79d8:	0f b6       	in	r0, 0x3f	; 63
    79da:	f8 94       	cli
    79dc:	de bf       	out	0x3e, r29	; 62
    79de:	0f be       	out	0x3f, r0	; 63
    79e0:	cd bf       	out	0x3d, r28	; 61
    79e2:	cf 91       	pop	r28
    79e4:	df 91       	pop	r29
    79e6:	08 95       	ret

000079e8 <wallFollow>:

int wallFollow()
{
    79e8:	df 93       	push	r29
    79ea:	cf 93       	push	r28
    79ec:	cd b7       	in	r28, 0x3d	; 61
    79ee:	de b7       	in	r29, 0x3e	; 62
    79f0:	a6 97       	sbiw	r28, 0x26	; 38
    79f2:	0f b6       	in	r0, 0x3f	; 63
    79f4:	f8 94       	cli
    79f6:	de bf       	out	0x3e, r29	; 62
    79f8:	0f be       	out	0x3f, r0	; 63
    79fa:	cd bf       	out	0x3d, r28	; 61
        int sharp, sensor, distance, row_1, error;

        velocity(forwardLeftSpeed, forwardRightSpeed);
    79fc:	84 eb       	ldi	r24, 0xB4	; 180
    79fe:	64 eb       	ldi	r22, 0xB4	; 180
    7a00:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>

        forward_mm(270);
    7a04:	8e e0       	ldi	r24, 0x0E	; 14
    7a06:	91 e0       	ldi	r25, 0x01	; 1
    7a08:	0e 94 03 02 	call	0x406	; 0x406 <forward_mm>
        stop();
    7a0c:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>

        sensor = ADC_Conversion(4);
    7a10:	84 e0       	ldi	r24, 0x04	; 4
    7a12:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    7a16:	88 2f       	mov	r24, r24
    7a18:	90 e0       	ldi	r25, 0x00	; 0
    7a1a:	9c a3       	std	Y+36, r25	; 0x24
    7a1c:	8b a3       	std	Y+35, r24	; 0x23

        soft_left();
    7a1e:	0e 94 2d 04 	call	0x85a	; 0x85a <soft_left>
    7a22:	07 c0       	rjmp	.+14     	; 0x7a32 <wallFollow+0x4a>

         while(sensor > 130)
            sensor = ADC_Conversion(4);
    7a24:	84 e0       	ldi	r24, 0x04	; 4
    7a26:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    7a2a:	88 2f       	mov	r24, r24
    7a2c:	90 e0       	ldi	r25, 0x00	; 0
    7a2e:	9c a3       	std	Y+36, r25	; 0x24
    7a30:	8b a3       	std	Y+35, r24	; 0x23

        sensor = ADC_Conversion(4);

        soft_left();

         while(sensor > 130)
    7a32:	8b a1       	ldd	r24, Y+35	; 0x23
    7a34:	9c a1       	ldd	r25, Y+36	; 0x24
    7a36:	83 38       	cpi	r24, 0x83	; 131
    7a38:	91 05       	cpc	r25, r1
    7a3a:	a4 f7       	brge	.-24     	; 0x7a24 <wallFollow+0x3c>
            sensor = ADC_Conversion(4);

        //back_mm(30);
        stop();
    7a3c:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>

        faceRight();
    7a40:	0e 94 89 12 	call	0x2512	; 0x2512 <faceRight>
    7a44:	80 e0       	ldi	r24, 0x00	; 0
    7a46:	90 e0       	ldi	r25, 0x00	; 0
    7a48:	aa e7       	ldi	r26, 0x7A	; 122
    7a4a:	b4 e4       	ldi	r27, 0x44	; 68
    7a4c:	89 8f       	std	Y+25, r24	; 0x19
    7a4e:	9a 8f       	std	Y+26, r25	; 0x1a
    7a50:	ab 8f       	std	Y+27, r26	; 0x1b
    7a52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7a54:	69 8d       	ldd	r22, Y+25	; 0x19
    7a56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7a58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7a5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7a5c:	26 e6       	ldi	r18, 0x66	; 102
    7a5e:	36 e6       	ldi	r19, 0x66	; 102
    7a60:	46 e6       	ldi	r20, 0x66	; 102
    7a62:	55 e4       	ldi	r21, 0x45	; 69
    7a64:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    7a68:	dc 01       	movw	r26, r24
    7a6a:	cb 01       	movw	r24, r22
    7a6c:	8d 8b       	std	Y+21, r24	; 0x15
    7a6e:	9e 8b       	std	Y+22, r25	; 0x16
    7a70:	af 8b       	std	Y+23, r26	; 0x17
    7a72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7a74:	6d 89       	ldd	r22, Y+21	; 0x15
    7a76:	7e 89       	ldd	r23, Y+22	; 0x16
    7a78:	8f 89       	ldd	r24, Y+23	; 0x17
    7a7a:	98 8d       	ldd	r25, Y+24	; 0x18
    7a7c:	20 e0       	ldi	r18, 0x00	; 0
    7a7e:	30 e0       	ldi	r19, 0x00	; 0
    7a80:	40 e8       	ldi	r20, 0x80	; 128
    7a82:	5f e3       	ldi	r21, 0x3F	; 63
    7a84:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    7a88:	88 23       	and	r24, r24
    7a8a:	2c f4       	brge	.+10     	; 0x7a96 <wallFollow+0xae>
		__ticks = 1;
    7a8c:	81 e0       	ldi	r24, 0x01	; 1
    7a8e:	90 e0       	ldi	r25, 0x00	; 0
    7a90:	9c 8b       	std	Y+20, r25	; 0x14
    7a92:	8b 8b       	std	Y+19, r24	; 0x13
    7a94:	3f c0       	rjmp	.+126    	; 0x7b14 <wallFollow+0x12c>
	else if (__tmp > 65535)
    7a96:	6d 89       	ldd	r22, Y+21	; 0x15
    7a98:	7e 89       	ldd	r23, Y+22	; 0x16
    7a9a:	8f 89       	ldd	r24, Y+23	; 0x17
    7a9c:	98 8d       	ldd	r25, Y+24	; 0x18
    7a9e:	20 e0       	ldi	r18, 0x00	; 0
    7aa0:	3f ef       	ldi	r19, 0xFF	; 255
    7aa2:	4f e7       	ldi	r20, 0x7F	; 127
    7aa4:	57 e4       	ldi	r21, 0x47	; 71
    7aa6:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    7aaa:	18 16       	cp	r1, r24
    7aac:	4c f5       	brge	.+82     	; 0x7b00 <wallFollow+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7aae:	69 8d       	ldd	r22, Y+25	; 0x19
    7ab0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7ab2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7ab4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7ab6:	20 e0       	ldi	r18, 0x00	; 0
    7ab8:	30 e0       	ldi	r19, 0x00	; 0
    7aba:	40 e2       	ldi	r20, 0x20	; 32
    7abc:	51 e4       	ldi	r21, 0x41	; 65
    7abe:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    7ac2:	dc 01       	movw	r26, r24
    7ac4:	cb 01       	movw	r24, r22
    7ac6:	bc 01       	movw	r22, r24
    7ac8:	cd 01       	movw	r24, r26
    7aca:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    7ace:	dc 01       	movw	r26, r24
    7ad0:	cb 01       	movw	r24, r22
    7ad2:	9c 8b       	std	Y+20, r25	; 0x14
    7ad4:	8b 8b       	std	Y+19, r24	; 0x13
    7ad6:	0f c0       	rjmp	.+30     	; 0x7af6 <wallFollow+0x10e>
    7ad8:	80 e7       	ldi	r24, 0x70	; 112
    7ada:	91 e0       	ldi	r25, 0x01	; 1
    7adc:	9a 8b       	std	Y+18, r25	; 0x12
    7ade:	89 8b       	std	Y+17, r24	; 0x11
    7ae0:	89 89       	ldd	r24, Y+17	; 0x11
    7ae2:	9a 89       	ldd	r25, Y+18	; 0x12
    7ae4:	01 97       	sbiw	r24, 0x01	; 1
    7ae6:	f1 f7       	brne	.-4      	; 0x7ae4 <wallFollow+0xfc>
    7ae8:	9a 8b       	std	Y+18, r25	; 0x12
    7aea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7aec:	8b 89       	ldd	r24, Y+19	; 0x13
    7aee:	9c 89       	ldd	r25, Y+20	; 0x14
    7af0:	01 97       	sbiw	r24, 0x01	; 1
    7af2:	9c 8b       	std	Y+20, r25	; 0x14
    7af4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7af6:	8b 89       	ldd	r24, Y+19	; 0x13
    7af8:	9c 89       	ldd	r25, Y+20	; 0x14
    7afa:	00 97       	sbiw	r24, 0x00	; 0
    7afc:	69 f7       	brne	.-38     	; 0x7ad8 <wallFollow+0xf0>
    7afe:	14 c0       	rjmp	.+40     	; 0x7b28 <wallFollow+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7b00:	6d 89       	ldd	r22, Y+21	; 0x15
    7b02:	7e 89       	ldd	r23, Y+22	; 0x16
    7b04:	8f 89       	ldd	r24, Y+23	; 0x17
    7b06:	98 8d       	ldd	r25, Y+24	; 0x18
    7b08:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    7b0c:	dc 01       	movw	r26, r24
    7b0e:	cb 01       	movw	r24, r22
    7b10:	9c 8b       	std	Y+20, r25	; 0x14
    7b12:	8b 8b       	std	Y+19, r24	; 0x13
    7b14:	8b 89       	ldd	r24, Y+19	; 0x13
    7b16:	9c 89       	ldd	r25, Y+20	; 0x14
    7b18:	98 8b       	std	Y+16, r25	; 0x10
    7b1a:	8f 87       	std	Y+15, r24	; 0x0f
    7b1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    7b1e:	98 89       	ldd	r25, Y+16	; 0x10
    7b20:	01 97       	sbiw	r24, 0x01	; 1
    7b22:	f1 f7       	brne	.-4      	; 0x7b20 <wallFollow+0x138>
    7b24:	98 8b       	std	Y+16, r25	; 0x10
    7b26:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1000);

        sharp = getSharp();
    7b28:	0e 94 1c 3f 	call	0x7e38	; 0x7e38 <getSharp>
    7b2c:	9e a3       	std	Y+38, r25	; 0x26
    7b2e:	8d a3       	std	Y+37, r24	; 0x25

        if(sharp < 50)
    7b30:	8d a1       	ldd	r24, Y+37	; 0x25
    7b32:	9e a1       	ldd	r25, Y+38	; 0x26
    7b34:	82 33       	cpi	r24, 0x32	; 50
    7b36:	91 05       	cpc	r25, r1
    7b38:	4c f4       	brge	.+18     	; 0x7b4c <wallFollow+0x164>
        {
            row_1 = 2;
    7b3a:	82 e0       	ldi	r24, 0x02	; 2
    7b3c:	90 e0       	ldi	r25, 0x00	; 0
    7b3e:	98 a3       	std	Y+32, r25	; 0x20
    7b40:	8f 8f       	std	Y+31, r24	; 0x1f
            forward_mm(150);
    7b42:	86 e9       	ldi	r24, 0x96	; 150
    7b44:	90 e0       	ldi	r25, 0x00	; 0
    7b46:	0e 94 03 02 	call	0x406	; 0x406 <forward_mm>
    7b4a:	b7 c0       	rjmp	.+366    	; 0x7cba <wallFollow+0x2d2>
        }

        else
        {
                forward();
    7b4c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>

                ShaftCountLeft = 0;
    7b50:	10 92 10 03 	sts	0x0310, r1
    7b54:	10 92 11 03 	sts	0x0311, r1
    7b58:	10 92 12 03 	sts	0x0312, r1
    7b5c:	10 92 13 03 	sts	0x0313, r1
    7b60:	63 c0       	rjmp	.+198    	; 0x7c28 <wallFollow+0x240>


                while(sharp > 60)
                {

                    sensor = ADC_Conversion(4);
    7b62:	84 e0       	ldi	r24, 0x04	; 4
    7b64:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    7b68:	88 2f       	mov	r24, r24
    7b6a:	90 e0       	ldi	r25, 0x00	; 0
    7b6c:	9c a3       	std	Y+36, r25	; 0x24
    7b6e:	8b a3       	std	Y+35, r24	; 0x23


                    if(sensor < 120)
    7b70:	8b a1       	ldd	r24, Y+35	; 0x23
    7b72:	9c a1       	ldd	r25, Y+36	; 0x24
    7b74:	88 37       	cpi	r24, 0x78	; 120
    7b76:	91 05       	cpc	r25, r1
    7b78:	2c f5       	brge	.+74     	; 0x7bc4 <wallFollow+0x1dc>
                    {
                        rightSpeed = forwardLeftSpeed - k;
    7b7a:	20 91 04 02 	lds	r18, 0x0204
    7b7e:	30 91 05 02 	lds	r19, 0x0205
    7b82:	84 eb       	ldi	r24, 0xB4	; 180
    7b84:	90 e0       	ldi	r25, 0x00	; 0
    7b86:	82 1b       	sub	r24, r18
    7b88:	93 0b       	sbc	r25, r19
    7b8a:	90 93 31 03 	sts	0x0331, r25
    7b8e:	80 93 30 03 	sts	0x0330, r24
                        leftSpeed = forwardRightSpeed + k;
    7b92:	80 91 04 02 	lds	r24, 0x0204
    7b96:	90 91 05 02 	lds	r25, 0x0205
    7b9a:	8c 54       	subi	r24, 0x4C	; 76
    7b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    7b9e:	90 93 1f 03 	sts	0x031F, r25
    7ba2:	80 93 1e 03 	sts	0x031E, r24

                        velocity(leftSpeed, rightSpeed);
    7ba6:	80 91 1e 03 	lds	r24, 0x031E
    7baa:	90 91 1f 03 	lds	r25, 0x031F
    7bae:	28 2f       	mov	r18, r24
    7bb0:	80 91 30 03 	lds	r24, 0x0330
    7bb4:	90 91 31 03 	lds	r25, 0x0331
    7bb8:	98 2f       	mov	r25, r24
    7bba:	82 2f       	mov	r24, r18
    7bbc:	69 2f       	mov	r22, r25
    7bbe:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    7bc2:	2e c0       	rjmp	.+92     	; 0x7c20 <wallFollow+0x238>
                    }

                    else if(sensor > 145)
    7bc4:	8b a1       	ldd	r24, Y+35	; 0x23
    7bc6:	9c a1       	ldd	r25, Y+36	; 0x24
    7bc8:	82 39       	cpi	r24, 0x92	; 146
    7bca:	91 05       	cpc	r25, r1
    7bcc:	2c f1       	brlt	.+74     	; 0x7c18 <wallFollow+0x230>
                    {
                        rightSpeed = forwardLeftSpeed + k;
    7bce:	80 91 04 02 	lds	r24, 0x0204
    7bd2:	90 91 05 02 	lds	r25, 0x0205
    7bd6:	8c 54       	subi	r24, 0x4C	; 76
    7bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    7bda:	90 93 31 03 	sts	0x0331, r25
    7bde:	80 93 30 03 	sts	0x0330, r24
                        leftSpeed = forwardRightSpeed - k;
    7be2:	20 91 04 02 	lds	r18, 0x0204
    7be6:	30 91 05 02 	lds	r19, 0x0205
    7bea:	84 eb       	ldi	r24, 0xB4	; 180
    7bec:	90 e0       	ldi	r25, 0x00	; 0
    7bee:	82 1b       	sub	r24, r18
    7bf0:	93 0b       	sbc	r25, r19
    7bf2:	90 93 1f 03 	sts	0x031F, r25
    7bf6:	80 93 1e 03 	sts	0x031E, r24

                        velocity(leftSpeed, rightSpeed);
    7bfa:	80 91 1e 03 	lds	r24, 0x031E
    7bfe:	90 91 1f 03 	lds	r25, 0x031F
    7c02:	28 2f       	mov	r18, r24
    7c04:	80 91 30 03 	lds	r24, 0x0330
    7c08:	90 91 31 03 	lds	r25, 0x0331
    7c0c:	98 2f       	mov	r25, r24
    7c0e:	82 2f       	mov	r24, r18
    7c10:	69 2f       	mov	r22, r25
    7c12:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
    7c16:	04 c0       	rjmp	.+8      	; 0x7c20 <wallFollow+0x238>
                    }

                    else
                        velocity(forwardLeftSpeed, forwardRightSpeed);
    7c18:	84 eb       	ldi	r24, 0xB4	; 180
    7c1a:	64 eb       	ldi	r22, 0xB4	; 180
    7c1c:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>

                    sharp = getSharp();
    7c20:	0e 94 1c 3f 	call	0x7e38	; 0x7e38 <getSharp>
    7c24:	9e a3       	std	Y+38, r25	; 0x26
    7c26:	8d a3       	std	Y+37, r24	; 0x25
                ShaftCountLeft = 0;




                while(sharp > 60)
    7c28:	8d a1       	ldd	r24, Y+37	; 0x25
    7c2a:	9e a1       	ldd	r25, Y+38	; 0x26
    7c2c:	8d 33       	cpi	r24, 0x3D	; 61
    7c2e:	91 05       	cpc	r25, r1
    7c30:	0c f0       	brlt	.+2      	; 0x7c34 <wallFollow+0x24c>
    7c32:	97 cf       	rjmp	.-210    	; 0x7b62 <wallFollow+0x17a>

                }



            distance = ShaftCountLeft * 5.338 + 300 + 150;
    7c34:	80 91 10 03 	lds	r24, 0x0310
    7c38:	90 91 11 03 	lds	r25, 0x0311
    7c3c:	a0 91 12 03 	lds	r26, 0x0312
    7c40:	b0 91 13 03 	lds	r27, 0x0313
    7c44:	bc 01       	movw	r22, r24
    7c46:	cd 01       	movw	r24, r26
    7c48:	0e 94 9f 45 	call	0x8b3e	; 0x8b3e <__floatunsisf>
    7c4c:	dc 01       	movw	r26, r24
    7c4e:	cb 01       	movw	r24, r22
    7c50:	bc 01       	movw	r22, r24
    7c52:	cd 01       	movw	r24, r26
    7c54:	25 ee       	ldi	r18, 0xE5	; 229
    7c56:	30 ed       	ldi	r19, 0xD0	; 208
    7c58:	4a ea       	ldi	r20, 0xAA	; 170
    7c5a:	50 e4       	ldi	r21, 0x40	; 64
    7c5c:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    7c60:	dc 01       	movw	r26, r24
    7c62:	cb 01       	movw	r24, r22
    7c64:	bc 01       	movw	r22, r24
    7c66:	cd 01       	movw	r24, r26
    7c68:	20 e0       	ldi	r18, 0x00	; 0
    7c6a:	30 e0       	ldi	r19, 0x00	; 0
    7c6c:	46 e9       	ldi	r20, 0x96	; 150
    7c6e:	53 e4       	ldi	r21, 0x43	; 67
    7c70:	0e 94 8a 42 	call	0x8514	; 0x8514 <__addsf3>
    7c74:	dc 01       	movw	r26, r24
    7c76:	cb 01       	movw	r24, r22
    7c78:	bc 01       	movw	r22, r24
    7c7a:	cd 01       	movw	r24, r26
    7c7c:	20 e0       	ldi	r18, 0x00	; 0
    7c7e:	30 e0       	ldi	r19, 0x00	; 0
    7c80:	46 e1       	ldi	r20, 0x16	; 22
    7c82:	53 e4       	ldi	r21, 0x43	; 67
    7c84:	0e 94 8a 42 	call	0x8514	; 0x8514 <__addsf3>
    7c88:	dc 01       	movw	r26, r24
    7c8a:	cb 01       	movw	r24, r22
    7c8c:	bc 01       	movw	r22, r24
    7c8e:	cd 01       	movw	r24, r26
    7c90:	0e 94 4b 45 	call	0x8a96	; 0x8a96 <__fixsfsi>
    7c94:	dc 01       	movw	r26, r24
    7c96:	cb 01       	movw	r24, r22
    7c98:	9a a3       	std	Y+34, r25	; 0x22
    7c9a:	89 a3       	std	Y+33, r24	; 0x21

            forward_mm(290);
    7c9c:	82 e2       	ldi	r24, 0x22	; 34
    7c9e:	91 e0       	ldi	r25, 0x01	; 1
    7ca0:	0e 94 03 02 	call	0x406	; 0x406 <forward_mm>


            row_1 = (distance)/200 + 2;
    7ca4:	89 a1       	ldd	r24, Y+33	; 0x21
    7ca6:	9a a1       	ldd	r25, Y+34	; 0x22
    7ca8:	28 ec       	ldi	r18, 0xC8	; 200
    7caa:	30 e0       	ldi	r19, 0x00	; 0
    7cac:	b9 01       	movw	r22, r18
    7cae:	0e 94 21 48 	call	0x9042	; 0x9042 <__divmodhi4>
    7cb2:	cb 01       	movw	r24, r22
    7cb4:	02 96       	adiw	r24, 0x02	; 2
    7cb6:	98 a3       	std	Y+32, r25	; 0x20
    7cb8:	8f 8f       	std	Y+31, r24	; 0x1f
        }


        //lcd_print(1, 3, row, 1);

        stop();
    7cba:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>
        velocity(forwardLeftSpeed, forwardRightSpeed);
    7cbe:	84 eb       	ldi	r24, 0xB4	; 180
    7cc0:	64 eb       	ldi	r22, 0xB4	; 180
    7cc2:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>

        faceFront();
    7cc6:	0e 94 75 12 	call	0x24ea	; 0x24ea <faceFront>
    7cca:	80 e0       	ldi	r24, 0x00	; 0
    7ccc:	90 e0       	ldi	r25, 0x00	; 0
    7cce:	aa ef       	ldi	r26, 0xFA	; 250
    7cd0:	b3 e4       	ldi	r27, 0x43	; 67
    7cd2:	8b 87       	std	Y+11, r24	; 0x0b
    7cd4:	9c 87       	std	Y+12, r25	; 0x0c
    7cd6:	ad 87       	std	Y+13, r26	; 0x0d
    7cd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7cda:	6b 85       	ldd	r22, Y+11	; 0x0b
    7cdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    7cde:	8d 85       	ldd	r24, Y+13	; 0x0d
    7ce0:	9e 85       	ldd	r25, Y+14	; 0x0e
    7ce2:	26 e6       	ldi	r18, 0x66	; 102
    7ce4:	36 e6       	ldi	r19, 0x66	; 102
    7ce6:	46 e6       	ldi	r20, 0x66	; 102
    7ce8:	55 e4       	ldi	r21, 0x45	; 69
    7cea:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    7cee:	dc 01       	movw	r26, r24
    7cf0:	cb 01       	movw	r24, r22
    7cf2:	8f 83       	std	Y+7, r24	; 0x07
    7cf4:	98 87       	std	Y+8, r25	; 0x08
    7cf6:	a9 87       	std	Y+9, r26	; 0x09
    7cf8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    7cfc:	78 85       	ldd	r23, Y+8	; 0x08
    7cfe:	89 85       	ldd	r24, Y+9	; 0x09
    7d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    7d02:	20 e0       	ldi	r18, 0x00	; 0
    7d04:	30 e0       	ldi	r19, 0x00	; 0
    7d06:	40 e8       	ldi	r20, 0x80	; 128
    7d08:	5f e3       	ldi	r21, 0x3F	; 63
    7d0a:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    7d0e:	88 23       	and	r24, r24
    7d10:	2c f4       	brge	.+10     	; 0x7d1c <wallFollow+0x334>
		__ticks = 1;
    7d12:	81 e0       	ldi	r24, 0x01	; 1
    7d14:	90 e0       	ldi	r25, 0x00	; 0
    7d16:	9e 83       	std	Y+6, r25	; 0x06
    7d18:	8d 83       	std	Y+5, r24	; 0x05
    7d1a:	3f c0       	rjmp	.+126    	; 0x7d9a <wallFollow+0x3b2>
	else if (__tmp > 65535)
    7d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    7d1e:	78 85       	ldd	r23, Y+8	; 0x08
    7d20:	89 85       	ldd	r24, Y+9	; 0x09
    7d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    7d24:	20 e0       	ldi	r18, 0x00	; 0
    7d26:	3f ef       	ldi	r19, 0xFF	; 255
    7d28:	4f e7       	ldi	r20, 0x7F	; 127
    7d2a:	57 e4       	ldi	r21, 0x47	; 71
    7d2c:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    7d30:	18 16       	cp	r1, r24
    7d32:	4c f5       	brge	.+82     	; 0x7d86 <wallFollow+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7d34:	6b 85       	ldd	r22, Y+11	; 0x0b
    7d36:	7c 85       	ldd	r23, Y+12	; 0x0c
    7d38:	8d 85       	ldd	r24, Y+13	; 0x0d
    7d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    7d3c:	20 e0       	ldi	r18, 0x00	; 0
    7d3e:	30 e0       	ldi	r19, 0x00	; 0
    7d40:	40 e2       	ldi	r20, 0x20	; 32
    7d42:	51 e4       	ldi	r21, 0x41	; 65
    7d44:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    7d48:	dc 01       	movw	r26, r24
    7d4a:	cb 01       	movw	r24, r22
    7d4c:	bc 01       	movw	r22, r24
    7d4e:	cd 01       	movw	r24, r26
    7d50:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    7d54:	dc 01       	movw	r26, r24
    7d56:	cb 01       	movw	r24, r22
    7d58:	9e 83       	std	Y+6, r25	; 0x06
    7d5a:	8d 83       	std	Y+5, r24	; 0x05
    7d5c:	0f c0       	rjmp	.+30     	; 0x7d7c <wallFollow+0x394>
    7d5e:	80 e7       	ldi	r24, 0x70	; 112
    7d60:	91 e0       	ldi	r25, 0x01	; 1
    7d62:	9c 83       	std	Y+4, r25	; 0x04
    7d64:	8b 83       	std	Y+3, r24	; 0x03
    7d66:	8b 81       	ldd	r24, Y+3	; 0x03
    7d68:	9c 81       	ldd	r25, Y+4	; 0x04
    7d6a:	01 97       	sbiw	r24, 0x01	; 1
    7d6c:	f1 f7       	brne	.-4      	; 0x7d6a <wallFollow+0x382>
    7d6e:	9c 83       	std	Y+4, r25	; 0x04
    7d70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7d72:	8d 81       	ldd	r24, Y+5	; 0x05
    7d74:	9e 81       	ldd	r25, Y+6	; 0x06
    7d76:	01 97       	sbiw	r24, 0x01	; 1
    7d78:	9e 83       	std	Y+6, r25	; 0x06
    7d7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    7d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    7d80:	00 97       	sbiw	r24, 0x00	; 0
    7d82:	69 f7       	brne	.-38     	; 0x7d5e <wallFollow+0x376>
    7d84:	14 c0       	rjmp	.+40     	; 0x7dae <wallFollow+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7d86:	6f 81       	ldd	r22, Y+7	; 0x07
    7d88:	78 85       	ldd	r23, Y+8	; 0x08
    7d8a:	89 85       	ldd	r24, Y+9	; 0x09
    7d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    7d8e:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    7d92:	dc 01       	movw	r26, r24
    7d94:	cb 01       	movw	r24, r22
    7d96:	9e 83       	std	Y+6, r25	; 0x06
    7d98:	8d 83       	std	Y+5, r24	; 0x05
    7d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    7d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    7d9e:	9a 83       	std	Y+2, r25	; 0x02
    7da0:	89 83       	std	Y+1, r24	; 0x01
    7da2:	89 81       	ldd	r24, Y+1	; 0x01
    7da4:	9a 81       	ldd	r25, Y+2	; 0x02
    7da6:	01 97       	sbiw	r24, 0x01	; 1
    7da8:	f1 f7       	brne	.-4      	; 0x7da6 <wallFollow+0x3be>
    7daa:	9a 83       	std	Y+2, r25	; 0x02
    7dac:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(500);

        right_degrees(90);
    7dae:	8a e5       	ldi	r24, 0x5A	; 90
    7db0:	90 e0       	ldi	r25, 0x00	; 0
    7db2:	0e 94 a3 03 	call	0x746	; 0x746 <right_degrees>

        forward();
    7db6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>

        error = getError();
    7dba:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <getError>
    7dbe:	9e 8f       	std	Y+30, r25	; 0x1e
    7dc0:	8d 8f       	std	Y+29, r24	; 0x1d
    7dc2:	04 c0       	rjmp	.+8      	; 0x7dcc <wallFollow+0x3e4>


        while(error == -100)
            error = getError();
    7dc4:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <getError>
    7dc8:	9e 8f       	std	Y+30, r25	; 0x1e
    7dca:	8d 8f       	std	Y+29, r24	; 0x1d
        forward();

        error = getError();


        while(error == -100)
    7dcc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7dce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7dd0:	2f ef       	ldi	r18, 0xFF	; 255
    7dd2:	8c 39       	cpi	r24, 0x9C	; 156
    7dd4:	92 07       	cpc	r25, r18
    7dd6:	b1 f3       	breq	.-20     	; 0x7dc4 <wallFollow+0x3dc>
            error = getError();

        forward_mm(10);
    7dd8:	8a e0       	ldi	r24, 0x0A	; 10
    7dda:	90 e0       	ldi	r25, 0x00	; 0
    7ddc:	0e 94 03 02 	call	0x406	; 0x406 <forward_mm>

        forward();
    7de0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <forward>
    7de4:	17 c0       	rjmp	.+46     	; 0x7e14 <wallFollow+0x42c>

        while(error != 100)
        {
            if(error == 0)
    7de6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7de8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7dea:	00 97       	sbiw	r24, 0x00	; 0
    7dec:	69 f4       	brne	.+26     	; 0x7e08 <wallFollow+0x420>
            {
                leftSpeed = forwardLeftSpeed;
    7dee:	84 eb       	ldi	r24, 0xB4	; 180
    7df0:	90 e0       	ldi	r25, 0x00	; 0
    7df2:	90 93 1f 03 	sts	0x031F, r25
    7df6:	80 93 1e 03 	sts	0x031E, r24
                rightSpeed = forwardRightSpeed;
    7dfa:	84 eb       	ldi	r24, 0xB4	; 180
    7dfc:	90 e0       	ldi	r25, 0x00	; 0
    7dfe:	90 93 31 03 	sts	0x0331, r25
    7e02:	80 93 30 03 	sts	0x0330, r24
    7e06:	02 c0       	rjmp	.+4      	; 0x7e0c <wallFollow+0x424>
                leftSpeed = forwardLeftSpeed - 20;
                rightSpeed = forwardRightSpeed + 20;
            }
*/
            else
                findLine();
    7e08:	0e 94 57 32 	call	0x64ae	; 0x64ae <findLine>

            error = getError();
    7e0c:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <getError>
    7e10:	9e 8f       	std	Y+30, r25	; 0x1e
    7e12:	8d 8f       	std	Y+29, r24	; 0x1d

        forward_mm(10);

        forward();

        while(error != 100)
    7e14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7e16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7e18:	84 36       	cpi	r24, 0x64	; 100
    7e1a:	91 05       	cpc	r25, r1
    7e1c:	21 f7       	brne	.-56     	; 0x7de6 <wallFollow+0x3fe>
                findLine();

            error = getError();
        }

        stop();
    7e1e:	0e 94 95 06 	call	0xd2a	; 0xd2a <stop>

        return row_1;
    7e22:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7e24:	98 a1       	ldd	r25, Y+32	; 0x20

}
    7e26:	a6 96       	adiw	r28, 0x26	; 38
    7e28:	0f b6       	in	r0, 0x3f	; 63
    7e2a:	f8 94       	cli
    7e2c:	de bf       	out	0x3e, r29	; 62
    7e2e:	0f be       	out	0x3f, r0	; 63
    7e30:	cd bf       	out	0x3d, r28	; 61
    7e32:	cf 91       	pop	r28
    7e34:	df 91       	pop	r29
    7e36:	08 95       	ret

00007e38 <getSharp>:

int getSharp()
{
    7e38:	df 93       	push	r29
    7e3a:	cf 93       	push	r28
    7e3c:	cd b7       	in	r28, 0x3d	; 61
    7e3e:	de b7       	in	r29, 0x3e	; 62
    return ADC_Conversion(9);
    7e40:	89 e0       	ldi	r24, 0x09	; 9
    7e42:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ADC_Conversion>
    7e46:	88 2f       	mov	r24, r24
    7e48:	90 e0       	ldi	r25, 0x00	; 0
}
    7e4a:	cf 91       	pop	r28
    7e4c:	df 91       	pop	r29
    7e4e:	08 95       	ret

00007e50 <buzzer_1>:

void buzzer_1()
{
    7e50:	df 93       	push	r29
    7e52:	cf 93       	push	r28
    7e54:	cd b7       	in	r28, 0x3d	; 61
    7e56:	de b7       	in	r29, 0x3e	; 62
    7e58:	2e 97       	sbiw	r28, 0x0e	; 14
    7e5a:	0f b6       	in	r0, 0x3f	; 63
    7e5c:	f8 94       	cli
    7e5e:	de bf       	out	0x3e, r29	; 62
    7e60:	0f be       	out	0x3f, r0	; 63
    7e62:	cd bf       	out	0x3d, r28	; 61
    PORTL |= (1 << 6);
    7e64:	ab e0       	ldi	r26, 0x0B	; 11
    7e66:	b1 e0       	ldi	r27, 0x01	; 1
    7e68:	eb e0       	ldi	r30, 0x0B	; 11
    7e6a:	f1 e0       	ldi	r31, 0x01	; 1
    7e6c:	80 81       	ld	r24, Z
    7e6e:	80 64       	ori	r24, 0x40	; 64
    7e70:	8c 93       	st	X, r24
    7e72:	80 e0       	ldi	r24, 0x00	; 0
    7e74:	90 e0       	ldi	r25, 0x00	; 0
    7e76:	aa ef       	ldi	r26, 0xFA	; 250
    7e78:	b3 e4       	ldi	r27, 0x43	; 67
    7e7a:	8b 87       	std	Y+11, r24	; 0x0b
    7e7c:	9c 87       	std	Y+12, r25	; 0x0c
    7e7e:	ad 87       	std	Y+13, r26	; 0x0d
    7e80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7e82:	6b 85       	ldd	r22, Y+11	; 0x0b
    7e84:	7c 85       	ldd	r23, Y+12	; 0x0c
    7e86:	8d 85       	ldd	r24, Y+13	; 0x0d
    7e88:	9e 85       	ldd	r25, Y+14	; 0x0e
    7e8a:	26 e6       	ldi	r18, 0x66	; 102
    7e8c:	36 e6       	ldi	r19, 0x66	; 102
    7e8e:	46 e6       	ldi	r20, 0x66	; 102
    7e90:	55 e4       	ldi	r21, 0x45	; 69
    7e92:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    7e96:	dc 01       	movw	r26, r24
    7e98:	cb 01       	movw	r24, r22
    7e9a:	8f 83       	std	Y+7, r24	; 0x07
    7e9c:	98 87       	std	Y+8, r25	; 0x08
    7e9e:	a9 87       	std	Y+9, r26	; 0x09
    7ea0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    7ea4:	78 85       	ldd	r23, Y+8	; 0x08
    7ea6:	89 85       	ldd	r24, Y+9	; 0x09
    7ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    7eaa:	20 e0       	ldi	r18, 0x00	; 0
    7eac:	30 e0       	ldi	r19, 0x00	; 0
    7eae:	40 e8       	ldi	r20, 0x80	; 128
    7eb0:	5f e3       	ldi	r21, 0x3F	; 63
    7eb2:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    7eb6:	88 23       	and	r24, r24
    7eb8:	2c f4       	brge	.+10     	; 0x7ec4 <buzzer_1+0x74>
		__ticks = 1;
    7eba:	81 e0       	ldi	r24, 0x01	; 1
    7ebc:	90 e0       	ldi	r25, 0x00	; 0
    7ebe:	9e 83       	std	Y+6, r25	; 0x06
    7ec0:	8d 83       	std	Y+5, r24	; 0x05
    7ec2:	3f c0       	rjmp	.+126    	; 0x7f42 <buzzer_1+0xf2>
	else if (__tmp > 65535)
    7ec4:	6f 81       	ldd	r22, Y+7	; 0x07
    7ec6:	78 85       	ldd	r23, Y+8	; 0x08
    7ec8:	89 85       	ldd	r24, Y+9	; 0x09
    7eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    7ecc:	20 e0       	ldi	r18, 0x00	; 0
    7ece:	3f ef       	ldi	r19, 0xFF	; 255
    7ed0:	4f e7       	ldi	r20, 0x7F	; 127
    7ed2:	57 e4       	ldi	r21, 0x47	; 71
    7ed4:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    7ed8:	18 16       	cp	r1, r24
    7eda:	4c f5       	brge	.+82     	; 0x7f2e <buzzer_1+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7edc:	6b 85       	ldd	r22, Y+11	; 0x0b
    7ede:	7c 85       	ldd	r23, Y+12	; 0x0c
    7ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    7ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    7ee4:	20 e0       	ldi	r18, 0x00	; 0
    7ee6:	30 e0       	ldi	r19, 0x00	; 0
    7ee8:	40 e2       	ldi	r20, 0x20	; 32
    7eea:	51 e4       	ldi	r21, 0x41	; 65
    7eec:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    7ef0:	dc 01       	movw	r26, r24
    7ef2:	cb 01       	movw	r24, r22
    7ef4:	bc 01       	movw	r22, r24
    7ef6:	cd 01       	movw	r24, r26
    7ef8:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    7efc:	dc 01       	movw	r26, r24
    7efe:	cb 01       	movw	r24, r22
    7f00:	9e 83       	std	Y+6, r25	; 0x06
    7f02:	8d 83       	std	Y+5, r24	; 0x05
    7f04:	0f c0       	rjmp	.+30     	; 0x7f24 <buzzer_1+0xd4>
    7f06:	80 e7       	ldi	r24, 0x70	; 112
    7f08:	91 e0       	ldi	r25, 0x01	; 1
    7f0a:	9c 83       	std	Y+4, r25	; 0x04
    7f0c:	8b 83       	std	Y+3, r24	; 0x03
    7f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    7f10:	9c 81       	ldd	r25, Y+4	; 0x04
    7f12:	01 97       	sbiw	r24, 0x01	; 1
    7f14:	f1 f7       	brne	.-4      	; 0x7f12 <buzzer_1+0xc2>
    7f16:	9c 83       	std	Y+4, r25	; 0x04
    7f18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    7f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    7f1e:	01 97       	sbiw	r24, 0x01	; 1
    7f20:	9e 83       	std	Y+6, r25	; 0x06
    7f22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7f24:	8d 81       	ldd	r24, Y+5	; 0x05
    7f26:	9e 81       	ldd	r25, Y+6	; 0x06
    7f28:	00 97       	sbiw	r24, 0x00	; 0
    7f2a:	69 f7       	brne	.-38     	; 0x7f06 <buzzer_1+0xb6>
    7f2c:	14 c0       	rjmp	.+40     	; 0x7f56 <buzzer_1+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    7f30:	78 85       	ldd	r23, Y+8	; 0x08
    7f32:	89 85       	ldd	r24, Y+9	; 0x09
    7f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    7f36:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    7f3a:	dc 01       	movw	r26, r24
    7f3c:	cb 01       	movw	r24, r22
    7f3e:	9e 83       	std	Y+6, r25	; 0x06
    7f40:	8d 83       	std	Y+5, r24	; 0x05
    7f42:	8d 81       	ldd	r24, Y+5	; 0x05
    7f44:	9e 81       	ldd	r25, Y+6	; 0x06
    7f46:	9a 83       	std	Y+2, r25	; 0x02
    7f48:	89 83       	std	Y+1, r24	; 0x01
    7f4a:	89 81       	ldd	r24, Y+1	; 0x01
    7f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    7f4e:	01 97       	sbiw	r24, 0x01	; 1
    7f50:	f1 f7       	brne	.-4      	; 0x7f4e <buzzer_1+0xfe>
    7f52:	9a 83       	std	Y+2, r25	; 0x02
    7f54:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(500);
    PORTL &= ~(1 << 6);
    7f56:	ab e0       	ldi	r26, 0x0B	; 11
    7f58:	b1 e0       	ldi	r27, 0x01	; 1
    7f5a:	eb e0       	ldi	r30, 0x0B	; 11
    7f5c:	f1 e0       	ldi	r31, 0x01	; 1
    7f5e:	80 81       	ld	r24, Z
    7f60:	8f 7b       	andi	r24, 0xBF	; 191
    7f62:	8c 93       	st	X, r24
}
    7f64:	2e 96       	adiw	r28, 0x0e	; 14
    7f66:	0f b6       	in	r0, 0x3f	; 63
    7f68:	f8 94       	cli
    7f6a:	de bf       	out	0x3e, r29	; 62
    7f6c:	0f be       	out	0x3f, r0	; 63
    7f6e:	cd bf       	out	0x3d, r28	; 61
    7f70:	cf 91       	pop	r28
    7f72:	df 91       	pop	r29
    7f74:	08 95       	ret

00007f76 <buzzer_2>:

void buzzer_2()
{
    7f76:	df 93       	push	r29
    7f78:	cf 93       	push	r28
    7f7a:	cd b7       	in	r28, 0x3d	; 61
    7f7c:	de b7       	in	r29, 0x3e	; 62
    7f7e:	2e 97       	sbiw	r28, 0x0e	; 14
    7f80:	0f b6       	in	r0, 0x3f	; 63
    7f82:	f8 94       	cli
    7f84:	de bf       	out	0x3e, r29	; 62
    7f86:	0f be       	out	0x3f, r0	; 63
    7f88:	cd bf       	out	0x3d, r28	; 61
    PORTL |= (1 << 6);
    7f8a:	ab e0       	ldi	r26, 0x0B	; 11
    7f8c:	b1 e0       	ldi	r27, 0x01	; 1
    7f8e:	eb e0       	ldi	r30, 0x0B	; 11
    7f90:	f1 e0       	ldi	r31, 0x01	; 1
    7f92:	80 81       	ld	r24, Z
    7f94:	80 64       	ori	r24, 0x40	; 64
    7f96:	8c 93       	st	X, r24
    7f98:	80 e0       	ldi	r24, 0x00	; 0
    7f9a:	90 e0       	ldi	r25, 0x00	; 0
    7f9c:	aa e7       	ldi	r26, 0x7A	; 122
    7f9e:	b4 e4       	ldi	r27, 0x44	; 68
    7fa0:	8b 87       	std	Y+11, r24	; 0x0b
    7fa2:	9c 87       	std	Y+12, r25	; 0x0c
    7fa4:	ad 87       	std	Y+13, r26	; 0x0d
    7fa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7fa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    7faa:	7c 85       	ldd	r23, Y+12	; 0x0c
    7fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    7fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    7fb0:	26 e6       	ldi	r18, 0x66	; 102
    7fb2:	36 e6       	ldi	r19, 0x66	; 102
    7fb4:	46 e6       	ldi	r20, 0x66	; 102
    7fb6:	55 e4       	ldi	r21, 0x45	; 69
    7fb8:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    7fbc:	dc 01       	movw	r26, r24
    7fbe:	cb 01       	movw	r24, r22
    7fc0:	8f 83       	std	Y+7, r24	; 0x07
    7fc2:	98 87       	std	Y+8, r25	; 0x08
    7fc4:	a9 87       	std	Y+9, r26	; 0x09
    7fc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7fc8:	6f 81       	ldd	r22, Y+7	; 0x07
    7fca:	78 85       	ldd	r23, Y+8	; 0x08
    7fcc:	89 85       	ldd	r24, Y+9	; 0x09
    7fce:	9a 85       	ldd	r25, Y+10	; 0x0a
    7fd0:	20 e0       	ldi	r18, 0x00	; 0
    7fd2:	30 e0       	ldi	r19, 0x00	; 0
    7fd4:	40 e8       	ldi	r20, 0x80	; 128
    7fd6:	5f e3       	ldi	r21, 0x3F	; 63
    7fd8:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    7fdc:	88 23       	and	r24, r24
    7fde:	2c f4       	brge	.+10     	; 0x7fea <buzzer_2+0x74>
		__ticks = 1;
    7fe0:	81 e0       	ldi	r24, 0x01	; 1
    7fe2:	90 e0       	ldi	r25, 0x00	; 0
    7fe4:	9e 83       	std	Y+6, r25	; 0x06
    7fe6:	8d 83       	std	Y+5, r24	; 0x05
    7fe8:	3f c0       	rjmp	.+126    	; 0x8068 <buzzer_2+0xf2>
	else if (__tmp > 65535)
    7fea:	6f 81       	ldd	r22, Y+7	; 0x07
    7fec:	78 85       	ldd	r23, Y+8	; 0x08
    7fee:	89 85       	ldd	r24, Y+9	; 0x09
    7ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    7ff2:	20 e0       	ldi	r18, 0x00	; 0
    7ff4:	3f ef       	ldi	r19, 0xFF	; 255
    7ff6:	4f e7       	ldi	r20, 0x7F	; 127
    7ff8:	57 e4       	ldi	r21, 0x47	; 71
    7ffa:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    7ffe:	18 16       	cp	r1, r24
    8000:	4c f5       	brge	.+82     	; 0x8054 <buzzer_2+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8002:	6b 85       	ldd	r22, Y+11	; 0x0b
    8004:	7c 85       	ldd	r23, Y+12	; 0x0c
    8006:	8d 85       	ldd	r24, Y+13	; 0x0d
    8008:	9e 85       	ldd	r25, Y+14	; 0x0e
    800a:	20 e0       	ldi	r18, 0x00	; 0
    800c:	30 e0       	ldi	r19, 0x00	; 0
    800e:	40 e2       	ldi	r20, 0x20	; 32
    8010:	51 e4       	ldi	r21, 0x41	; 65
    8012:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    8016:	dc 01       	movw	r26, r24
    8018:	cb 01       	movw	r24, r22
    801a:	bc 01       	movw	r22, r24
    801c:	cd 01       	movw	r24, r26
    801e:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    8022:	dc 01       	movw	r26, r24
    8024:	cb 01       	movw	r24, r22
    8026:	9e 83       	std	Y+6, r25	; 0x06
    8028:	8d 83       	std	Y+5, r24	; 0x05
    802a:	0f c0       	rjmp	.+30     	; 0x804a <buzzer_2+0xd4>
    802c:	80 e7       	ldi	r24, 0x70	; 112
    802e:	91 e0       	ldi	r25, 0x01	; 1
    8030:	9c 83       	std	Y+4, r25	; 0x04
    8032:	8b 83       	std	Y+3, r24	; 0x03
    8034:	8b 81       	ldd	r24, Y+3	; 0x03
    8036:	9c 81       	ldd	r25, Y+4	; 0x04
    8038:	01 97       	sbiw	r24, 0x01	; 1
    803a:	f1 f7       	brne	.-4      	; 0x8038 <buzzer_2+0xc2>
    803c:	9c 83       	std	Y+4, r25	; 0x04
    803e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8040:	8d 81       	ldd	r24, Y+5	; 0x05
    8042:	9e 81       	ldd	r25, Y+6	; 0x06
    8044:	01 97       	sbiw	r24, 0x01	; 1
    8046:	9e 83       	std	Y+6, r25	; 0x06
    8048:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    804a:	8d 81       	ldd	r24, Y+5	; 0x05
    804c:	9e 81       	ldd	r25, Y+6	; 0x06
    804e:	00 97       	sbiw	r24, 0x00	; 0
    8050:	69 f7       	brne	.-38     	; 0x802c <buzzer_2+0xb6>
    8052:	14 c0       	rjmp	.+40     	; 0x807c <buzzer_2+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8054:	6f 81       	ldd	r22, Y+7	; 0x07
    8056:	78 85       	ldd	r23, Y+8	; 0x08
    8058:	89 85       	ldd	r24, Y+9	; 0x09
    805a:	9a 85       	ldd	r25, Y+10	; 0x0a
    805c:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    8060:	dc 01       	movw	r26, r24
    8062:	cb 01       	movw	r24, r22
    8064:	9e 83       	std	Y+6, r25	; 0x06
    8066:	8d 83       	std	Y+5, r24	; 0x05
    8068:	8d 81       	ldd	r24, Y+5	; 0x05
    806a:	9e 81       	ldd	r25, Y+6	; 0x06
    806c:	9a 83       	std	Y+2, r25	; 0x02
    806e:	89 83       	std	Y+1, r24	; 0x01
    8070:	89 81       	ldd	r24, Y+1	; 0x01
    8072:	9a 81       	ldd	r25, Y+2	; 0x02
    8074:	01 97       	sbiw	r24, 0x01	; 1
    8076:	f1 f7       	brne	.-4      	; 0x8074 <buzzer_2+0xfe>
    8078:	9a 83       	std	Y+2, r25	; 0x02
    807a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);
    PORTL &= ~(1 << 6);
    807c:	ab e0       	ldi	r26, 0x0B	; 11
    807e:	b1 e0       	ldi	r27, 0x01	; 1
    8080:	eb e0       	ldi	r30, 0x0B	; 11
    8082:	f1 e0       	ldi	r31, 0x01	; 1
    8084:	80 81       	ld	r24, Z
    8086:	8f 7b       	andi	r24, 0xBF	; 191
    8088:	8c 93       	st	X, r24
}
    808a:	2e 96       	adiw	r28, 0x0e	; 14
    808c:	0f b6       	in	r0, 0x3f	; 63
    808e:	f8 94       	cli
    8090:	de bf       	out	0x3e, r29	; 62
    8092:	0f be       	out	0x3f, r0	; 63
    8094:	cd bf       	out	0x3d, r28	; 61
    8096:	cf 91       	pop	r28
    8098:	df 91       	pop	r29
    809a:	08 95       	ret

0000809c <buzzer_3>:

void buzzer_3()
{
    809c:	df 93       	push	r29
    809e:	cf 93       	push	r28
    80a0:	cd b7       	in	r28, 0x3d	; 61
    80a2:	de b7       	in	r29, 0x3e	; 62
    80a4:	2e 97       	sbiw	r28, 0x0e	; 14
    80a6:	0f b6       	in	r0, 0x3f	; 63
    80a8:	f8 94       	cli
    80aa:	de bf       	out	0x3e, r29	; 62
    80ac:	0f be       	out	0x3f, r0	; 63
    80ae:	cd bf       	out	0x3d, r28	; 61
    PORTL |= (1 << 6);
    80b0:	ab e0       	ldi	r26, 0x0B	; 11
    80b2:	b1 e0       	ldi	r27, 0x01	; 1
    80b4:	eb e0       	ldi	r30, 0x0B	; 11
    80b6:	f1 e0       	ldi	r31, 0x01	; 1
    80b8:	80 81       	ld	r24, Z
    80ba:	80 64       	ori	r24, 0x40	; 64
    80bc:	8c 93       	st	X, r24
    80be:	80 e0       	ldi	r24, 0x00	; 0
    80c0:	90 e8       	ldi	r25, 0x80	; 128
    80c2:	ab eb       	ldi	r26, 0xBB	; 187
    80c4:	b5 e4       	ldi	r27, 0x45	; 69
    80c6:	8b 87       	std	Y+11, r24	; 0x0b
    80c8:	9c 87       	std	Y+12, r25	; 0x0c
    80ca:	ad 87       	std	Y+13, r26	; 0x0d
    80cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    80ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    80d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    80d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    80d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    80d6:	26 e6       	ldi	r18, 0x66	; 102
    80d8:	36 e6       	ldi	r19, 0x66	; 102
    80da:	46 e6       	ldi	r20, 0x66	; 102
    80dc:	55 e4       	ldi	r21, 0x45	; 69
    80de:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    80e2:	dc 01       	movw	r26, r24
    80e4:	cb 01       	movw	r24, r22
    80e6:	8f 83       	std	Y+7, r24	; 0x07
    80e8:	98 87       	std	Y+8, r25	; 0x08
    80ea:	a9 87       	std	Y+9, r26	; 0x09
    80ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    80ee:	6f 81       	ldd	r22, Y+7	; 0x07
    80f0:	78 85       	ldd	r23, Y+8	; 0x08
    80f2:	89 85       	ldd	r24, Y+9	; 0x09
    80f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    80f6:	20 e0       	ldi	r18, 0x00	; 0
    80f8:	30 e0       	ldi	r19, 0x00	; 0
    80fa:	40 e8       	ldi	r20, 0x80	; 128
    80fc:	5f e3       	ldi	r21, 0x3F	; 63
    80fe:	0e 94 bd 44 	call	0x897a	; 0x897a <__ltsf2>
    8102:	88 23       	and	r24, r24
    8104:	2c f4       	brge	.+10     	; 0x8110 <buzzer_3+0x74>
		__ticks = 1;
    8106:	81 e0       	ldi	r24, 0x01	; 1
    8108:	90 e0       	ldi	r25, 0x00	; 0
    810a:	9e 83       	std	Y+6, r25	; 0x06
    810c:	8d 83       	std	Y+5, r24	; 0x05
    810e:	3f c0       	rjmp	.+126    	; 0x818e <buzzer_3+0xf2>
	else if (__tmp > 65535)
    8110:	6f 81       	ldd	r22, Y+7	; 0x07
    8112:	78 85       	ldd	r23, Y+8	; 0x08
    8114:	89 85       	ldd	r24, Y+9	; 0x09
    8116:	9a 85       	ldd	r25, Y+10	; 0x0a
    8118:	20 e0       	ldi	r18, 0x00	; 0
    811a:	3f ef       	ldi	r19, 0xFF	; 255
    811c:	4f e7       	ldi	r20, 0x7F	; 127
    811e:	57 e4       	ldi	r21, 0x47	; 71
    8120:	0e 94 5d 44 	call	0x88ba	; 0x88ba <__gtsf2>
    8124:	18 16       	cp	r1, r24
    8126:	4c f5       	brge	.+82     	; 0x817a <buzzer_3+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8128:	6b 85       	ldd	r22, Y+11	; 0x0b
    812a:	7c 85       	ldd	r23, Y+12	; 0x0c
    812c:	8d 85       	ldd	r24, Y+13	; 0x0d
    812e:	9e 85       	ldd	r25, Y+14	; 0x0e
    8130:	20 e0       	ldi	r18, 0x00	; 0
    8132:	30 e0       	ldi	r19, 0x00	; 0
    8134:	40 e2       	ldi	r20, 0x20	; 32
    8136:	51 e4       	ldi	r21, 0x41	; 65
    8138:	0e 94 b7 42 	call	0x856e	; 0x856e <__mulsf3>
    813c:	dc 01       	movw	r26, r24
    813e:	cb 01       	movw	r24, r22
    8140:	bc 01       	movw	r22, r24
    8142:	cd 01       	movw	r24, r26
    8144:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    8148:	dc 01       	movw	r26, r24
    814a:	cb 01       	movw	r24, r22
    814c:	9e 83       	std	Y+6, r25	; 0x06
    814e:	8d 83       	std	Y+5, r24	; 0x05
    8150:	0f c0       	rjmp	.+30     	; 0x8170 <buzzer_3+0xd4>
    8152:	80 e7       	ldi	r24, 0x70	; 112
    8154:	91 e0       	ldi	r25, 0x01	; 1
    8156:	9c 83       	std	Y+4, r25	; 0x04
    8158:	8b 83       	std	Y+3, r24	; 0x03
    815a:	8b 81       	ldd	r24, Y+3	; 0x03
    815c:	9c 81       	ldd	r25, Y+4	; 0x04
    815e:	01 97       	sbiw	r24, 0x01	; 1
    8160:	f1 f7       	brne	.-4      	; 0x815e <buzzer_3+0xc2>
    8162:	9c 83       	std	Y+4, r25	; 0x04
    8164:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8166:	8d 81       	ldd	r24, Y+5	; 0x05
    8168:	9e 81       	ldd	r25, Y+6	; 0x06
    816a:	01 97       	sbiw	r24, 0x01	; 1
    816c:	9e 83       	std	Y+6, r25	; 0x06
    816e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8170:	8d 81       	ldd	r24, Y+5	; 0x05
    8172:	9e 81       	ldd	r25, Y+6	; 0x06
    8174:	00 97       	sbiw	r24, 0x00	; 0
    8176:	69 f7       	brne	.-38     	; 0x8152 <buzzer_3+0xb6>
    8178:	14 c0       	rjmp	.+40     	; 0x81a2 <buzzer_3+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    817a:	6f 81       	ldd	r22, Y+7	; 0x07
    817c:	78 85       	ldd	r23, Y+8	; 0x08
    817e:	89 85       	ldd	r24, Y+9	; 0x09
    8180:	9a 85       	ldd	r25, Y+10	; 0x0a
    8182:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__fixunssfsi>
    8186:	dc 01       	movw	r26, r24
    8188:	cb 01       	movw	r24, r22
    818a:	9e 83       	std	Y+6, r25	; 0x06
    818c:	8d 83       	std	Y+5, r24	; 0x05
    818e:	8d 81       	ldd	r24, Y+5	; 0x05
    8190:	9e 81       	ldd	r25, Y+6	; 0x06
    8192:	9a 83       	std	Y+2, r25	; 0x02
    8194:	89 83       	std	Y+1, r24	; 0x01
    8196:	89 81       	ldd	r24, Y+1	; 0x01
    8198:	9a 81       	ldd	r25, Y+2	; 0x02
    819a:	01 97       	sbiw	r24, 0x01	; 1
    819c:	f1 f7       	brne	.-4      	; 0x819a <buzzer_3+0xfe>
    819e:	9a 83       	std	Y+2, r25	; 0x02
    81a0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(6000);
    PORTL &= ~(1 << 6);
    81a2:	ab e0       	ldi	r26, 0x0B	; 11
    81a4:	b1 e0       	ldi	r27, 0x01	; 1
    81a6:	eb e0       	ldi	r30, 0x0B	; 11
    81a8:	f1 e0       	ldi	r31, 0x01	; 1
    81aa:	80 81       	ld	r24, Z
    81ac:	8f 7b       	andi	r24, 0xBF	; 191
    81ae:	8c 93       	st	X, r24
}
    81b0:	2e 96       	adiw	r28, 0x0e	; 14
    81b2:	0f b6       	in	r0, 0x3f	; 63
    81b4:	f8 94       	cli
    81b6:	de bf       	out	0x3e, r29	; 62
    81b8:	0f be       	out	0x3f, r0	; 63
    81ba:	cd bf       	out	0x3d, r28	; 61
    81bc:	cf 91       	pop	r28
    81be:	df 91       	pop	r29
    81c0:	08 95       	ret

000081c2 <__fixunssfsi>:
    81c2:	ef 92       	push	r14
    81c4:	ff 92       	push	r15
    81c6:	0f 93       	push	r16
    81c8:	1f 93       	push	r17
    81ca:	7b 01       	movw	r14, r22
    81cc:	8c 01       	movw	r16, r24
    81ce:	20 e0       	ldi	r18, 0x00	; 0
    81d0:	30 e0       	ldi	r19, 0x00	; 0
    81d2:	40 e0       	ldi	r20, 0x00	; 0
    81d4:	5f e4       	ldi	r21, 0x4F	; 79
    81d6:	0e 94 8d 44 	call	0x891a	; 0x891a <__gesf2>
    81da:	88 23       	and	r24, r24
    81dc:	8c f0       	brlt	.+34     	; 0x8200 <__fixunssfsi+0x3e>
    81de:	c8 01       	movw	r24, r16
    81e0:	b7 01       	movw	r22, r14
    81e2:	20 e0       	ldi	r18, 0x00	; 0
    81e4:	30 e0       	ldi	r19, 0x00	; 0
    81e6:	40 e0       	ldi	r20, 0x00	; 0
    81e8:	5f e4       	ldi	r21, 0x4F	; 79
    81ea:	0e 94 59 42 	call	0x84b2	; 0x84b2 <__subsf3>
    81ee:	0e 94 4b 45 	call	0x8a96	; 0x8a96 <__fixsfsi>
    81f2:	9b 01       	movw	r18, r22
    81f4:	ac 01       	movw	r20, r24
    81f6:	20 50       	subi	r18, 0x00	; 0
    81f8:	30 40       	sbci	r19, 0x00	; 0
    81fa:	40 40       	sbci	r20, 0x00	; 0
    81fc:	50 48       	sbci	r21, 0x80	; 128
    81fe:	06 c0       	rjmp	.+12     	; 0x820c <__fixunssfsi+0x4a>
    8200:	c8 01       	movw	r24, r16
    8202:	b7 01       	movw	r22, r14
    8204:	0e 94 4b 45 	call	0x8a96	; 0x8a96 <__fixsfsi>
    8208:	9b 01       	movw	r18, r22
    820a:	ac 01       	movw	r20, r24
    820c:	b9 01       	movw	r22, r18
    820e:	ca 01       	movw	r24, r20
    8210:	1f 91       	pop	r17
    8212:	0f 91       	pop	r16
    8214:	ff 90       	pop	r15
    8216:	ef 90       	pop	r14
    8218:	08 95       	ret

0000821a <_fpadd_parts>:
    821a:	a0 e0       	ldi	r26, 0x00	; 0
    821c:	b0 e0       	ldi	r27, 0x00	; 0
    821e:	e3 e1       	ldi	r30, 0x13	; 19
    8220:	f1 e4       	ldi	r31, 0x41	; 65
    8222:	0c 94 34 48 	jmp	0x9068	; 0x9068 <__prologue_saves__>
    8226:	dc 01       	movw	r26, r24
    8228:	2b 01       	movw	r4, r22
    822a:	fa 01       	movw	r30, r20
    822c:	9c 91       	ld	r25, X
    822e:	92 30       	cpi	r25, 0x02	; 2
    8230:	08 f4       	brcc	.+2      	; 0x8234 <_fpadd_parts+0x1a>
    8232:	39 c1       	rjmp	.+626    	; 0x84a6 <_fpadd_parts+0x28c>
    8234:	eb 01       	movw	r28, r22
    8236:	88 81       	ld	r24, Y
    8238:	82 30       	cpi	r24, 0x02	; 2
    823a:	08 f4       	brcc	.+2      	; 0x823e <_fpadd_parts+0x24>
    823c:	33 c1       	rjmp	.+614    	; 0x84a4 <_fpadd_parts+0x28a>
    823e:	94 30       	cpi	r25, 0x04	; 4
    8240:	69 f4       	brne	.+26     	; 0x825c <_fpadd_parts+0x42>
    8242:	84 30       	cpi	r24, 0x04	; 4
    8244:	09 f0       	breq	.+2      	; 0x8248 <_fpadd_parts+0x2e>
    8246:	2f c1       	rjmp	.+606    	; 0x84a6 <_fpadd_parts+0x28c>
    8248:	11 96       	adiw	r26, 0x01	; 1
    824a:	9c 91       	ld	r25, X
    824c:	11 97       	sbiw	r26, 0x01	; 1
    824e:	89 81       	ldd	r24, Y+1	; 0x01
    8250:	98 17       	cp	r25, r24
    8252:	09 f4       	brne	.+2      	; 0x8256 <_fpadd_parts+0x3c>
    8254:	28 c1       	rjmp	.+592    	; 0x84a6 <_fpadd_parts+0x28c>
    8256:	a8 e0       	ldi	r26, 0x08	; 8
    8258:	b2 e0       	ldi	r27, 0x02	; 2
    825a:	25 c1       	rjmp	.+586    	; 0x84a6 <_fpadd_parts+0x28c>
    825c:	84 30       	cpi	r24, 0x04	; 4
    825e:	09 f4       	brne	.+2      	; 0x8262 <_fpadd_parts+0x48>
    8260:	21 c1       	rjmp	.+578    	; 0x84a4 <_fpadd_parts+0x28a>
    8262:	82 30       	cpi	r24, 0x02	; 2
    8264:	a9 f4       	brne	.+42     	; 0x8290 <_fpadd_parts+0x76>
    8266:	92 30       	cpi	r25, 0x02	; 2
    8268:	09 f0       	breq	.+2      	; 0x826c <_fpadd_parts+0x52>
    826a:	1d c1       	rjmp	.+570    	; 0x84a6 <_fpadd_parts+0x28c>
    826c:	9a 01       	movw	r18, r20
    826e:	ad 01       	movw	r20, r26
    8270:	88 e0       	ldi	r24, 0x08	; 8
    8272:	ea 01       	movw	r28, r20
    8274:	09 90       	ld	r0, Y+
    8276:	ae 01       	movw	r20, r28
    8278:	e9 01       	movw	r28, r18
    827a:	09 92       	st	Y+, r0
    827c:	9e 01       	movw	r18, r28
    827e:	81 50       	subi	r24, 0x01	; 1
    8280:	c1 f7       	brne	.-16     	; 0x8272 <_fpadd_parts+0x58>
    8282:	e2 01       	movw	r28, r4
    8284:	89 81       	ldd	r24, Y+1	; 0x01
    8286:	11 96       	adiw	r26, 0x01	; 1
    8288:	9c 91       	ld	r25, X
    828a:	89 23       	and	r24, r25
    828c:	81 83       	std	Z+1, r24	; 0x01
    828e:	08 c1       	rjmp	.+528    	; 0x84a0 <_fpadd_parts+0x286>
    8290:	92 30       	cpi	r25, 0x02	; 2
    8292:	09 f4       	brne	.+2      	; 0x8296 <_fpadd_parts+0x7c>
    8294:	07 c1       	rjmp	.+526    	; 0x84a4 <_fpadd_parts+0x28a>
    8296:	12 96       	adiw	r26, 0x02	; 2
    8298:	2d 90       	ld	r2, X+
    829a:	3c 90       	ld	r3, X
    829c:	13 97       	sbiw	r26, 0x03	; 3
    829e:	eb 01       	movw	r28, r22
    82a0:	8a 81       	ldd	r24, Y+2	; 0x02
    82a2:	9b 81       	ldd	r25, Y+3	; 0x03
    82a4:	14 96       	adiw	r26, 0x04	; 4
    82a6:	ad 90       	ld	r10, X+
    82a8:	bd 90       	ld	r11, X+
    82aa:	cd 90       	ld	r12, X+
    82ac:	dc 90       	ld	r13, X
    82ae:	17 97       	sbiw	r26, 0x07	; 7
    82b0:	ec 80       	ldd	r14, Y+4	; 0x04
    82b2:	fd 80       	ldd	r15, Y+5	; 0x05
    82b4:	0e 81       	ldd	r16, Y+6	; 0x06
    82b6:	1f 81       	ldd	r17, Y+7	; 0x07
    82b8:	91 01       	movw	r18, r2
    82ba:	28 1b       	sub	r18, r24
    82bc:	39 0b       	sbc	r19, r25
    82be:	b9 01       	movw	r22, r18
    82c0:	37 ff       	sbrs	r19, 7
    82c2:	04 c0       	rjmp	.+8      	; 0x82cc <_fpadd_parts+0xb2>
    82c4:	66 27       	eor	r22, r22
    82c6:	77 27       	eor	r23, r23
    82c8:	62 1b       	sub	r22, r18
    82ca:	73 0b       	sbc	r23, r19
    82cc:	60 32       	cpi	r22, 0x20	; 32
    82ce:	71 05       	cpc	r23, r1
    82d0:	0c f0       	brlt	.+2      	; 0x82d4 <_fpadd_parts+0xba>
    82d2:	61 c0       	rjmp	.+194    	; 0x8396 <_fpadd_parts+0x17c>
    82d4:	12 16       	cp	r1, r18
    82d6:	13 06       	cpc	r1, r19
    82d8:	6c f5       	brge	.+90     	; 0x8334 <_fpadd_parts+0x11a>
    82da:	37 01       	movw	r6, r14
    82dc:	48 01       	movw	r8, r16
    82de:	06 2e       	mov	r0, r22
    82e0:	04 c0       	rjmp	.+8      	; 0x82ea <_fpadd_parts+0xd0>
    82e2:	96 94       	lsr	r9
    82e4:	87 94       	ror	r8
    82e6:	77 94       	ror	r7
    82e8:	67 94       	ror	r6
    82ea:	0a 94       	dec	r0
    82ec:	d2 f7       	brpl	.-12     	; 0x82e2 <_fpadd_parts+0xc8>
    82ee:	21 e0       	ldi	r18, 0x01	; 1
    82f0:	30 e0       	ldi	r19, 0x00	; 0
    82f2:	40 e0       	ldi	r20, 0x00	; 0
    82f4:	50 e0       	ldi	r21, 0x00	; 0
    82f6:	04 c0       	rjmp	.+8      	; 0x8300 <_fpadd_parts+0xe6>
    82f8:	22 0f       	add	r18, r18
    82fa:	33 1f       	adc	r19, r19
    82fc:	44 1f       	adc	r20, r20
    82fe:	55 1f       	adc	r21, r21
    8300:	6a 95       	dec	r22
    8302:	d2 f7       	brpl	.-12     	; 0x82f8 <_fpadd_parts+0xde>
    8304:	21 50       	subi	r18, 0x01	; 1
    8306:	30 40       	sbci	r19, 0x00	; 0
    8308:	40 40       	sbci	r20, 0x00	; 0
    830a:	50 40       	sbci	r21, 0x00	; 0
    830c:	2e 21       	and	r18, r14
    830e:	3f 21       	and	r19, r15
    8310:	40 23       	and	r20, r16
    8312:	51 23       	and	r21, r17
    8314:	21 15       	cp	r18, r1
    8316:	31 05       	cpc	r19, r1
    8318:	41 05       	cpc	r20, r1
    831a:	51 05       	cpc	r21, r1
    831c:	21 f0       	breq	.+8      	; 0x8326 <_fpadd_parts+0x10c>
    831e:	21 e0       	ldi	r18, 0x01	; 1
    8320:	30 e0       	ldi	r19, 0x00	; 0
    8322:	40 e0       	ldi	r20, 0x00	; 0
    8324:	50 e0       	ldi	r21, 0x00	; 0
    8326:	79 01       	movw	r14, r18
    8328:	8a 01       	movw	r16, r20
    832a:	e6 28       	or	r14, r6
    832c:	f7 28       	or	r15, r7
    832e:	08 29       	or	r16, r8
    8330:	19 29       	or	r17, r9
    8332:	3c c0       	rjmp	.+120    	; 0x83ac <_fpadd_parts+0x192>
    8334:	23 2b       	or	r18, r19
    8336:	d1 f1       	breq	.+116    	; 0x83ac <_fpadd_parts+0x192>
    8338:	26 0e       	add	r2, r22
    833a:	37 1e       	adc	r3, r23
    833c:	35 01       	movw	r6, r10
    833e:	46 01       	movw	r8, r12
    8340:	06 2e       	mov	r0, r22
    8342:	04 c0       	rjmp	.+8      	; 0x834c <_fpadd_parts+0x132>
    8344:	96 94       	lsr	r9
    8346:	87 94       	ror	r8
    8348:	77 94       	ror	r7
    834a:	67 94       	ror	r6
    834c:	0a 94       	dec	r0
    834e:	d2 f7       	brpl	.-12     	; 0x8344 <_fpadd_parts+0x12a>
    8350:	21 e0       	ldi	r18, 0x01	; 1
    8352:	30 e0       	ldi	r19, 0x00	; 0
    8354:	40 e0       	ldi	r20, 0x00	; 0
    8356:	50 e0       	ldi	r21, 0x00	; 0
    8358:	04 c0       	rjmp	.+8      	; 0x8362 <_fpadd_parts+0x148>
    835a:	22 0f       	add	r18, r18
    835c:	33 1f       	adc	r19, r19
    835e:	44 1f       	adc	r20, r20
    8360:	55 1f       	adc	r21, r21
    8362:	6a 95       	dec	r22
    8364:	d2 f7       	brpl	.-12     	; 0x835a <_fpadd_parts+0x140>
    8366:	21 50       	subi	r18, 0x01	; 1
    8368:	30 40       	sbci	r19, 0x00	; 0
    836a:	40 40       	sbci	r20, 0x00	; 0
    836c:	50 40       	sbci	r21, 0x00	; 0
    836e:	2a 21       	and	r18, r10
    8370:	3b 21       	and	r19, r11
    8372:	4c 21       	and	r20, r12
    8374:	5d 21       	and	r21, r13
    8376:	21 15       	cp	r18, r1
    8378:	31 05       	cpc	r19, r1
    837a:	41 05       	cpc	r20, r1
    837c:	51 05       	cpc	r21, r1
    837e:	21 f0       	breq	.+8      	; 0x8388 <_fpadd_parts+0x16e>
    8380:	21 e0       	ldi	r18, 0x01	; 1
    8382:	30 e0       	ldi	r19, 0x00	; 0
    8384:	40 e0       	ldi	r20, 0x00	; 0
    8386:	50 e0       	ldi	r21, 0x00	; 0
    8388:	59 01       	movw	r10, r18
    838a:	6a 01       	movw	r12, r20
    838c:	a6 28       	or	r10, r6
    838e:	b7 28       	or	r11, r7
    8390:	c8 28       	or	r12, r8
    8392:	d9 28       	or	r13, r9
    8394:	0b c0       	rjmp	.+22     	; 0x83ac <_fpadd_parts+0x192>
    8396:	82 15       	cp	r24, r2
    8398:	93 05       	cpc	r25, r3
    839a:	2c f0       	brlt	.+10     	; 0x83a6 <_fpadd_parts+0x18c>
    839c:	1c 01       	movw	r2, r24
    839e:	aa 24       	eor	r10, r10
    83a0:	bb 24       	eor	r11, r11
    83a2:	65 01       	movw	r12, r10
    83a4:	03 c0       	rjmp	.+6      	; 0x83ac <_fpadd_parts+0x192>
    83a6:	ee 24       	eor	r14, r14
    83a8:	ff 24       	eor	r15, r15
    83aa:	87 01       	movw	r16, r14
    83ac:	11 96       	adiw	r26, 0x01	; 1
    83ae:	9c 91       	ld	r25, X
    83b0:	d2 01       	movw	r26, r4
    83b2:	11 96       	adiw	r26, 0x01	; 1
    83b4:	8c 91       	ld	r24, X
    83b6:	98 17       	cp	r25, r24
    83b8:	09 f4       	brne	.+2      	; 0x83bc <_fpadd_parts+0x1a2>
    83ba:	45 c0       	rjmp	.+138    	; 0x8446 <_fpadd_parts+0x22c>
    83bc:	99 23       	and	r25, r25
    83be:	39 f0       	breq	.+14     	; 0x83ce <_fpadd_parts+0x1b4>
    83c0:	a8 01       	movw	r20, r16
    83c2:	97 01       	movw	r18, r14
    83c4:	2a 19       	sub	r18, r10
    83c6:	3b 09       	sbc	r19, r11
    83c8:	4c 09       	sbc	r20, r12
    83ca:	5d 09       	sbc	r21, r13
    83cc:	06 c0       	rjmp	.+12     	; 0x83da <_fpadd_parts+0x1c0>
    83ce:	a6 01       	movw	r20, r12
    83d0:	95 01       	movw	r18, r10
    83d2:	2e 19       	sub	r18, r14
    83d4:	3f 09       	sbc	r19, r15
    83d6:	40 0b       	sbc	r20, r16
    83d8:	51 0b       	sbc	r21, r17
    83da:	57 fd       	sbrc	r21, 7
    83dc:	08 c0       	rjmp	.+16     	; 0x83ee <_fpadd_parts+0x1d4>
    83de:	11 82       	std	Z+1, r1	; 0x01
    83e0:	33 82       	std	Z+3, r3	; 0x03
    83e2:	22 82       	std	Z+2, r2	; 0x02
    83e4:	24 83       	std	Z+4, r18	; 0x04
    83e6:	35 83       	std	Z+5, r19	; 0x05
    83e8:	46 83       	std	Z+6, r20	; 0x06
    83ea:	57 83       	std	Z+7, r21	; 0x07
    83ec:	1d c0       	rjmp	.+58     	; 0x8428 <_fpadd_parts+0x20e>
    83ee:	81 e0       	ldi	r24, 0x01	; 1
    83f0:	81 83       	std	Z+1, r24	; 0x01
    83f2:	33 82       	std	Z+3, r3	; 0x03
    83f4:	22 82       	std	Z+2, r2	; 0x02
    83f6:	88 27       	eor	r24, r24
    83f8:	99 27       	eor	r25, r25
    83fa:	dc 01       	movw	r26, r24
    83fc:	82 1b       	sub	r24, r18
    83fe:	93 0b       	sbc	r25, r19
    8400:	a4 0b       	sbc	r26, r20
    8402:	b5 0b       	sbc	r27, r21
    8404:	84 83       	std	Z+4, r24	; 0x04
    8406:	95 83       	std	Z+5, r25	; 0x05
    8408:	a6 83       	std	Z+6, r26	; 0x06
    840a:	b7 83       	std	Z+7, r27	; 0x07
    840c:	0d c0       	rjmp	.+26     	; 0x8428 <_fpadd_parts+0x20e>
    840e:	22 0f       	add	r18, r18
    8410:	33 1f       	adc	r19, r19
    8412:	44 1f       	adc	r20, r20
    8414:	55 1f       	adc	r21, r21
    8416:	24 83       	std	Z+4, r18	; 0x04
    8418:	35 83       	std	Z+5, r19	; 0x05
    841a:	46 83       	std	Z+6, r20	; 0x06
    841c:	57 83       	std	Z+7, r21	; 0x07
    841e:	82 81       	ldd	r24, Z+2	; 0x02
    8420:	93 81       	ldd	r25, Z+3	; 0x03
    8422:	01 97       	sbiw	r24, 0x01	; 1
    8424:	93 83       	std	Z+3, r25	; 0x03
    8426:	82 83       	std	Z+2, r24	; 0x02
    8428:	24 81       	ldd	r18, Z+4	; 0x04
    842a:	35 81       	ldd	r19, Z+5	; 0x05
    842c:	46 81       	ldd	r20, Z+6	; 0x06
    842e:	57 81       	ldd	r21, Z+7	; 0x07
    8430:	da 01       	movw	r26, r20
    8432:	c9 01       	movw	r24, r18
    8434:	01 97       	sbiw	r24, 0x01	; 1
    8436:	a1 09       	sbc	r26, r1
    8438:	b1 09       	sbc	r27, r1
    843a:	8f 5f       	subi	r24, 0xFF	; 255
    843c:	9f 4f       	sbci	r25, 0xFF	; 255
    843e:	af 4f       	sbci	r26, 0xFF	; 255
    8440:	bf 43       	sbci	r27, 0x3F	; 63
    8442:	28 f3       	brcs	.-54     	; 0x840e <_fpadd_parts+0x1f4>
    8444:	0b c0       	rjmp	.+22     	; 0x845c <_fpadd_parts+0x242>
    8446:	91 83       	std	Z+1, r25	; 0x01
    8448:	33 82       	std	Z+3, r3	; 0x03
    844a:	22 82       	std	Z+2, r2	; 0x02
    844c:	ea 0c       	add	r14, r10
    844e:	fb 1c       	adc	r15, r11
    8450:	0c 1d       	adc	r16, r12
    8452:	1d 1d       	adc	r17, r13
    8454:	e4 82       	std	Z+4, r14	; 0x04
    8456:	f5 82       	std	Z+5, r15	; 0x05
    8458:	06 83       	std	Z+6, r16	; 0x06
    845a:	17 83       	std	Z+7, r17	; 0x07
    845c:	83 e0       	ldi	r24, 0x03	; 3
    845e:	80 83       	st	Z, r24
    8460:	24 81       	ldd	r18, Z+4	; 0x04
    8462:	35 81       	ldd	r19, Z+5	; 0x05
    8464:	46 81       	ldd	r20, Z+6	; 0x06
    8466:	57 81       	ldd	r21, Z+7	; 0x07
    8468:	57 ff       	sbrs	r21, 7
    846a:	1a c0       	rjmp	.+52     	; 0x84a0 <_fpadd_parts+0x286>
    846c:	c9 01       	movw	r24, r18
    846e:	aa 27       	eor	r26, r26
    8470:	97 fd       	sbrc	r25, 7
    8472:	a0 95       	com	r26
    8474:	ba 2f       	mov	r27, r26
    8476:	81 70       	andi	r24, 0x01	; 1
    8478:	90 70       	andi	r25, 0x00	; 0
    847a:	a0 70       	andi	r26, 0x00	; 0
    847c:	b0 70       	andi	r27, 0x00	; 0
    847e:	56 95       	lsr	r21
    8480:	47 95       	ror	r20
    8482:	37 95       	ror	r19
    8484:	27 95       	ror	r18
    8486:	82 2b       	or	r24, r18
    8488:	93 2b       	or	r25, r19
    848a:	a4 2b       	or	r26, r20
    848c:	b5 2b       	or	r27, r21
    848e:	84 83       	std	Z+4, r24	; 0x04
    8490:	95 83       	std	Z+5, r25	; 0x05
    8492:	a6 83       	std	Z+6, r26	; 0x06
    8494:	b7 83       	std	Z+7, r27	; 0x07
    8496:	82 81       	ldd	r24, Z+2	; 0x02
    8498:	93 81       	ldd	r25, Z+3	; 0x03
    849a:	01 96       	adiw	r24, 0x01	; 1
    849c:	93 83       	std	Z+3, r25	; 0x03
    849e:	82 83       	std	Z+2, r24	; 0x02
    84a0:	df 01       	movw	r26, r30
    84a2:	01 c0       	rjmp	.+2      	; 0x84a6 <_fpadd_parts+0x28c>
    84a4:	d2 01       	movw	r26, r4
    84a6:	cd 01       	movw	r24, r26
    84a8:	cd b7       	in	r28, 0x3d	; 61
    84aa:	de b7       	in	r29, 0x3e	; 62
    84ac:	e2 e1       	ldi	r30, 0x12	; 18
    84ae:	0c 94 50 48 	jmp	0x90a0	; 0x90a0 <__epilogue_restores__>

000084b2 <__subsf3>:
    84b2:	a0 e2       	ldi	r26, 0x20	; 32
    84b4:	b0 e0       	ldi	r27, 0x00	; 0
    84b6:	ef e5       	ldi	r30, 0x5F	; 95
    84b8:	f2 e4       	ldi	r31, 0x42	; 66
    84ba:	0c 94 40 48 	jmp	0x9080	; 0x9080 <__prologue_saves__+0x18>
    84be:	69 83       	std	Y+1, r22	; 0x01
    84c0:	7a 83       	std	Y+2, r23	; 0x02
    84c2:	8b 83       	std	Y+3, r24	; 0x03
    84c4:	9c 83       	std	Y+4, r25	; 0x04
    84c6:	2d 83       	std	Y+5, r18	; 0x05
    84c8:	3e 83       	std	Y+6, r19	; 0x06
    84ca:	4f 83       	std	Y+7, r20	; 0x07
    84cc:	58 87       	std	Y+8, r21	; 0x08
    84ce:	e9 e0       	ldi	r30, 0x09	; 9
    84d0:	ee 2e       	mov	r14, r30
    84d2:	f1 2c       	mov	r15, r1
    84d4:	ec 0e       	add	r14, r28
    84d6:	fd 1e       	adc	r15, r29
    84d8:	ce 01       	movw	r24, r28
    84da:	01 96       	adiw	r24, 0x01	; 1
    84dc:	b7 01       	movw	r22, r14
    84de:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <__unpack_f>
    84e2:	8e 01       	movw	r16, r28
    84e4:	0f 5e       	subi	r16, 0xEF	; 239
    84e6:	1f 4f       	sbci	r17, 0xFF	; 255
    84e8:	ce 01       	movw	r24, r28
    84ea:	05 96       	adiw	r24, 0x05	; 5
    84ec:	b8 01       	movw	r22, r16
    84ee:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <__unpack_f>
    84f2:	8a 89       	ldd	r24, Y+18	; 0x12
    84f4:	91 e0       	ldi	r25, 0x01	; 1
    84f6:	89 27       	eor	r24, r25
    84f8:	8a 8b       	std	Y+18, r24	; 0x12
    84fa:	c7 01       	movw	r24, r14
    84fc:	b8 01       	movw	r22, r16
    84fe:	ae 01       	movw	r20, r28
    8500:	47 5e       	subi	r20, 0xE7	; 231
    8502:	5f 4f       	sbci	r21, 0xFF	; 255
    8504:	0e 94 0d 41 	call	0x821a	; 0x821a <_fpadd_parts>
    8508:	0e 94 67 46 	call	0x8cce	; 0x8cce <__pack_f>
    850c:	a0 96       	adiw	r28, 0x20	; 32
    850e:	e6 e0       	ldi	r30, 0x06	; 6
    8510:	0c 94 5c 48 	jmp	0x90b8	; 0x90b8 <__epilogue_restores__+0x18>

00008514 <__addsf3>:
    8514:	a0 e2       	ldi	r26, 0x20	; 32
    8516:	b0 e0       	ldi	r27, 0x00	; 0
    8518:	e0 e9       	ldi	r30, 0x90	; 144
    851a:	f2 e4       	ldi	r31, 0x42	; 66
    851c:	0c 94 40 48 	jmp	0x9080	; 0x9080 <__prologue_saves__+0x18>
    8520:	69 83       	std	Y+1, r22	; 0x01
    8522:	7a 83       	std	Y+2, r23	; 0x02
    8524:	8b 83       	std	Y+3, r24	; 0x03
    8526:	9c 83       	std	Y+4, r25	; 0x04
    8528:	2d 83       	std	Y+5, r18	; 0x05
    852a:	3e 83       	std	Y+6, r19	; 0x06
    852c:	4f 83       	std	Y+7, r20	; 0x07
    852e:	58 87       	std	Y+8, r21	; 0x08
    8530:	f9 e0       	ldi	r31, 0x09	; 9
    8532:	ef 2e       	mov	r14, r31
    8534:	f1 2c       	mov	r15, r1
    8536:	ec 0e       	add	r14, r28
    8538:	fd 1e       	adc	r15, r29
    853a:	ce 01       	movw	r24, r28
    853c:	01 96       	adiw	r24, 0x01	; 1
    853e:	b7 01       	movw	r22, r14
    8540:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <__unpack_f>
    8544:	8e 01       	movw	r16, r28
    8546:	0f 5e       	subi	r16, 0xEF	; 239
    8548:	1f 4f       	sbci	r17, 0xFF	; 255
    854a:	ce 01       	movw	r24, r28
    854c:	05 96       	adiw	r24, 0x05	; 5
    854e:	b8 01       	movw	r22, r16
    8550:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <__unpack_f>
    8554:	c7 01       	movw	r24, r14
    8556:	b8 01       	movw	r22, r16
    8558:	ae 01       	movw	r20, r28
    855a:	47 5e       	subi	r20, 0xE7	; 231
    855c:	5f 4f       	sbci	r21, 0xFF	; 255
    855e:	0e 94 0d 41 	call	0x821a	; 0x821a <_fpadd_parts>
    8562:	0e 94 67 46 	call	0x8cce	; 0x8cce <__pack_f>
    8566:	a0 96       	adiw	r28, 0x20	; 32
    8568:	e6 e0       	ldi	r30, 0x06	; 6
    856a:	0c 94 5c 48 	jmp	0x90b8	; 0x90b8 <__epilogue_restores__+0x18>

0000856e <__mulsf3>:
    856e:	a0 e2       	ldi	r26, 0x20	; 32
    8570:	b0 e0       	ldi	r27, 0x00	; 0
    8572:	ed eb       	ldi	r30, 0xBD	; 189
    8574:	f2 e4       	ldi	r31, 0x42	; 66
    8576:	0c 94 34 48 	jmp	0x9068	; 0x9068 <__prologue_saves__>
    857a:	69 83       	std	Y+1, r22	; 0x01
    857c:	7a 83       	std	Y+2, r23	; 0x02
    857e:	8b 83       	std	Y+3, r24	; 0x03
    8580:	9c 83       	std	Y+4, r25	; 0x04
    8582:	2d 83       	std	Y+5, r18	; 0x05
    8584:	3e 83       	std	Y+6, r19	; 0x06
    8586:	4f 83       	std	Y+7, r20	; 0x07
    8588:	58 87       	std	Y+8, r21	; 0x08
    858a:	ce 01       	movw	r24, r28
    858c:	01 96       	adiw	r24, 0x01	; 1
    858e:	be 01       	movw	r22, r28
    8590:	67 5f       	subi	r22, 0xF7	; 247
    8592:	7f 4f       	sbci	r23, 0xFF	; 255
    8594:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <__unpack_f>
    8598:	ce 01       	movw	r24, r28
    859a:	05 96       	adiw	r24, 0x05	; 5
    859c:	be 01       	movw	r22, r28
    859e:	6f 5e       	subi	r22, 0xEF	; 239
    85a0:	7f 4f       	sbci	r23, 0xFF	; 255
    85a2:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <__unpack_f>
    85a6:	99 85       	ldd	r25, Y+9	; 0x09
    85a8:	92 30       	cpi	r25, 0x02	; 2
    85aa:	88 f0       	brcs	.+34     	; 0x85ce <__mulsf3+0x60>
    85ac:	89 89       	ldd	r24, Y+17	; 0x11
    85ae:	82 30       	cpi	r24, 0x02	; 2
    85b0:	c8 f0       	brcs	.+50     	; 0x85e4 <__mulsf3+0x76>
    85b2:	94 30       	cpi	r25, 0x04	; 4
    85b4:	19 f4       	brne	.+6      	; 0x85bc <__mulsf3+0x4e>
    85b6:	82 30       	cpi	r24, 0x02	; 2
    85b8:	51 f4       	brne	.+20     	; 0x85ce <__mulsf3+0x60>
    85ba:	04 c0       	rjmp	.+8      	; 0x85c4 <__mulsf3+0x56>
    85bc:	84 30       	cpi	r24, 0x04	; 4
    85be:	29 f4       	brne	.+10     	; 0x85ca <__mulsf3+0x5c>
    85c0:	92 30       	cpi	r25, 0x02	; 2
    85c2:	81 f4       	brne	.+32     	; 0x85e4 <__mulsf3+0x76>
    85c4:	88 e0       	ldi	r24, 0x08	; 8
    85c6:	92 e0       	ldi	r25, 0x02	; 2
    85c8:	c6 c0       	rjmp	.+396    	; 0x8756 <__mulsf3+0x1e8>
    85ca:	92 30       	cpi	r25, 0x02	; 2
    85cc:	49 f4       	brne	.+18     	; 0x85e0 <__mulsf3+0x72>
    85ce:	20 e0       	ldi	r18, 0x00	; 0
    85d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    85d2:	8a 89       	ldd	r24, Y+18	; 0x12
    85d4:	98 13       	cpse	r25, r24
    85d6:	21 e0       	ldi	r18, 0x01	; 1
    85d8:	2a 87       	std	Y+10, r18	; 0x0a
    85da:	ce 01       	movw	r24, r28
    85dc:	09 96       	adiw	r24, 0x09	; 9
    85de:	bb c0       	rjmp	.+374    	; 0x8756 <__mulsf3+0x1e8>
    85e0:	82 30       	cpi	r24, 0x02	; 2
    85e2:	49 f4       	brne	.+18     	; 0x85f6 <__mulsf3+0x88>
    85e4:	20 e0       	ldi	r18, 0x00	; 0
    85e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    85e8:	8a 89       	ldd	r24, Y+18	; 0x12
    85ea:	98 13       	cpse	r25, r24
    85ec:	21 e0       	ldi	r18, 0x01	; 1
    85ee:	2a 8b       	std	Y+18, r18	; 0x12
    85f0:	ce 01       	movw	r24, r28
    85f2:	41 96       	adiw	r24, 0x11	; 17
    85f4:	b0 c0       	rjmp	.+352    	; 0x8756 <__mulsf3+0x1e8>
    85f6:	2d 84       	ldd	r2, Y+13	; 0x0d
    85f8:	3e 84       	ldd	r3, Y+14	; 0x0e
    85fa:	4f 84       	ldd	r4, Y+15	; 0x0f
    85fc:	58 88       	ldd	r5, Y+16	; 0x10
    85fe:	6d 88       	ldd	r6, Y+21	; 0x15
    8600:	7e 88       	ldd	r7, Y+22	; 0x16
    8602:	8f 88       	ldd	r8, Y+23	; 0x17
    8604:	98 8c       	ldd	r9, Y+24	; 0x18
    8606:	ee 24       	eor	r14, r14
    8608:	ff 24       	eor	r15, r15
    860a:	87 01       	movw	r16, r14
    860c:	aa 24       	eor	r10, r10
    860e:	bb 24       	eor	r11, r11
    8610:	65 01       	movw	r12, r10
    8612:	40 e0       	ldi	r20, 0x00	; 0
    8614:	50 e0       	ldi	r21, 0x00	; 0
    8616:	60 e0       	ldi	r22, 0x00	; 0
    8618:	70 e0       	ldi	r23, 0x00	; 0
    861a:	e0 e0       	ldi	r30, 0x00	; 0
    861c:	f0 e0       	ldi	r31, 0x00	; 0
    861e:	c1 01       	movw	r24, r2
    8620:	81 70       	andi	r24, 0x01	; 1
    8622:	90 70       	andi	r25, 0x00	; 0
    8624:	89 2b       	or	r24, r25
    8626:	e9 f0       	breq	.+58     	; 0x8662 <__mulsf3+0xf4>
    8628:	e6 0c       	add	r14, r6
    862a:	f7 1c       	adc	r15, r7
    862c:	08 1d       	adc	r16, r8
    862e:	19 1d       	adc	r17, r9
    8630:	9a 01       	movw	r18, r20
    8632:	ab 01       	movw	r20, r22
    8634:	2a 0d       	add	r18, r10
    8636:	3b 1d       	adc	r19, r11
    8638:	4c 1d       	adc	r20, r12
    863a:	5d 1d       	adc	r21, r13
    863c:	80 e0       	ldi	r24, 0x00	; 0
    863e:	90 e0       	ldi	r25, 0x00	; 0
    8640:	a0 e0       	ldi	r26, 0x00	; 0
    8642:	b0 e0       	ldi	r27, 0x00	; 0
    8644:	e6 14       	cp	r14, r6
    8646:	f7 04       	cpc	r15, r7
    8648:	08 05       	cpc	r16, r8
    864a:	19 05       	cpc	r17, r9
    864c:	20 f4       	brcc	.+8      	; 0x8656 <__mulsf3+0xe8>
    864e:	81 e0       	ldi	r24, 0x01	; 1
    8650:	90 e0       	ldi	r25, 0x00	; 0
    8652:	a0 e0       	ldi	r26, 0x00	; 0
    8654:	b0 e0       	ldi	r27, 0x00	; 0
    8656:	ba 01       	movw	r22, r20
    8658:	a9 01       	movw	r20, r18
    865a:	48 0f       	add	r20, r24
    865c:	59 1f       	adc	r21, r25
    865e:	6a 1f       	adc	r22, r26
    8660:	7b 1f       	adc	r23, r27
    8662:	aa 0c       	add	r10, r10
    8664:	bb 1c       	adc	r11, r11
    8666:	cc 1c       	adc	r12, r12
    8668:	dd 1c       	adc	r13, r13
    866a:	97 fe       	sbrs	r9, 7
    866c:	08 c0       	rjmp	.+16     	; 0x867e <__mulsf3+0x110>
    866e:	81 e0       	ldi	r24, 0x01	; 1
    8670:	90 e0       	ldi	r25, 0x00	; 0
    8672:	a0 e0       	ldi	r26, 0x00	; 0
    8674:	b0 e0       	ldi	r27, 0x00	; 0
    8676:	a8 2a       	or	r10, r24
    8678:	b9 2a       	or	r11, r25
    867a:	ca 2a       	or	r12, r26
    867c:	db 2a       	or	r13, r27
    867e:	31 96       	adiw	r30, 0x01	; 1
    8680:	e0 32       	cpi	r30, 0x20	; 32
    8682:	f1 05       	cpc	r31, r1
    8684:	49 f0       	breq	.+18     	; 0x8698 <__mulsf3+0x12a>
    8686:	66 0c       	add	r6, r6
    8688:	77 1c       	adc	r7, r7
    868a:	88 1c       	adc	r8, r8
    868c:	99 1c       	adc	r9, r9
    868e:	56 94       	lsr	r5
    8690:	47 94       	ror	r4
    8692:	37 94       	ror	r3
    8694:	27 94       	ror	r2
    8696:	c3 cf       	rjmp	.-122    	; 0x861e <__mulsf3+0xb0>
    8698:	fa 85       	ldd	r31, Y+10	; 0x0a
    869a:	ea 89       	ldd	r30, Y+18	; 0x12
    869c:	2b 89       	ldd	r18, Y+19	; 0x13
    869e:	3c 89       	ldd	r19, Y+20	; 0x14
    86a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    86a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    86a4:	28 0f       	add	r18, r24
    86a6:	39 1f       	adc	r19, r25
    86a8:	2e 5f       	subi	r18, 0xFE	; 254
    86aa:	3f 4f       	sbci	r19, 0xFF	; 255
    86ac:	17 c0       	rjmp	.+46     	; 0x86dc <__mulsf3+0x16e>
    86ae:	ca 01       	movw	r24, r20
    86b0:	81 70       	andi	r24, 0x01	; 1
    86b2:	90 70       	andi	r25, 0x00	; 0
    86b4:	89 2b       	or	r24, r25
    86b6:	61 f0       	breq	.+24     	; 0x86d0 <__mulsf3+0x162>
    86b8:	16 95       	lsr	r17
    86ba:	07 95       	ror	r16
    86bc:	f7 94       	ror	r15
    86be:	e7 94       	ror	r14
    86c0:	80 e0       	ldi	r24, 0x00	; 0
    86c2:	90 e0       	ldi	r25, 0x00	; 0
    86c4:	a0 e0       	ldi	r26, 0x00	; 0
    86c6:	b0 e8       	ldi	r27, 0x80	; 128
    86c8:	e8 2a       	or	r14, r24
    86ca:	f9 2a       	or	r15, r25
    86cc:	0a 2b       	or	r16, r26
    86ce:	1b 2b       	or	r17, r27
    86d0:	76 95       	lsr	r23
    86d2:	67 95       	ror	r22
    86d4:	57 95       	ror	r21
    86d6:	47 95       	ror	r20
    86d8:	2f 5f       	subi	r18, 0xFF	; 255
    86da:	3f 4f       	sbci	r19, 0xFF	; 255
    86dc:	77 fd       	sbrc	r23, 7
    86de:	e7 cf       	rjmp	.-50     	; 0x86ae <__mulsf3+0x140>
    86e0:	0c c0       	rjmp	.+24     	; 0x86fa <__mulsf3+0x18c>
    86e2:	44 0f       	add	r20, r20
    86e4:	55 1f       	adc	r21, r21
    86e6:	66 1f       	adc	r22, r22
    86e8:	77 1f       	adc	r23, r23
    86ea:	17 fd       	sbrc	r17, 7
    86ec:	41 60       	ori	r20, 0x01	; 1
    86ee:	ee 0c       	add	r14, r14
    86f0:	ff 1c       	adc	r15, r15
    86f2:	00 1f       	adc	r16, r16
    86f4:	11 1f       	adc	r17, r17
    86f6:	21 50       	subi	r18, 0x01	; 1
    86f8:	30 40       	sbci	r19, 0x00	; 0
    86fa:	40 30       	cpi	r20, 0x00	; 0
    86fc:	90 e0       	ldi	r25, 0x00	; 0
    86fe:	59 07       	cpc	r21, r25
    8700:	90 e0       	ldi	r25, 0x00	; 0
    8702:	69 07       	cpc	r22, r25
    8704:	90 e4       	ldi	r25, 0x40	; 64
    8706:	79 07       	cpc	r23, r25
    8708:	60 f3       	brcs	.-40     	; 0x86e2 <__mulsf3+0x174>
    870a:	2b 8f       	std	Y+27, r18	; 0x1b
    870c:	3c 8f       	std	Y+28, r19	; 0x1c
    870e:	db 01       	movw	r26, r22
    8710:	ca 01       	movw	r24, r20
    8712:	8f 77       	andi	r24, 0x7F	; 127
    8714:	90 70       	andi	r25, 0x00	; 0
    8716:	a0 70       	andi	r26, 0x00	; 0
    8718:	b0 70       	andi	r27, 0x00	; 0
    871a:	80 34       	cpi	r24, 0x40	; 64
    871c:	91 05       	cpc	r25, r1
    871e:	a1 05       	cpc	r26, r1
    8720:	b1 05       	cpc	r27, r1
    8722:	61 f4       	brne	.+24     	; 0x873c <__mulsf3+0x1ce>
    8724:	47 fd       	sbrc	r20, 7
    8726:	0a c0       	rjmp	.+20     	; 0x873c <__mulsf3+0x1ce>
    8728:	e1 14       	cp	r14, r1
    872a:	f1 04       	cpc	r15, r1
    872c:	01 05       	cpc	r16, r1
    872e:	11 05       	cpc	r17, r1
    8730:	29 f0       	breq	.+10     	; 0x873c <__mulsf3+0x1ce>
    8732:	40 5c       	subi	r20, 0xC0	; 192
    8734:	5f 4f       	sbci	r21, 0xFF	; 255
    8736:	6f 4f       	sbci	r22, 0xFF	; 255
    8738:	7f 4f       	sbci	r23, 0xFF	; 255
    873a:	40 78       	andi	r20, 0x80	; 128
    873c:	1a 8e       	std	Y+26, r1	; 0x1a
    873e:	fe 17       	cp	r31, r30
    8740:	11 f0       	breq	.+4      	; 0x8746 <__mulsf3+0x1d8>
    8742:	81 e0       	ldi	r24, 0x01	; 1
    8744:	8a 8f       	std	Y+26, r24	; 0x1a
    8746:	4d 8f       	std	Y+29, r20	; 0x1d
    8748:	5e 8f       	std	Y+30, r21	; 0x1e
    874a:	6f 8f       	std	Y+31, r22	; 0x1f
    874c:	78 a3       	std	Y+32, r23	; 0x20
    874e:	83 e0       	ldi	r24, 0x03	; 3
    8750:	89 8f       	std	Y+25, r24	; 0x19
    8752:	ce 01       	movw	r24, r28
    8754:	49 96       	adiw	r24, 0x19	; 25
    8756:	0e 94 67 46 	call	0x8cce	; 0x8cce <__pack_f>
    875a:	a0 96       	adiw	r28, 0x20	; 32
    875c:	e2 e1       	ldi	r30, 0x12	; 18
    875e:	0c 94 50 48 	jmp	0x90a0	; 0x90a0 <__epilogue_restores__>

00008762 <__divsf3>:
    8762:	a8 e1       	ldi	r26, 0x18	; 24
    8764:	b0 e0       	ldi	r27, 0x00	; 0
    8766:	e7 eb       	ldi	r30, 0xB7	; 183
    8768:	f3 e4       	ldi	r31, 0x43	; 67
    876a:	0c 94 3c 48 	jmp	0x9078	; 0x9078 <__prologue_saves__+0x10>
    876e:	69 83       	std	Y+1, r22	; 0x01
    8770:	7a 83       	std	Y+2, r23	; 0x02
    8772:	8b 83       	std	Y+3, r24	; 0x03
    8774:	9c 83       	std	Y+4, r25	; 0x04
    8776:	2d 83       	std	Y+5, r18	; 0x05
    8778:	3e 83       	std	Y+6, r19	; 0x06
    877a:	4f 83       	std	Y+7, r20	; 0x07
    877c:	58 87       	std	Y+8, r21	; 0x08
    877e:	b9 e0       	ldi	r27, 0x09	; 9
    8780:	eb 2e       	mov	r14, r27
    8782:	f1 2c       	mov	r15, r1
    8784:	ec 0e       	add	r14, r28
    8786:	fd 1e       	adc	r15, r29
    8788:	ce 01       	movw	r24, r28
    878a:	01 96       	adiw	r24, 0x01	; 1
    878c:	b7 01       	movw	r22, r14
    878e:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <__unpack_f>
    8792:	8e 01       	movw	r16, r28
    8794:	0f 5e       	subi	r16, 0xEF	; 239
    8796:	1f 4f       	sbci	r17, 0xFF	; 255
    8798:	ce 01       	movw	r24, r28
    879a:	05 96       	adiw	r24, 0x05	; 5
    879c:	b8 01       	movw	r22, r16
    879e:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <__unpack_f>
    87a2:	29 85       	ldd	r18, Y+9	; 0x09
    87a4:	22 30       	cpi	r18, 0x02	; 2
    87a6:	08 f4       	brcc	.+2      	; 0x87aa <__divsf3+0x48>
    87a8:	7e c0       	rjmp	.+252    	; 0x88a6 <__divsf3+0x144>
    87aa:	39 89       	ldd	r19, Y+17	; 0x11
    87ac:	32 30       	cpi	r19, 0x02	; 2
    87ae:	10 f4       	brcc	.+4      	; 0x87b4 <__divsf3+0x52>
    87b0:	b8 01       	movw	r22, r16
    87b2:	7c c0       	rjmp	.+248    	; 0x88ac <__divsf3+0x14a>
    87b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    87b6:	9a 89       	ldd	r25, Y+18	; 0x12
    87b8:	89 27       	eor	r24, r25
    87ba:	8a 87       	std	Y+10, r24	; 0x0a
    87bc:	24 30       	cpi	r18, 0x04	; 4
    87be:	11 f0       	breq	.+4      	; 0x87c4 <__divsf3+0x62>
    87c0:	22 30       	cpi	r18, 0x02	; 2
    87c2:	31 f4       	brne	.+12     	; 0x87d0 <__divsf3+0x6e>
    87c4:	23 17       	cp	r18, r19
    87c6:	09 f0       	breq	.+2      	; 0x87ca <__divsf3+0x68>
    87c8:	6e c0       	rjmp	.+220    	; 0x88a6 <__divsf3+0x144>
    87ca:	68 e0       	ldi	r22, 0x08	; 8
    87cc:	72 e0       	ldi	r23, 0x02	; 2
    87ce:	6e c0       	rjmp	.+220    	; 0x88ac <__divsf3+0x14a>
    87d0:	34 30       	cpi	r19, 0x04	; 4
    87d2:	39 f4       	brne	.+14     	; 0x87e2 <__divsf3+0x80>
    87d4:	1d 86       	std	Y+13, r1	; 0x0d
    87d6:	1e 86       	std	Y+14, r1	; 0x0e
    87d8:	1f 86       	std	Y+15, r1	; 0x0f
    87da:	18 8a       	std	Y+16, r1	; 0x10
    87dc:	1c 86       	std	Y+12, r1	; 0x0c
    87de:	1b 86       	std	Y+11, r1	; 0x0b
    87e0:	04 c0       	rjmp	.+8      	; 0x87ea <__divsf3+0x88>
    87e2:	32 30       	cpi	r19, 0x02	; 2
    87e4:	21 f4       	brne	.+8      	; 0x87ee <__divsf3+0x8c>
    87e6:	84 e0       	ldi	r24, 0x04	; 4
    87e8:	89 87       	std	Y+9, r24	; 0x09
    87ea:	b7 01       	movw	r22, r14
    87ec:	5f c0       	rjmp	.+190    	; 0x88ac <__divsf3+0x14a>
    87ee:	2b 85       	ldd	r18, Y+11	; 0x0b
    87f0:	3c 85       	ldd	r19, Y+12	; 0x0c
    87f2:	8b 89       	ldd	r24, Y+19	; 0x13
    87f4:	9c 89       	ldd	r25, Y+20	; 0x14
    87f6:	28 1b       	sub	r18, r24
    87f8:	39 0b       	sbc	r19, r25
    87fa:	3c 87       	std	Y+12, r19	; 0x0c
    87fc:	2b 87       	std	Y+11, r18	; 0x0b
    87fe:	ed 84       	ldd	r14, Y+13	; 0x0d
    8800:	fe 84       	ldd	r15, Y+14	; 0x0e
    8802:	0f 85       	ldd	r16, Y+15	; 0x0f
    8804:	18 89       	ldd	r17, Y+16	; 0x10
    8806:	ad 88       	ldd	r10, Y+21	; 0x15
    8808:	be 88       	ldd	r11, Y+22	; 0x16
    880a:	cf 88       	ldd	r12, Y+23	; 0x17
    880c:	d8 8c       	ldd	r13, Y+24	; 0x18
    880e:	ea 14       	cp	r14, r10
    8810:	fb 04       	cpc	r15, r11
    8812:	0c 05       	cpc	r16, r12
    8814:	1d 05       	cpc	r17, r13
    8816:	40 f4       	brcc	.+16     	; 0x8828 <__divsf3+0xc6>
    8818:	ee 0c       	add	r14, r14
    881a:	ff 1c       	adc	r15, r15
    881c:	00 1f       	adc	r16, r16
    881e:	11 1f       	adc	r17, r17
    8820:	21 50       	subi	r18, 0x01	; 1
    8822:	30 40       	sbci	r19, 0x00	; 0
    8824:	3c 87       	std	Y+12, r19	; 0x0c
    8826:	2b 87       	std	Y+11, r18	; 0x0b
    8828:	20 e0       	ldi	r18, 0x00	; 0
    882a:	30 e0       	ldi	r19, 0x00	; 0
    882c:	40 e0       	ldi	r20, 0x00	; 0
    882e:	50 e0       	ldi	r21, 0x00	; 0
    8830:	80 e0       	ldi	r24, 0x00	; 0
    8832:	90 e0       	ldi	r25, 0x00	; 0
    8834:	a0 e0       	ldi	r26, 0x00	; 0
    8836:	b0 e4       	ldi	r27, 0x40	; 64
    8838:	60 e0       	ldi	r22, 0x00	; 0
    883a:	70 e0       	ldi	r23, 0x00	; 0
    883c:	ea 14       	cp	r14, r10
    883e:	fb 04       	cpc	r15, r11
    8840:	0c 05       	cpc	r16, r12
    8842:	1d 05       	cpc	r17, r13
    8844:	40 f0       	brcs	.+16     	; 0x8856 <__divsf3+0xf4>
    8846:	28 2b       	or	r18, r24
    8848:	39 2b       	or	r19, r25
    884a:	4a 2b       	or	r20, r26
    884c:	5b 2b       	or	r21, r27
    884e:	ea 18       	sub	r14, r10
    8850:	fb 08       	sbc	r15, r11
    8852:	0c 09       	sbc	r16, r12
    8854:	1d 09       	sbc	r17, r13
    8856:	b6 95       	lsr	r27
    8858:	a7 95       	ror	r26
    885a:	97 95       	ror	r25
    885c:	87 95       	ror	r24
    885e:	ee 0c       	add	r14, r14
    8860:	ff 1c       	adc	r15, r15
    8862:	00 1f       	adc	r16, r16
    8864:	11 1f       	adc	r17, r17
    8866:	6f 5f       	subi	r22, 0xFF	; 255
    8868:	7f 4f       	sbci	r23, 0xFF	; 255
    886a:	6f 31       	cpi	r22, 0x1F	; 31
    886c:	71 05       	cpc	r23, r1
    886e:	31 f7       	brne	.-52     	; 0x883c <__divsf3+0xda>
    8870:	da 01       	movw	r26, r20
    8872:	c9 01       	movw	r24, r18
    8874:	8f 77       	andi	r24, 0x7F	; 127
    8876:	90 70       	andi	r25, 0x00	; 0
    8878:	a0 70       	andi	r26, 0x00	; 0
    887a:	b0 70       	andi	r27, 0x00	; 0
    887c:	80 34       	cpi	r24, 0x40	; 64
    887e:	91 05       	cpc	r25, r1
    8880:	a1 05       	cpc	r26, r1
    8882:	b1 05       	cpc	r27, r1
    8884:	61 f4       	brne	.+24     	; 0x889e <__divsf3+0x13c>
    8886:	27 fd       	sbrc	r18, 7
    8888:	0a c0       	rjmp	.+20     	; 0x889e <__divsf3+0x13c>
    888a:	e1 14       	cp	r14, r1
    888c:	f1 04       	cpc	r15, r1
    888e:	01 05       	cpc	r16, r1
    8890:	11 05       	cpc	r17, r1
    8892:	29 f0       	breq	.+10     	; 0x889e <__divsf3+0x13c>
    8894:	20 5c       	subi	r18, 0xC0	; 192
    8896:	3f 4f       	sbci	r19, 0xFF	; 255
    8898:	4f 4f       	sbci	r20, 0xFF	; 255
    889a:	5f 4f       	sbci	r21, 0xFF	; 255
    889c:	20 78       	andi	r18, 0x80	; 128
    889e:	2d 87       	std	Y+13, r18	; 0x0d
    88a0:	3e 87       	std	Y+14, r19	; 0x0e
    88a2:	4f 87       	std	Y+15, r20	; 0x0f
    88a4:	58 8b       	std	Y+16, r21	; 0x10
    88a6:	be 01       	movw	r22, r28
    88a8:	67 5f       	subi	r22, 0xF7	; 247
    88aa:	7f 4f       	sbci	r23, 0xFF	; 255
    88ac:	cb 01       	movw	r24, r22
    88ae:	0e 94 67 46 	call	0x8cce	; 0x8cce <__pack_f>
    88b2:	68 96       	adiw	r28, 0x18	; 24
    88b4:	ea e0       	ldi	r30, 0x0A	; 10
    88b6:	0c 94 58 48 	jmp	0x90b0	; 0x90b0 <__epilogue_restores__+0x10>

000088ba <__gtsf2>:
    88ba:	a8 e1       	ldi	r26, 0x18	; 24
    88bc:	b0 e0       	ldi	r27, 0x00	; 0
    88be:	e3 e6       	ldi	r30, 0x63	; 99
    88c0:	f4 e4       	ldi	r31, 0x44	; 68
    88c2:	0c 94 40 48 	jmp	0x9080	; 0x9080 <__prologue_saves__+0x18>
    88c6:	69 83       	std	Y+1, r22	; 0x01
    88c8:	7a 83       	std	Y+2, r23	; 0x02
    88ca:	8b 83       	std	Y+3, r24	; 0x03
    88cc:	9c 83       	std	Y+4, r25	; 0x04
    88ce:	2d 83       	std	Y+5, r18	; 0x05
    88d0:	3e 83       	std	Y+6, r19	; 0x06
    88d2:	4f 83       	std	Y+7, r20	; 0x07
    88d4:	58 87       	std	Y+8, r21	; 0x08
    88d6:	89 e0       	ldi	r24, 0x09	; 9
    88d8:	e8 2e       	mov	r14, r24
    88da:	f1 2c       	mov	r15, r1
    88dc:	ec 0e       	add	r14, r28
    88de:	fd 1e       	adc	r15, r29
    88e0:	ce 01       	movw	r24, r28
    88e2:	01 96       	adiw	r24, 0x01	; 1
    88e4:	b7 01       	movw	r22, r14
    88e6:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <__unpack_f>
    88ea:	8e 01       	movw	r16, r28
    88ec:	0f 5e       	subi	r16, 0xEF	; 239
    88ee:	1f 4f       	sbci	r17, 0xFF	; 255
    88f0:	ce 01       	movw	r24, r28
    88f2:	05 96       	adiw	r24, 0x05	; 5
    88f4:	b8 01       	movw	r22, r16
    88f6:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <__unpack_f>
    88fa:	89 85       	ldd	r24, Y+9	; 0x09
    88fc:	82 30       	cpi	r24, 0x02	; 2
    88fe:	40 f0       	brcs	.+16     	; 0x8910 <__gtsf2+0x56>
    8900:	89 89       	ldd	r24, Y+17	; 0x11
    8902:	82 30       	cpi	r24, 0x02	; 2
    8904:	28 f0       	brcs	.+10     	; 0x8910 <__gtsf2+0x56>
    8906:	c7 01       	movw	r24, r14
    8908:	b8 01       	movw	r22, r16
    890a:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <__fpcmp_parts_f>
    890e:	01 c0       	rjmp	.+2      	; 0x8912 <__gtsf2+0x58>
    8910:	8f ef       	ldi	r24, 0xFF	; 255
    8912:	68 96       	adiw	r28, 0x18	; 24
    8914:	e6 e0       	ldi	r30, 0x06	; 6
    8916:	0c 94 5c 48 	jmp	0x90b8	; 0x90b8 <__epilogue_restores__+0x18>

0000891a <__gesf2>:
    891a:	a8 e1       	ldi	r26, 0x18	; 24
    891c:	b0 e0       	ldi	r27, 0x00	; 0
    891e:	e3 e9       	ldi	r30, 0x93	; 147
    8920:	f4 e4       	ldi	r31, 0x44	; 68
    8922:	0c 94 40 48 	jmp	0x9080	; 0x9080 <__prologue_saves__+0x18>
    8926:	69 83       	std	Y+1, r22	; 0x01
    8928:	7a 83       	std	Y+2, r23	; 0x02
    892a:	8b 83       	std	Y+3, r24	; 0x03
    892c:	9c 83       	std	Y+4, r25	; 0x04
    892e:	2d 83       	std	Y+5, r18	; 0x05
    8930:	3e 83       	std	Y+6, r19	; 0x06
    8932:	4f 83       	std	Y+7, r20	; 0x07
    8934:	58 87       	std	Y+8, r21	; 0x08
    8936:	89 e0       	ldi	r24, 0x09	; 9
    8938:	e8 2e       	mov	r14, r24
    893a:	f1 2c       	mov	r15, r1
    893c:	ec 0e       	add	r14, r28
    893e:	fd 1e       	adc	r15, r29
    8940:	ce 01       	movw	r24, r28
    8942:	01 96       	adiw	r24, 0x01	; 1
    8944:	b7 01       	movw	r22, r14
    8946:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <__unpack_f>
    894a:	8e 01       	movw	r16, r28
    894c:	0f 5e       	subi	r16, 0xEF	; 239
    894e:	1f 4f       	sbci	r17, 0xFF	; 255
    8950:	ce 01       	movw	r24, r28
    8952:	05 96       	adiw	r24, 0x05	; 5
    8954:	b8 01       	movw	r22, r16
    8956:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <__unpack_f>
    895a:	89 85       	ldd	r24, Y+9	; 0x09
    895c:	82 30       	cpi	r24, 0x02	; 2
    895e:	40 f0       	brcs	.+16     	; 0x8970 <__gesf2+0x56>
    8960:	89 89       	ldd	r24, Y+17	; 0x11
    8962:	82 30       	cpi	r24, 0x02	; 2
    8964:	28 f0       	brcs	.+10     	; 0x8970 <__gesf2+0x56>
    8966:	c7 01       	movw	r24, r14
    8968:	b8 01       	movw	r22, r16
    896a:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <__fpcmp_parts_f>
    896e:	01 c0       	rjmp	.+2      	; 0x8972 <__gesf2+0x58>
    8970:	8f ef       	ldi	r24, 0xFF	; 255
    8972:	68 96       	adiw	r28, 0x18	; 24
    8974:	e6 e0       	ldi	r30, 0x06	; 6
    8976:	0c 94 5c 48 	jmp	0x90b8	; 0x90b8 <__epilogue_restores__+0x18>

0000897a <__ltsf2>:
    897a:	a8 e1       	ldi	r26, 0x18	; 24
    897c:	b0 e0       	ldi	r27, 0x00	; 0
    897e:	e3 ec       	ldi	r30, 0xC3	; 195
    8980:	f4 e4       	ldi	r31, 0x44	; 68
    8982:	0c 94 40 48 	jmp	0x9080	; 0x9080 <__prologue_saves__+0x18>
    8986:	69 83       	std	Y+1, r22	; 0x01
    8988:	7a 83       	std	Y+2, r23	; 0x02
    898a:	8b 83       	std	Y+3, r24	; 0x03
    898c:	9c 83       	std	Y+4, r25	; 0x04
    898e:	2d 83       	std	Y+5, r18	; 0x05
    8990:	3e 83       	std	Y+6, r19	; 0x06
    8992:	4f 83       	std	Y+7, r20	; 0x07
    8994:	58 87       	std	Y+8, r21	; 0x08
    8996:	89 e0       	ldi	r24, 0x09	; 9
    8998:	e8 2e       	mov	r14, r24
    899a:	f1 2c       	mov	r15, r1
    899c:	ec 0e       	add	r14, r28
    899e:	fd 1e       	adc	r15, r29
    89a0:	ce 01       	movw	r24, r28
    89a2:	01 96       	adiw	r24, 0x01	; 1
    89a4:	b7 01       	movw	r22, r14
    89a6:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <__unpack_f>
    89aa:	8e 01       	movw	r16, r28
    89ac:	0f 5e       	subi	r16, 0xEF	; 239
    89ae:	1f 4f       	sbci	r17, 0xFF	; 255
    89b0:	ce 01       	movw	r24, r28
    89b2:	05 96       	adiw	r24, 0x05	; 5
    89b4:	b8 01       	movw	r22, r16
    89b6:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <__unpack_f>
    89ba:	89 85       	ldd	r24, Y+9	; 0x09
    89bc:	82 30       	cpi	r24, 0x02	; 2
    89be:	40 f0       	brcs	.+16     	; 0x89d0 <__ltsf2+0x56>
    89c0:	89 89       	ldd	r24, Y+17	; 0x11
    89c2:	82 30       	cpi	r24, 0x02	; 2
    89c4:	28 f0       	brcs	.+10     	; 0x89d0 <__ltsf2+0x56>
    89c6:	c7 01       	movw	r24, r14
    89c8:	b8 01       	movw	r22, r16
    89ca:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <__fpcmp_parts_f>
    89ce:	01 c0       	rjmp	.+2      	; 0x89d2 <__ltsf2+0x58>
    89d0:	81 e0       	ldi	r24, 0x01	; 1
    89d2:	68 96       	adiw	r28, 0x18	; 24
    89d4:	e6 e0       	ldi	r30, 0x06	; 6
    89d6:	0c 94 5c 48 	jmp	0x90b8	; 0x90b8 <__epilogue_restores__+0x18>

000089da <__floatsisf>:
    89da:	a8 e0       	ldi	r26, 0x08	; 8
    89dc:	b0 e0       	ldi	r27, 0x00	; 0
    89de:	e3 ef       	ldi	r30, 0xF3	; 243
    89e0:	f4 e4       	ldi	r31, 0x44	; 68
    89e2:	0c 94 3d 48 	jmp	0x907a	; 0x907a <__prologue_saves__+0x12>
    89e6:	9b 01       	movw	r18, r22
    89e8:	ac 01       	movw	r20, r24
    89ea:	83 e0       	ldi	r24, 0x03	; 3
    89ec:	89 83       	std	Y+1, r24	; 0x01
    89ee:	da 01       	movw	r26, r20
    89f0:	c9 01       	movw	r24, r18
    89f2:	88 27       	eor	r24, r24
    89f4:	b7 fd       	sbrc	r27, 7
    89f6:	83 95       	inc	r24
    89f8:	99 27       	eor	r25, r25
    89fa:	aa 27       	eor	r26, r26
    89fc:	bb 27       	eor	r27, r27
    89fe:	b8 2e       	mov	r11, r24
    8a00:	21 15       	cp	r18, r1
    8a02:	31 05       	cpc	r19, r1
    8a04:	41 05       	cpc	r20, r1
    8a06:	51 05       	cpc	r21, r1
    8a08:	19 f4       	brne	.+6      	; 0x8a10 <__floatsisf+0x36>
    8a0a:	82 e0       	ldi	r24, 0x02	; 2
    8a0c:	89 83       	std	Y+1, r24	; 0x01
    8a0e:	3a c0       	rjmp	.+116    	; 0x8a84 <__floatsisf+0xaa>
    8a10:	88 23       	and	r24, r24
    8a12:	a9 f0       	breq	.+42     	; 0x8a3e <__floatsisf+0x64>
    8a14:	20 30       	cpi	r18, 0x00	; 0
    8a16:	80 e0       	ldi	r24, 0x00	; 0
    8a18:	38 07       	cpc	r19, r24
    8a1a:	80 e0       	ldi	r24, 0x00	; 0
    8a1c:	48 07       	cpc	r20, r24
    8a1e:	80 e8       	ldi	r24, 0x80	; 128
    8a20:	58 07       	cpc	r21, r24
    8a22:	29 f4       	brne	.+10     	; 0x8a2e <__floatsisf+0x54>
    8a24:	60 e0       	ldi	r22, 0x00	; 0
    8a26:	70 e0       	ldi	r23, 0x00	; 0
    8a28:	80 e0       	ldi	r24, 0x00	; 0
    8a2a:	9f ec       	ldi	r25, 0xCF	; 207
    8a2c:	30 c0       	rjmp	.+96     	; 0x8a8e <__floatsisf+0xb4>
    8a2e:	ee 24       	eor	r14, r14
    8a30:	ff 24       	eor	r15, r15
    8a32:	87 01       	movw	r16, r14
    8a34:	e2 1a       	sub	r14, r18
    8a36:	f3 0a       	sbc	r15, r19
    8a38:	04 0b       	sbc	r16, r20
    8a3a:	15 0b       	sbc	r17, r21
    8a3c:	02 c0       	rjmp	.+4      	; 0x8a42 <__floatsisf+0x68>
    8a3e:	79 01       	movw	r14, r18
    8a40:	8a 01       	movw	r16, r20
    8a42:	8e e1       	ldi	r24, 0x1E	; 30
    8a44:	c8 2e       	mov	r12, r24
    8a46:	d1 2c       	mov	r13, r1
    8a48:	dc 82       	std	Y+4, r13	; 0x04
    8a4a:	cb 82       	std	Y+3, r12	; 0x03
    8a4c:	ed 82       	std	Y+5, r14	; 0x05
    8a4e:	fe 82       	std	Y+6, r15	; 0x06
    8a50:	0f 83       	std	Y+7, r16	; 0x07
    8a52:	18 87       	std	Y+8, r17	; 0x08
    8a54:	c8 01       	movw	r24, r16
    8a56:	b7 01       	movw	r22, r14
    8a58:	0e 94 18 46 	call	0x8c30	; 0x8c30 <__clzsi2>
    8a5c:	01 97       	sbiw	r24, 0x01	; 1
    8a5e:	18 16       	cp	r1, r24
    8a60:	19 06       	cpc	r1, r25
    8a62:	84 f4       	brge	.+32     	; 0x8a84 <__floatsisf+0xaa>
    8a64:	08 2e       	mov	r0, r24
    8a66:	04 c0       	rjmp	.+8      	; 0x8a70 <__floatsisf+0x96>
    8a68:	ee 0c       	add	r14, r14
    8a6a:	ff 1c       	adc	r15, r15
    8a6c:	00 1f       	adc	r16, r16
    8a6e:	11 1f       	adc	r17, r17
    8a70:	0a 94       	dec	r0
    8a72:	d2 f7       	brpl	.-12     	; 0x8a68 <__floatsisf+0x8e>
    8a74:	ed 82       	std	Y+5, r14	; 0x05
    8a76:	fe 82       	std	Y+6, r15	; 0x06
    8a78:	0f 83       	std	Y+7, r16	; 0x07
    8a7a:	18 87       	std	Y+8, r17	; 0x08
    8a7c:	c8 1a       	sub	r12, r24
    8a7e:	d9 0a       	sbc	r13, r25
    8a80:	dc 82       	std	Y+4, r13	; 0x04
    8a82:	cb 82       	std	Y+3, r12	; 0x03
    8a84:	ba 82       	std	Y+2, r11	; 0x02
    8a86:	ce 01       	movw	r24, r28
    8a88:	01 96       	adiw	r24, 0x01	; 1
    8a8a:	0e 94 67 46 	call	0x8cce	; 0x8cce <__pack_f>
    8a8e:	28 96       	adiw	r28, 0x08	; 8
    8a90:	e9 e0       	ldi	r30, 0x09	; 9
    8a92:	0c 94 59 48 	jmp	0x90b2	; 0x90b2 <__epilogue_restores__+0x12>

00008a96 <__fixsfsi>:
    8a96:	ac e0       	ldi	r26, 0x0C	; 12
    8a98:	b0 e0       	ldi	r27, 0x00	; 0
    8a9a:	e1 e5       	ldi	r30, 0x51	; 81
    8a9c:	f5 e4       	ldi	r31, 0x45	; 69
    8a9e:	0c 94 44 48 	jmp	0x9088	; 0x9088 <__prologue_saves__+0x20>
    8aa2:	69 83       	std	Y+1, r22	; 0x01
    8aa4:	7a 83       	std	Y+2, r23	; 0x02
    8aa6:	8b 83       	std	Y+3, r24	; 0x03
    8aa8:	9c 83       	std	Y+4, r25	; 0x04
    8aaa:	ce 01       	movw	r24, r28
    8aac:	01 96       	adiw	r24, 0x01	; 1
    8aae:	be 01       	movw	r22, r28
    8ab0:	6b 5f       	subi	r22, 0xFB	; 251
    8ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    8ab4:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <__unpack_f>
    8ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    8aba:	82 30       	cpi	r24, 0x02	; 2
    8abc:	61 f1       	breq	.+88     	; 0x8b16 <__fixsfsi+0x80>
    8abe:	82 30       	cpi	r24, 0x02	; 2
    8ac0:	50 f1       	brcs	.+84     	; 0x8b16 <__fixsfsi+0x80>
    8ac2:	84 30       	cpi	r24, 0x04	; 4
    8ac4:	21 f4       	brne	.+8      	; 0x8ace <__fixsfsi+0x38>
    8ac6:	8e 81       	ldd	r24, Y+6	; 0x06
    8ac8:	88 23       	and	r24, r24
    8aca:	51 f1       	breq	.+84     	; 0x8b20 <__fixsfsi+0x8a>
    8acc:	2e c0       	rjmp	.+92     	; 0x8b2a <__fixsfsi+0x94>
    8ace:	2f 81       	ldd	r18, Y+7	; 0x07
    8ad0:	38 85       	ldd	r19, Y+8	; 0x08
    8ad2:	37 fd       	sbrc	r19, 7
    8ad4:	20 c0       	rjmp	.+64     	; 0x8b16 <__fixsfsi+0x80>
    8ad6:	6e 81       	ldd	r22, Y+6	; 0x06
    8ad8:	2f 31       	cpi	r18, 0x1F	; 31
    8ada:	31 05       	cpc	r19, r1
    8adc:	1c f0       	brlt	.+6      	; 0x8ae4 <__fixsfsi+0x4e>
    8ade:	66 23       	and	r22, r22
    8ae0:	f9 f0       	breq	.+62     	; 0x8b20 <__fixsfsi+0x8a>
    8ae2:	23 c0       	rjmp	.+70     	; 0x8b2a <__fixsfsi+0x94>
    8ae4:	8e e1       	ldi	r24, 0x1E	; 30
    8ae6:	90 e0       	ldi	r25, 0x00	; 0
    8ae8:	82 1b       	sub	r24, r18
    8aea:	93 0b       	sbc	r25, r19
    8aec:	29 85       	ldd	r18, Y+9	; 0x09
    8aee:	3a 85       	ldd	r19, Y+10	; 0x0a
    8af0:	4b 85       	ldd	r20, Y+11	; 0x0b
    8af2:	5c 85       	ldd	r21, Y+12	; 0x0c
    8af4:	04 c0       	rjmp	.+8      	; 0x8afe <__fixsfsi+0x68>
    8af6:	56 95       	lsr	r21
    8af8:	47 95       	ror	r20
    8afa:	37 95       	ror	r19
    8afc:	27 95       	ror	r18
    8afe:	8a 95       	dec	r24
    8b00:	d2 f7       	brpl	.-12     	; 0x8af6 <__fixsfsi+0x60>
    8b02:	66 23       	and	r22, r22
    8b04:	b1 f0       	breq	.+44     	; 0x8b32 <__fixsfsi+0x9c>
    8b06:	50 95       	com	r21
    8b08:	40 95       	com	r20
    8b0a:	30 95       	com	r19
    8b0c:	21 95       	neg	r18
    8b0e:	3f 4f       	sbci	r19, 0xFF	; 255
    8b10:	4f 4f       	sbci	r20, 0xFF	; 255
    8b12:	5f 4f       	sbci	r21, 0xFF	; 255
    8b14:	0e c0       	rjmp	.+28     	; 0x8b32 <__fixsfsi+0x9c>
    8b16:	20 e0       	ldi	r18, 0x00	; 0
    8b18:	30 e0       	ldi	r19, 0x00	; 0
    8b1a:	40 e0       	ldi	r20, 0x00	; 0
    8b1c:	50 e0       	ldi	r21, 0x00	; 0
    8b1e:	09 c0       	rjmp	.+18     	; 0x8b32 <__fixsfsi+0x9c>
    8b20:	2f ef       	ldi	r18, 0xFF	; 255
    8b22:	3f ef       	ldi	r19, 0xFF	; 255
    8b24:	4f ef       	ldi	r20, 0xFF	; 255
    8b26:	5f e7       	ldi	r21, 0x7F	; 127
    8b28:	04 c0       	rjmp	.+8      	; 0x8b32 <__fixsfsi+0x9c>
    8b2a:	20 e0       	ldi	r18, 0x00	; 0
    8b2c:	30 e0       	ldi	r19, 0x00	; 0
    8b2e:	40 e0       	ldi	r20, 0x00	; 0
    8b30:	50 e8       	ldi	r21, 0x80	; 128
    8b32:	b9 01       	movw	r22, r18
    8b34:	ca 01       	movw	r24, r20
    8b36:	2c 96       	adiw	r28, 0x0c	; 12
    8b38:	e2 e0       	ldi	r30, 0x02	; 2
    8b3a:	0c 94 60 48 	jmp	0x90c0	; 0x90c0 <__epilogue_restores__+0x20>

00008b3e <__floatunsisf>:
    8b3e:	a8 e0       	ldi	r26, 0x08	; 8
    8b40:	b0 e0       	ldi	r27, 0x00	; 0
    8b42:	e5 ea       	ldi	r30, 0xA5	; 165
    8b44:	f5 e4       	ldi	r31, 0x45	; 69
    8b46:	0c 94 3c 48 	jmp	0x9078	; 0x9078 <__prologue_saves__+0x10>
    8b4a:	7b 01       	movw	r14, r22
    8b4c:	8c 01       	movw	r16, r24
    8b4e:	61 15       	cp	r22, r1
    8b50:	71 05       	cpc	r23, r1
    8b52:	81 05       	cpc	r24, r1
    8b54:	91 05       	cpc	r25, r1
    8b56:	19 f4       	brne	.+6      	; 0x8b5e <__floatunsisf+0x20>
    8b58:	82 e0       	ldi	r24, 0x02	; 2
    8b5a:	89 83       	std	Y+1, r24	; 0x01
    8b5c:	60 c0       	rjmp	.+192    	; 0x8c1e <__floatunsisf+0xe0>
    8b5e:	83 e0       	ldi	r24, 0x03	; 3
    8b60:	89 83       	std	Y+1, r24	; 0x01
    8b62:	8e e1       	ldi	r24, 0x1E	; 30
    8b64:	c8 2e       	mov	r12, r24
    8b66:	d1 2c       	mov	r13, r1
    8b68:	dc 82       	std	Y+4, r13	; 0x04
    8b6a:	cb 82       	std	Y+3, r12	; 0x03
    8b6c:	ed 82       	std	Y+5, r14	; 0x05
    8b6e:	fe 82       	std	Y+6, r15	; 0x06
    8b70:	0f 83       	std	Y+7, r16	; 0x07
    8b72:	18 87       	std	Y+8, r17	; 0x08
    8b74:	c8 01       	movw	r24, r16
    8b76:	b7 01       	movw	r22, r14
    8b78:	0e 94 18 46 	call	0x8c30	; 0x8c30 <__clzsi2>
    8b7c:	fc 01       	movw	r30, r24
    8b7e:	31 97       	sbiw	r30, 0x01	; 1
    8b80:	f7 ff       	sbrs	r31, 7
    8b82:	3b c0       	rjmp	.+118    	; 0x8bfa <__floatunsisf+0xbc>
    8b84:	22 27       	eor	r18, r18
    8b86:	33 27       	eor	r19, r19
    8b88:	2e 1b       	sub	r18, r30
    8b8a:	3f 0b       	sbc	r19, r31
    8b8c:	57 01       	movw	r10, r14
    8b8e:	68 01       	movw	r12, r16
    8b90:	02 2e       	mov	r0, r18
    8b92:	04 c0       	rjmp	.+8      	; 0x8b9c <__floatunsisf+0x5e>
    8b94:	d6 94       	lsr	r13
    8b96:	c7 94       	ror	r12
    8b98:	b7 94       	ror	r11
    8b9a:	a7 94       	ror	r10
    8b9c:	0a 94       	dec	r0
    8b9e:	d2 f7       	brpl	.-12     	; 0x8b94 <__floatunsisf+0x56>
    8ba0:	40 e0       	ldi	r20, 0x00	; 0
    8ba2:	50 e0       	ldi	r21, 0x00	; 0
    8ba4:	60 e0       	ldi	r22, 0x00	; 0
    8ba6:	70 e0       	ldi	r23, 0x00	; 0
    8ba8:	81 e0       	ldi	r24, 0x01	; 1
    8baa:	90 e0       	ldi	r25, 0x00	; 0
    8bac:	a0 e0       	ldi	r26, 0x00	; 0
    8bae:	b0 e0       	ldi	r27, 0x00	; 0
    8bb0:	04 c0       	rjmp	.+8      	; 0x8bba <__floatunsisf+0x7c>
    8bb2:	88 0f       	add	r24, r24
    8bb4:	99 1f       	adc	r25, r25
    8bb6:	aa 1f       	adc	r26, r26
    8bb8:	bb 1f       	adc	r27, r27
    8bba:	2a 95       	dec	r18
    8bbc:	d2 f7       	brpl	.-12     	; 0x8bb2 <__floatunsisf+0x74>
    8bbe:	01 97       	sbiw	r24, 0x01	; 1
    8bc0:	a1 09       	sbc	r26, r1
    8bc2:	b1 09       	sbc	r27, r1
    8bc4:	8e 21       	and	r24, r14
    8bc6:	9f 21       	and	r25, r15
    8bc8:	a0 23       	and	r26, r16
    8bca:	b1 23       	and	r27, r17
    8bcc:	00 97       	sbiw	r24, 0x00	; 0
    8bce:	a1 05       	cpc	r26, r1
    8bd0:	b1 05       	cpc	r27, r1
    8bd2:	21 f0       	breq	.+8      	; 0x8bdc <__floatunsisf+0x9e>
    8bd4:	41 e0       	ldi	r20, 0x01	; 1
    8bd6:	50 e0       	ldi	r21, 0x00	; 0
    8bd8:	60 e0       	ldi	r22, 0x00	; 0
    8bda:	70 e0       	ldi	r23, 0x00	; 0
    8bdc:	4a 29       	or	r20, r10
    8bde:	5b 29       	or	r21, r11
    8be0:	6c 29       	or	r22, r12
    8be2:	7d 29       	or	r23, r13
    8be4:	4d 83       	std	Y+5, r20	; 0x05
    8be6:	5e 83       	std	Y+6, r21	; 0x06
    8be8:	6f 83       	std	Y+7, r22	; 0x07
    8bea:	78 87       	std	Y+8, r23	; 0x08
    8bec:	8e e1       	ldi	r24, 0x1E	; 30
    8bee:	90 e0       	ldi	r25, 0x00	; 0
    8bf0:	8e 1b       	sub	r24, r30
    8bf2:	9f 0b       	sbc	r25, r31
    8bf4:	9c 83       	std	Y+4, r25	; 0x04
    8bf6:	8b 83       	std	Y+3, r24	; 0x03
    8bf8:	12 c0       	rjmp	.+36     	; 0x8c1e <__floatunsisf+0xe0>
    8bfa:	30 97       	sbiw	r30, 0x00	; 0
    8bfc:	81 f0       	breq	.+32     	; 0x8c1e <__floatunsisf+0xe0>
    8bfe:	0e 2e       	mov	r0, r30
    8c00:	04 c0       	rjmp	.+8      	; 0x8c0a <__floatunsisf+0xcc>
    8c02:	ee 0c       	add	r14, r14
    8c04:	ff 1c       	adc	r15, r15
    8c06:	00 1f       	adc	r16, r16
    8c08:	11 1f       	adc	r17, r17
    8c0a:	0a 94       	dec	r0
    8c0c:	d2 f7       	brpl	.-12     	; 0x8c02 <__floatunsisf+0xc4>
    8c0e:	ed 82       	std	Y+5, r14	; 0x05
    8c10:	fe 82       	std	Y+6, r15	; 0x06
    8c12:	0f 83       	std	Y+7, r16	; 0x07
    8c14:	18 87       	std	Y+8, r17	; 0x08
    8c16:	ce 1a       	sub	r12, r30
    8c18:	df 0a       	sbc	r13, r31
    8c1a:	dc 82       	std	Y+4, r13	; 0x04
    8c1c:	cb 82       	std	Y+3, r12	; 0x03
    8c1e:	1a 82       	std	Y+2, r1	; 0x02
    8c20:	ce 01       	movw	r24, r28
    8c22:	01 96       	adiw	r24, 0x01	; 1
    8c24:	0e 94 67 46 	call	0x8cce	; 0x8cce <__pack_f>
    8c28:	28 96       	adiw	r28, 0x08	; 8
    8c2a:	ea e0       	ldi	r30, 0x0A	; 10
    8c2c:	0c 94 58 48 	jmp	0x90b0	; 0x90b0 <__epilogue_restores__+0x10>

00008c30 <__clzsi2>:
    8c30:	ef 92       	push	r14
    8c32:	ff 92       	push	r15
    8c34:	0f 93       	push	r16
    8c36:	1f 93       	push	r17
    8c38:	7b 01       	movw	r14, r22
    8c3a:	8c 01       	movw	r16, r24
    8c3c:	80 e0       	ldi	r24, 0x00	; 0
    8c3e:	e8 16       	cp	r14, r24
    8c40:	80 e0       	ldi	r24, 0x00	; 0
    8c42:	f8 06       	cpc	r15, r24
    8c44:	81 e0       	ldi	r24, 0x01	; 1
    8c46:	08 07       	cpc	r16, r24
    8c48:	80 e0       	ldi	r24, 0x00	; 0
    8c4a:	18 07       	cpc	r17, r24
    8c4c:	88 f4       	brcc	.+34     	; 0x8c70 <__clzsi2+0x40>
    8c4e:	8f ef       	ldi	r24, 0xFF	; 255
    8c50:	e8 16       	cp	r14, r24
    8c52:	f1 04       	cpc	r15, r1
    8c54:	01 05       	cpc	r16, r1
    8c56:	11 05       	cpc	r17, r1
    8c58:	31 f0       	breq	.+12     	; 0x8c66 <__clzsi2+0x36>
    8c5a:	28 f0       	brcs	.+10     	; 0x8c66 <__clzsi2+0x36>
    8c5c:	88 e0       	ldi	r24, 0x08	; 8
    8c5e:	90 e0       	ldi	r25, 0x00	; 0
    8c60:	a0 e0       	ldi	r26, 0x00	; 0
    8c62:	b0 e0       	ldi	r27, 0x00	; 0
    8c64:	17 c0       	rjmp	.+46     	; 0x8c94 <__clzsi2+0x64>
    8c66:	80 e0       	ldi	r24, 0x00	; 0
    8c68:	90 e0       	ldi	r25, 0x00	; 0
    8c6a:	a0 e0       	ldi	r26, 0x00	; 0
    8c6c:	b0 e0       	ldi	r27, 0x00	; 0
    8c6e:	12 c0       	rjmp	.+36     	; 0x8c94 <__clzsi2+0x64>
    8c70:	80 e0       	ldi	r24, 0x00	; 0
    8c72:	e8 16       	cp	r14, r24
    8c74:	80 e0       	ldi	r24, 0x00	; 0
    8c76:	f8 06       	cpc	r15, r24
    8c78:	80 e0       	ldi	r24, 0x00	; 0
    8c7a:	08 07       	cpc	r16, r24
    8c7c:	81 e0       	ldi	r24, 0x01	; 1
    8c7e:	18 07       	cpc	r17, r24
    8c80:	28 f0       	brcs	.+10     	; 0x8c8c <__clzsi2+0x5c>
    8c82:	88 e1       	ldi	r24, 0x18	; 24
    8c84:	90 e0       	ldi	r25, 0x00	; 0
    8c86:	a0 e0       	ldi	r26, 0x00	; 0
    8c88:	b0 e0       	ldi	r27, 0x00	; 0
    8c8a:	04 c0       	rjmp	.+8      	; 0x8c94 <__clzsi2+0x64>
    8c8c:	80 e1       	ldi	r24, 0x10	; 16
    8c8e:	90 e0       	ldi	r25, 0x00	; 0
    8c90:	a0 e0       	ldi	r26, 0x00	; 0
    8c92:	b0 e0       	ldi	r27, 0x00	; 0
    8c94:	20 e2       	ldi	r18, 0x20	; 32
    8c96:	30 e0       	ldi	r19, 0x00	; 0
    8c98:	40 e0       	ldi	r20, 0x00	; 0
    8c9a:	50 e0       	ldi	r21, 0x00	; 0
    8c9c:	28 1b       	sub	r18, r24
    8c9e:	39 0b       	sbc	r19, r25
    8ca0:	4a 0b       	sbc	r20, r26
    8ca2:	5b 0b       	sbc	r21, r27
    8ca4:	04 c0       	rjmp	.+8      	; 0x8cae <__clzsi2+0x7e>
    8ca6:	16 95       	lsr	r17
    8ca8:	07 95       	ror	r16
    8caa:	f7 94       	ror	r15
    8cac:	e7 94       	ror	r14
    8cae:	8a 95       	dec	r24
    8cb0:	d2 f7       	brpl	.-12     	; 0x8ca6 <__clzsi2+0x76>
    8cb2:	f7 01       	movw	r30, r14
    8cb4:	e0 5f       	subi	r30, 0xF0	; 240
    8cb6:	fd 4f       	sbci	r31, 0xFD	; 253
    8cb8:	80 81       	ld	r24, Z
    8cba:	28 1b       	sub	r18, r24
    8cbc:	31 09       	sbc	r19, r1
    8cbe:	41 09       	sbc	r20, r1
    8cc0:	51 09       	sbc	r21, r1
    8cc2:	c9 01       	movw	r24, r18
    8cc4:	1f 91       	pop	r17
    8cc6:	0f 91       	pop	r16
    8cc8:	ff 90       	pop	r15
    8cca:	ef 90       	pop	r14
    8ccc:	08 95       	ret

00008cce <__pack_f>:
    8cce:	df 92       	push	r13
    8cd0:	ef 92       	push	r14
    8cd2:	ff 92       	push	r15
    8cd4:	0f 93       	push	r16
    8cd6:	1f 93       	push	r17
    8cd8:	fc 01       	movw	r30, r24
    8cda:	e4 80       	ldd	r14, Z+4	; 0x04
    8cdc:	f5 80       	ldd	r15, Z+5	; 0x05
    8cde:	06 81       	ldd	r16, Z+6	; 0x06
    8ce0:	17 81       	ldd	r17, Z+7	; 0x07
    8ce2:	d1 80       	ldd	r13, Z+1	; 0x01
    8ce4:	80 81       	ld	r24, Z
    8ce6:	82 30       	cpi	r24, 0x02	; 2
    8ce8:	48 f4       	brcc	.+18     	; 0x8cfc <__pack_f+0x2e>
    8cea:	80 e0       	ldi	r24, 0x00	; 0
    8cec:	90 e0       	ldi	r25, 0x00	; 0
    8cee:	a0 e1       	ldi	r26, 0x10	; 16
    8cf0:	b0 e0       	ldi	r27, 0x00	; 0
    8cf2:	e8 2a       	or	r14, r24
    8cf4:	f9 2a       	or	r15, r25
    8cf6:	0a 2b       	or	r16, r26
    8cf8:	1b 2b       	or	r17, r27
    8cfa:	a5 c0       	rjmp	.+330    	; 0x8e46 <__pack_f+0x178>
    8cfc:	84 30       	cpi	r24, 0x04	; 4
    8cfe:	09 f4       	brne	.+2      	; 0x8d02 <__pack_f+0x34>
    8d00:	9f c0       	rjmp	.+318    	; 0x8e40 <__pack_f+0x172>
    8d02:	82 30       	cpi	r24, 0x02	; 2
    8d04:	21 f4       	brne	.+8      	; 0x8d0e <__pack_f+0x40>
    8d06:	ee 24       	eor	r14, r14
    8d08:	ff 24       	eor	r15, r15
    8d0a:	87 01       	movw	r16, r14
    8d0c:	05 c0       	rjmp	.+10     	; 0x8d18 <__pack_f+0x4a>
    8d0e:	e1 14       	cp	r14, r1
    8d10:	f1 04       	cpc	r15, r1
    8d12:	01 05       	cpc	r16, r1
    8d14:	11 05       	cpc	r17, r1
    8d16:	19 f4       	brne	.+6      	; 0x8d1e <__pack_f+0x50>
    8d18:	e0 e0       	ldi	r30, 0x00	; 0
    8d1a:	f0 e0       	ldi	r31, 0x00	; 0
    8d1c:	96 c0       	rjmp	.+300    	; 0x8e4a <__pack_f+0x17c>
    8d1e:	62 81       	ldd	r22, Z+2	; 0x02
    8d20:	73 81       	ldd	r23, Z+3	; 0x03
    8d22:	9f ef       	ldi	r25, 0xFF	; 255
    8d24:	62 38       	cpi	r22, 0x82	; 130
    8d26:	79 07       	cpc	r23, r25
    8d28:	0c f0       	brlt	.+2      	; 0x8d2c <__pack_f+0x5e>
    8d2a:	5b c0       	rjmp	.+182    	; 0x8de2 <__pack_f+0x114>
    8d2c:	22 e8       	ldi	r18, 0x82	; 130
    8d2e:	3f ef       	ldi	r19, 0xFF	; 255
    8d30:	26 1b       	sub	r18, r22
    8d32:	37 0b       	sbc	r19, r23
    8d34:	2a 31       	cpi	r18, 0x1A	; 26
    8d36:	31 05       	cpc	r19, r1
    8d38:	2c f0       	brlt	.+10     	; 0x8d44 <__pack_f+0x76>
    8d3a:	20 e0       	ldi	r18, 0x00	; 0
    8d3c:	30 e0       	ldi	r19, 0x00	; 0
    8d3e:	40 e0       	ldi	r20, 0x00	; 0
    8d40:	50 e0       	ldi	r21, 0x00	; 0
    8d42:	2a c0       	rjmp	.+84     	; 0x8d98 <__pack_f+0xca>
    8d44:	b8 01       	movw	r22, r16
    8d46:	a7 01       	movw	r20, r14
    8d48:	02 2e       	mov	r0, r18
    8d4a:	04 c0       	rjmp	.+8      	; 0x8d54 <__pack_f+0x86>
    8d4c:	76 95       	lsr	r23
    8d4e:	67 95       	ror	r22
    8d50:	57 95       	ror	r21
    8d52:	47 95       	ror	r20
    8d54:	0a 94       	dec	r0
    8d56:	d2 f7       	brpl	.-12     	; 0x8d4c <__pack_f+0x7e>
    8d58:	81 e0       	ldi	r24, 0x01	; 1
    8d5a:	90 e0       	ldi	r25, 0x00	; 0
    8d5c:	a0 e0       	ldi	r26, 0x00	; 0
    8d5e:	b0 e0       	ldi	r27, 0x00	; 0
    8d60:	04 c0       	rjmp	.+8      	; 0x8d6a <__pack_f+0x9c>
    8d62:	88 0f       	add	r24, r24
    8d64:	99 1f       	adc	r25, r25
    8d66:	aa 1f       	adc	r26, r26
    8d68:	bb 1f       	adc	r27, r27
    8d6a:	2a 95       	dec	r18
    8d6c:	d2 f7       	brpl	.-12     	; 0x8d62 <__pack_f+0x94>
    8d6e:	01 97       	sbiw	r24, 0x01	; 1
    8d70:	a1 09       	sbc	r26, r1
    8d72:	b1 09       	sbc	r27, r1
    8d74:	8e 21       	and	r24, r14
    8d76:	9f 21       	and	r25, r15
    8d78:	a0 23       	and	r26, r16
    8d7a:	b1 23       	and	r27, r17
    8d7c:	00 97       	sbiw	r24, 0x00	; 0
    8d7e:	a1 05       	cpc	r26, r1
    8d80:	b1 05       	cpc	r27, r1
    8d82:	21 f0       	breq	.+8      	; 0x8d8c <__pack_f+0xbe>
    8d84:	81 e0       	ldi	r24, 0x01	; 1
    8d86:	90 e0       	ldi	r25, 0x00	; 0
    8d88:	a0 e0       	ldi	r26, 0x00	; 0
    8d8a:	b0 e0       	ldi	r27, 0x00	; 0
    8d8c:	9a 01       	movw	r18, r20
    8d8e:	ab 01       	movw	r20, r22
    8d90:	28 2b       	or	r18, r24
    8d92:	39 2b       	or	r19, r25
    8d94:	4a 2b       	or	r20, r26
    8d96:	5b 2b       	or	r21, r27
    8d98:	da 01       	movw	r26, r20
    8d9a:	c9 01       	movw	r24, r18
    8d9c:	8f 77       	andi	r24, 0x7F	; 127
    8d9e:	90 70       	andi	r25, 0x00	; 0
    8da0:	a0 70       	andi	r26, 0x00	; 0
    8da2:	b0 70       	andi	r27, 0x00	; 0
    8da4:	80 34       	cpi	r24, 0x40	; 64
    8da6:	91 05       	cpc	r25, r1
    8da8:	a1 05       	cpc	r26, r1
    8daa:	b1 05       	cpc	r27, r1
    8dac:	39 f4       	brne	.+14     	; 0x8dbc <__pack_f+0xee>
    8dae:	27 ff       	sbrs	r18, 7
    8db0:	09 c0       	rjmp	.+18     	; 0x8dc4 <__pack_f+0xf6>
    8db2:	20 5c       	subi	r18, 0xC0	; 192
    8db4:	3f 4f       	sbci	r19, 0xFF	; 255
    8db6:	4f 4f       	sbci	r20, 0xFF	; 255
    8db8:	5f 4f       	sbci	r21, 0xFF	; 255
    8dba:	04 c0       	rjmp	.+8      	; 0x8dc4 <__pack_f+0xf6>
    8dbc:	21 5c       	subi	r18, 0xC1	; 193
    8dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    8dc0:	4f 4f       	sbci	r20, 0xFF	; 255
    8dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    8dc4:	e0 e0       	ldi	r30, 0x00	; 0
    8dc6:	f0 e0       	ldi	r31, 0x00	; 0
    8dc8:	20 30       	cpi	r18, 0x00	; 0
    8dca:	a0 e0       	ldi	r26, 0x00	; 0
    8dcc:	3a 07       	cpc	r19, r26
    8dce:	a0 e0       	ldi	r26, 0x00	; 0
    8dd0:	4a 07       	cpc	r20, r26
    8dd2:	a0 e4       	ldi	r26, 0x40	; 64
    8dd4:	5a 07       	cpc	r21, r26
    8dd6:	10 f0       	brcs	.+4      	; 0x8ddc <__pack_f+0x10e>
    8dd8:	e1 e0       	ldi	r30, 0x01	; 1
    8dda:	f0 e0       	ldi	r31, 0x00	; 0
    8ddc:	79 01       	movw	r14, r18
    8dde:	8a 01       	movw	r16, r20
    8de0:	27 c0       	rjmp	.+78     	; 0x8e30 <__pack_f+0x162>
    8de2:	60 38       	cpi	r22, 0x80	; 128
    8de4:	71 05       	cpc	r23, r1
    8de6:	64 f5       	brge	.+88     	; 0x8e40 <__pack_f+0x172>
    8de8:	fb 01       	movw	r30, r22
    8dea:	e1 58       	subi	r30, 0x81	; 129
    8dec:	ff 4f       	sbci	r31, 0xFF	; 255
    8dee:	d8 01       	movw	r26, r16
    8df0:	c7 01       	movw	r24, r14
    8df2:	8f 77       	andi	r24, 0x7F	; 127
    8df4:	90 70       	andi	r25, 0x00	; 0
    8df6:	a0 70       	andi	r26, 0x00	; 0
    8df8:	b0 70       	andi	r27, 0x00	; 0
    8dfa:	80 34       	cpi	r24, 0x40	; 64
    8dfc:	91 05       	cpc	r25, r1
    8dfe:	a1 05       	cpc	r26, r1
    8e00:	b1 05       	cpc	r27, r1
    8e02:	39 f4       	brne	.+14     	; 0x8e12 <__pack_f+0x144>
    8e04:	e7 fe       	sbrs	r14, 7
    8e06:	0d c0       	rjmp	.+26     	; 0x8e22 <__pack_f+0x154>
    8e08:	80 e4       	ldi	r24, 0x40	; 64
    8e0a:	90 e0       	ldi	r25, 0x00	; 0
    8e0c:	a0 e0       	ldi	r26, 0x00	; 0
    8e0e:	b0 e0       	ldi	r27, 0x00	; 0
    8e10:	04 c0       	rjmp	.+8      	; 0x8e1a <__pack_f+0x14c>
    8e12:	8f e3       	ldi	r24, 0x3F	; 63
    8e14:	90 e0       	ldi	r25, 0x00	; 0
    8e16:	a0 e0       	ldi	r26, 0x00	; 0
    8e18:	b0 e0       	ldi	r27, 0x00	; 0
    8e1a:	e8 0e       	add	r14, r24
    8e1c:	f9 1e       	adc	r15, r25
    8e1e:	0a 1f       	adc	r16, r26
    8e20:	1b 1f       	adc	r17, r27
    8e22:	17 ff       	sbrs	r17, 7
    8e24:	05 c0       	rjmp	.+10     	; 0x8e30 <__pack_f+0x162>
    8e26:	16 95       	lsr	r17
    8e28:	07 95       	ror	r16
    8e2a:	f7 94       	ror	r15
    8e2c:	e7 94       	ror	r14
    8e2e:	31 96       	adiw	r30, 0x01	; 1
    8e30:	87 e0       	ldi	r24, 0x07	; 7
    8e32:	16 95       	lsr	r17
    8e34:	07 95       	ror	r16
    8e36:	f7 94       	ror	r15
    8e38:	e7 94       	ror	r14
    8e3a:	8a 95       	dec	r24
    8e3c:	d1 f7       	brne	.-12     	; 0x8e32 <__pack_f+0x164>
    8e3e:	05 c0       	rjmp	.+10     	; 0x8e4a <__pack_f+0x17c>
    8e40:	ee 24       	eor	r14, r14
    8e42:	ff 24       	eor	r15, r15
    8e44:	87 01       	movw	r16, r14
    8e46:	ef ef       	ldi	r30, 0xFF	; 255
    8e48:	f0 e0       	ldi	r31, 0x00	; 0
    8e4a:	6e 2f       	mov	r22, r30
    8e4c:	67 95       	ror	r22
    8e4e:	66 27       	eor	r22, r22
    8e50:	67 95       	ror	r22
    8e52:	90 2f       	mov	r25, r16
    8e54:	9f 77       	andi	r25, 0x7F	; 127
    8e56:	d7 94       	ror	r13
    8e58:	dd 24       	eor	r13, r13
    8e5a:	d7 94       	ror	r13
    8e5c:	8e 2f       	mov	r24, r30
    8e5e:	86 95       	lsr	r24
    8e60:	49 2f       	mov	r20, r25
    8e62:	46 2b       	or	r20, r22
    8e64:	58 2f       	mov	r21, r24
    8e66:	5d 29       	or	r21, r13
    8e68:	b7 01       	movw	r22, r14
    8e6a:	ca 01       	movw	r24, r20
    8e6c:	1f 91       	pop	r17
    8e6e:	0f 91       	pop	r16
    8e70:	ff 90       	pop	r15
    8e72:	ef 90       	pop	r14
    8e74:	df 90       	pop	r13
    8e76:	08 95       	ret

00008e78 <__unpack_f>:
    8e78:	fc 01       	movw	r30, r24
    8e7a:	db 01       	movw	r26, r22
    8e7c:	40 81       	ld	r20, Z
    8e7e:	51 81       	ldd	r21, Z+1	; 0x01
    8e80:	22 81       	ldd	r18, Z+2	; 0x02
    8e82:	62 2f       	mov	r22, r18
    8e84:	6f 77       	andi	r22, 0x7F	; 127
    8e86:	70 e0       	ldi	r23, 0x00	; 0
    8e88:	22 1f       	adc	r18, r18
    8e8a:	22 27       	eor	r18, r18
    8e8c:	22 1f       	adc	r18, r18
    8e8e:	93 81       	ldd	r25, Z+3	; 0x03
    8e90:	89 2f       	mov	r24, r25
    8e92:	88 0f       	add	r24, r24
    8e94:	82 2b       	or	r24, r18
    8e96:	28 2f       	mov	r18, r24
    8e98:	30 e0       	ldi	r19, 0x00	; 0
    8e9a:	99 1f       	adc	r25, r25
    8e9c:	99 27       	eor	r25, r25
    8e9e:	99 1f       	adc	r25, r25
    8ea0:	11 96       	adiw	r26, 0x01	; 1
    8ea2:	9c 93       	st	X, r25
    8ea4:	11 97       	sbiw	r26, 0x01	; 1
    8ea6:	21 15       	cp	r18, r1
    8ea8:	31 05       	cpc	r19, r1
    8eaa:	a9 f5       	brne	.+106    	; 0x8f16 <__unpack_f+0x9e>
    8eac:	41 15       	cp	r20, r1
    8eae:	51 05       	cpc	r21, r1
    8eb0:	61 05       	cpc	r22, r1
    8eb2:	71 05       	cpc	r23, r1
    8eb4:	11 f4       	brne	.+4      	; 0x8eba <__unpack_f+0x42>
    8eb6:	82 e0       	ldi	r24, 0x02	; 2
    8eb8:	37 c0       	rjmp	.+110    	; 0x8f28 <__unpack_f+0xb0>
    8eba:	82 e8       	ldi	r24, 0x82	; 130
    8ebc:	9f ef       	ldi	r25, 0xFF	; 255
    8ebe:	13 96       	adiw	r26, 0x03	; 3
    8ec0:	9c 93       	st	X, r25
    8ec2:	8e 93       	st	-X, r24
    8ec4:	12 97       	sbiw	r26, 0x02	; 2
    8ec6:	9a 01       	movw	r18, r20
    8ec8:	ab 01       	movw	r20, r22
    8eca:	67 e0       	ldi	r22, 0x07	; 7
    8ecc:	22 0f       	add	r18, r18
    8ece:	33 1f       	adc	r19, r19
    8ed0:	44 1f       	adc	r20, r20
    8ed2:	55 1f       	adc	r21, r21
    8ed4:	6a 95       	dec	r22
    8ed6:	d1 f7       	brne	.-12     	; 0x8ecc <__unpack_f+0x54>
    8ed8:	83 e0       	ldi	r24, 0x03	; 3
    8eda:	8c 93       	st	X, r24
    8edc:	0d c0       	rjmp	.+26     	; 0x8ef8 <__unpack_f+0x80>
    8ede:	22 0f       	add	r18, r18
    8ee0:	33 1f       	adc	r19, r19
    8ee2:	44 1f       	adc	r20, r20
    8ee4:	55 1f       	adc	r21, r21
    8ee6:	12 96       	adiw	r26, 0x02	; 2
    8ee8:	8d 91       	ld	r24, X+
    8eea:	9c 91       	ld	r25, X
    8eec:	13 97       	sbiw	r26, 0x03	; 3
    8eee:	01 97       	sbiw	r24, 0x01	; 1
    8ef0:	13 96       	adiw	r26, 0x03	; 3
    8ef2:	9c 93       	st	X, r25
    8ef4:	8e 93       	st	-X, r24
    8ef6:	12 97       	sbiw	r26, 0x02	; 2
    8ef8:	20 30       	cpi	r18, 0x00	; 0
    8efa:	80 e0       	ldi	r24, 0x00	; 0
    8efc:	38 07       	cpc	r19, r24
    8efe:	80 e0       	ldi	r24, 0x00	; 0
    8f00:	48 07       	cpc	r20, r24
    8f02:	80 e4       	ldi	r24, 0x40	; 64
    8f04:	58 07       	cpc	r21, r24
    8f06:	58 f3       	brcs	.-42     	; 0x8ede <__unpack_f+0x66>
    8f08:	14 96       	adiw	r26, 0x04	; 4
    8f0a:	2d 93       	st	X+, r18
    8f0c:	3d 93       	st	X+, r19
    8f0e:	4d 93       	st	X+, r20
    8f10:	5c 93       	st	X, r21
    8f12:	17 97       	sbiw	r26, 0x07	; 7
    8f14:	08 95       	ret
    8f16:	2f 3f       	cpi	r18, 0xFF	; 255
    8f18:	31 05       	cpc	r19, r1
    8f1a:	79 f4       	brne	.+30     	; 0x8f3a <__unpack_f+0xc2>
    8f1c:	41 15       	cp	r20, r1
    8f1e:	51 05       	cpc	r21, r1
    8f20:	61 05       	cpc	r22, r1
    8f22:	71 05       	cpc	r23, r1
    8f24:	19 f4       	brne	.+6      	; 0x8f2c <__unpack_f+0xb4>
    8f26:	84 e0       	ldi	r24, 0x04	; 4
    8f28:	8c 93       	st	X, r24
    8f2a:	08 95       	ret
    8f2c:	64 ff       	sbrs	r22, 4
    8f2e:	03 c0       	rjmp	.+6      	; 0x8f36 <__unpack_f+0xbe>
    8f30:	81 e0       	ldi	r24, 0x01	; 1
    8f32:	8c 93       	st	X, r24
    8f34:	12 c0       	rjmp	.+36     	; 0x8f5a <__unpack_f+0xe2>
    8f36:	1c 92       	st	X, r1
    8f38:	10 c0       	rjmp	.+32     	; 0x8f5a <__unpack_f+0xe2>
    8f3a:	2f 57       	subi	r18, 0x7F	; 127
    8f3c:	30 40       	sbci	r19, 0x00	; 0
    8f3e:	13 96       	adiw	r26, 0x03	; 3
    8f40:	3c 93       	st	X, r19
    8f42:	2e 93       	st	-X, r18
    8f44:	12 97       	sbiw	r26, 0x02	; 2
    8f46:	83 e0       	ldi	r24, 0x03	; 3
    8f48:	8c 93       	st	X, r24
    8f4a:	87 e0       	ldi	r24, 0x07	; 7
    8f4c:	44 0f       	add	r20, r20
    8f4e:	55 1f       	adc	r21, r21
    8f50:	66 1f       	adc	r22, r22
    8f52:	77 1f       	adc	r23, r23
    8f54:	8a 95       	dec	r24
    8f56:	d1 f7       	brne	.-12     	; 0x8f4c <__unpack_f+0xd4>
    8f58:	70 64       	ori	r23, 0x40	; 64
    8f5a:	14 96       	adiw	r26, 0x04	; 4
    8f5c:	4d 93       	st	X+, r20
    8f5e:	5d 93       	st	X+, r21
    8f60:	6d 93       	st	X+, r22
    8f62:	7c 93       	st	X, r23
    8f64:	17 97       	sbiw	r26, 0x07	; 7
    8f66:	08 95       	ret

00008f68 <__fpcmp_parts_f>:
    8f68:	1f 93       	push	r17
    8f6a:	dc 01       	movw	r26, r24
    8f6c:	fb 01       	movw	r30, r22
    8f6e:	9c 91       	ld	r25, X
    8f70:	92 30       	cpi	r25, 0x02	; 2
    8f72:	08 f4       	brcc	.+2      	; 0x8f76 <__fpcmp_parts_f+0xe>
    8f74:	47 c0       	rjmp	.+142    	; 0x9004 <__fpcmp_parts_f+0x9c>
    8f76:	80 81       	ld	r24, Z
    8f78:	82 30       	cpi	r24, 0x02	; 2
    8f7a:	08 f4       	brcc	.+2      	; 0x8f7e <__fpcmp_parts_f+0x16>
    8f7c:	43 c0       	rjmp	.+134    	; 0x9004 <__fpcmp_parts_f+0x9c>
    8f7e:	94 30       	cpi	r25, 0x04	; 4
    8f80:	51 f4       	brne	.+20     	; 0x8f96 <__fpcmp_parts_f+0x2e>
    8f82:	11 96       	adiw	r26, 0x01	; 1
    8f84:	1c 91       	ld	r17, X
    8f86:	84 30       	cpi	r24, 0x04	; 4
    8f88:	99 f5       	brne	.+102    	; 0x8ff0 <__fpcmp_parts_f+0x88>
    8f8a:	81 81       	ldd	r24, Z+1	; 0x01
    8f8c:	68 2f       	mov	r22, r24
    8f8e:	70 e0       	ldi	r23, 0x00	; 0
    8f90:	61 1b       	sub	r22, r17
    8f92:	71 09       	sbc	r23, r1
    8f94:	3f c0       	rjmp	.+126    	; 0x9014 <__fpcmp_parts_f+0xac>
    8f96:	84 30       	cpi	r24, 0x04	; 4
    8f98:	21 f0       	breq	.+8      	; 0x8fa2 <__fpcmp_parts_f+0x3a>
    8f9a:	92 30       	cpi	r25, 0x02	; 2
    8f9c:	31 f4       	brne	.+12     	; 0x8faa <__fpcmp_parts_f+0x42>
    8f9e:	82 30       	cpi	r24, 0x02	; 2
    8fa0:	b9 f1       	breq	.+110    	; 0x9010 <__fpcmp_parts_f+0xa8>
    8fa2:	81 81       	ldd	r24, Z+1	; 0x01
    8fa4:	88 23       	and	r24, r24
    8fa6:	89 f1       	breq	.+98     	; 0x900a <__fpcmp_parts_f+0xa2>
    8fa8:	2d c0       	rjmp	.+90     	; 0x9004 <__fpcmp_parts_f+0x9c>
    8faa:	11 96       	adiw	r26, 0x01	; 1
    8fac:	1c 91       	ld	r17, X
    8fae:	11 97       	sbiw	r26, 0x01	; 1
    8fb0:	82 30       	cpi	r24, 0x02	; 2
    8fb2:	f1 f0       	breq	.+60     	; 0x8ff0 <__fpcmp_parts_f+0x88>
    8fb4:	81 81       	ldd	r24, Z+1	; 0x01
    8fb6:	18 17       	cp	r17, r24
    8fb8:	d9 f4       	brne	.+54     	; 0x8ff0 <__fpcmp_parts_f+0x88>
    8fba:	12 96       	adiw	r26, 0x02	; 2
    8fbc:	2d 91       	ld	r18, X+
    8fbe:	3c 91       	ld	r19, X
    8fc0:	13 97       	sbiw	r26, 0x03	; 3
    8fc2:	82 81       	ldd	r24, Z+2	; 0x02
    8fc4:	93 81       	ldd	r25, Z+3	; 0x03
    8fc6:	82 17       	cp	r24, r18
    8fc8:	93 07       	cpc	r25, r19
    8fca:	94 f0       	brlt	.+36     	; 0x8ff0 <__fpcmp_parts_f+0x88>
    8fcc:	28 17       	cp	r18, r24
    8fce:	39 07       	cpc	r19, r25
    8fd0:	bc f0       	brlt	.+46     	; 0x9000 <__fpcmp_parts_f+0x98>
    8fd2:	14 96       	adiw	r26, 0x04	; 4
    8fd4:	8d 91       	ld	r24, X+
    8fd6:	9d 91       	ld	r25, X+
    8fd8:	0d 90       	ld	r0, X+
    8fda:	bc 91       	ld	r27, X
    8fdc:	a0 2d       	mov	r26, r0
    8fde:	24 81       	ldd	r18, Z+4	; 0x04
    8fe0:	35 81       	ldd	r19, Z+5	; 0x05
    8fe2:	46 81       	ldd	r20, Z+6	; 0x06
    8fe4:	57 81       	ldd	r21, Z+7	; 0x07
    8fe6:	28 17       	cp	r18, r24
    8fe8:	39 07       	cpc	r19, r25
    8fea:	4a 07       	cpc	r20, r26
    8fec:	5b 07       	cpc	r21, r27
    8fee:	18 f4       	brcc	.+6      	; 0x8ff6 <__fpcmp_parts_f+0x8e>
    8ff0:	11 23       	and	r17, r17
    8ff2:	41 f0       	breq	.+16     	; 0x9004 <__fpcmp_parts_f+0x9c>
    8ff4:	0a c0       	rjmp	.+20     	; 0x900a <__fpcmp_parts_f+0xa2>
    8ff6:	82 17       	cp	r24, r18
    8ff8:	93 07       	cpc	r25, r19
    8ffa:	a4 07       	cpc	r26, r20
    8ffc:	b5 07       	cpc	r27, r21
    8ffe:	40 f4       	brcc	.+16     	; 0x9010 <__fpcmp_parts_f+0xa8>
    9000:	11 23       	and	r17, r17
    9002:	19 f0       	breq	.+6      	; 0x900a <__fpcmp_parts_f+0xa2>
    9004:	61 e0       	ldi	r22, 0x01	; 1
    9006:	70 e0       	ldi	r23, 0x00	; 0
    9008:	05 c0       	rjmp	.+10     	; 0x9014 <__fpcmp_parts_f+0xac>
    900a:	6f ef       	ldi	r22, 0xFF	; 255
    900c:	7f ef       	ldi	r23, 0xFF	; 255
    900e:	02 c0       	rjmp	.+4      	; 0x9014 <__fpcmp_parts_f+0xac>
    9010:	60 e0       	ldi	r22, 0x00	; 0
    9012:	70 e0       	ldi	r23, 0x00	; 0
    9014:	cb 01       	movw	r24, r22
    9016:	1f 91       	pop	r17
    9018:	08 95       	ret

0000901a <__udivmodhi4>:
    901a:	aa 1b       	sub	r26, r26
    901c:	bb 1b       	sub	r27, r27
    901e:	51 e1       	ldi	r21, 0x11	; 17
    9020:	07 c0       	rjmp	.+14     	; 0x9030 <__udivmodhi4_ep>

00009022 <__udivmodhi4_loop>:
    9022:	aa 1f       	adc	r26, r26
    9024:	bb 1f       	adc	r27, r27
    9026:	a6 17       	cp	r26, r22
    9028:	b7 07       	cpc	r27, r23
    902a:	10 f0       	brcs	.+4      	; 0x9030 <__udivmodhi4_ep>
    902c:	a6 1b       	sub	r26, r22
    902e:	b7 0b       	sbc	r27, r23

00009030 <__udivmodhi4_ep>:
    9030:	88 1f       	adc	r24, r24
    9032:	99 1f       	adc	r25, r25
    9034:	5a 95       	dec	r21
    9036:	a9 f7       	brne	.-22     	; 0x9022 <__udivmodhi4_loop>
    9038:	80 95       	com	r24
    903a:	90 95       	com	r25
    903c:	bc 01       	movw	r22, r24
    903e:	cd 01       	movw	r24, r26
    9040:	08 95       	ret

00009042 <__divmodhi4>:
    9042:	97 fb       	bst	r25, 7
    9044:	09 2e       	mov	r0, r25
    9046:	07 26       	eor	r0, r23
    9048:	0a d0       	rcall	.+20     	; 0x905e <__divmodhi4_neg1>
    904a:	77 fd       	sbrc	r23, 7
    904c:	04 d0       	rcall	.+8      	; 0x9056 <__divmodhi4_neg2>
    904e:	e5 df       	rcall	.-54     	; 0x901a <__udivmodhi4>
    9050:	06 d0       	rcall	.+12     	; 0x905e <__divmodhi4_neg1>
    9052:	00 20       	and	r0, r0
    9054:	1a f4       	brpl	.+6      	; 0x905c <__divmodhi4_exit>

00009056 <__divmodhi4_neg2>:
    9056:	70 95       	com	r23
    9058:	61 95       	neg	r22
    905a:	7f 4f       	sbci	r23, 0xFF	; 255

0000905c <__divmodhi4_exit>:
    905c:	08 95       	ret

0000905e <__divmodhi4_neg1>:
    905e:	f6 f7       	brtc	.-4      	; 0x905c <__divmodhi4_exit>
    9060:	90 95       	com	r25
    9062:	81 95       	neg	r24
    9064:	9f 4f       	sbci	r25, 0xFF	; 255
    9066:	08 95       	ret

00009068 <__prologue_saves__>:
    9068:	2f 92       	push	r2
    906a:	3f 92       	push	r3
    906c:	4f 92       	push	r4
    906e:	5f 92       	push	r5
    9070:	6f 92       	push	r6
    9072:	7f 92       	push	r7
    9074:	8f 92       	push	r8
    9076:	9f 92       	push	r9
    9078:	af 92       	push	r10
    907a:	bf 92       	push	r11
    907c:	cf 92       	push	r12
    907e:	df 92       	push	r13
    9080:	ef 92       	push	r14
    9082:	ff 92       	push	r15
    9084:	0f 93       	push	r16
    9086:	1f 93       	push	r17
    9088:	cf 93       	push	r28
    908a:	df 93       	push	r29
    908c:	cd b7       	in	r28, 0x3d	; 61
    908e:	de b7       	in	r29, 0x3e	; 62
    9090:	ca 1b       	sub	r28, r26
    9092:	db 0b       	sbc	r29, r27
    9094:	0f b6       	in	r0, 0x3f	; 63
    9096:	f8 94       	cli
    9098:	de bf       	out	0x3e, r29	; 62
    909a:	0f be       	out	0x3f, r0	; 63
    909c:	cd bf       	out	0x3d, r28	; 61
    909e:	19 94       	eijmp

000090a0 <__epilogue_restores__>:
    90a0:	2a 88       	ldd	r2, Y+18	; 0x12
    90a2:	39 88       	ldd	r3, Y+17	; 0x11
    90a4:	48 88       	ldd	r4, Y+16	; 0x10
    90a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    90a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    90aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    90ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    90ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    90b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    90b2:	b9 84       	ldd	r11, Y+9	; 0x09
    90b4:	c8 84       	ldd	r12, Y+8	; 0x08
    90b6:	df 80       	ldd	r13, Y+7	; 0x07
    90b8:	ee 80       	ldd	r14, Y+6	; 0x06
    90ba:	fd 80       	ldd	r15, Y+5	; 0x05
    90bc:	0c 81       	ldd	r16, Y+4	; 0x04
    90be:	1b 81       	ldd	r17, Y+3	; 0x03
    90c0:	aa 81       	ldd	r26, Y+2	; 0x02
    90c2:	b9 81       	ldd	r27, Y+1	; 0x01
    90c4:	ce 0f       	add	r28, r30
    90c6:	d1 1d       	adc	r29, r1
    90c8:	0f b6       	in	r0, 0x3f	; 63
    90ca:	f8 94       	cli
    90cc:	de bf       	out	0x3e, r29	; 62
    90ce:	0f be       	out	0x3f, r0	; 63
    90d0:	cd bf       	out	0x3d, r28	; 61
    90d2:	ed 01       	movw	r28, r26
    90d4:	08 95       	ret

000090d6 <_exit>:
    90d6:	f8 94       	cli

000090d8 <__stop_program>:
    90d8:	ff cf       	rjmp	.-2      	; 0x90d8 <__stop_program>
